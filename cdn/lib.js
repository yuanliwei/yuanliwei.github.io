(function () {
    'use strict';

    

    function ___$insertStyle(css) {
      if (!css) {
        return;
      }
      if (typeof window === 'undefined') {
        return;
      }

      var style = document.createElement('style');

      style.setAttribute('type', 'text/css');
      style.innerHTML = css;
      document.head.appendChild(style);
      return css;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const directives = new WeakMap();
    /**
     * Brands a function as a directive factory function so that lit-html will call
     * the function during template rendering, rather than passing as a value.
     *
     * A _directive_ is a function that takes a Part as an argument. It has the
     * signature: `(part: Part) => void`.
     *
     * A directive _factory_ is a function that takes arguments for data and
     * configuration and returns a directive. Users of directive usually refer to
     * the directive factory as the directive. For example, "The repeat directive".
     *
     * Usually a template author will invoke a directive factory in their template
     * with relevant arguments, which will then return a directive function.
     *
     * Here's an example of using the `repeat()` directive factory that takes an
     * array and a function to render an item:
     *
     * ```js
     * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`
     * ```
     *
     * When `repeat` is invoked, it returns a directive function that closes over
     * `items` and the template function. When the outer template is rendered, the
     * return directive function is called with the Part for the expression.
     * `repeat` then performs it's custom logic to render multiple items.
     *
     * @param f The directive factory function. Must be a function that returns a
     * function of the signature `(part: Part) => void`. The returned function will
     * be called with the part object.
     *
     * @example
     *
     * import {directive, html} from 'lit-html';
     *
     * const immutable = directive((v) => (part) => {
     *   if (part.value !== v) {
     *     part.setValue(v)
     *   }
     * });
     */
    const directive = (f) => ((...args) => {
        const d = f(...args);
        directives.set(d, true);
        return d;
    });
    const isDirective = (o) => {
        return typeof o === 'function' && directives.has(o);
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * True if the custom elements polyfill is in use.
     */
    const isCEPolyfill = window.customElements !== undefined &&
        window.customElements.polyfillWrapFlushCallback !==
            undefined;
    /**
     * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from
     * `container`.
     */
    const removeNodes = (container, start, end = null) => {
        while (start !== end) {
            const n = start.nextSibling;
            container.removeChild(start);
            start = n;
        }
    };

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * A sentinel value that signals that a value was handled by a directive and
     * should not be written to the DOM.
     */
    const noChange = {};
    /**
     * A sentinel value that signals a NodePart to fully clear its content.
     */
    const nothing = {};

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An expression marker with embedded unique key to avoid collision with
     * possible text in templates.
     */
    const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
    /**
     * An expression marker used text-positions, multi-binding attributes, and
     * attributes with markup-like text values.
     */
    const nodeMarker = `<!--${marker}-->`;
    const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
    /**
     * Suffix appended to all bound attribute names.
     */
    const boundAttributeSuffix = '$lit$';
    /**
     * An updateable Template that tracks the location of dynamic parts.
     */
    class Template {
        constructor(result, element) {
            this.parts = [];
            this.element = element;
            const nodesToRemove = [];
            const stack = [];
            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
            const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
            // Keeps track of the last index associated with a part. We try to delete
            // unnecessary nodes, but we never want to associate two different parts
            // to the same index. They must have a constant node between.
            let lastPartIndex = 0;
            let index = -1;
            let partIndex = 0;
            const { strings, values: { length } } = result;
            while (partIndex < length) {
                const node = walker.nextNode();
                if (node === null) {
                    // We've exhausted the content inside a nested template element.
                    // Because we still have parts (the outer for-loop), we know:
                    // - There is a template in the stack
                    // - The walker will find a nextNode outside the template
                    walker.currentNode = stack.pop();
                    continue;
                }
                index++;
                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                    if (node.hasAttributes()) {
                        const attributes = node.attributes;
                        const { length } = attributes;
                        // Per
                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                        // attributes are not guaranteed to be returned in document order.
                        // In particular, Edge/IE can return them out of order, so we cannot
                        // assume a correspondence between part index and attribute index.
                        let count = 0;
                        for (let i = 0; i < length; i++) {
                            if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                                count++;
                            }
                        }
                        while (count-- > 0) {
                            // Get the template literal section leading up to the first
                            // expression in this attribute
                            const stringForPart = strings[partIndex];
                            // Find the attribute name
                            const name = lastAttributeNameRegex.exec(stringForPart)[2];
                            // Find the corresponding attribute
                            // All bound attributes have had a suffix added in
                            // TemplateResult#getHTML to opt out of special attribute
                            // handling. To look up the attribute value we also need to add
                            // the suffix.
                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                            const attributeValue = node.getAttribute(attributeLookupName);
                            node.removeAttribute(attributeLookupName);
                            const statics = attributeValue.split(markerRegex);
                            this.parts.push({ type: 'attribute', index, name, strings: statics });
                            partIndex += statics.length - 1;
                        }
                    }
                    if (node.tagName === 'TEMPLATE') {
                        stack.push(node);
                        walker.currentNode = node.content;
                    }
                }
                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                    const data = node.data;
                    if (data.indexOf(marker) >= 0) {
                        const parent = node.parentNode;
                        const strings = data.split(markerRegex);
                        const lastIndex = strings.length - 1;
                        // Generate a new text node for each literal section
                        // These nodes are also used as the markers for node parts
                        for (let i = 0; i < lastIndex; i++) {
                            let insert;
                            let s = strings[i];
                            if (s === '') {
                                insert = createMarker();
                            }
                            else {
                                const match = lastAttributeNameRegex.exec(s);
                                if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                                    s = s.slice(0, match.index) + match[1] +
                                        match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                                }
                                insert = document.createTextNode(s);
                            }
                            parent.insertBefore(insert, node);
                            this.parts.push({ type: 'node', index: ++index });
                        }
                        // If there's no text, we must insert a comment to mark our place.
                        // Else, we can trust it will stick around after cloning.
                        if (strings[lastIndex] === '') {
                            parent.insertBefore(createMarker(), node);
                            nodesToRemove.push(node);
                        }
                        else {
                            node.data = strings[lastIndex];
                        }
                        // We have a part for each match found
                        partIndex += lastIndex;
                    }
                }
                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                    if (node.data === marker) {
                        const parent = node.parentNode;
                        // Add a new marker node to be the startNode of the Part if any of
                        // the following are true:
                        //  * We don't have a previousSibling
                        //  * The previousSibling is already the start of a previous part
                        if (node.previousSibling === null || index === lastPartIndex) {
                            index++;
                            parent.insertBefore(createMarker(), node);
                        }
                        lastPartIndex = index;
                        this.parts.push({ type: 'node', index });
                        // If we don't have a nextSibling, keep this node so we have an end.
                        // Else, we can remove it to save future costs.
                        if (node.nextSibling === null) {
                            node.data = '';
                        }
                        else {
                            nodesToRemove.push(node);
                            index--;
                        }
                        partIndex++;
                    }
                    else {
                        let i = -1;
                        while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                            // Comment node has a binding marker inside, make an inactive part
                            // The binding won't work, but subsequent bindings will
                            // TODO (justinfagnani): consider whether it's even worth it to
                            // make bindings in comments work
                            this.parts.push({ type: 'node', index: -1 });
                            partIndex++;
                        }
                    }
                }
            }
            // Remove text binding nodes after the walk to not disturb the TreeWalker
            for (const n of nodesToRemove) {
                n.parentNode.removeChild(n);
            }
        }
    }
    const endsWith = (str, suffix) => {
        const index = str.length - suffix.length;
        return index >= 0 && str.slice(index) === suffix;
    };
    const isTemplatePartActive = (part) => part.index !== -1;
    // Allows `document.createComment('')` to be renamed for a
    // small manual size-savings.
    const createMarker = () => document.createComment('');
    /**
     * This regex extracts the attribute name preceding an attribute-position
     * expression. It does this by matching the syntax allowed for attributes
     * against the string literal directly preceding the expression, assuming that
     * the expression is in an attribute-value position.
     *
     * See attributes in the HTML spec:
     * https://www.w3.org/TR/html5/syntax.html#elements-attributes
     *
     * " \x09\x0a\x0c\x0d" are HTML space characters:
     * https://www.w3.org/TR/html5/infrastructure.html#space-characters
     *
     * "\0-\x1F\x7F-\x9F" are Unicode control characters, which includes every
     * space character except " ".
     *
     * So an attribute is:
     *  * The name: any character except a control character, space character, ('),
     *    ("), ">", "=", or "/"
     *  * Followed by zero or more space characters
     *  * Followed by "="
     *  * Followed by zero or more space characters
     *  * Followed by:
     *    * Any character except space, ('), ("), "<", ">", "=", (`), or
     *    * (") then any non-("), or
     *    * (') then any non-(')
     */
    const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An instance of a `Template` that can be attached to the DOM and updated
     * with new values.
     */
    class TemplateInstance {
        constructor(template, processor, options) {
            this.__parts = [];
            this.template = template;
            this.processor = processor;
            this.options = options;
        }
        update(values) {
            let i = 0;
            for (const part of this.__parts) {
                if (part !== undefined) {
                    part.setValue(values[i]);
                }
                i++;
            }
            for (const part of this.__parts) {
                if (part !== undefined) {
                    part.commit();
                }
            }
        }
        _clone() {
            // There are a number of steps in the lifecycle of a template instance's
            // DOM fragment:
            //  1. Clone - create the instance fragment
            //  2. Adopt - adopt into the main document
            //  3. Process - find part markers and create parts
            //  4. Upgrade - upgrade custom elements
            //  5. Update - set node, attribute, property, etc., values
            //  6. Connect - connect to the document. Optional and outside of this
            //     method.
            //
            // We have a few constraints on the ordering of these steps:
            //  * We need to upgrade before updating, so that property values will pass
            //    through any property setters.
            //  * We would like to process before upgrading so that we're sure that the
            //    cloned fragment is inert and not disturbed by self-modifying DOM.
            //  * We want custom elements to upgrade even in disconnected fragments.
            //
            // Given these constraints, with full custom elements support we would
            // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect
            //
            // But Safari dooes not implement CustomElementRegistry#upgrade, so we
            // can not implement that order and still have upgrade-before-update and
            // upgrade disconnected fragments. So we instead sacrifice the
            // process-before-upgrade constraint, since in Custom Elements v1 elements
            // must not modify their light DOM in the constructor. We still have issues
            // when co-existing with CEv0 elements like Polymer 1, and with polyfills
            // that don't strictly adhere to the no-modification rule because shadow
            // DOM, which may be created in the constructor, is emulated by being placed
            // in the light DOM.
            //
            // The resulting order is on native is: Clone, Adopt, Upgrade, Process,
            // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade
            // in one step.
            //
            // The Custom Elements v1 polyfill supports upgrade(), so the order when
            // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,
            // Connect.
            const fragment = isCEPolyfill ?
                this.template.element.content.cloneNode(true) :
                document.importNode(this.template.element.content, true);
            const stack = [];
            const parts = this.template.parts;
            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
            let partIndex = 0;
            let nodeIndex = 0;
            let part;
            let node = walker.nextNode();
            // Loop through all the nodes and parts of a template
            while (partIndex < parts.length) {
                part = parts[partIndex];
                if (!isTemplatePartActive(part)) {
                    this.__parts.push(undefined);
                    partIndex++;
                    continue;
                }
                // Progress the tree walker until we find our next part's node.
                // Note that multiple parts may share the same node (attribute parts
                // on a single element), so this loop may not run at all.
                while (nodeIndex < part.index) {
                    nodeIndex++;
                    if (node.nodeName === 'TEMPLATE') {
                        stack.push(node);
                        walker.currentNode = node.content;
                    }
                    if ((node = walker.nextNode()) === null) {
                        // We've exhausted the content inside a nested template element.
                        // Because we still have parts (the outer for-loop), we know:
                        // - There is a template in the stack
                        // - The walker will find a nextNode outside the template
                        walker.currentNode = stack.pop();
                        node = walker.nextNode();
                    }
                }
                // We've arrived at our part's node.
                if (part.type === 'node') {
                    const part = this.processor.handleTextExpression(this.options);
                    part.insertAfterNode(node.previousSibling);
                    this.__parts.push(part);
                }
                else {
                    this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
                }
                partIndex++;
            }
            if (isCEPolyfill) {
                document.adoptNode(fragment);
                customElements.upgrade(fragment);
            }
            return fragment;
        }
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const commentMarker = ` ${marker} `;
    /**
     * The return type of `html`, which holds a Template and the values from
     * interpolated expressions.
     */
    class TemplateResult {
        constructor(strings, values, type, processor) {
            this.strings = strings;
            this.values = values;
            this.type = type;
            this.processor = processor;
        }
        /**
         * Returns a string of HTML used to create a `<template>` element.
         */
        getHTML() {
            const l = this.strings.length - 1;
            let html = '';
            let isCommentBinding = false;
            for (let i = 0; i < l; i++) {
                const s = this.strings[i];
                // For each binding we want to determine the kind of marker to insert
                // into the template source before it's parsed by the browser's HTML
                // parser. The marker type is based on whether the expression is in an
                // attribute, text, or comment poisition.
                //   * For node-position bindings we insert a comment with the marker
                //     sentinel as its text content, like <!--{{lit-guid}}-->.
                //   * For attribute bindings we insert just the marker sentinel for the
                //     first binding, so that we support unquoted attribute bindings.
                //     Subsequent bindings can use a comment marker because multi-binding
                //     attributes must be quoted.
                //   * For comment bindings we insert just the marker sentinel so we don't
                //     close the comment.
                //
                // The following code scans the template source, but is *not* an HTML
                // parser. We don't need to track the tree structure of the HTML, only
                // whether a binding is inside a comment, and if not, if it appears to be
                // the first binding in an attribute.
                const commentOpen = s.lastIndexOf('<!--');
                // We're in comment position if we have a comment open with no following
                // comment close. Because <-- can appear in an attribute value there can
                // be false positives.
                isCommentBinding = (commentOpen > -1 || isCommentBinding) &&
                    s.indexOf('-->', commentOpen + 1) === -1;
                // Check to see if we have an attribute-like sequence preceeding the
                // expression. This can match "name=value" like structures in text,
                // comments, and attribute values, so there can be false-positives.
                const attributeMatch = lastAttributeNameRegex.exec(s);
                if (attributeMatch === null) {
                    // We're only in this branch if we don't have a attribute-like
                    // preceeding sequence. For comments, this guards against unusual
                    // attribute values like <div foo="<!--${'bar'}">. Cases like
                    // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
                    // below.
                    html += s + (isCommentBinding ? commentMarker : nodeMarker);
                }
                else {
                    // For attributes we use just a marker sentinel, and also append a
                    // $lit$ suffix to the name to opt-out of attribute-specific parsing
                    // that IE and Edge do for style and certain SVG attributes.
                    html += s.substr(0, attributeMatch.index) + attributeMatch[1] +
                        attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +
                        marker;
                }
            }
            html += this.strings[l];
            return html;
        }
        getTemplateElement() {
            const template = document.createElement('template');
            template.innerHTML = this.getHTML();
            return template;
        }
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const isPrimitive = (value) => {
        return (value === null ||
            !(typeof value === 'object' || typeof value === 'function'));
    };
    const isIterable = (value) => {
        return Array.isArray(value) ||
            // tslint:disable-next-line:no-any
            !!(value && value[Symbol.iterator]);
    };
    /**
     * Writes attribute values to the DOM for a group of AttributeParts bound to a
     * single attibute. The value is only set once even if there are multiple parts
     * for an attribute.
     */
    class AttributeCommitter {
        constructor(element, name, strings) {
            this.dirty = true;
            this.element = element;
            this.name = name;
            this.strings = strings;
            this.parts = [];
            for (let i = 0; i < strings.length - 1; i++) {
                this.parts[i] = this._createPart();
            }
        }
        /**
         * Creates a single part. Override this to create a differnt type of part.
         */
        _createPart() {
            return new AttributePart(this);
        }
        _getValue() {
            const strings = this.strings;
            const l = strings.length - 1;
            let text = '';
            for (let i = 0; i < l; i++) {
                text += strings[i];
                const part = this.parts[i];
                if (part !== undefined) {
                    const v = part.value;
                    if (isPrimitive(v) || !isIterable(v)) {
                        text += typeof v === 'string' ? v : String(v);
                    }
                    else {
                        for (const t of v) {
                            text += typeof t === 'string' ? t : String(t);
                        }
                    }
                }
            }
            text += strings[l];
            return text;
        }
        commit() {
            if (this.dirty) {
                this.dirty = false;
                this.element.setAttribute(this.name, this._getValue());
            }
        }
    }
    /**
     * A Part that controls all or part of an attribute value.
     */
    class AttributePart {
        constructor(committer) {
            this.value = undefined;
            this.committer = committer;
        }
        setValue(value) {
            if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
                this.value = value;
                // If the value is a not a directive, dirty the committer so that it'll
                // call setAttribute. If the value is a directive, it'll dirty the
                // committer if it calls setValue().
                if (!isDirective(value)) {
                    this.committer.dirty = true;
                }
            }
        }
        commit() {
            while (isDirective(this.value)) {
                const directive = this.value;
                this.value = noChange;
                directive(this);
            }
            if (this.value === noChange) {
                return;
            }
            this.committer.commit();
        }
    }
    /**
     * A Part that controls a location within a Node tree. Like a Range, NodePart
     * has start and end locations and can set and update the Nodes between those
     * locations.
     *
     * NodeParts support several value types: primitives, Nodes, TemplateResults,
     * as well as arrays and iterables of those types.
     */
    class NodePart {
        constructor(options) {
            this.value = undefined;
            this.__pendingValue = undefined;
            this.options = options;
        }
        /**
         * Appends this part into a container.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        appendInto(container) {
            this.startNode = container.appendChild(createMarker());
            this.endNode = container.appendChild(createMarker());
        }
        /**
         * Inserts this part after the `ref` node (between `ref` and `ref`'s next
         * sibling). Both `ref` and its next sibling must be static, unchanging nodes
         * such as those that appear in a literal section of a template.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        insertAfterNode(ref) {
            this.startNode = ref;
            this.endNode = ref.nextSibling;
        }
        /**
         * Appends this part into a parent part.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        appendIntoPart(part) {
            part.__insert(this.startNode = createMarker());
            part.__insert(this.endNode = createMarker());
        }
        /**
         * Inserts this part after the `ref` part.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        insertAfterPart(ref) {
            ref.__insert(this.startNode = createMarker());
            this.endNode = ref.endNode;
            ref.endNode = this.startNode;
        }
        setValue(value) {
            this.__pendingValue = value;
        }
        commit() {
            while (isDirective(this.__pendingValue)) {
                const directive = this.__pendingValue;
                this.__pendingValue = noChange;
                directive(this);
            }
            const value = this.__pendingValue;
            if (value === noChange) {
                return;
            }
            if (isPrimitive(value)) {
                if (value !== this.value) {
                    this.__commitText(value);
                }
            }
            else if (value instanceof TemplateResult) {
                this.__commitTemplateResult(value);
            }
            else if (value instanceof Node) {
                this.__commitNode(value);
            }
            else if (isIterable(value)) {
                this.__commitIterable(value);
            }
            else if (value === nothing) {
                this.value = nothing;
                this.clear();
            }
            else {
                // Fallback, will render the string representation
                this.__commitText(value);
            }
        }
        __insert(node) {
            this.endNode.parentNode.insertBefore(node, this.endNode);
        }
        __commitNode(value) {
            if (this.value === value) {
                return;
            }
            this.clear();
            this.__insert(value);
            this.value = value;
        }
        __commitText(value) {
            const node = this.startNode.nextSibling;
            value = value == null ? '' : value;
            // If `value` isn't already a string, we explicitly convert it here in case
            // it can't be implicitly converted - i.e. it's a symbol.
            const valueAsString = typeof value === 'string' ? value : String(value);
            if (node === this.endNode.previousSibling &&
                node.nodeType === 3 /* Node.TEXT_NODE */) {
                // If we only have a single text node between the markers, we can just
                // set its value, rather than replacing it.
                // TODO(justinfagnani): Can we just check if this.value is primitive?
                node.data = valueAsString;
            }
            else {
                this.__commitNode(document.createTextNode(valueAsString));
            }
            this.value = value;
        }
        __commitTemplateResult(value) {
            const template = this.options.templateFactory(value);
            if (this.value instanceof TemplateInstance &&
                this.value.template === template) {
                this.value.update(value.values);
            }
            else {
                // Make sure we propagate the template processor from the TemplateResult
                // so that we use its syntax extension, etc. The template factory comes
                // from the render function options so that it can control template
                // caching and preprocessing.
                const instance = new TemplateInstance(template, value.processor, this.options);
                const fragment = instance._clone();
                instance.update(value.values);
                this.__commitNode(fragment);
                this.value = instance;
            }
        }
        __commitIterable(value) {
            // For an Iterable, we create a new InstancePart per item, then set its
            // value to the item. This is a little bit of overhead for every item in
            // an Iterable, but it lets us recurse easily and efficiently update Arrays
            // of TemplateResults that will be commonly returned from expressions like:
            // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
            // If _value is an array, then the previous render was of an
            // iterable and _value will contain the NodeParts from the previous
            // render. If _value is not an array, clear this part and make a new
            // array for NodeParts.
            if (!Array.isArray(this.value)) {
                this.value = [];
                this.clear();
            }
            // Lets us keep track of how many items we stamped so we can clear leftover
            // items from a previous render
            const itemParts = this.value;
            let partIndex = 0;
            let itemPart;
            for (const item of value) {
                // Try to reuse an existing part
                itemPart = itemParts[partIndex];
                // If no existing part, create a new one
                if (itemPart === undefined) {
                    itemPart = new NodePart(this.options);
                    itemParts.push(itemPart);
                    if (partIndex === 0) {
                        itemPart.appendIntoPart(this);
                    }
                    else {
                        itemPart.insertAfterPart(itemParts[partIndex - 1]);
                    }
                }
                itemPart.setValue(item);
                itemPart.commit();
                partIndex++;
            }
            if (partIndex < itemParts.length) {
                // Truncate the parts array so _value reflects the current state
                itemParts.length = partIndex;
                this.clear(itemPart && itemPart.endNode);
            }
        }
        clear(startNode = this.startNode) {
            removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
        }
    }
    /**
     * Implements a boolean attribute, roughly as defined in the HTML
     * specification.
     *
     * If the value is truthy, then the attribute is present with a value of
     * ''. If the value is falsey, the attribute is removed.
     */
    class BooleanAttributePart {
        constructor(element, name, strings) {
            this.value = undefined;
            this.__pendingValue = undefined;
            if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
                throw new Error('Boolean attributes can only contain a single expression');
            }
            this.element = element;
            this.name = name;
            this.strings = strings;
        }
        setValue(value) {
            this.__pendingValue = value;
        }
        commit() {
            while (isDirective(this.__pendingValue)) {
                const directive = this.__pendingValue;
                this.__pendingValue = noChange;
                directive(this);
            }
            if (this.__pendingValue === noChange) {
                return;
            }
            const value = !!this.__pendingValue;
            if (this.value !== value) {
                if (value) {
                    this.element.setAttribute(this.name, '');
                }
                else {
                    this.element.removeAttribute(this.name);
                }
                this.value = value;
            }
            this.__pendingValue = noChange;
        }
    }
    /**
     * Sets attribute values for PropertyParts, so that the value is only set once
     * even if there are multiple parts for a property.
     *
     * If an expression controls the whole property value, then the value is simply
     * assigned to the property under control. If there are string literals or
     * multiple expressions, then the strings are expressions are interpolated into
     * a string first.
     */
    class PropertyCommitter extends AttributeCommitter {
        constructor(element, name, strings) {
            super(element, name, strings);
            this.single =
                (strings.length === 2 && strings[0] === '' && strings[1] === '');
        }
        _createPart() {
            return new PropertyPart(this);
        }
        _getValue() {
            if (this.single) {
                return this.parts[0].value;
            }
            return super._getValue();
        }
        commit() {
            if (this.dirty) {
                this.dirty = false;
                // tslint:disable-next-line:no-any
                this.element[this.name] = this._getValue();
            }
        }
    }
    class PropertyPart extends AttributePart {
    }
    // Detect event listener options support. If the `capture` property is read
    // from the options object, then options are supported. If not, then the thrid
    // argument to add/removeEventListener is interpreted as the boolean capture
    // value so we should only pass the `capture` property.
    let eventOptionsSupported = false;
    try {
        const options = {
            get capture() {
                eventOptionsSupported = true;
                return false;
            }
        };
        // tslint:disable-next-line:no-any
        window.addEventListener('test', options, options);
        // tslint:disable-next-line:no-any
        window.removeEventListener('test', options, options);
    }
    catch (_e) {
    }
    class EventPart {
        constructor(element, eventName, eventContext) {
            this.value = undefined;
            this.__pendingValue = undefined;
            this.element = element;
            this.eventName = eventName;
            this.eventContext = eventContext;
            this.__boundHandleEvent = (e) => this.handleEvent(e);
        }
        setValue(value) {
            this.__pendingValue = value;
        }
        commit() {
            while (isDirective(this.__pendingValue)) {
                const directive = this.__pendingValue;
                this.__pendingValue = noChange;
                directive(this);
            }
            if (this.__pendingValue === noChange) {
                return;
            }
            const newListener = this.__pendingValue;
            const oldListener = this.value;
            const shouldRemoveListener = newListener == null ||
                oldListener != null &&
                    (newListener.capture !== oldListener.capture ||
                        newListener.once !== oldListener.once ||
                        newListener.passive !== oldListener.passive);
            const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
            if (shouldRemoveListener) {
                this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
            }
            if (shouldAddListener) {
                this.__options = getOptions(newListener);
                this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
            }
            this.value = newListener;
            this.__pendingValue = noChange;
        }
        handleEvent(event) {
            if (typeof this.value === 'function') {
                this.value.call(this.eventContext || this.element, event);
            }
            else {
                this.value.handleEvent(event);
            }
        }
    }
    // We copy options because of the inconsistent behavior of browsers when reading
    // the third argument of add/removeEventListener. IE11 doesn't support options
    // at all. Chrome 41 only reads `capture` if the argument is an object.
    const getOptions = (o) => o &&
        (eventOptionsSupported ?
            { capture: o.capture, passive: o.passive, once: o.once } :
            o.capture);

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Creates Parts when a template is instantiated.
     */
    class DefaultTemplateProcessor {
        /**
         * Create parts for an attribute-position binding, given the event, attribute
         * name, and string literals.
         *
         * @param element The element containing the binding
         * @param name  The attribute name
         * @param strings The string literals. There are always at least two strings,
         *   event for fully-controlled bindings with a single expression.
         */
        handleAttributeExpressions(element, name, strings, options) {
            const prefix = name[0];
            if (prefix === '.') {
                const committer = new PropertyCommitter(element, name.slice(1), strings);
                return committer.parts;
            }
            if (prefix === '@') {
                return [new EventPart(element, name.slice(1), options.eventContext)];
            }
            if (prefix === '?') {
                return [new BooleanAttributePart(element, name.slice(1), strings)];
            }
            const committer = new AttributeCommitter(element, name, strings);
            return committer.parts;
        }
        /**
         * Create parts for a text-position binding.
         * @param templateFactory
         */
        handleTextExpression(options) {
            return new NodePart(options);
        }
    }
    const defaultTemplateProcessor = new DefaultTemplateProcessor();

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * The default TemplateFactory which caches Templates keyed on
     * result.type and result.strings.
     */
    function templateFactory(result) {
        let templateCache = templateCaches.get(result.type);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            templateCaches.set(result.type, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) {
            return template;
        }
        // If the TemplateStringsArray is new, generate a key from the strings
        // This key is shared between all templates with identical content
        const key = result.strings.join(marker);
        // Check if we already have a Template for this key
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            // If we have not seen this key before, create a new Template
            template = new Template(result, result.getTemplateElement());
            // Cache the Template for this key
            templateCache.keyString.set(key, template);
        }
        // Cache all future queries for this TemplateStringsArray
        templateCache.stringsArray.set(result.strings, template);
        return template;
    }
    const templateCaches = new Map();

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const parts = new WeakMap();
    /**
     * Renders a template result or other value to a container.
     *
     * To update a container with new values, reevaluate the template literal and
     * call `render` with the new result.
     *
     * @param result Any value renderable by NodePart - typically a TemplateResult
     *     created by evaluating a template tag like `html` or `svg`.
     * @param container A DOM parent to render to. The entire contents are either
     *     replaced, or efficiently updated if the same result type was previous
     *     rendered there.
     * @param options RenderOptions for the entire render tree rendered to this
     *     container. Render options must *not* change between renders to the same
     *     container, as those changes will not effect previously rendered DOM.
     */
    const render = (result, container, options) => {
        let part = parts.get(container);
        if (part === undefined) {
            removeNodes(container, container.firstChild);
            parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
            part.appendInto(container);
        }
        part.setValue(result);
        part.commit();
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // IMPORTANT: do not change the property name or the assignment expression.
    // This line will be used in regexes to search for lit-html usage.
    // TODO(justinfagnani): inject version number at build time
    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');
    /**
     * Interprets a template literal as an HTML template that can efficiently
     * render to and update a container.
     */
    const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;
    /**
     * Removes the list of nodes from a Template safely. In addition to removing
     * nodes from the Template, the Template part indices are updated to match
     * the mutated Template DOM.
     *
     * As the template is walked the removal state is tracked and
     * part indices are adjusted as needed.
     *
     * div
     *   div#1 (remove) <-- start removing (removing node is div#1)
     *     div
     *       div#2 (remove)  <-- continue removing (removing node is still div#1)
     *         div
     * div <-- stop removing since previous sibling is the removing node (div#1,
     * removed 4 nodes)
     */
    function removeNodesFromTemplate(template, nodesToRemove) {
        const { element: { content }, parts } = template;
        const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
        let partIndex = nextActiveIndexInTemplateParts(parts);
        let part = parts[partIndex];
        let nodeIndex = -1;
        let removeCount = 0;
        const nodesToRemoveInTemplate = [];
        let currentRemovingNode = null;
        while (walker.nextNode()) {
            nodeIndex++;
            const node = walker.currentNode;
            // End removal if stepped past the removing node
            if (node.previousSibling === currentRemovingNode) {
                currentRemovingNode = null;
            }
            // A node to remove was found in the template
            if (nodesToRemove.has(node)) {
                nodesToRemoveInTemplate.push(node);
                // Track node we're removing
                if (currentRemovingNode === null) {
                    currentRemovingNode = node;
                }
            }
            // When removing, increment count by which to adjust subsequent part indices
            if (currentRemovingNode !== null) {
                removeCount++;
            }
            while (part !== undefined && part.index === nodeIndex) {
                // If part is in a removed node deactivate it by setting index to -1 or
                // adjust the index as needed.
                part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
                // go to the next active part.
                partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                part = parts[partIndex];
            }
        }
        nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
    }
    const countNodes = (node) => {
        let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;
        const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
        while (walker.nextNode()) {
            count++;
        }
        return count;
    };
    const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
        for (let i = startIndex + 1; i < parts.length; i++) {
            const part = parts[i];
            if (isTemplatePartActive(part)) {
                return i;
            }
        }
        return -1;
    };
    /**
     * Inserts the given node into the Template, optionally before the given
     * refNode. In addition to inserting the node into the Template, the Template
     * part indices are updated to match the mutated Template DOM.
     */
    function insertNodeIntoTemplate(template, node, refNode = null) {
        const { element: { content }, parts } = template;
        // If there's no refNode, then put node at end of template.
        // No part indices need to be shifted in this case.
        if (refNode === null || refNode === undefined) {
            content.appendChild(node);
            return;
        }
        const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
        let partIndex = nextActiveIndexInTemplateParts(parts);
        let insertCount = 0;
        let walkerIndex = -1;
        while (walker.nextNode()) {
            walkerIndex++;
            const walkerNode = walker.currentNode;
            if (walkerNode === refNode) {
                insertCount = countNodes(node);
                refNode.parentNode.insertBefore(node, refNode);
            }
            while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
                // If we've inserted the node, simply adjust all subsequent parts
                if (insertCount > 0) {
                    while (partIndex !== -1) {
                        parts[partIndex].index += insertCount;
                        partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                    }
                    return;
                }
                partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
            }
        }
    }

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // Get a key to lookup in `templateCaches`.
    const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
    let compatibleShadyCSSVersion = true;
    if (typeof window.ShadyCSS === 'undefined') {
        compatibleShadyCSSVersion = false;
    }
    else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
        console.warn(`Incompatible ShadyCSS version detected. ` +
            `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +
            `@webcomponents/shadycss@1.3.1.`);
        compatibleShadyCSSVersion = false;
    }
    /**
     * Template factory which scopes template DOM using ShadyCSS.
     * @param scopeName {string}
     */
    const shadyTemplateFactory = (scopeName) => (result) => {
        const cacheKey = getTemplateCacheKey(result.type, scopeName);
        let templateCache = templateCaches.get(cacheKey);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            templateCaches.set(cacheKey, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) {
            return template;
        }
        const key = result.strings.join(marker);
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            const element = result.getTemplateElement();
            if (compatibleShadyCSSVersion) {
                window.ShadyCSS.prepareTemplateDom(element, scopeName);
            }
            template = new Template(result, element);
            templateCache.keyString.set(key, template);
        }
        templateCache.stringsArray.set(result.strings, template);
        return template;
    };
    const TEMPLATE_TYPES = ['html', 'svg'];
    /**
     * Removes all style elements from Templates for the given scopeName.
     */
    const removeStylesFromLitTemplates = (scopeName) => {
        TEMPLATE_TYPES.forEach((type) => {
            const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
            if (templates !== undefined) {
                templates.keyString.forEach((template) => {
                    const { element: { content } } = template;
                    // IE 11 doesn't support the iterable param Set constructor
                    const styles = new Set();
                    Array.from(content.querySelectorAll('style')).forEach((s) => {
                        styles.add(s);
                    });
                    removeNodesFromTemplate(template, styles);
                });
            }
        });
    };
    const shadyRenderSet = new Set();
    /**
     * For the given scope name, ensures that ShadyCSS style scoping is performed.
     * This is done just once per scope name so the fragment and template cannot
     * be modified.
     * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
     * to be scoped and appended to the document
     * (2) removes style elements from all lit-html Templates for this scope name.
     *
     * Note, <style> elements can only be placed into templates for the
     * initial rendering of the scope. If <style> elements are included in templates
     * dynamically rendered to the scope (after the first scope render), they will
     * not be scoped and the <style> will be left in the template and rendered
     * output.
     */
    const prepareTemplateStyles = (scopeName, renderedDOM, template) => {
        shadyRenderSet.add(scopeName);
        // If `renderedDOM` is stamped from a Template, then we need to edit that
        // Template's underlying template element. Otherwise, we create one here
        // to give to ShadyCSS, which still requires one while scoping.
        const templateElement = !!template ? template.element : document.createElement('template');
        // Move styles out of rendered DOM and store.
        const styles = renderedDOM.querySelectorAll('style');
        const { length } = styles;
        // If there are no styles, skip unnecessary work
        if (length === 0) {
            // Ensure prepareTemplateStyles is called to support adding
            // styles via `prepareAdoptedCssText` since that requires that
            // `prepareTemplateStyles` is called.
            //
            // ShadyCSS will only update styles containing @apply in the template
            // given to `prepareTemplateStyles`. If no lit Template was given,
            // ShadyCSS will not be able to update uses of @apply in any relevant
            // template. However, this is not a problem because we only create the
            // template for the purpose of supporting `prepareAdoptedCssText`,
            // which doesn't support @apply at all.
            window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
            return;
        }
        const condensedStyle = document.createElement('style');
        // Collect styles into a single style. This helps us make sure ShadyCSS
        // manipulations will not prevent us from being able to fix up template
        // part indices.
        // NOTE: collecting styles is inefficient for browsers but ShadyCSS
        // currently does this anyway. When it does not, this should be changed.
        for (let i = 0; i < length; i++) {
            const style = styles[i];
            style.parentNode.removeChild(style);
            condensedStyle.textContent += style.textContent;
        }
        // Remove styles from nested templates in this scope.
        removeStylesFromLitTemplates(scopeName);
        // And then put the condensed style into the "root" template passed in as
        // `template`.
        const content = templateElement.content;
        if (!!template) {
            insertNodeIntoTemplate(template, condensedStyle, content.firstChild);
        }
        else {
            content.insertBefore(condensedStyle, content.firstChild);
        }
        // Note, it's important that ShadyCSS gets the template that `lit-html`
        // will actually render so that it can update the style inside when
        // needed (e.g. @apply native Shadow DOM case).
        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
        const style = content.querySelector('style');
        if (window.ShadyCSS.nativeShadow && style !== null) {
            // When in native Shadow DOM, ensure the style created by ShadyCSS is
            // included in initially rendered output (`renderedDOM`).
            renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
        }
        else if (!!template) {
            // When no style is left in the template, parts will be broken as a
            // result. To fix this, we put back the style node ShadyCSS removed
            // and then tell lit to remove that node from the template.
            // There can be no style in the template in 2 cases (1) when Shady DOM
            // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
            // is in use ShadyCSS removes the style if it contains no content.
            // NOTE, ShadyCSS creates its own style so we can safely add/remove
            // `condensedStyle` here.
            content.insertBefore(condensedStyle, content.firstChild);
            const removes = new Set();
            removes.add(condensedStyle);
            removeNodesFromTemplate(template, removes);
        }
    };
    /**
     * Extension to the standard `render` method which supports rendering
     * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
     * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
     * or when the webcomponentsjs
     * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
     *
     * Adds a `scopeName` option which is used to scope element DOM and stylesheets
     * when native ShadowDOM is unavailable. The `scopeName` will be added to
     * the class attribute of all rendered DOM. In addition, any style elements will
     * be automatically re-written with this `scopeName` selector and moved out
     * of the rendered DOM and into the document `<head>`.
     *
     * It is common to use this render method in conjunction with a custom element
     * which renders a shadowRoot. When this is done, typically the element's
     * `localName` should be used as the `scopeName`.
     *
     * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
     * custom properties (needed only on older browsers like IE11) and a shim for
     * a deprecated feature called `@apply` that supports applying a set of css
     * custom properties to a given location.
     *
     * Usage considerations:
     *
     * * Part values in `<style>` elements are only applied the first time a given
     * `scopeName` renders. Subsequent changes to parts in style elements will have
     * no effect. Because of this, parts in style elements should only be used for
     * values that will never change, for example parts that set scope-wide theme
     * values or parts which render shared style elements.
     *
     * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
     * custom element's `constructor` is not supported. Instead rendering should
     * either done asynchronously, for example at microtask timing (for example
     * `Promise.resolve()`), or be deferred until the first time the element's
     * `connectedCallback` runs.
     *
     * Usage considerations when using shimmed custom properties or `@apply`:
     *
     * * Whenever any dynamic changes are made which affect
     * css custom properties, `ShadyCSS.styleElement(element)` must be called
     * to update the element. There are two cases when this is needed:
     * (1) the element is connected to a new parent, (2) a class is added to the
     * element that causes it to match different custom properties.
     * To address the first case when rendering a custom element, `styleElement`
     * should be called in the element's `connectedCallback`.
     *
     * * Shimmed custom properties may only be defined either for an entire
     * shadowRoot (for example, in a `:host` rule) or via a rule that directly
     * matches an element with a shadowRoot. In other words, instead of flowing from
     * parent to child as do native css custom properties, shimmed custom properties
     * flow only from shadowRoots to nested shadowRoots.
     *
     * * When using `@apply` mixing css shorthand property names with
     * non-shorthand names (for example `border` and `border-width`) is not
     * supported.
     */
    const render$1 = (result, container, options) => {
        if (!options || typeof options !== 'object' || !options.scopeName) {
            throw new Error('The `scopeName` option is required.');
        }
        const scopeName = options.scopeName;
        const hasRendered = parts.has(container);
        const needsScoping = compatibleShadyCSSVersion &&
            container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&
            !!container.host;
        // Handle first render to a scope specially...
        const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
        // On first scope render, render into a fragment; this cannot be a single
        // fragment that is reused since nested renders can occur synchronously.
        const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
        render(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
        // When performing first scope render,
        // (1) We've rendered into a fragment so that there's a chance to
        // `prepareTemplateStyles` before sub-elements hit the DOM
        // (which might cause them to render based on a common pattern of
        // rendering in a custom element's `connectedCallback`);
        // (2) Scope the template with ShadyCSS one time only for this scope.
        // (3) Render the fragment into the container and make sure the
        // container knows its `part` is the one we just rendered. This ensures
        // DOM will be re-used on subsequent renders.
        if (firstScopeRender) {
            const part = parts.get(renderContainer);
            parts.delete(renderContainer);
            // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
            // that should apply to `renderContainer` even if the rendered value is
            // not a TemplateInstance. However, it will only insert scoped styles
            // into the document if `prepareTemplateStyles` has already been called
            // for the given scope name.
            const template = part.value instanceof TemplateInstance ?
                part.value.template :
                undefined;
            prepareTemplateStyles(scopeName, renderContainer, template);
            removeNodes(container, container.firstChild);
            container.appendChild(renderContainer);
            parts.set(container, part);
        }
        // After elements have hit the DOM, update styling if this is the
        // initial render to this container.
        // This is needed whenever dynamic changes are made so it would be
        // safest to do every render; however, this would regress performance
        // so we leave it up to the user to call `ShadyCSS.styleElement`
        // for dynamic changes.
        if (!hasRendered && needsScoping) {
            window.ShadyCSS.styleElement(container.host);
        }
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    var _a;
    /**
     * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
     * replaced at compile time by the munged name for object[property]. We cannot
     * alias this function, so we have to use a small shim that has the same
     * behavior when not compiling.
     */
    window.JSCompiler_renameProperty =
        (prop, _obj) => prop;
    const defaultConverter = {
        toAttribute(value, type) {
            switch (type) {
                case Boolean:
                    return value ? '' : null;
                case Object:
                case Array:
                    // if the value is `null` or `undefined` pass this through
                    // to allow removing/no change behavior.
                    return value == null ? value : JSON.stringify(value);
            }
            return value;
        },
        fromAttribute(value, type) {
            switch (type) {
                case Boolean:
                    return value !== null;
                case Number:
                    return value === null ? null : Number(value);
                case Object:
                case Array:
                    return JSON.parse(value);
            }
            return value;
        }
    };
    /**
     * Change function that returns true if `value` is different from `oldValue`.
     * This method is used as the default for a property's `hasChanged` function.
     */
    const notEqual = (value, old) => {
        // This ensures (old==NaN, value==NaN) always returns false
        return old !== value && (old === old || value === value);
    };
    const defaultPropertyDeclaration = {
        attribute: true,
        type: String,
        converter: defaultConverter,
        reflect: false,
        hasChanged: notEqual
    };
    const microtaskPromise = Promise.resolve(true);
    const STATE_HAS_UPDATED = 1;
    const STATE_UPDATE_REQUESTED = 1 << 2;
    const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
    const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
    const STATE_HAS_CONNECTED = 1 << 5;
    /**
     * The Closure JS Compiler doesn't currently have good support for static
     * property semantics where "this" is dynamic (e.g.
     * https://github.com/google/closure-compiler/issues/3177 and others) so we use
     * this hack to bypass any rewriting by the compiler.
     */
    const finalized = 'finalized';
    /**
     * Base element class which manages element properties and attributes. When
     * properties change, the `update` method is asynchronously called. This method
     * should be supplied by subclassers to render updates as desired.
     */
    class UpdatingElement extends HTMLElement {
        constructor() {
            super();
            this._updateState = 0;
            this._instanceProperties = undefined;
            this._updatePromise = microtaskPromise;
            this._hasConnectedResolver = undefined;
            /**
             * Map with keys for any properties that have changed since the last
             * update cycle with previous values.
             */
            this._changedProperties = new Map();
            /**
             * Map with keys of properties that should be reflected when updated.
             */
            this._reflectingProperties = undefined;
            this.initialize();
        }
        /**
         * Returns a list of attributes corresponding to the registered properties.
         * @nocollapse
         */
        static get observedAttributes() {
            // note: piggy backing on this to ensure we're finalized.
            this.finalize();
            const attributes = [];
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            this._classProperties.forEach((v, p) => {
                const attr = this._attributeNameForProperty(p, v);
                if (attr !== undefined) {
                    this._attributeToPropertyMap.set(attr, p);
                    attributes.push(attr);
                }
            });
            return attributes;
        }
        /**
         * Ensures the private `_classProperties` property metadata is created.
         * In addition to `finalize` this is also called in `createProperty` to
         * ensure the `@property` decorator can add property metadata.
         */
        /** @nocollapse */
        static _ensureClassProperties() {
            // ensure private storage for property declarations.
            if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
                this._classProperties = new Map();
                // NOTE: Workaround IE11 not supporting Map constructor argument.
                const superProperties = Object.getPrototypeOf(this)._classProperties;
                if (superProperties !== undefined) {
                    superProperties.forEach((v, k) => this._classProperties.set(k, v));
                }
            }
        }
        /**
         * Creates a property accessor on the element prototype if one does not exist.
         * The property setter calls the property's `hasChanged` property option
         * or uses a strict identity check to determine whether or not to request
         * an update.
         * @nocollapse
         */
        static createProperty(name, options = defaultPropertyDeclaration) {
            // Note, since this can be called by the `@property` decorator which
            // is called before `finalize`, we ensure storage exists for property
            // metadata.
            this._ensureClassProperties();
            this._classProperties.set(name, options);
            // Do not generate an accessor if the prototype already has one, since
            // it would be lost otherwise and that would never be the user's intention;
            // Instead, we expect users to call `requestUpdate` themselves from
            // user-defined accessors. Note that if the super has an accessor we will
            // still overwrite it
            if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
                return;
            }
            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
            Object.defineProperty(this.prototype, name, {
                // tslint:disable-next-line:no-any no symbol in index
                get() {
                    return this[key];
                },
                set(value) {
                    const oldValue = this[name];
                    this[key] = value;
                    this._requestUpdate(name, oldValue);
                },
                configurable: true,
                enumerable: true
            });
        }
        /**
         * Creates property accessors for registered properties and ensures
         * any superclasses are also finalized.
         * @nocollapse
         */
        static finalize() {
            // finalize any superclasses
            const superCtor = Object.getPrototypeOf(this);
            if (!superCtor.hasOwnProperty(finalized)) {
                superCtor.finalize();
            }
            this[finalized] = true;
            this._ensureClassProperties();
            // initialize Map populated in observedAttributes
            this._attributeToPropertyMap = new Map();
            // make any properties
            // Note, only process "own" properties since this element will inherit
            // any properties defined on the superClass, and finalization ensures
            // the entire prototype chain is finalized.
            if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
                const props = this.properties;
                // support symbols in properties (IE11 does not support this)
                const propKeys = [
                    ...Object.getOwnPropertyNames(props),
                    ...(typeof Object.getOwnPropertySymbols === 'function') ?
                        Object.getOwnPropertySymbols(props) :
                        []
                ];
                // This for/of is ok because propKeys is an array
                for (const p of propKeys) {
                    // note, use of `any` is due to TypeSript lack of support for symbol in
                    // index types
                    // tslint:disable-next-line:no-any no symbol in index
                    this.createProperty(p, props[p]);
                }
            }
        }
        /**
         * Returns the property name for the given attribute `name`.
         * @nocollapse
         */
        static _attributeNameForProperty(name, options) {
            const attribute = options.attribute;
            return attribute === false ?
                undefined :
                (typeof attribute === 'string' ?
                    attribute :
                    (typeof name === 'string' ? name.toLowerCase() : undefined));
        }
        /**
         * Returns true if a property should request an update.
         * Called when a property value is set and uses the `hasChanged`
         * option for the property if present or a strict identity check.
         * @nocollapse
         */
        static _valueHasChanged(value, old, hasChanged = notEqual) {
            return hasChanged(value, old);
        }
        /**
         * Returns the property value for the given attribute value.
         * Called via the `attributeChangedCallback` and uses the property's
         * `converter` or `converter.fromAttribute` property option.
         * @nocollapse
         */
        static _propertyValueFromAttribute(value, options) {
            const type = options.type;
            const converter = options.converter || defaultConverter;
            const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);
            return fromAttribute ? fromAttribute(value, type) : value;
        }
        /**
         * Returns the attribute value for the given property value. If this
         * returns undefined, the property will *not* be reflected to an attribute.
         * If this returns null, the attribute will be removed, otherwise the
         * attribute will be set to the value.
         * This uses the property's `reflect` and `type.toAttribute` property options.
         * @nocollapse
         */
        static _propertyValueToAttribute(value, options) {
            if (options.reflect === undefined) {
                return;
            }
            const type = options.type;
            const converter = options.converter;
            const toAttribute = converter && converter.toAttribute ||
                defaultConverter.toAttribute;
            return toAttribute(value, type);
        }
        /**
         * Performs element initialization. By default captures any pre-set values for
         * registered properties.
         */
        initialize() {
            this._saveInstanceProperties();
            // ensures first update will be caught by an early access of
            // `updateComplete`
            this._requestUpdate();
        }
        /**
         * Fixes any properties set on the instance before upgrade time.
         * Otherwise these would shadow the accessor and break these properties.
         * The properties are stored in a Map which is played back after the
         * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
         * (<=41), properties created for native platform properties like (`id` or
         * `name`) may not have default values set in the element constructor. On
         * these browsers native properties appear on instances and therefore their
         * default value will overwrite any element default (e.g. if the element sets
         * this.id = 'id' in the constructor, the 'id' will become '' since this is
         * the native platform default).
         */
        _saveInstanceProperties() {
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            this.constructor
                ._classProperties.forEach((_v, p) => {
                if (this.hasOwnProperty(p)) {
                    const value = this[p];
                    delete this[p];
                    if (!this._instanceProperties) {
                        this._instanceProperties = new Map();
                    }
                    this._instanceProperties.set(p, value);
                }
            });
        }
        /**
         * Applies previously saved instance properties.
         */
        _applyInstanceProperties() {
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            // tslint:disable-next-line:no-any
            this._instanceProperties.forEach((v, p) => this[p] = v);
            this._instanceProperties = undefined;
        }
        connectedCallback() {
            this._updateState = this._updateState | STATE_HAS_CONNECTED;
            // Ensure first connection completes an update. Updates cannot complete
            // before connection and if one is pending connection the
            // `_hasConnectionResolver` will exist. If so, resolve it to complete the
            // update, otherwise requestUpdate.
            if (this._hasConnectedResolver) {
                this._hasConnectedResolver();
                this._hasConnectedResolver = undefined;
            }
        }
        /**
         * Allows for `super.disconnectedCallback()` in extensions while
         * reserving the possibility of making non-breaking feature additions
         * when disconnecting at some point in the future.
         */
        disconnectedCallback() {
        }
        /**
         * Synchronizes property values when attributes change.
         */
        attributeChangedCallback(name, old, value) {
            if (old !== value) {
                this._attributeToProperty(name, value);
            }
        }
        _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
            const ctor = this.constructor;
            const attr = ctor._attributeNameForProperty(name, options);
            if (attr !== undefined) {
                const attrValue = ctor._propertyValueToAttribute(value, options);
                // an undefined value does not change the attribute.
                if (attrValue === undefined) {
                    return;
                }
                // Track if the property is being reflected to avoid
                // setting the property again via `attributeChangedCallback`. Note:
                // 1. this takes advantage of the fact that the callback is synchronous.
                // 2. will behave incorrectly if multiple attributes are in the reaction
                // stack at time of calling. However, since we process attributes
                // in `update` this should not be possible (or an extreme corner case
                // that we'd like to discover).
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
                if (attrValue == null) {
                    this.removeAttribute(attr);
                }
                else {
                    this.setAttribute(attr, attrValue);
                }
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
            }
        }
        _attributeToProperty(name, value) {
            // Use tracking info to avoid deserializing attribute value if it was
            // just set from a property setter.
            if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
                return;
            }
            const ctor = this.constructor;
            const propName = ctor._attributeToPropertyMap.get(name);
            if (propName !== undefined) {
                const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
                this[propName] =
                    // tslint:disable-next-line:no-any
                    ctor._propertyValueFromAttribute(value, options);
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
            }
        }
        /**
         * This private version of `requestUpdate` does not access or return the
         * `updateComplete` promise. This promise can be overridden and is therefore
         * not free to access.
         */
        _requestUpdate(name, oldValue) {
            let shouldRequestUpdate = true;
            // If we have a property key, perform property update steps.
            if (name !== undefined) {
                const ctor = this.constructor;
                const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;
                if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                    if (!this._changedProperties.has(name)) {
                        this._changedProperties.set(name, oldValue);
                    }
                    // Add to reflecting properties set.
                    // Note, it's important that every change has a chance to add the
                    // property to `_reflectingProperties`. This ensures setting
                    // attribute + property reflects correctly.
                    if (options.reflect === true &&
                        !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                        if (this._reflectingProperties === undefined) {
                            this._reflectingProperties = new Map();
                        }
                        this._reflectingProperties.set(name, options);
                    }
                }
                else {
                    // Abort the request if the property should not be considered changed.
                    shouldRequestUpdate = false;
                }
            }
            if (!this._hasRequestedUpdate && shouldRequestUpdate) {
                this._enqueueUpdate();
            }
        }
        /**
         * Requests an update which is processed asynchronously. This should
         * be called when an element should update based on some state not triggered
         * by setting a property. In this case, pass no arguments. It should also be
         * called when manually implementing a property setter. In this case, pass the
         * property `name` and `oldValue` to ensure that any configured property
         * options are honored. Returns the `updateComplete` Promise which is resolved
         * when the update completes.
         *
         * @param name {PropertyKey} (optional) name of requesting property
         * @param oldValue {any} (optional) old value of requesting property
         * @returns {Promise} A Promise that is resolved when the update completes.
         */
        requestUpdate(name, oldValue) {
            this._requestUpdate(name, oldValue);
            return this.updateComplete;
        }
        /**
         * Sets up the element to asynchronously update.
         */
        async _enqueueUpdate() {
            // Mark state updating...
            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
            let resolve;
            let reject;
            const previousUpdatePromise = this._updatePromise;
            this._updatePromise = new Promise((res, rej) => {
                resolve = res;
                reject = rej;
            });
            try {
                // Ensure any previous update has resolved before updating.
                // This `await` also ensures that property changes are batched.
                await previousUpdatePromise;
            }
            catch (e) {
                // Ignore any previous errors. We only care that the previous cycle is
                // done. Any error should have been handled in the previous update.
            }
            // Make sure the element has connected before updating.
            if (!this._hasConnected) {
                await new Promise((res) => this._hasConnectedResolver = res);
            }
            try {
                const result = this.performUpdate();
                // If `performUpdate` returns a Promise, we await it. This is done to
                // enable coordinating updates with a scheduler. Note, the result is
                // checked to avoid delaying an additional microtask unless we need to.
                if (result != null) {
                    await result;
                }
            }
            catch (e) {
                reject(e);
            }
            resolve(!this._hasRequestedUpdate);
        }
        get _hasConnected() {
            return (this._updateState & STATE_HAS_CONNECTED);
        }
        get _hasRequestedUpdate() {
            return (this._updateState & STATE_UPDATE_REQUESTED);
        }
        get hasUpdated() {
            return (this._updateState & STATE_HAS_UPDATED);
        }
        /**
         * Performs an element update. Note, if an exception is thrown during the
         * update, `firstUpdated` and `updated` will not be called.
         *
         * You can override this method to change the timing of updates. If this
         * method is overridden, `super.performUpdate()` must be called.
         *
         * For instance, to schedule updates to occur just before the next frame:
         *
         * ```
         * protected async performUpdate(): Promise<unknown> {
         *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
         *   super.performUpdate();
         * }
         * ```
         */
        performUpdate() {
            // Mixin instance properties once, if they exist.
            if (this._instanceProperties) {
                this._applyInstanceProperties();
            }
            let shouldUpdate = false;
            const changedProperties = this._changedProperties;
            try {
                shouldUpdate = this.shouldUpdate(changedProperties);
                if (shouldUpdate) {
                    this.update(changedProperties);
                }
            }
            catch (e) {
                // Prevent `firstUpdated` and `updated` from running when there's an
                // update exception.
                shouldUpdate = false;
                throw e;
            }
            finally {
                // Ensure element can accept additional updates after an exception.
                this._markUpdated();
            }
            if (shouldUpdate) {
                if (!(this._updateState & STATE_HAS_UPDATED)) {
                    this._updateState = this._updateState | STATE_HAS_UPDATED;
                    this.firstUpdated(changedProperties);
                }
                this.updated(changedProperties);
            }
        }
        _markUpdated() {
            this._changedProperties = new Map();
            this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
        }
        /**
         * Returns a Promise that resolves when the element has completed updating.
         * The Promise value is a boolean that is `true` if the element completed the
         * update without triggering another update. The Promise result is `false` if
         * a property was set inside `updated()`. If the Promise is rejected, an
         * exception was thrown during the update.
         *
         * To await additional asynchronous work, override the `_getUpdateComplete`
         * method. For example, it is sometimes useful to await a rendered element
         * before fulfilling this Promise. To do this, first await
         * `super._getUpdateComplete()`, then any subsequent state.
         *
         * @returns {Promise} The Promise returns a boolean that indicates if the
         * update resolved without triggering another update.
         */
        get updateComplete() {
            return this._getUpdateComplete();
        }
        /**
         * Override point for the `updateComplete` promise.
         *
         * It is not safe to override the `updateComplete` getter directly due to a
         * limitation in TypeScript which means it is not possible to call a
         * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
         * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
         * This method should be overridden instead. For example:
         *
         *   class MyElement extends LitElement {
         *     async _getUpdateComplete() {
         *       await super._getUpdateComplete();
         *       await this._myChild.updateComplete;
         *     }
         *   }
         */
        _getUpdateComplete() {
            return this._updatePromise;
        }
        /**
         * Controls whether or not `update` should be called when the element requests
         * an update. By default, this method always returns `true`, but this can be
         * customized to control when to update.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        shouldUpdate(_changedProperties) {
            return true;
        }
        /**
         * Updates the element. This method reflects property values to attributes.
         * It can be overridden to render and keep updated element DOM.
         * Setting properties inside this method will *not* trigger
         * another update.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        update(_changedProperties) {
            if (this._reflectingProperties !== undefined &&
                this._reflectingProperties.size > 0) {
                // Use forEach so this works even if for/of loops are compiled to for
                // loops expecting arrays
                this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));
                this._reflectingProperties = undefined;
            }
        }
        /**
         * Invoked whenever the element is updated. Implement to perform
         * post-updating tasks via DOM APIs, for example, focusing an element.
         *
         * Setting properties inside this method will trigger the element to update
         * again after this update cycle completes.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        updated(_changedProperties) {
        }
        /**
         * Invoked when the element is first updated. Implement to perform one time
         * work on the element after update.
         *
         * Setting properties inside this method will trigger the element to update
         * again after this update cycle completes.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        firstUpdated(_changedProperties) {
        }
    }
    _a = finalized;
    /**
     * Marks class as having finished creating properties.
     */
    UpdatingElement[_a] = true;

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const legacyCustomElement = (tagName, clazz) => {
        window.customElements.define(tagName, clazz);
        // Cast as any because TS doesn't recognize the return type as being a
        // subtype of the decorated class when clazz is typed as
        // `Constructor<HTMLElement>` for some reason.
        // `Constructor<HTMLElement>` is helpful to make sure the decorator is
        // applied to elements however.
        // tslint:disable-next-line:no-any
        return clazz;
    };
    const standardCustomElement = (tagName, descriptor) => {
        const { kind, elements } = descriptor;
        return {
            kind,
            elements,
            // This callback is called once the class is otherwise fully defined
            finisher(clazz) {
                window.customElements.define(tagName, clazz);
            }
        };
    };
    /**
     * Class decorator factory that defines the decorated class as a custom element.
     *
     * @param tagName the name of the custom element to define
     */
    const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?
        legacyCustomElement(tagName, classOrDescriptor) :
        standardCustomElement(tagName, classOrDescriptor);
    const standardProperty = (options, element) => {
        // When decorating an accessor, pass it through and add property metadata.
        // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
        // stomp over the user's accessor.
        if (element.kind === 'method' && element.descriptor &&
            !('value' in element.descriptor)) {
            return Object.assign({}, element, { finisher(clazz) {
                    clazz.createProperty(element.key, options);
                } });
        }
        else {
            // createProperty() takes care of defining the property, but we still
            // must return some kind of descriptor, so return a descriptor for an
            // unused prototype field. The finisher calls createProperty().
            return {
                kind: 'field',
                key: Symbol(),
                placement: 'own',
                descriptor: {},
                // When @babel/plugin-proposal-decorators implements initializers,
                // do this instead of the initializer below. See:
                // https://github.com/babel/babel/issues/9260 extras: [
                //   {
                //     kind: 'initializer',
                //     placement: 'own',
                //     initializer: descriptor.initializer,
                //   }
                // ],
                initializer() {
                    if (typeof element.initializer === 'function') {
                        this[element.key] = element.initializer.call(this);
                    }
                },
                finisher(clazz) {
                    clazz.createProperty(element.key, options);
                }
            };
        }
    };
    const legacyProperty = (options, proto, name) => {
        proto.constructor
            .createProperty(name, options);
    };
    /**
     * A property decorator which creates a LitElement property which reflects a
     * corresponding attribute value. A `PropertyDeclaration` may optionally be
     * supplied to configure property features.
     *
     * @ExportDecoratedItems
     */
    function property(options) {
        // tslint:disable-next-line:no-any decorator
        return (protoOrDescriptor, name) => (name !== undefined) ?
            legacyProperty(options, protoOrDescriptor, name) :
            standardProperty(options, protoOrDescriptor);
    }
    /**
     * A property decorator that converts a class property into a getter that
     * executes a querySelector on the element's renderRoot.
     *
     * @ExportDecoratedItems
     */
    function query(selector) {
        return (protoOrDescriptor, 
        // tslint:disable-next-line:no-any decorator
        name) => {
            const descriptor = {
                get() {
                    return this.renderRoot.querySelector(selector);
                },
                enumerable: true,
                configurable: true,
            };
            return (name !== undefined) ?
                legacyQuery(descriptor, protoOrDescriptor, name) :
                standardQuery(descriptor, protoOrDescriptor);
        };
    }
    const legacyQuery = (descriptor, proto, name) => {
        Object.defineProperty(proto, name, descriptor);
    };
    const standardQuery = (descriptor, element) => ({
        kind: 'method',
        placement: 'prototype',
        key: element.key,
        descriptor,
    });
    const standardEventOptions = (options, element) => {
        return Object.assign({}, element, { finisher(clazz) {
                Object.assign(clazz.prototype[element.key], options);
            } });
    };
    const legacyEventOptions = 
    // tslint:disable-next-line:no-any legacy decorator
    (options, proto, name) => {
        Object.assign(proto[name], options);
    };
    /**
     * Adds event listener options to a method used as an event listener in a
     * lit-html template.
     *
     * @param options An object that specifis event listener options as accepted by
     * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.
     *
     * Current browsers support the `capture`, `passive`, and `once` options. See:
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters
     *
     * @example
     *
     *     class MyElement {
     *
     *       clicked = false;
     *
     *       render() {
     *         return html`<div @click=${this._onClick}`><button></button></div>`;
     *       }
     *
     *       @eventOptions({capture: true})
     *       _onClick(e) {
     *         this.clicked = true;
     *       }
     *     }
     */
    const eventOptions = (options) => 
    // Return value typed as any to prevent TypeScript from complaining that
    // standard decorator function signature does not match TypeScript decorator
    // signature
    // TODO(kschaaf): unclear why it was only failing on this decorator and not
    // the others
    ((protoOrDescriptor, name) => (name !== undefined) ?
        legacyEventOptions(options, protoOrDescriptor, name) :
        standardEventOptions(options, protoOrDescriptor));

    /**
    @license
    Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */
    const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&
        ('replace' in CSSStyleSheet.prototype);
    const constructionToken = Symbol();
    class CSSResult {
        constructor(cssText, safeToken) {
            if (safeToken !== constructionToken) {
                throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
            }
            this.cssText = cssText;
        }
        // Note, this is a getter so that it's lazy. In practice, this means
        // stylesheets are not created until the first element instance is made.
        get styleSheet() {
            if (this._styleSheet === undefined) {
                // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
                // is constructable.
                if (supportsAdoptingStyleSheets) {
                    this._styleSheet = new CSSStyleSheet();
                    this._styleSheet.replaceSync(this.cssText);
                }
                else {
                    this._styleSheet = null;
                }
            }
            return this._styleSheet;
        }
        toString() {
            return this.cssText;
        }
    }
    const textFromCSSResult = (value) => {
        if (value instanceof CSSResult) {
            return value.cssText;
        }
        else if (typeof value === 'number') {
            return value;
        }
        else {
            throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
        }
    };
    /**
     * Template tag which which can be used with LitElement's `style` property to
     * set element styles. For security reasons, only literal string values may be
     * used. To incorporate non-literal values `unsafeCSS` may be used inside a
     * template string part.
     */
    const css = (strings, ...values) => {
        const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
        return new CSSResult(cssText, constructionToken);
    };

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // IMPORTANT: do not change the property name or the assignment expression.
    // This line will be used in regexes to search for LitElement usage.
    // TODO(justinfagnani): inject version number at build time
    (window['litElementVersions'] || (window['litElementVersions'] = []))
        .push('2.2.1');
    /**
     * Minimal implementation of Array.prototype.flat
     * @param arr the array to flatten
     * @param result the accumlated result
     */
    function arrayFlat(styles, result = []) {
        for (let i = 0, length = styles.length; i < length; i++) {
            const value = styles[i];
            if (Array.isArray(value)) {
                arrayFlat(value, result);
            }
            else {
                result.push(value);
            }
        }
        return result;
    }
    /** Deeply flattens styles array. Uses native flat if available. */
    const flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);
    class LitElement extends UpdatingElement {
        /** @nocollapse */
        static finalize() {
            // The Closure JS Compiler does not always preserve the correct "this"
            // when calling static super methods (b/137460243), so explicitly bind.
            super.finalize.call(this);
            // Prepare styling that is stamped at first render time. Styling
            // is built from user provided `styles` or is inherited from the superclass.
            this._styles =
                this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?
                    this._getUniqueStyles() :
                    this._styles || [];
        }
        /** @nocollapse */
        static _getUniqueStyles() {
            // Take care not to call `this.styles` multiple times since this generates
            // new CSSResults each time.
            // TODO(sorvell): Since we do not cache CSSResults by input, any
            // shared styles will generate new stylesheet objects, which is wasteful.
            // This should be addressed when a browser ships constructable
            // stylesheets.
            const userStyles = this.styles;
            const styles = [];
            if (Array.isArray(userStyles)) {
                const flatStyles = flattenStyles(userStyles);
                // As a performance optimization to avoid duplicated styling that can
                // occur especially when composing via subclassing, de-duplicate styles
                // preserving the last item in the list. The last item is kept to
                // try to preserve cascade order with the assumption that it's most
                // important that last added styles override previous styles.
                const styleSet = flatStyles.reduceRight((set, s) => {
                    set.add(s);
                    // on IE set.add does not return the set.
                    return set;
                }, new Set());
                // Array.from does not work on Set in IE
                styleSet.forEach((v) => styles.unshift(v));
            }
            else if (userStyles) {
                styles.push(userStyles);
            }
            return styles;
        }
        /**
         * Performs element initialization. By default this calls `createRenderRoot`
         * to create the element `renderRoot` node and captures any pre-set values for
         * registered properties.
         */
        initialize() {
            super.initialize();
            this.renderRoot =
                this.createRenderRoot();
            // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
            // element's getRootNode(). While this could be done, we're choosing not to
            // support this now since it would require different logic around de-duping.
            if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
                this.adoptStyles();
            }
        }
        /**
         * Returns the node into which the element should render and by default
         * creates and returns an open shadowRoot. Implement to customize where the
         * element's DOM is rendered. For example, to render into the element's
         * childNodes, return `this`.
         * @returns {Element|DocumentFragment} Returns a node into which to render.
         */
        createRenderRoot() {
            return this.attachShadow({ mode: 'open' });
        }
        /**
         * Applies styling to the element shadowRoot using the `static get styles`
         * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
         * available and will fallback otherwise. When Shadow DOM is polyfilled,
         * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
         * is available but `adoptedStyleSheets` is not, styles are appended to the
         * end of the `shadowRoot` to [mimic spec
         * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
         */
        adoptStyles() {
            const styles = this.constructor._styles;
            if (styles.length === 0) {
                return;
            }
            // There are three separate cases here based on Shadow DOM support.
            // (1) shadowRoot polyfilled: use ShadyCSS
            // (2) shadowRoot.adoptedStyleSheets available: use it.
            // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
            // rendering
            if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
                window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
            }
            else if (supportsAdoptingStyleSheets) {
                this.renderRoot.adoptedStyleSheets =
                    styles.map((s) => s.styleSheet);
            }
            else {
                // This must be done after rendering so the actual style insertion is done
                // in `update`.
                this._needsShimAdoptedStyleSheets = true;
            }
        }
        connectedCallback() {
            super.connectedCallback();
            // Note, first update/render handles styleElement so we only call this if
            // connected after first update.
            if (this.hasUpdated && window.ShadyCSS !== undefined) {
                window.ShadyCSS.styleElement(this);
            }
        }
        /**
         * Updates the element. This method reflects property values to attributes
         * and calls `render` to render DOM via lit-html. Setting properties inside
         * this method will *not* trigger another update.
         * * @param _changedProperties Map of changed properties with old values
         */
        update(changedProperties) {
            super.update(changedProperties);
            const templateResult = this.render();
            if (templateResult instanceof TemplateResult) {
                this.constructor
                    .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
            }
            // When native Shadow DOM is used but adoptedStyles are not supported,
            // insert styling after rendering to ensure adoptedStyles have highest
            // priority.
            if (this._needsShimAdoptedStyleSheets) {
                this._needsShimAdoptedStyleSheets = false;
                this.constructor._styles.forEach((s) => {
                    const style = document.createElement('style');
                    style.textContent = s.cssText;
                    this.renderRoot.appendChild(style);
                });
            }
        }
        /**
         * Invoked on each update to perform rendering tasks. This method must return
         * a lit-html TemplateResult. Setting properties inside this method will *not*
         * trigger the element to update.
         */
        render() {
        }
    }
    /**
     * Ensure this class is marked as `finalized` as an optimization ensuring
     * it will not needlessly try to `finalize`.
     *
     * Note this property name is a string to prevent breaking Closure JS Compiler
     * optimizations. See updating-element.ts for more information.
     */
    LitElement['finalized'] = true;
    /**
     * Render method used to render the lit-html TemplateResult to the element's
     * DOM.
     * @param {TemplateResult} Template to render.
     * @param {Element|DocumentFragment} Node into which to render.
     * @param {String} Element name.
     * @nocollapse
     */
    LitElement.render = render$1;

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * Stores result from applyPassive to avoid redundant processing to detect
     * passive event listener support.
     */
    var supportsPassive_;
    /**
     * Determine whether the current browser supports passive event listeners, and
     * if so, use them.
     */
    function applyPassive(globalObj, forceRefresh) {
        if (globalObj === void 0) { globalObj = window; }
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (supportsPassive_ === undefined || forceRefresh) {
            var isSupported_1 = false;
            try {
                globalObj.document.addEventListener('test', function () { return undefined; }, {
                    get passive() {
                        isSupported_1 = true;
                        return isSupported_1;
                    },
                });
            }
            catch (e) {
            } // tslint:disable-line:no-empty cannot throw error due to tests. tslint also disables console.log.
            supportsPassive_ = isSupported_1;
        }
        return supportsPassive_ ? { passive: true } : false;
    }

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    function matches(element, selector) {
        var nativeMatches = element.matches
            || element.webkitMatchesSelector
            || element.msMatchesSelector;
        return nativeMatches.call(element, selector);
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFoundation = /** @class */ (function () {
        function MDCFoundation(adapter) {
            if (adapter === void 0) { adapter = {}; }
            this.adapter_ = adapter;
        }
        Object.defineProperty(MDCFoundation, "cssClasses", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports every
                // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "strings", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "numbers", {
            get: function () {
                // Classes extending MDCFoundation should implement this method to return an object which exports all
                // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
                return {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFoundation, "defaultAdapter", {
            get: function () {
                // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
                // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
                // validation.
                return {};
            },
            enumerable: true,
            configurable: true
        });
        MDCFoundation.prototype.init = function () {
            // Subclasses should override this method to perform initialization routines (registering events, etc.)
        };
        MDCFoundation.prototype.destroy = function () {
            // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
        };
        return MDCFoundation;
    }());

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses = {
        // Ripple is a special case where the "root" component is really a "mixin" of sorts,
        // given that it's an 'upgrade' to an existing component. That being said it is the root
        // CSS class that all other CSS classes derive from.
        BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
        FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
        FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
        ROOT: 'mdc-ripple-upgraded',
        UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
    };
    var strings = {
        VAR_FG_SCALE: '--mdc-ripple-fg-scale',
        VAR_FG_SIZE: '--mdc-ripple-fg-size',
        VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
        VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
        VAR_LEFT: '--mdc-ripple-left',
        VAR_TOP: '--mdc-ripple-top',
    };
    var numbers = {
        DEACTIVATION_TIMEOUT_MS: 225,
        FG_DEACTIVATION_MS: 150,
        INITIAL_ORIGIN_SCALE: 0.6,
        PADDING: 10,
        TAP_DELAY_MS: 300,
    };

    /**
     * Stores result from supportsCssVariables to avoid redundant processing to
     * detect CSS custom variable support.
     */
    var supportsCssVariables_;
    function supportsCssVariables(windowObj, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        var CSS = windowObj.CSS;
        var supportsCssVars = supportsCssVariables_;
        if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
            return supportsCssVariables_;
        }
        var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
        if (!supportsFunctionPresent) {
            return false;
        }
        var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
        // See: https://bugs.webkit.org/show_bug.cgi?id=154669
        // See: README section on Safari
        var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&
            CSS.supports('color', '#00000000'));
        supportsCssVars =
            explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
        if (!forceRefresh) {
            supportsCssVariables_ = supportsCssVars;
        }
        return supportsCssVars;
    }
    function getNormalizedEventCoords(evt, pageOffset, clientRect) {
        if (!evt) {
            return { x: 0, y: 0 };
        }
        var x = pageOffset.x, y = pageOffset.y;
        var documentX = x + clientRect.left;
        var documentY = y + clientRect.top;
        var normalizedX;
        var normalizedY;
        // Determine touch point relative to the ripple container.
        if (evt.type === 'touchstart') {
            var touchEvent = evt;
            normalizedX = touchEvent.changedTouches[0].pageX - documentX;
            normalizedY = touchEvent.changedTouches[0].pageY - documentY;
        }
        else {
            var mouseEvent = evt;
            normalizedX = mouseEvent.pageX - documentX;
            normalizedY = mouseEvent.pageY - documentY;
        }
        return { x: normalizedX, y: normalizedY };
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    // Activation events registered on the root element of each instance for activation
    var ACTIVATION_EVENT_TYPES = [
        'touchstart', 'pointerdown', 'mousedown', 'keydown',
    ];
    // Deactivation events registered on documentElement when a pointer-related down event occurs
    var POINTER_DEACTIVATION_EVENT_TYPES = [
        'touchend', 'pointerup', 'mouseup', 'contextmenu',
    ];
    // simultaneous nested activations
    var activatedTargets = [];
    var MDCRippleFoundation = /** @class */ (function (_super) {
        __extends(MDCRippleFoundation, _super);
        function MDCRippleFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCRippleFoundation.defaultAdapter, adapter)) || this;
            _this.activationAnimationHasEnded_ = false;
            _this.activationTimer_ = 0;
            _this.fgDeactivationRemovalTimer_ = 0;
            _this.fgScale_ = '0';
            _this.frame_ = { width: 0, height: 0 };
            _this.initialSize_ = 0;
            _this.layoutFrame_ = 0;
            _this.maxRadius_ = 0;
            _this.unboundedCoords_ = { left: 0, top: 0 };
            _this.activationState_ = _this.defaultActivationState_();
            _this.activationTimerCallback_ = function () {
                _this.activationAnimationHasEnded_ = true;
                _this.runDeactivationUXLogicIfReady_();
            };
            _this.activateHandler_ = function (e) { return _this.activate_(e); };
            _this.deactivateHandler_ = function () { return _this.deactivate_(); };
            _this.focusHandler_ = function () { return _this.handleFocus(); };
            _this.blurHandler_ = function () { return _this.handleBlur(); };
            _this.resizeHandler_ = function () { return _this.layout(); };
            return _this;
        }
        Object.defineProperty(MDCRippleFoundation, "cssClasses", {
            get: function () {
                return cssClasses;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "strings", {
            get: function () {
                return strings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "numbers", {
            get: function () {
                return numbers;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    browserSupportsCssVars: function () { return true; },
                    computeBoundingRect: function () { return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 }); },
                    containsEventTarget: function () { return true; },
                    deregisterDocumentInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    deregisterResizeHandler: function () { return undefined; },
                    getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
                    isSurfaceActive: function () { return true; },
                    isSurfaceDisabled: function () { return true; },
                    isUnbounded: function () { return true; },
                    registerDocumentInteractionHandler: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                    registerResizeHandler: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    updateCssVariable: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCRippleFoundation.prototype.init = function () {
            var _this = this;
            var supportsPressRipple = this.supportsPressRipple_();
            this.registerRootHandlers_(supportsPressRipple);
            if (supportsPressRipple) {
                var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                    _this.adapter_.addClass(ROOT_1);
                    if (_this.adapter_.isUnbounded()) {
                        _this.adapter_.addClass(UNBOUNDED_1);
                        // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                        _this.layoutInternal_();
                    }
                });
            }
        };
        MDCRippleFoundation.prototype.destroy = function () {
            var _this = this;
            if (this.supportsPressRipple_()) {
                if (this.activationTimer_) {
                    clearTimeout(this.activationTimer_);
                    this.activationTimer_ = 0;
                    this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
                }
                if (this.fgDeactivationRemovalTimer_) {
                    clearTimeout(this.fgDeactivationRemovalTimer_);
                    this.fgDeactivationRemovalTimer_ = 0;
                    this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
                }
                var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
                requestAnimationFrame(function () {
                    _this.adapter_.removeClass(ROOT_2);
                    _this.adapter_.removeClass(UNBOUNDED_2);
                    _this.removeCssVars_();
                });
            }
            this.deregisterRootHandlers_();
            this.deregisterDeactivationHandlers_();
        };
        /**
         * @param evt Optional event containing position information.
         */
        MDCRippleFoundation.prototype.activate = function (evt) {
            this.activate_(evt);
        };
        MDCRippleFoundation.prototype.deactivate = function () {
            this.deactivate_();
        };
        MDCRippleFoundation.prototype.layout = function () {
            var _this = this;
            if (this.layoutFrame_) {
                cancelAnimationFrame(this.layoutFrame_);
            }
            this.layoutFrame_ = requestAnimationFrame(function () {
                _this.layoutInternal_();
                _this.layoutFrame_ = 0;
            });
        };
        MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
            var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
            if (unbounded) {
                this.adapter_.addClass(UNBOUNDED);
            }
            else {
                this.adapter_.removeClass(UNBOUNDED);
            }
        };
        MDCRippleFoundation.prototype.handleFocus = function () {
            var _this = this;
            requestAnimationFrame(function () {
                return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
            });
        };
        MDCRippleFoundation.prototype.handleBlur = function () {
            var _this = this;
            requestAnimationFrame(function () {
                return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
            });
        };
        /**
         * We compute this property so that we are not querying information about the client
         * until the point in time where the foundation requests it. This prevents scenarios where
         * client-side feature-detection may happen too early, such as when components are rendered on the server
         * and then initialized at mount time on the client.
         */
        MDCRippleFoundation.prototype.supportsPressRipple_ = function () {
            return this.adapter_.browserSupportsCssVars();
        };
        MDCRippleFoundation.prototype.defaultActivationState_ = function () {
            return {
                activationEvent: undefined,
                hasDeactivationUXRun: false,
                isActivated: false,
                isProgrammatic: false,
                wasActivatedByPointer: false,
                wasElementMadeActive: false,
            };
        };
        /**
         * supportsPressRipple Passed from init to save a redundant function call
         */
        MDCRippleFoundation.prototype.registerRootHandlers_ = function (supportsPressRipple) {
            var _this = this;
            if (supportsPressRipple) {
                ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                    _this.adapter_.registerInteractionHandler(evtType, _this.activateHandler_);
                });
                if (this.adapter_.isUnbounded()) {
                    this.adapter_.registerResizeHandler(this.resizeHandler_);
                }
            }
            this.adapter_.registerInteractionHandler('focus', this.focusHandler_);
            this.adapter_.registerInteractionHandler('blur', this.blurHandler_);
        };
        MDCRippleFoundation.prototype.registerDeactivationHandlers_ = function (evt) {
            var _this = this;
            if (evt.type === 'keydown') {
                this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);
            }
            else {
                POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                    _this.adapter_.registerDocumentInteractionHandler(evtType, _this.deactivateHandler_);
                });
            }
        };
        MDCRippleFoundation.prototype.deregisterRootHandlers_ = function () {
            var _this = this;
            ACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter_.deregisterInteractionHandler(evtType, _this.activateHandler_);
            });
            this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);
            this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);
            if (this.adapter_.isUnbounded()) {
                this.adapter_.deregisterResizeHandler(this.resizeHandler_);
            }
        };
        MDCRippleFoundation.prototype.deregisterDeactivationHandlers_ = function () {
            var _this = this;
            this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);
            POINTER_DEACTIVATION_EVENT_TYPES.forEach(function (evtType) {
                _this.adapter_.deregisterDocumentInteractionHandler(evtType, _this.deactivateHandler_);
            });
        };
        MDCRippleFoundation.prototype.removeCssVars_ = function () {
            var _this = this;
            var rippleStrings = MDCRippleFoundation.strings;
            var keys = Object.keys(rippleStrings);
            keys.forEach(function (key) {
                if (key.indexOf('VAR_') === 0) {
                    _this.adapter_.updateCssVariable(rippleStrings[key], null);
                }
            });
        };
        MDCRippleFoundation.prototype.activate_ = function (evt) {
            var _this = this;
            if (this.adapter_.isSurfaceDisabled()) {
                return;
            }
            var activationState = this.activationState_;
            if (activationState.isActivated) {
                return;
            }
            // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
            var previousActivationEvent = this.previousActivationEvent_;
            var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
            if (isSameInteraction) {
                return;
            }
            activationState.isActivated = true;
            activationState.isProgrammatic = evt === undefined;
            activationState.activationEvent = evt;
            activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
            var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) { return _this.adapter_.containsEventTarget(target); });
            if (hasActivatedChild) {
                // Immediately reset activation state, while preserving logic that prevents touch follow-on events
                this.resetActivationState_();
                return;
            }
            if (evt !== undefined) {
                activatedTargets.push(evt.target);
                this.registerDeactivationHandlers_(evt);
            }
            activationState.wasElementMadeActive = this.checkElementMadeActive_(evt);
            if (activationState.wasElementMadeActive) {
                this.animateActivation_();
            }
            requestAnimationFrame(function () {
                // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
                activatedTargets = [];
                if (!activationState.wasElementMadeActive
                    && evt !== undefined
                    && (evt.key === ' ' || evt.keyCode === 32)) {
                    // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                    // active states inconsistently when they're called within event handling code:
                    // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                    // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                    // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                    // variable is set within a rAF callback for a submit button interaction (#2241).
                    activationState.wasElementMadeActive = _this.checkElementMadeActive_(evt);
                    if (activationState.wasElementMadeActive) {
                        _this.animateActivation_();
                    }
                }
                if (!activationState.wasElementMadeActive) {
                    // Reset activation state immediately if element was not made active.
                    _this.activationState_ = _this.defaultActivationState_();
                }
            });
        };
        MDCRippleFoundation.prototype.checkElementMadeActive_ = function (evt) {
            return (evt !== undefined && evt.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;
        };
        MDCRippleFoundation.prototype.animateActivation_ = function () {
            var _this = this;
            var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
            var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
            var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
            this.layoutInternal_();
            var translateStart = '';
            var translateEnd = '';
            if (!this.adapter_.isUnbounded()) {
                var _c = this.getFgTranslationCoordinates_(), startPoint = _c.startPoint, endPoint = _c.endPoint;
                translateStart = startPoint.x + "px, " + startPoint.y + "px";
                translateEnd = endPoint.x + "px, " + endPoint.y + "px";
            }
            this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
            this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
            // Cancel any ongoing activation/deactivation animations
            clearTimeout(this.activationTimer_);
            clearTimeout(this.fgDeactivationRemovalTimer_);
            this.rmBoundedActivationClasses_();
            this.adapter_.removeClass(FG_DEACTIVATION);
            // Force layout in order to re-trigger the animation.
            this.adapter_.computeBoundingRect();
            this.adapter_.addClass(FG_ACTIVATION);
            this.activationTimer_ = setTimeout(function () { return _this.activationTimerCallback_(); }, DEACTIVATION_TIMEOUT_MS);
        };
        MDCRippleFoundation.prototype.getFgTranslationCoordinates_ = function () {
            var _a = this.activationState_, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
            var startPoint;
            if (wasActivatedByPointer) {
                startPoint = getNormalizedEventCoords(activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
            }
            else {
                startPoint = {
                    x: this.frame_.width / 2,
                    y: this.frame_.height / 2,
                };
            }
            // Center the element around the start point.
            startPoint = {
                x: startPoint.x - (this.initialSize_ / 2),
                y: startPoint.y - (this.initialSize_ / 2),
            };
            var endPoint = {
                x: (this.frame_.width / 2) - (this.initialSize_ / 2),
                y: (this.frame_.height / 2) - (this.initialSize_ / 2),
            };
            return { startPoint: startPoint, endPoint: endPoint };
        };
        MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady_ = function () {
            var _this = this;
            // This method is called both when a pointing device is released, and when the activation animation ends.
            // The deactivation animation should only run after both of those occur.
            var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
            var _a = this.activationState_, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
            var activationHasEnded = hasDeactivationUXRun || !isActivated;
            if (activationHasEnded && this.activationAnimationHasEnded_) {
                this.rmBoundedActivationClasses_();
                this.adapter_.addClass(FG_DEACTIVATION);
                this.fgDeactivationRemovalTimer_ = setTimeout(function () {
                    _this.adapter_.removeClass(FG_DEACTIVATION);
                }, numbers.FG_DEACTIVATION_MS);
            }
        };
        MDCRippleFoundation.prototype.rmBoundedActivationClasses_ = function () {
            var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
            this.adapter_.removeClass(FG_ACTIVATION);
            this.activationAnimationHasEnded_ = false;
            this.adapter_.computeBoundingRect();
        };
        MDCRippleFoundation.prototype.resetActivationState_ = function () {
            var _this = this;
            this.previousActivationEvent_ = this.activationState_.activationEvent;
            this.activationState_ = this.defaultActivationState_();
            // Touch devices may fire additional events for the same interaction within a short time.
            // Store the previous event until it's safe to assume that subsequent events are for new interactions.
            setTimeout(function () { return _this.previousActivationEvent_ = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
        };
        MDCRippleFoundation.prototype.deactivate_ = function () {
            var _this = this;
            var activationState = this.activationState_;
            // This can happen in scenarios such as when you have a keyup event that blurs the element.
            if (!activationState.isActivated) {
                return;
            }
            var state = __assign({}, activationState);
            if (activationState.isProgrammatic) {
                requestAnimationFrame(function () { return _this.animateDeactivation_(state); });
                this.resetActivationState_();
            }
            else {
                this.deregisterDeactivationHandlers_();
                requestAnimationFrame(function () {
                    _this.activationState_.hasDeactivationUXRun = true;
                    _this.animateDeactivation_(state);
                    _this.resetActivationState_();
                });
            }
        };
        MDCRippleFoundation.prototype.animateDeactivation_ = function (_a) {
            var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
            if (wasActivatedByPointer || wasElementMadeActive) {
                this.runDeactivationUXLogicIfReady_();
            }
        };
        MDCRippleFoundation.prototype.layoutInternal_ = function () {
            var _this = this;
            this.frame_ = this.adapter_.computeBoundingRect();
            var maxDim = Math.max(this.frame_.height, this.frame_.width);
            // Surface diameter is treated differently for unbounded vs. bounded ripples.
            // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
            // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
            // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
            // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
            // `overflow: hidden`.
            var getBoundedRadius = function () {
                var hypotenuse = Math.sqrt(Math.pow(_this.frame_.width, 2) + Math.pow(_this.frame_.height, 2));
                return hypotenuse + MDCRippleFoundation.numbers.PADDING;
            };
            this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();
            // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
            var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
            // Unbounded ripple size should always be even number to equally center align.
            if (this.adapter_.isUnbounded() && initialSize % 2 !== 0) {
                this.initialSize_ = initialSize - 1;
            }
            else {
                this.initialSize_ = initialSize;
            }
            this.fgScale_ = "" + this.maxRadius_ / this.initialSize_;
            this.updateLayoutCssVars_();
        };
        MDCRippleFoundation.prototype.updateLayoutCssVars_ = function () {
            var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
            this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + "px");
            this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);
            if (this.adapter_.isUnbounded()) {
                this.unboundedCoords_ = {
                    left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),
                    top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),
                };
                this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + "px");
                this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + "px");
            }
        };
        return MDCRippleFoundation;
    }(MDCFoundation));

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style = css `@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}`;

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const supportsCssVariablesWin = supportsCssVariables(window);
    // NOTE: This is a workaround for
    // https://bugs.webkit.org/show_bug.cgi?id=173027. Since keyframes on
    // pseudo-elements (:after) are not supported in Shadow DOM, we put the keyframe
    // style into the <head> element.
    const isSafari = navigator.userAgent.match(/Safari/);
    let didApplyRippleStyle = false;
    const applyRippleStyle = () => {
        didApplyRippleStyle = true;
        const styleElement = document.createElement('style');
        const part = new NodePart({ templateFactory });
        part.appendInto(styleElement);
        part.setValue(style);
        part.commit();
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        document.head.appendChild(styleElement);
    };
    /**
     * Applied a ripple to the node specified by {surfaceNode}.
     * @param options {RippleNodeOptions}
     */
    const rippleNode = (options) => {
        if (isSafari && !didApplyRippleStyle) {
            applyRippleStyle();
        }
        // TODO(sorvell): This directive requires bringing css yourself. We probably
        // need to do this because of ShadyCSS, but on Safari, the keyframes styling
        // must be global. Perhaps this directive could fix that.
        const surfaceNode = options.surfaceNode;
        const interactionNode = options.interactionNode || surfaceNode;
        // only style interaction node if not in the same root
        if (interactionNode.getRootNode() !== surfaceNode.getRootNode()) {
            if (interactionNode.style.position === '') {
                interactionNode.style.position = 'relative';
            }
        }
        const adapter = {
            browserSupportsCssVars: () => supportsCssVariablesWin,
            isUnbounded: () => options.unbounded === undefined ? true : options.unbounded,
            isSurfaceActive: () => matches(interactionNode, ':active'),
            isSurfaceDisabled: () => Boolean(interactionNode.hasAttribute('disabled')),
            addClass: (className) => surfaceNode.classList.add(className),
            removeClass: (className) => surfaceNode.classList.remove(className),
            containsEventTarget: (target) => interactionNode.contains(target),
            registerInteractionHandler: (type, handler) => interactionNode.addEventListener(type, handler, applyPassive()),
            deregisterInteractionHandler: (type, handler) => interactionNode.removeEventListener(type, handler, applyPassive()),
            registerDocumentInteractionHandler: (evtType, handler) => 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            document.documentElement.addEventListener(evtType, handler, applyPassive()),
            deregisterDocumentInteractionHandler: (evtType, handler) => 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            document.documentElement.removeEventListener(evtType, handler, applyPassive()),
            registerResizeHandler: (handler) => window.addEventListener('resize', handler),
            deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),
            updateCssVariable: (varName, value) => surfaceNode.style.setProperty(varName, value),
            computeBoundingRect: () => surfaceNode.getBoundingClientRect(),
            getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),
        };
        const rippleFoundation = new MDCRippleFoundation(adapter);
        rippleFoundation.init();
        return rippleFoundation;
    };
    const rippleInteractionNodes = new WeakMap();
    /**
     * A directive that applies a Material ripple to a part node. The directive
     * should be applied to a PropertyPart.
     * @param options {RippleOptions}
     */
    const ripple = directive((options = {}) => (part) => {
        const surfaceNode = part.committer.element;
        const interactionNode = options.interactionNode || surfaceNode;
        let rippleFoundation = part.value;
        // if the interaction node changes, destroy and invalidate the foundation.
        const existingInteractionNode = rippleInteractionNodes.get(rippleFoundation);
        if (existingInteractionNode !== undefined &&
            existingInteractionNode !== interactionNode) {
            rippleFoundation.destroy();
            rippleFoundation = noChange;
        }
        // make the ripple, if needed
        if (rippleFoundation === noChange) {
            rippleFoundation =
                rippleNode(Object.assign({}, options, { surfaceNode }));
            rippleInteractionNodes.set(rippleFoundation, interactionNode);
            part.setValue(rippleFoundation);
            // otherwise update settings as needed.
        }
        else {
            if (options.unbounded !== undefined) {
                rippleFoundation
                    .setUnbounded(options.unbounded);
            }
            if (options.disabled !== undefined) {
                rippleFoundation
                    .setUnbounded(options.disabled);
            }
        }
        if (options.active === true) {
            rippleFoundation.activate();
        }
        else if (options.active === false) {
            rippleFoundation.deactivate();
        }
    });

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Stores the ClassInfo object applied to a given AttributePart.
     * Used to unset existing values when a new ClassInfo object is applied.
     */
    const classMapCache = new WeakMap();
    /**
     * A directive that applies CSS classes. This must be used in the `class`
     * attribute and must be the only part used in the attribute. It takes each
     * property in the `classInfo` argument and adds the property name to the
     * element's `classList` if the property value is truthy; if the property value
     * is falsey, the property name is removed from the element's `classList`. For
     * example
     * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.
     * @param classInfo {ClassInfo}
     */
    const classMap = directive((classInfo) => (part) => {
        if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||
            part.committer.name !== 'class' || part.committer.parts.length > 1) {
            throw new Error('The `classMap` directive must be used in the `class` attribute ' +
                'and must be the only part in the attribute.');
        }
        const { committer } = part;
        const { element } = committer;
        // handle static classes
        if (!classMapCache.has(part)) {
            element.className = committer.strings.join(' ');
        }
        const { classList } = element;
        // remove old classes that no longer apply
        const oldInfo = classMapCache.get(part);
        for (const name in oldInfo) {
            if (!(name in classInfo)) {
                classList.remove(name);
            }
        }
        // add new classes
        for (const name in classInfo) {
            const value = classInfo[name];
            if (!oldInfo || value !== oldInfo[name]) {
                // We explicitly want a loose truthy check here because
                // it seems more convenient that '' and 0 are skipped.
                const method = value ? 'add' : 'remove';
                classList[method](name);
            }
        }
        classMapCache.set(part, classInfo);
    });

    class ButtonBase extends LitElement {
        constructor() {
            super(...arguments);
            this.raised = false;
            this.unelevated = false;
            this.outlined = false;
            this.dense = false;
            this.disabled = false;
            this.trailingIcon = false;
            this.icon = '';
            this.label = '';
        }
        createRenderRoot() {
            return this.attachShadow({ mode: 'open', delegatesFocus: true });
        }
        focus() {
            const buttonElement = this.buttonElement;
            if (buttonElement) {
                const ripple = buttonElement.ripple;
                if (ripple) {
                    ripple.handleFocus();
                }
                buttonElement.focus();
            }
        }
        blur() {
            const buttonElement = this.buttonElement;
            if (buttonElement) {
                const ripple = buttonElement.ripple;
                if (ripple) {
                    ripple.handleBlur();
                }
                buttonElement.blur();
            }
        }
        render() {
            const classes = {
                'mdc-button--raised': this.raised,
                'mdc-button--unelevated': this.unelevated,
                'mdc-button--outlined': this.outlined,
                'mdc-button--dense': this.dense,
            };
            const mdcButtonIcon = html `<span class="material-icons mdc-button__icon">${this.icon}</span>`;
            const buttonRipple = ripple({ unbounded: false });
            return html `
      <button
          id="button"
          .ripple="${buttonRipple}"
          class="mdc-button ${classMap(classes)}"
          ?disabled="${this.disabled}"
          aria-label="${this.label || this.icon}">
        <div class="mdc-button__ripple"></div>
        ${this.icon && !this.trailingIcon ? mdcButtonIcon : ''}
        <span class="mdc-button__label">${this.label}</span>
        ${this.icon && this.trailingIcon ? mdcButtonIcon : ''}
        <slot></slot>
      </button>`;
        }
    }
    __decorate([
        property({ type: Boolean })
    ], ButtonBase.prototype, "raised", void 0);
    __decorate([
        property({ type: Boolean })
    ], ButtonBase.prototype, "unelevated", void 0);
    __decorate([
        property({ type: Boolean })
    ], ButtonBase.prototype, "outlined", void 0);
    __decorate([
        property({ type: Boolean })
    ], ButtonBase.prototype, "dense", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], ButtonBase.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean })
    ], ButtonBase.prototype, "trailingIcon", void 0);
    __decorate([
        property()
    ], ButtonBase.prototype, "icon", void 0);
    __decorate([
        property()
    ], ButtonBase.prototype, "label", void 0);
    __decorate([
        query('#button')
    ], ButtonBase.prototype, "buttonElement", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$1 = css `.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;opacity:0;pointer-events:none;transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff}.mdc-button{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:2.25rem;font-weight:500;letter-spacing:.0892857143em;text-decoration:none;text-transform:uppercase;padding:0 8px 0 8px;position:relative;display:inline-flex;align-items:center;justify-content:center;box-sizing:border-box;min-width:64px;border:none;outline:none;line-height:inherit;user-select:none;-webkit-appearance:none;overflow:visible;vertical-align:middle;border-radius:4px}.mdc-button .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-button::-moz-focus-inner{padding:0;border:0}.mdc-button:active{outline:none}.mdc-button:hover{cursor:pointer}.mdc-button:disabled{cursor:default;pointer-events:none}.mdc-button .mdc-button__ripple{border-radius:4px}.mdc-button:not(:disabled){background-color:transparent}.mdc-button:disabled{background-color:transparent}.mdc-button .mdc-button__icon{margin-left:0;margin-right:8px;display:inline-block;width:18px;height:18px;font-size:18px;vertical-align:top}[dir=rtl] .mdc-button .mdc-button__icon,.mdc-button .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:0}.mdc-button .mdc-button__touch{position:absolute;top:50%;right:0;height:48px;left:0;transform:translateY(-50%)}.mdc-button:not(:disabled){color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}.mdc-button:disabled{color:rgba(0,0,0,.38)}.mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:0}[dir=rtl] .mdc-button__label+.mdc-button__icon,.mdc-button__label+.mdc-button__icon[dir=rtl]{margin-left:0;margin-right:8px}svg.mdc-button__icon{fill:currentColor}.mdc-button--raised .mdc-button__icon,.mdc-button--unelevated .mdc-button__icon,.mdc-button--outlined .mdc-button__icon{margin-left:-4px;margin-right:8px}[dir=rtl] .mdc-button--raised .mdc-button__icon,.mdc-button--raised .mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button--unelevated .mdc-button__icon,.mdc-button--unelevated .mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button--outlined .mdc-button__icon,.mdc-button--outlined .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:-4px}.mdc-button--raised .mdc-button__label+.mdc-button__icon,.mdc-button--unelevated .mdc-button__label+.mdc-button__icon,.mdc-button--outlined .mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:-4px}[dir=rtl] .mdc-button--raised .mdc-button__label+.mdc-button__icon,.mdc-button--raised .mdc-button__label+.mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button--unelevated .mdc-button__label+.mdc-button__icon,.mdc-button--unelevated .mdc-button__label+.mdc-button__icon[dir=rtl],[dir=rtl] .mdc-button--outlined .mdc-button__label+.mdc-button__icon,.mdc-button--outlined .mdc-button__label+.mdc-button__icon[dir=rtl]{margin-left:-4px;margin-right:8px}.mdc-button--raised,.mdc-button--unelevated{padding:0 16px 0 16px}.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-button--raised:not(:disabled),.mdc-button--unelevated:not(:disabled){color:#fff;color:var(--mdc-theme-on-primary, #fff)}.mdc-button--raised:disabled,.mdc-button--unelevated:disabled{background-color:rgba(0,0,0,.12)}.mdc-button--raised:disabled,.mdc-button--unelevated:disabled{color:rgba(0,0,0,.38)}.mdc-button--raised{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 1px 5px 0px rgba(0,0,0,.12);transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-button--raised:hover,.mdc-button--raised:focus{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12)}.mdc-button--raised:active{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}.mdc-button--raised:disabled{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2),0px 0px 0px 0px rgba(0, 0, 0, 0.14),0px 0px 0px 0px rgba(0,0,0,.12)}.mdc-button--outlined{padding:0 15px 0 15px;border-width:1px;border-style:solid}.mdc-button--outlined .mdc-button__ripple{top:-1px;left:-1px;border:1px solid transparent}.mdc-button--outlined:not(:disabled){border-color:rgba(0,0,0,.12)}.mdc-button--outlined:disabled{border-color:rgba(0,0,0,.12)}.mdc-button--touch{margin-top:6px;margin-bottom:6px}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-button{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-button .mdc-button__ripple::before,.mdc-button .mdc-button__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-button .mdc-button__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-button.mdc-ripple-upgraded .mdc-button__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-button.mdc-ripple-upgraded .mdc-button__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-button.mdc-ripple-upgraded--unbounded .mdc-button__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-button.mdc-ripple-upgraded--foreground-activation .mdc-button__ripple::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-button.mdc-ripple-upgraded--foreground-deactivation .mdc-button__ripple::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-button .mdc-button__ripple::before,.mdc-button .mdc-button__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-button.mdc-ripple-upgraded .mdc-button__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-button .mdc-button__ripple::before,.mdc-button .mdc-button__ripple::after{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-button:hover .mdc-button__ripple::before{opacity:.04}.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before{transition-duration:75ms;opacity:.12}.mdc-button:not(.mdc-ripple-upgraded) .mdc-button__ripple::after{transition:opacity 150ms linear}.mdc-button:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after{transition-duration:75ms;opacity:.12}.mdc-button.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-button .mdc-button__ripple{position:absolute;box-sizing:content-box;width:100%;height:100%;overflow:hidden}.mdc-button:not(.mdc-button--outlined) .mdc-button__ripple{top:0;left:0}.mdc-button--raised .mdc-button__ripple::before,.mdc-button--raised .mdc-button__ripple::after,.mdc-button--unelevated .mdc-button__ripple::before,.mdc-button--unelevated .mdc-button__ripple::after{background-color:#fff;background-color:var(--mdc-theme-on-primary, #fff)}.mdc-button--raised:hover .mdc-button__ripple::before,.mdc-button--unelevated:hover .mdc-button__ripple::before{opacity:.08}.mdc-button--raised.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button--raised:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before,.mdc-button--unelevated.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button--unelevated:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before{transition-duration:75ms;opacity:.24}.mdc-button--raised:not(.mdc-ripple-upgraded) .mdc-button__ripple::after,.mdc-button--unelevated:not(.mdc-ripple-upgraded) .mdc-button__ripple::after{transition:opacity 150ms linear}.mdc-button--raised:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after,.mdc-button--unelevated:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after{transition-duration:75ms;opacity:.24}.mdc-button--raised.mdc-ripple-upgraded,.mdc-button--unelevated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-button{height:36px}.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}:host{display:inline-flex;outline:none;vertical-align:top}:host([disabled]){pointer-events:none}.mdc-button{flex:auto;overflow:hidden;text-transform:var(--mdc-button-text-transform, uppercase);letter-spacing:var(--mdc-button-letter-spacing, 0.0892857143em);padding:0 var(--mdc-button-horizontal-padding, 8px) 0 var(--mdc-button-horizontal-padding, 8px)}.mdc-button.mdc-button--raised,.mdc-button.mdc-button--unelevated{padding:0 var(--mdc-button-horizontal-padding, 16px) 0 var(--mdc-button-horizontal-padding, 16px)}.mdc-button.mdc-button--outlined{padding:0 calc(var(--mdc-button-horizontal-padding, 16px) - var(--mdc-button-outline-width, 1px)) 0 calc(var(--mdc-button-horizontal-padding, 16px) - var(--mdc-button-outline-width, 1px));border-width:var(--mdc-button-outline-width, 1px);border-color:var(--mdc-button-outline-color, var(--mdc-theme-primary, #6200ee))}.mdc-button .mdc-button__ripple{border-radius:0}:host([disabled]) .mdc-button.mdc-button--raised,:host([disabled]) .mdc-button.mdc-button--unelevated{background-color:var(--mdc-button-disabled-fill-color, rgba(0, 0, 0, 0.12));color:var(--mdc-button-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-button:not(.mdc-button--raised):not(.mdc-button--unelevated){color:var(--mdc-button-disabled-ink-color, rgba(0, 0, 0, 0.38))}:host([disabled]) .mdc-button.mdc-button--outlined{border-color:var(--mdc-button-disabled-ink-color, rgba(0, 0, 0, 0.38));border-color:var(--mdc-button-disabled-outline-color, var(--mdc-button-disabled-ink-color, rgba(0, 0, 0, 0.38)))}`;

    let Button = class Button extends ButtonBase {
    };
    Button.styles = style$1;
    Button = __decorate([
        customElement('mwc-button')
    ], Button);

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$1 = {
        ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
        ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
        ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
        ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',
        ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
        ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
        BACKGROUND: 'mdc-checkbox__background',
        CHECKED: 'mdc-checkbox--checked',
        CHECKMARK: 'mdc-checkbox__checkmark',
        CHECKMARK_PATH: 'mdc-checkbox__checkmark-path',
        DISABLED: 'mdc-checkbox--disabled',
        INDETERMINATE: 'mdc-checkbox--indeterminate',
        MIXEDMARK: 'mdc-checkbox__mixedmark',
        NATIVE_CONTROL: 'mdc-checkbox__native-control',
        ROOT: 'mdc-checkbox',
        SELECTED: 'mdc-checkbox--selected',
        UPGRADED: 'mdc-checkbox--upgraded',
    };
    var strings$1 = {
        ARIA_CHECKED_ATTR: 'aria-checked',
        ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',
        NATIVE_CONTROL_SELECTOR: '.mdc-checkbox__native-control',
        TRANSITION_STATE_CHECKED: 'checked',
        TRANSITION_STATE_INDETERMINATE: 'indeterminate',
        TRANSITION_STATE_INIT: 'init',
        TRANSITION_STATE_UNCHECKED: 'unchecked',
    };
    var numbers$1 = {
        ANIM_END_LATCH_MS: 250,
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCCheckboxFoundation = /** @class */ (function (_super) {
        __extends(MDCCheckboxFoundation, _super);
        function MDCCheckboxFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCCheckboxFoundation.defaultAdapter, adapter)) || this;
            _this.currentCheckState_ = strings$1.TRANSITION_STATE_INIT;
            _this.currentAnimationClass_ = '';
            _this.animEndLatchTimer_ = 0;
            _this.enableAnimationEndHandler_ = false;
            return _this;
        }
        Object.defineProperty(MDCCheckboxFoundation, "cssClasses", {
            get: function () {
                return cssClasses$1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCCheckboxFoundation, "strings", {
            get: function () {
                return strings$1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCCheckboxFoundation, "numbers", {
            get: function () {
                return numbers$1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCCheckboxFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    forceLayout: function () { return undefined; },
                    hasNativeControl: function () { return false; },
                    isAttachedToDOM: function () { return false; },
                    isChecked: function () { return false; },
                    isIndeterminate: function () { return false; },
                    removeClass: function () { return undefined; },
                    removeNativeControlAttr: function () { return undefined; },
                    setNativeControlAttr: function () { return undefined; },
                    setNativeControlDisabled: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCCheckboxFoundation.prototype.init = function () {
            this.currentCheckState_ = this.determineCheckState_();
            this.updateAriaChecked_();
            this.adapter_.addClass(cssClasses$1.UPGRADED);
        };
        MDCCheckboxFoundation.prototype.destroy = function () {
            clearTimeout(this.animEndLatchTimer_);
        };
        MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {
            this.adapter_.setNativeControlDisabled(disabled);
            if (disabled) {
                this.adapter_.addClass(cssClasses$1.DISABLED);
            }
            else {
                this.adapter_.removeClass(cssClasses$1.DISABLED);
            }
        };
        /**
         * Handles the animationend event for the checkbox
         */
        MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {
            var _this = this;
            if (!this.enableAnimationEndHandler_) {
                return;
            }
            clearTimeout(this.animEndLatchTimer_);
            this.animEndLatchTimer_ = setTimeout(function () {
                _this.adapter_.removeClass(_this.currentAnimationClass_);
                _this.enableAnimationEndHandler_ = false;
            }, numbers$1.ANIM_END_LATCH_MS);
        };
        /**
         * Handles the change event for the checkbox
         */
        MDCCheckboxFoundation.prototype.handleChange = function () {
            this.transitionCheckState_();
        };
        MDCCheckboxFoundation.prototype.transitionCheckState_ = function () {
            if (!this.adapter_.hasNativeControl()) {
                return;
            }
            var oldState = this.currentCheckState_;
            var newState = this.determineCheckState_();
            if (oldState === newState) {
                return;
            }
            this.updateAriaChecked_();
            var TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;
            var SELECTED = cssClasses$1.SELECTED;
            if (newState === TRANSITION_STATE_UNCHECKED) {
                this.adapter_.removeClass(SELECTED);
            }
            else {
                this.adapter_.addClass(SELECTED);
            }
            // Check to ensure that there isn't a previously existing animation class, in case for example
            // the user interacted with the checkbox before the animation was finished.
            if (this.currentAnimationClass_.length > 0) {
                clearTimeout(this.animEndLatchTimer_);
                this.adapter_.forceLayout();
                this.adapter_.removeClass(this.currentAnimationClass_);
            }
            this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);
            this.currentCheckState_ = newState;
            // Check for parentNode so that animations are only run when the element is attached
            // to the DOM.
            if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {
                this.adapter_.addClass(this.currentAnimationClass_);
                this.enableAnimationEndHandler_ = true;
            }
        };
        MDCCheckboxFoundation.prototype.determineCheckState_ = function () {
            var TRANSITION_STATE_INDETERMINATE = strings$1.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = strings$1.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;
            if (this.adapter_.isIndeterminate()) {
                return TRANSITION_STATE_INDETERMINATE;
            }
            return this.adapter_.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
        };
        MDCCheckboxFoundation.prototype.getTransitionAnimationClass_ = function (oldState, newState) {
            var TRANSITION_STATE_INIT = strings$1.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = strings$1.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;
            var _a = MDCCheckboxFoundation.cssClasses, ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;
            switch (oldState) {
                case TRANSITION_STATE_INIT:
                    if (newState === TRANSITION_STATE_UNCHECKED) {
                        return '';
                    }
                    return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
                case TRANSITION_STATE_UNCHECKED:
                    return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
                case TRANSITION_STATE_CHECKED:
                    return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
                default: // TRANSITION_STATE_INDETERMINATE
                    return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
            }
        };
        MDCCheckboxFoundation.prototype.updateAriaChecked_ = function () {
            // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.
            if (this.adapter_.isIndeterminate()) {
                this.adapter_.setNativeControlAttr(strings$1.ARIA_CHECKED_ATTR, strings$1.ARIA_CHECKED_INDETERMINATE_VALUE);
            }
            else {
                // The on/off state does not need to keep track of aria-checked, since
                // the screenreader uses the checked property on the checkbox element.
                this.adapter_.removeNativeControlAttr(strings$1.ARIA_CHECKED_ATTR);
            }
        };
        return MDCCheckboxFoundation;
    }(MDCFoundation));

    const observer = (observer) => 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (proto, propName) => {
        // if we haven't wrapped `updated` in this class, do so
        if (!proto.constructor._observers) {
            proto.constructor._observers = new Map();
            const userUpdated = proto.updated;
            proto.updated = function (changedProperties) {
                userUpdated.call(this, changedProperties);
                changedProperties.forEach((v, k) => {
                    const observer = this.constructor._observers.get(k);
                    if (observer !== undefined) {
                        observer.call(this, this[k], v);
                    }
                });
            };
            // clone any existing observers (superclasses)
        }
        else if (!proto.constructor.hasOwnProperty('_observers')) {
            const observers = proto.constructor._observers;
            proto.constructor._observers = new Map();
            observers.forEach(
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (v, k) => proto.constructor._observers.set(k, v));
        }
        // set this method
        proto.constructor._observers.set(propName, observer);
    };

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    function findAssignedElement(slot, selector) {
        for (const node of slot.assignedNodes({ flatten: true })) {
            if (node.nodeType === Node.ELEMENT_NODE) {
                const el = node;
                if (matches(el, selector)) {
                    return el;
                }
            }
        }
        return null;
    }
    function addHasRemoveClass(element) {
        return {
            addClass: (className) => {
                element.classList.add(className);
            },
            removeClass: (className) => {
                element.classList.remove(className);
            },
            hasClass: (className) => element.classList.contains(className),
        };
    }
    let supportsPassive = false;
    const fn = () => { };
    const optionsBlock = {
        get passive() {
            supportsPassive = true;
            return false;
        }
    };
    document.addEventListener('x', fn, optionsBlock);
    document.removeEventListener('x', fn);
    /**
     * Do event listeners suport the `passive` option?
     */
    const supportsPassiveEventListener = supportsPassive;

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    class BaseElement extends LitElement {
        /**
         * Create and attach the MDC Foundation to the instance
         */
        createFoundation() {
            if (this.mdcFoundation !== undefined) {
                this.mdcFoundation.destroy();
            }
            this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter());
            this.mdcFoundation.init();
        }
        firstUpdated() {
            this.createFoundation();
        }
    }

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    class FormElement extends BaseElement {
        createRenderRoot() {
            return this.attachShadow({ mode: 'open', delegatesFocus: true });
        }
        click() {
            if (this.formElement) {
                this.formElement.focus();
                this.formElement.click();
            }
        }
        setAriaLabel(label) {
            if (this.formElement) {
                this.formElement.setAttribute('aria-label', label);
            }
        }
        firstUpdated() {
            super.firstUpdated();
            this.mdcRoot.addEventListener('change', (e) => {
                this.dispatchEvent(new Event('change', e));
            });
        }
    }

    class CheckboxBase extends FormElement {
        constructor() {
            super(...arguments);
            this.checked = false;
            this.indeterminate = false;
            this.disabled = false;
            this.value = '';
            this.mdcFoundationClass = MDCCheckboxFoundation;
        }
        get ripple() {
            return this.mdcRoot.ripple;
        }
        createAdapter() {
            return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { forceLayout: () => {
                    this.mdcRoot.offsetWidth;
                }, isAttachedToDOM: () => this.isConnected, isIndeterminate: () => this.indeterminate, isChecked: () => this.checked, hasNativeControl: () => Boolean(this.formElement), setNativeControlDisabled: (disabled) => {
                    this.formElement.disabled = disabled;
                }, setNativeControlAttr: (attr, value) => {
                    this.formElement.setAttribute(attr, value);
                }, removeNativeControlAttr: (attr) => {
                    this.formElement.removeAttribute(attr);
                } });
        }
        render() {
            return html `
      <div class="mdc-checkbox"
           @animationend="${this._animationEndHandler}">
        <input type="checkbox"
              class="mdc-checkbox__native-control"
              @change="${this._changeHandler}"
              .indeterminate="${this.indeterminate}"
              .checked="${this.checked}"
              .value="${this.value}">
        <div class="mdc-checkbox__background">
          <svg class="mdc-checkbox__checkmark"
              viewBox="0 0 24 24">
            <path class="mdc-checkbox__checkmark-path"
                  fill="none"
                  d="M1.73,12.91 8.1,19.28 22.79,4.59"/>
          </svg>
          <div class="mdc-checkbox__mixedmark"></div>
        </div>
        <div class="mdc-checkbox__ripple"></div>
      </div>`;
        }
        firstUpdated() {
            super.firstUpdated();
            this.mdcRoot.ripple = rippleNode({ surfaceNode: this.mdcRoot, interactionNode: this.formElement });
        }
        _changeHandler() {
            this.checked = this.formElement.checked;
            this.indeterminate = this.formElement.indeterminate;
            this.mdcFoundation.handleChange();
        }
        _animationEndHandler() {
            this.mdcFoundation.handleAnimationEnd();
        }
    }
    __decorate([
        query('.mdc-checkbox')
    ], CheckboxBase.prototype, "mdcRoot", void 0);
    __decorate([
        query('input')
    ], CheckboxBase.prototype, "formElement", void 0);
    __decorate([
        property({ type: Boolean })
    ], CheckboxBase.prototype, "checked", void 0);
    __decorate([
        property({ type: Boolean })
    ], CheckboxBase.prototype, "indeterminate", void 0);
    __decorate([
        property({ type: Boolean }),
        observer(function (value) {
            this.mdcFoundation.setDisabled(value);
        })
    ], CheckboxBase.prototype, "disabled", void 0);
    __decorate([
        property({ type: String })
    ], CheckboxBase.prototype, "value", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$2 = css `.mdc-touch-target-wrapper{display:inline}@keyframes mdc-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:29.7833385}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 1)}100%{stroke-dashoffset:0}}@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mdc-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);opacity:1;stroke-dashoffset:0}to{opacity:0;stroke-dashoffset:-29.7833385}}@keyframes mdc-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(45deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(45deg);opacity:0}to{transform:rotate(360deg);opacity:1}}@keyframes mdc-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:mdc-animation-deceleration-curve-timing-function;transform:rotate(-45deg);opacity:0}to{transform:rotate(0deg);opacity:1}}@keyframes mdc-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);transform:rotate(0deg);opacity:1}to{transform:rotate(315deg);opacity:0}}@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;transform:scaleX(1);opacity:1}32.8%,100%{transform:scaleX(0);opacity:0}}.mdc-checkbox{display:inline-block;position:relative;flex:0 0 18px;box-sizing:content-box;width:18px;height:18px;line-height:0;white-space:nowrap;cursor:pointer;vertical-align:bottom;padding:11px}.mdc-checkbox .mdc-checkbox__native-control:checked~.mdc-checkbox__background::before,.mdc-checkbox .mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background::before{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-checkbox.mdc-checkbox--selected .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-checkbox--selected .mdc-checkbox__ripple::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-checkbox.mdc-checkbox--selected:hover .mdc-checkbox__ripple::before{opacity:.04}.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before{transition-duration:75ms;opacity:.12}.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after{transition:opacity 150ms linear}.mdc-checkbox.mdc-checkbox--selected:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after{transition-duration:75ms;opacity:.12}.mdc-checkbox.mdc-checkbox--selected.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-ripple-upgraded--background-focused.mdc-checkbox--selected .mdc-checkbox__ripple::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-checkbox .mdc-checkbox__background{top:11px;left:11px}.mdc-checkbox .mdc-checkbox__background::before{top:-13px;left:-13px;width:40px;height:40px}.mdc-checkbox .mdc-checkbox__native-control{top:0px;right:0px;left:0px;width:40px;height:40px}.mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:rgba(0,0,0,.54);background-color:transparent}.mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}@keyframes mdc-checkbox-fade-in-background-ur8eds6{0%{border-color:rgba(0,0,0,.54);background-color:transparent}50%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}}@keyframes mdc-checkbox-fade-out-background-ur8eds6{0%,80%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}100%{border-color:rgba(0,0,0,.54);background-color:transparent}}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-ur8eds6}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-ur8eds6}.mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:rgba(0,0,0,.38);background-color:transparent}.mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background{border-color:transparent;background-color:rgba(0,0,0,.38)}.mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:#fff}.mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:#fff}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:#fff}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:#fff}@media screen and (-ms-high-contrast: active){.mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:GrayText;background-color:transparent}.mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background{border-color:GrayText;background-color:transparent}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:GrayText}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:GrayText}.mdc-checkbox__mixedmark{margin:0 1px}}.mdc-checkbox--disabled{cursor:default;pointer-events:none}.mdc-checkbox__background{display:inline-flex;position:absolute;align-items:center;justify-content:center;box-sizing:border-box;width:18px;height:18px;border:2px solid currentColor;border-radius:2px;background-color:transparent;pointer-events:none;will-change:background-color,border-color;transition:background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__background .mdc-checkbox__background::before{background-color:#000;background-color:var(--mdc-theme-on-surface, #000)}.mdc-checkbox__checkmark{position:absolute;top:0;right:0;bottom:0;left:0;width:100%;opacity:0;transition:opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__checkmark{opacity:1}.mdc-checkbox__checkmark-path{transition:stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);stroke:currentColor;stroke-width:3.12px;stroke-dashoffset:29.7833385;stroke-dasharray:29.7833385}.mdc-checkbox__mixedmark{width:100%;height:0;transform:scaleX(0) rotate(0deg);border-width:1px;border-style:solid;opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox--upgraded .mdc-checkbox__background,.mdc-checkbox--upgraded .mdc-checkbox__checkmark,.mdc-checkbox--upgraded .mdc-checkbox__checkmark-path,.mdc-checkbox--upgraded .mdc-checkbox__mixedmark{transition:none !important}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background,.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{animation-duration:180ms;animation-timing-function:linear}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-unchecked-checked-checkmark-path 180ms linear 0s;transition:none}.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-unchecked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark-path{animation:mdc-checkbox-checked-unchecked-checkmark-path 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark{animation:mdc-checkbox-checked-indeterminate-checkmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark{animation:mdc-checkbox-checked-indeterminate-mixedmark 90ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark{animation:mdc-checkbox-indeterminate-checked-checkmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-checked-mixedmark 500ms linear 0s;transition:none}.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark{animation:mdc-checkbox-indeterminate-unchecked-mixedmark 300ms linear 0s;transition:none}.mdc-checkbox__native-control:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background{transition:border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1),background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark-path,.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark-path{stroke-dashoffset:0}.mdc-checkbox__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:"";will-change:opacity,transform;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:focus~.mdc-checkbox__background::before{transform:scale(1);opacity:.12;transition:opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-checkbox__native-control{position:absolute;margin:0;padding:0;opacity:0;cursor:inherit}.mdc-checkbox__native-control:disabled{cursor:default;pointer-events:none}.mdc-checkbox--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-checkbox--touch .mdc-checkbox__native-control{top:-4px;right:-4px;left:-4px;width:48px;height:48px}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__checkmark{transition:opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);opacity:1}.mdc-checkbox__native-control:checked~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(-45deg)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__checkmark{transform:rotate(45deg);opacity:0;transition:opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-checkbox__native-control:indeterminate~.mdc-checkbox__background .mdc-checkbox__mixedmark{transform:scaleX(1) rotate(0deg);opacity:1}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-checkbox{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-checkbox .mdc-checkbox__ripple::before,.mdc-checkbox .mdc-checkbox__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-checkbox .mdc-checkbox__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-checkbox.mdc-ripple-upgraded--unbounded .mdc-checkbox__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-checkbox.mdc-ripple-upgraded--foreground-activation .mdc-checkbox__ripple::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation .mdc-checkbox__ripple::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-checkbox .mdc-checkbox__ripple::before,.mdc-checkbox .mdc-checkbox__ripple::after{background-color:#000;background-color:var(--mdc-theme-on-surface, #000)}.mdc-checkbox:hover .mdc-checkbox__ripple::before{opacity:.04}.mdc-checkbox.mdc-ripple-upgraded--background-focused .mdc-checkbox__ripple::before,.mdc-checkbox:not(.mdc-ripple-upgraded):focus .mdc-checkbox__ripple::before{transition-duration:75ms;opacity:.12}.mdc-checkbox:not(.mdc-ripple-upgraded) .mdc-checkbox__ripple::after{transition:opacity 150ms linear}.mdc-checkbox:not(.mdc-ripple-upgraded):active .mdc-checkbox__ripple::after{transition-duration:75ms;opacity:.12}.mdc-checkbox.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-checkbox .mdc-checkbox__ripple::before,.mdc-checkbox .mdc-checkbox__ripple::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::before,.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-checkbox.mdc-ripple-upgraded .mdc-checkbox__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-checkbox__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-ripple-upgraded--background-focused .mdc-checkbox__background::before{content:none}:host{outline:none;display:inline-block}.mdc-checkbox .mdc-checkbox__native-control:focus~.mdc-checkbox__background::before{background-color:var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54))}.mdc-checkbox__native-control[disabled]:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:var(--mdc-checkbox-disabled-color, rgba(0, 0, 0, 0.38));background-color:transparent}.mdc-checkbox__native-control[disabled]:checked~.mdc-checkbox__background,.mdc-checkbox__native-control[disabled]:indeterminate~.mdc-checkbox__background{border-color:transparent;background-color:var(--mdc-checkbox-disabled-color, rgba(0, 0, 0, 0.38))}.mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate)~.mdc-checkbox__background{border-color:var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));background-color:transparent}.mdc-checkbox__native-control:enabled:checked~.mdc-checkbox__background,.mdc-checkbox__native-control:enabled:indeterminate~.mdc-checkbox__background{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}@keyframes mdc-checkbox-fade-in-background-ur8edsq{0%{border-color:var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));background-color:transparent}50%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}}@keyframes mdc-checkbox-fade-out-background-ur8edsq{0%,80%{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786);background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}100%{border-color:var(--mdc-checkbox-unchecked-color, rgba(0, 0, 0, 0.54));background-color:transparent}}.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-in-background-ur8edsq}.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background,.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__native-control:enabled~.mdc-checkbox__background{animation-name:mdc-checkbox-fade-out-background-ur8edsq}.mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:var(--mdc-checkbox-mark-color, #fff)}.mdc-checkbox__native-control:enabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:var(--mdc-checkbox-mark-color, #fff)}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__checkmark{color:var(--mdc-checkbox-mark-color, #fff)}.mdc-checkbox__native-control:disabled~.mdc-checkbox__background .mdc-checkbox__mixedmark{border-color:var(--mdc-checkbox-mark-color, #fff)}`;

    let Checkbox = class Checkbox extends CheckboxBase {
    };
    Checkbox.styles = style$2;
    Checkbox = __decorate([
        customElement('mwc-checkbox')
    ], Checkbox);

    /**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (() => {
        var _a, _b, _c;
        /* Symbols for private properties */
        const _blockingElements = Symbol();
        const _alreadyInertElements = Symbol();
        const _topElParents = Symbol();
        const _siblingsToRestore = Symbol();
        const _parentMO = Symbol();
        /* Symbols for private static methods */
        const _topChanged = Symbol();
        const _swapInertedSibling = Symbol();
        const _inertSiblings = Symbol();
        const _restoreInertedSiblings = Symbol();
        const _getParents = Symbol();
        const _getDistributedChildren = Symbol();
        const _isInertable = Symbol();
        const _handleMutations = Symbol();
        class BlockingElementsImpl {
            constructor() {
                /**
                 * The blocking elements.
                 */
                this[_a] = [];
                /**
                 * Used to keep track of the parents of the top element, from the element
                 * itself up to body. When top changes, the old top might have been removed
                 * from the document, so we need to memoize the inerted parents' siblings
                 * in order to restore their inerteness when top changes.
                 */
                this[_b] = [];
                /**
                 * Elements that are already inert before the first blocking element is
                 * pushed.
                 */
                this[_c] = new Set();
            }
            destructor() {
                // Restore original inertness.
                this[_restoreInertedSiblings](this[_topElParents]);
                // Note we don't want to make these properties nullable on the class,
                // since then we'd need non-null casts in many places. Calling a method on
                // a BlockingElements instance after calling destructor will result in an
                // exception.
                const nullable = this;
                nullable[_blockingElements] = null;
                nullable[_topElParents] = null;
                nullable[_alreadyInertElements] = null;
            }
            get top() {
                const elems = this[_blockingElements];
                return elems[elems.length - 1] || null;
            }
            push(element) {
                if (!element || element === this.top) {
                    return;
                }
                // Remove it from the stack, we'll bring it to the top.
                this.remove(element);
                this[_topChanged](element);
                this[_blockingElements].push(element);
            }
            remove(element) {
                const i = this[_blockingElements].indexOf(element);
                if (i === -1) {
                    return false;
                }
                this[_blockingElements].splice(i, 1);
                // Top changed only if the removed element was the top element.
                if (i === this[_blockingElements].length) {
                    this[_topChanged](this.top);
                }
                return true;
            }
            pop() {
                const top = this.top;
                top && this.remove(top);
                return top;
            }
            has(element) {
                return this[_blockingElements].indexOf(element) !== -1;
            }
            /**
             * Sets `inert` to all document elements except the new top element, its
             * parents, and its distributed content.
             */
            [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
                const toKeepInert = this[_alreadyInertElements];
                const oldParents = this[_topElParents];
                // No new top, reset old top if any.
                if (!newTop) {
                    this[_restoreInertedSiblings](oldParents);
                    toKeepInert.clear();
                    this[_topElParents] = [];
                    return;
                }
                const newParents = this[_getParents](newTop);
                // New top is not contained in the main document!
                if (newParents[newParents.length - 1].parentNode !== document.body) {
                    throw Error('Non-connected element cannot be a blocking element');
                }
                // Cast here because we know we'll call _inertSiblings on newParents
                // below.
                this[_topElParents] = newParents;
                const toSkip = this[_getDistributedChildren](newTop);
                // No previous top element.
                if (!oldParents.length) {
                    this[_inertSiblings](newParents, toSkip, toKeepInert);
                    return;
                }
                let i = oldParents.length - 1;
                let j = newParents.length - 1;
                // Find common parent. Index 0 is the element itself (so stop before it).
                while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
                    i--;
                    j--;
                }
                // If up the parents tree there are 2 elements that are siblings, swap
                // the inerted sibling.
                if (oldParents[i] !== newParents[j]) {
                    this[_swapInertedSibling](oldParents[i], newParents[j]);
                }
                // Restore old parents siblings inertness.
                i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));
                // Make new parents siblings inert.
                j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
            }
            /**
             * Swaps inertness between two sibling elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */
            [_swapInertedSibling](oldInert, newInert) {
                const siblingsToRestore = oldInert[_siblingsToRestore];
                // oldInert is not contained in siblings to restore, so we have to check
                // if it's inertable and if already inert.
                if (this[_isInertable](oldInert) && !oldInert.inert) {
                    oldInert.inert = true;
                    siblingsToRestore.add(oldInert);
                }
                // If newInert was already between the siblings to restore, it means it is
                // inertable and must be restored.
                if (siblingsToRestore.has(newInert)) {
                    newInert.inert = false;
                    siblingsToRestore.delete(newInert);
                }
                newInert[_parentMO] = oldInert[_parentMO];
                newInert[_siblingsToRestore] = siblingsToRestore;
                oldInert[_parentMO] = undefined;
                oldInert[_siblingsToRestore] = undefined;
            }
            /**
             * Restores original inertness to the siblings of the elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */
            [_restoreInertedSiblings](elements) {
                for (const element of elements) {
                    const mo = element[_parentMO];
                    mo.disconnect();
                    element[_parentMO] = undefined;
                    const siblings = element[_siblingsToRestore];
                    for (const sibling of siblings) {
                        sibling.inert = false;
                    }
                    element[_siblingsToRestore] = undefined;
                }
            }
            /**
             * Inerts the siblings of the elements except the elements to skip. Stores
             * the inerted siblings into the element's symbol `_siblingsToRestore`.
             * Pass `toKeepInert` to collect the already inert elements.
             * Sets the property `inert` over the attribute since the inert spec
             * doesn't specify if it should be reflected.
             * https://html.spec.whatwg.org/multipage/interaction.html#inert
             */
            [_inertSiblings](elements, toSkip, toKeepInert) {
                for (const element of elements) {
                    // Assume element is not a Document, so it must have a parentNode.
                    const parent = element.parentNode;
                    const children = parent.children;
                    const inertedSiblings = new Set();
                    for (let j = 0; j < children.length; j++) {
                        const sibling = children[j];
                        // Skip the input element, if not inertable or to be skipped.
                        if (sibling === element || !this[_isInertable](sibling) ||
                            (toSkip && toSkip.has(sibling))) {
                            continue;
                        }
                        // Should be collected since already inerted.
                        if (toKeepInert && sibling.inert) {
                            toKeepInert.add(sibling);
                        }
                        else {
                            sibling.inert = true;
                            inertedSiblings.add(sibling);
                        }
                    }
                    // Store the siblings that were inerted.
                    element[_siblingsToRestore] = inertedSiblings;
                    // Observe only immediate children mutations on the parent.
                    const mo = new MutationObserver(this[_handleMutations].bind(this));
                    element[_parentMO] = mo;
                    let parentToObserve = parent;
                    // If we're using the ShadyDOM polyfill, then our parent could be a
                    // shady root, which is an object that acts like a ShadowRoot, but isn't
                    // actually a node in the real DOM. Observe the real DOM parent instead.
                    const maybeShadyRoot = parentToObserve;
                    if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
                        parentToObserve = maybeShadyRoot.host;
                    }
                    mo.observe(parentToObserve, {
                        childList: true,
                    });
                }
            }
            /**
             * Handles newly added/removed nodes by toggling their inertness.
             * It also checks if the current top Blocking Element has been removed,
             * notifying and removing it.
             */
            [_handleMutations](mutations) {
                const parents = this[_topElParents];
                const toKeepInert = this[_alreadyInertElements];
                for (const mutation of mutations) {
                    // If the target is a shadowRoot, get its host as we skip shadowRoots when
                    // computing _topElParents.
                    const target = mutation.target.host || mutation.target;
                    const idx = target === document.body ?
                        parents.length :
                        parents.indexOf(target);
                    const inertedChild = parents[idx - 1];
                    const inertedSiblings = inertedChild[_siblingsToRestore];
                    // To restore.
                    for (let i = 0; i < mutation.removedNodes.length; i++) {
                        const sibling = mutation.removedNodes[i];
                        if (sibling === inertedChild) {
                            console.info('Detected removal of the top Blocking Element.');
                            this.pop();
                            return;
                        }
                        if (inertedSiblings.has(sibling)) {
                            sibling.inert = false;
                            inertedSiblings.delete(sibling);
                        }
                    }
                    // To inert.
                    for (let i = 0; i < mutation.addedNodes.length; i++) {
                        const sibling = mutation.addedNodes[i];
                        if (!this[_isInertable](sibling)) {
                            continue;
                        }
                        if (toKeepInert && sibling.inert) {
                            toKeepInert.add(sibling);
                        }
                        else {
                            sibling.inert = true;
                            inertedSiblings.add(sibling);
                        }
                    }
                }
            }
            /**
             * Returns if the element is inertable.
             */
            [_isInertable](element) {
                return false === /^(style|template|script)$/.test(element.localName);
            }
            /**
             * Returns the list of newParents of an element, starting from element
             * (included) up to `document.body` (excluded).
             */
            [_getParents](element) {
                const parents = [];
                let current = element;
                // Stop to body.
                while (current && current !== document.body) {
                    // Skip shadow roots.
                    if (current.nodeType === Node.ELEMENT_NODE) {
                        parents.push(current);
                    }
                    // ShadowDom v1
                    if (current.assignedSlot) {
                        // Collect slots from deepest slot to top.
                        while (current = current.assignedSlot) {
                            parents.push(current);
                        }
                        // Continue the search on the top slot.
                        current = parents.pop();
                        continue;
                    }
                    current = current.parentNode ||
                        current.host;
                }
                return parents;
            }
            /**
             * Returns the distributed children of the element's shadow root.
             * Returns null if the element doesn't have a shadow root.
             */
            [_getDistributedChildren](element) {
                const shadowRoot = element.shadowRoot;
                if (!shadowRoot) {
                    return null;
                }
                const result = new Set();
                let i;
                let j;
                let nodes;
                const slots = shadowRoot.querySelectorAll('slot');
                if (slots.length && slots[0].assignedNodes) {
                    for (i = 0; i < slots.length; i++) {
                        nodes = slots[i].assignedNodes({
                            flatten: true,
                        });
                        for (j = 0; j < nodes.length; j++) {
                            if (nodes[j].nodeType === Node.ELEMENT_NODE) {
                                result.add(nodes[j]);
                            }
                        }
                    }
                    // No need to search for <content>.
                }
                return result;
            }
        }
        document.$blockingElements =
            new BlockingElementsImpl();
    })();

    /**
     * This work is licensed under the W3C Software and Document License
     * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
     */

    // Convenience function for converting NodeLists.
    /** @type {typeof Array.prototype.slice} */
    const slice = Array.prototype.slice;

    /**
     * IE has a non-standard name for "matches".
     * @type {typeof Element.prototype.matches}
     */
    const matches$1 =
        Element.prototype.matches || Element.prototype.msMatchesSelector;

    /** @type {string} */
    const _focusableElementsString = ['a[href]',
                                      'area[href]',
                                      'input:not([disabled])',
                                      'select:not([disabled])',
                                      'textarea:not([disabled])',
                                      'button:not([disabled])',
                                      'iframe',
                                      'object',
                                      'embed',
                                      '[contenteditable]'].join(',');

    /**
     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
     * attribute.
     *
     * Its main functions are:
     *
     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
     *   each focusable node in the subtree with the singleton `InertManager` which manages all known
     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
     *   instance exists for each focusable node which has at least one inert root as an ancestor.
     *
     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
     *   attribute is removed from the root node). This is handled in the destructor, which calls the
     *   `deregister` method on `InertManager` for each managed inert node.
     */
    class InertRoot {
      /**
       * @param {!Element} rootElement The Element at the root of the inert subtree.
       * @param {!InertManager} inertManager The global singleton InertManager object.
       */
      constructor(rootElement, inertManager) {
        /** @type {!InertManager} */
        this._inertManager = inertManager;

        /** @type {!Element} */
        this._rootElement = rootElement;

        /**
         * @type {!Set<!InertNode>}
         * All managed focusable nodes in this InertRoot's subtree.
         */
        this._managedNodes = new Set();

        // Make the subtree hidden from assistive technology
        if (this._rootElement.hasAttribute('aria-hidden')) {
          /** @type {?string} */
          this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
        } else {
          this._savedAriaHidden = null;
        }
        this._rootElement.setAttribute('aria-hidden', 'true');

        // Make all focusable elements in the subtree unfocusable and add them to _managedNodes
        this._makeSubtreeUnfocusable(this._rootElement);

        // Watch for:
        // - any additions in the subtree: make them unfocusable too
        // - any removals from the subtree: remove them from this inert root's managed nodes
        // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
        //   element, make that node a managed node.
        this._observer = new MutationObserver(this._onMutation.bind(this));
        this._observer.observe(this._rootElement, {attributes: true, childList: true, subtree: true});
      }

      /**
       * Call this whenever this object is about to become obsolete.  This unwinds all of the state
       * stored in this object and updates the state of all of the managed nodes.
       */
      destructor() {
        this._observer.disconnect();

        if (this._rootElement) {
          if (this._savedAriaHidden !== null) {
            this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
          } else {
            this._rootElement.removeAttribute('aria-hidden');
          }
        }

        this._managedNodes.forEach(function(inertNode) {
          this._unmanageNode(inertNode.node);
        }, this);

        // Note we cast the nulls to the ANY type here because:
        // 1) We want the class properties to be declared as non-null, or else we
        //    need even more casts throughout this code. All bets are off if an
        //    instance has been destroyed and a method is called.
        // 2) We don't want to cast "this", because we want type-aware optimizations
        //    to know which properties we're setting.
        this._observer = /** @type {?} */ (null);
        this._rootElement = /** @type {?} */ (null);
        this._managedNodes = /** @type {?} */ (null);
        this._inertManager = /** @type {?} */ (null);
      }

      /**
       * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
       */
      get managedNodes() {
        return new Set(this._managedNodes);
      }

      /** @return {boolean} */
      get hasSavedAriaHidden() {
        return this._savedAriaHidden !== null;
      }

      /** @param {?string} ariaHidden */
      set savedAriaHidden(ariaHidden) {
        this._savedAriaHidden = ariaHidden;
      }

      /** @return {?string} */
      get savedAriaHidden() {
        return this._savedAriaHidden;
      }

      /**
       * @param {!Node} startNode
       */
      _makeSubtreeUnfocusable(startNode) {
        composedTreeWalk(startNode, (node) => this._visitNode(node));

        let activeElement = document.activeElement;

        if (!document.body.contains(startNode)) {
          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
          let node = startNode;
          /** @type {!ShadowRoot|undefined} */
          let root = undefined;
          while (node) {
            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
              root = /** @type {!ShadowRoot} */ (node);
              break;
            }
            node = node.parentNode;
          }
          if (root) {
            activeElement = root.activeElement;
          }
        }
        if (startNode.contains(activeElement)) {
          activeElement.blur();
          // In IE11, if an element is already focused, and then set to tabindex=-1
          // calling blur() will not actually move the focus.
          // To work around this we call focus() on the body instead.
          if (activeElement === document.activeElement) {
            document.body.focus();
          }
        }
      }

      /**
       * @param {!Node} node
       */
      _visitNode(node) {
        if (node.nodeType !== Node.ELEMENT_NODE) {
          return;
        }
        const element = /** @type {!Element} */ (node);

        // If a descendant inert root becomes un-inert, its descendants will still be inert because of
        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.
        if (element !== this._rootElement && element.hasAttribute('inert')) {
          this._adoptInertRoot(element);
        }

        if (matches$1.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
          this._manageNode(element);
        }
      }

      /**
       * Register the given node with this InertRoot and with InertManager.
       * @param {!Node} node
       */
      _manageNode(node) {
        const inertNode = this._inertManager.register(node, this);
        this._managedNodes.add(inertNode);
      }

      /**
       * Unregister the given node with this InertRoot and with InertManager.
       * @param {!Node} node
       */
      _unmanageNode(node) {
        const inertNode = this._inertManager.deregister(node, this);
        if (inertNode) {
          this._managedNodes.delete(inertNode);
        }
      }

      /**
       * Unregister the entire subtree starting at `startNode`.
       * @param {!Node} startNode
       */
      _unmanageSubtree(startNode) {
        composedTreeWalk(startNode, (node) => this._unmanageNode(node));
      }

      /**
       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
       * @param {!Element} node
       */
      _adoptInertRoot(node) {
        let inertSubroot = this._inertManager.getInertRoot(node);

        // During initialisation this inert root may not have been registered yet,
        // so register it now if need be.
        if (!inertSubroot) {
          this._inertManager.setInert(node, true);
          inertSubroot = this._inertManager.getInertRoot(node);
        }

        inertSubroot.managedNodes.forEach(function(savedInertNode) {
          this._manageNode(savedInertNode.node);
        }, this);
      }

      /**
       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
       * @param {!Array<!MutationRecord>} records
       * @param {!MutationObserver} self
       */
      _onMutation(records, self) {
        records.forEach(function(record) {
          const target = /** @type {!Element} */ (record.target);
          if (record.type === 'childList') {
            // Manage added nodes
            slice.call(record.addedNodes).forEach(function(node) {
              this._makeSubtreeUnfocusable(node);
            }, this);

            // Un-manage removed nodes
            slice.call(record.removedNodes).forEach(function(node) {
              this._unmanageSubtree(node);
            }, this);
          } else if (record.type === 'attributes') {
            if (record.attributeName === 'tabindex') {
              // Re-initialise inert node if tabindex changes
              this._manageNode(target);
            } else if (target !== this._rootElement &&
                       record.attributeName === 'inert' &&
                       target.hasAttribute('inert')) {
              // If a new inert root is added, adopt its managed nodes and make sure it knows about the
              // already managed nodes from this inert subroot.
              this._adoptInertRoot(target);
              const inertSubroot = this._inertManager.getInertRoot(target);
              this._managedNodes.forEach(function(managedNode) {
                if (target.contains(managedNode.node)) {
                  inertSubroot._manageNode(managedNode.node);
                }
              });
            }
          }
        }, this);
      }
    }

    /**
     * `InertNode` initialises and manages a single inert node.
     * A node is inert if it is a descendant of one or more inert root elements.
     *
     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
     * is intrinsically focusable or not.
     *
     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
     * or removes the `tabindex` attribute if the element is intrinsically focusable.
     */
    class InertNode {
      /**
       * @param {!Node} node A focusable element to be made inert.
       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
       */
      constructor(node, inertRoot) {
        /** @type {!Node} */
        this._node = node;

        /** @type {boolean} */
        this._overrodeFocusMethod = false;

        /**
         * @type {!Set<!InertRoot>} The set of descendant inert roots.
         *    If and only if this set becomes empty, this node is no longer inert.
         */
        this._inertRoots = new Set([inertRoot]);

        /** @type {?number} */
        this._savedTabIndex = null;

        /** @type {boolean} */
        this._destroyed = false;

        // Save any prior tabindex info and make this node untabbable
        this.ensureUntabbable();
      }

      /**
       * Call this whenever this object is about to become obsolete.
       * This makes the managed node focusable again and deletes all of the previously stored state.
       */
      destructor() {
        this._throwIfDestroyed();

        if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
          const element = /** @type {!Element} */ (this._node);
          if (this._savedTabIndex !== null) {
            element.setAttribute('tabindex', this._savedTabIndex);
          } else {
            element.removeAttribute('tabindex');
          }

          // Use `delete` to restore native focus method.
          if (this._overrodeFocusMethod) {
            delete element.focus;
          }
        }

        // See note in InertRoot.destructor for why we cast these nulls to ANY.
        this._node = /** @type {?} */ (null);
        this._inertRoots = /** @type {?} */ (null);
        this._destroyed = true;
      }

      /**
       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
       * If the object has been destroyed, any attempt to access it will cause an exception.
       */
      get destroyed() {
        return /** @type {!InertNode} */ (this)._destroyed;
      }

      /**
       * Throw if user tries to access destroyed InertNode.
       */
      _throwIfDestroyed() {
        if (this.destroyed) {
          throw new Error('Trying to access destroyed InertNode');
        }
      }

      /** @return {boolean} */
      get hasSavedTabIndex() {
        return this._savedTabIndex !== null;
      }

      /** @return {!Node} */
      get node() {
        this._throwIfDestroyed();
        return this._node;
      }

      /** @param {?number} tabIndex */
      set savedTabIndex(tabIndex) {
        this._throwIfDestroyed();
        this._savedTabIndex = tabIndex;
      }

      /** @return {?number} */
      get savedTabIndex() {
        this._throwIfDestroyed();
        return this._savedTabIndex;
      }

      /** Save the existing tabindex value and make the node untabbable and unfocusable */
      ensureUntabbable() {
        if (this.node.nodeType !== Node.ELEMENT_NODE) {
          return;
        }
        const element = /** @type {!Element} */ (this.node);
        if (matches$1.call(element, _focusableElementsString)) {
          if (/** @type {!HTMLElement} */ (element).tabIndex === -1 &&
              this.hasSavedTabIndex) {
            return;
          }

          if (element.hasAttribute('tabindex')) {
            this._savedTabIndex = /** @type {!HTMLElement} */ (element).tabIndex;
          }
          element.setAttribute('tabindex', '-1');
          if (element.nodeType === Node.ELEMENT_NODE) {
            element.focus = function() {};
            this._overrodeFocusMethod = true;
          }
        } else if (element.hasAttribute('tabindex')) {
          this._savedTabIndex = /** @type {!HTMLElement} */ (element).tabIndex;
          element.removeAttribute('tabindex');
        }
      }

      /**
       * Add another inert root to this inert node's set of managing inert roots.
       * @param {!InertRoot} inertRoot
       */
      addInertRoot(inertRoot) {
        this._throwIfDestroyed();
        this._inertRoots.add(inertRoot);
      }

      /**
       * Remove the given inert root from this inert node's set of managing inert roots.
       * If the set of managing inert roots becomes empty, this node is no longer inert,
       * so the object should be destroyed.
       * @param {!InertRoot} inertRoot
       */
      removeInertRoot(inertRoot) {
        this._throwIfDestroyed();
        this._inertRoots.delete(inertRoot);
        if (this._inertRoots.size === 0) {
          this.destructor();
        }
      }
    }

    /**
     * InertManager is a per-document singleton object which manages all inert roots and nodes.
     *
     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
     * is created for each such node, via the `_managedNodes` map.
     */
    class InertManager {
      /**
       * @param {!Document} document
       */
      constructor(document) {
        if (!document) {
          throw new Error('Missing required argument; InertManager needs to wrap a document.');
        }

        /** @type {!Document} */
        this._document = document;

        /**
         * All managed nodes known to this InertManager. In a map to allow looking up by Node.
         * @type {!Map<!Node, !InertNode>}
         */
        this._managedNodes = new Map();

        /**
         * All inert roots known to this InertManager. In a map to allow looking up by Node.
         * @type {!Map<!Node, !InertRoot>}
         */
        this._inertRoots = new Map();

        /**
         * Observer for mutations on `document.body`.
         * @type {!MutationObserver}
         */
        this._observer = new MutationObserver(this._watchForInert.bind(this));

        // Add inert style.
        addInertStyle(document.head || document.body || document.documentElement);

        // Wait for document to be loaded.
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
        } else {
          this._onDocumentLoaded();
        }
      }

      /**
       * Set whether the given element should be an inert root or not.
       * @param {!Element} root
       * @param {boolean} inert
       */
      setInert(root, inert) {
        if (inert) {
          if (this._inertRoots.has(root)) { // element is already inert
            return;
          }

          const inertRoot = new InertRoot(root, this);
          root.setAttribute('inert', '');
          this._inertRoots.set(root, inertRoot);
          // If not contained in the document, it must be in a shadowRoot.
          // Ensure inert styles are added there.
          if (!this._document.body.contains(root)) {
            let parent = root.parentNode;
            while (parent) {
              if (parent.nodeType === 11) {
                addInertStyle(parent);
              }
              parent = parent.parentNode;
            }
          }
        } else {
          if (!this._inertRoots.has(root)) { // element is already non-inert
            return;
          }

          const inertRoot = this._inertRoots.get(root);
          inertRoot.destructor();
          this._inertRoots.delete(root);
          root.removeAttribute('inert');
        }
      }

      /**
       * Get the InertRoot object corresponding to the given inert root element, if any.
       * @param {!Node} element
       * @return {!InertRoot|undefined}
       */
      getInertRoot(element) {
        return this._inertRoots.get(element);
      }

      /**
       * Register the given InertRoot as managing the given node.
       * In the case where the node has a previously existing inert root, this inert root will
       * be added to its set of inert roots.
       * @param {!Node} node
       * @param {!InertRoot} inertRoot
       * @return {!InertNode} inertNode
       */
      register(node, inertRoot) {
        let inertNode = this._managedNodes.get(node);
        if (inertNode !== undefined) { // node was already in an inert subtree
          inertNode.addInertRoot(inertRoot);
        } else {
          inertNode = new InertNode(node, inertRoot);
        }

        this._managedNodes.set(node, inertNode);

        return inertNode;
      }

      /**
       * De-register the given InertRoot as managing the given inert node.
       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
       * node from the InertManager's set of managed nodes if it is destroyed.
       * If the node is not currently managed, this is essentially a no-op.
       * @param {!Node} node
       * @param {!InertRoot} inertRoot
       * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
       */
      deregister(node, inertRoot) {
        const inertNode = this._managedNodes.get(node);
        if (!inertNode) {
          return null;
        }

        inertNode.removeInertRoot(inertRoot);
        if (inertNode.destroyed) {
          this._managedNodes.delete(node);
        }

        return inertNode;
      }

      /**
       * Callback used when document has finished loading.
       */
      _onDocumentLoaded() {
        // Find all inert roots in document and make them actually inert.
        const inertElements = slice.call(this._document.querySelectorAll('[inert]'));
        inertElements.forEach(function(inertElement) {
          this.setInert(inertElement, true);
        }, this);

        // Comment this out to use programmatic API only.
        this._observer.observe(this._document.body, {attributes: true, subtree: true, childList: true});
      }

      /**
       * Callback used when mutation observer detects attribute changes.
       * @param {!Array<!MutationRecord>} records
       * @param {!MutationObserver} self
       */
      _watchForInert(records, self) {
        const _this = this;
        records.forEach(function(record) {
          switch (record.type) {
          case 'childList':
            slice.call(record.addedNodes).forEach(function(node) {
              if (node.nodeType !== Node.ELEMENT_NODE) {
                return;
              }
              const inertElements = slice.call(node.querySelectorAll('[inert]'));
              if (matches$1.call(node, '[inert]')) {
                inertElements.unshift(node);
              }
              inertElements.forEach(function(inertElement) {
                this.setInert(inertElement, true);
              }, _this);
            }, _this);
            break;
          case 'attributes':
            if (record.attributeName !== 'inert') {
              return;
            }
            const target = /** @type {!Element} */ (record.target);
            const inert = target.hasAttribute('inert');
            _this.setInert(target, inert);
            break;
          }
        }, this);
      }
    }

    /**
     * Recursively walk the composed tree from |node|.
     * @param {!Node} node
     * @param {(function (!Element))=} callback Callback to be called for each element traversed,
     *     before descending into child nodes.
     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
     */
    function composedTreeWalk(node, callback, shadowRootAncestor) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        const element = /** @type {!Element} */ (node);
        if (callback) {
          callback(element);
        }

        // Descend into node:
        // If it has a ShadowRoot, ignore all child elements - these will be picked
        // up by the <content> or <shadow> elements. Descend straight into the
        // ShadowRoot.
        const shadowRoot = /** @type {!HTMLElement} */ (element).shadowRoot;
        if (shadowRoot) {
          composedTreeWalk(shadowRoot, callback);
          return;
        }

        // If it is a <content> element, descend into distributed elements - these
        // are elements from outside the shadow root which are rendered inside the
        // shadow DOM.
        if (element.localName == 'content') {
          const content = /** @type {!HTMLContentElement} */ (element);
          // Verifies if ShadowDom v0 is supported.
          const distributedNodes = content.getDistributedNodes ?
            content.getDistributedNodes() : [];
          for (let i = 0; i < distributedNodes.length; i++) {
            composedTreeWalk(distributedNodes[i], callback);
          }
          return;
        }

        // If it is a <slot> element, descend into assigned nodes - these
        // are elements from outside the shadow root which are rendered inside the
        // shadow DOM.
        if (element.localName == 'slot') {
          const slot = /** @type {!HTMLSlotElement} */ (element);
          // Verify if ShadowDom v1 is supported.
          const distributedNodes = slot.assignedNodes ?
            slot.assignedNodes({flatten: true}) : [];
          for (let i = 0; i < distributedNodes.length; i++) {
            composedTreeWalk(distributedNodes[i], callback);
          }
          return;
        }
      }

      // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
      // element, nor a <shadow> element recurse normally.
      let child = node.firstChild;
      while (child != null) {
        composedTreeWalk(child, callback);
        child = child.nextSibling;
      }
    }

    /**
     * Adds a style element to the node containing the inert specific styles
     * @param {!Node} node
     */
    function addInertStyle(node) {
      if (node.querySelector('style#inert-style')) {
        return;
      }
      const style = document.createElement('style');
      style.setAttribute('id', 'inert-style');
      style.textContent = '\n'+
                          '[inert] {\n' +
                          '  pointer-events: none;\n' +
                          '  cursor: default;\n' +
                          '}\n' +
                          '\n' +
                          '[inert], [inert] * {\n' +
                          '  user-select: none;\n' +
                          '  -webkit-user-select: none;\n' +
                          '  -moz-user-select: none;\n' +
                          '  -ms-user-select: none;\n' +
                          '}\n';
      node.appendChild(style);
    }

    /** @type {!InertManager} */
    const inertManager = new InertManager(document);

    if (!Element.prototype.hasOwnProperty('inert')) {
      Object.defineProperty(Element.prototype, 'inert', {
        enumerable: true,
        /** @this {!Element} */
        get: function() {
          return this.hasAttribute('inert');
        },
        /** @this {!Element} */
        set: function(inert) {
          inertManager.setInert(this, inert);
        },
      });
    }

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$2 = {
        ANIMATE: 'mdc-drawer--animate',
        CLOSING: 'mdc-drawer--closing',
        DISMISSIBLE: 'mdc-drawer--dismissible',
        MODAL: 'mdc-drawer--modal',
        OPEN: 'mdc-drawer--open',
        OPENING: 'mdc-drawer--opening',
        ROOT: 'mdc-drawer',
    };
    var strings$2 = {
        APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',
        CLOSE_EVENT: 'MDCDrawer:closed',
        OPEN_EVENT: 'MDCDrawer:opened',
        SCRIM_SELECTOR: '.mdc-drawer-scrim',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCDismissibleDrawerFoundation = /** @class */ (function (_super) {
        __extends(MDCDismissibleDrawerFoundation, _super);
        function MDCDismissibleDrawerFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCDismissibleDrawerFoundation.defaultAdapter, adapter)) || this;
            _this.animationFrame_ = 0;
            _this.animationTimer_ = 0;
            return _this;
        }
        Object.defineProperty(MDCDismissibleDrawerFoundation, "strings", {
            get: function () {
                return strings$2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCDismissibleDrawerFoundation, "cssClasses", {
            get: function () {
                return cssClasses$2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCDismissibleDrawerFoundation, "defaultAdapter", {
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    elementHasClass: function () { return false; },
                    notifyClose: function () { return undefined; },
                    notifyOpen: function () { return undefined; },
                    saveFocus: function () { return undefined; },
                    restoreFocus: function () { return undefined; },
                    focusActiveNavigationItem: function () { return undefined; },
                    trapFocus: function () { return undefined; },
                    releaseFocus: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCDismissibleDrawerFoundation.prototype.destroy = function () {
            if (this.animationFrame_) {
                cancelAnimationFrame(this.animationFrame_);
            }
            if (this.animationTimer_) {
                clearTimeout(this.animationTimer_);
            }
        };
        /**
         * Opens the drawer from the closed state.
         */
        MDCDismissibleDrawerFoundation.prototype.open = function () {
            var _this = this;
            if (this.isOpen() || this.isOpening() || this.isClosing()) {
                return;
            }
            this.adapter_.addClass(cssClasses$2.OPEN);
            this.adapter_.addClass(cssClasses$2.ANIMATE);
            // Wait a frame once display is no longer "none", to establish basis for animation
            this.runNextAnimationFrame_(function () {
                _this.adapter_.addClass(cssClasses$2.OPENING);
            });
            this.adapter_.saveFocus();
        };
        /**
         * Closes the drawer from the open state.
         */
        MDCDismissibleDrawerFoundation.prototype.close = function () {
            if (!this.isOpen() || this.isOpening() || this.isClosing()) {
                return;
            }
            this.adapter_.addClass(cssClasses$2.CLOSING);
        };
        /**
         * Returns true if the drawer is in the open position.
         * @return true if drawer is in open state.
         */
        MDCDismissibleDrawerFoundation.prototype.isOpen = function () {
            return this.adapter_.hasClass(cssClasses$2.OPEN);
        };
        /**
         * Returns true if the drawer is animating open.
         * @return true if drawer is animating open.
         */
        MDCDismissibleDrawerFoundation.prototype.isOpening = function () {
            return this.adapter_.hasClass(cssClasses$2.OPENING) || this.adapter_.hasClass(cssClasses$2.ANIMATE);
        };
        /**
         * Returns true if the drawer is animating closed.
         * @return true if drawer is animating closed.
         */
        MDCDismissibleDrawerFoundation.prototype.isClosing = function () {
            return this.adapter_.hasClass(cssClasses$2.CLOSING);
        };
        /**
         * Keydown handler to close drawer when key is escape.
         */
        MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {
            var keyCode = evt.keyCode, key = evt.key;
            var isEscape = key === 'Escape' || keyCode === 27;
            if (isEscape) {
                this.close();
            }
        };
        /**
         * Handles the `transitionend` event when the drawer finishes opening/closing.
         */
        MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {
            var OPENING = cssClasses$2.OPENING, CLOSING = cssClasses$2.CLOSING, OPEN = cssClasses$2.OPEN, ANIMATE = cssClasses$2.ANIMATE, ROOT = cssClasses$2.ROOT;
            // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.
            var isRootElement = this.isElement_(evt.target) && this.adapter_.elementHasClass(evt.target, ROOT);
            if (!isRootElement) {
                return;
            }
            if (this.isClosing()) {
                this.adapter_.removeClass(OPEN);
                this.closed_();
                this.adapter_.restoreFocus();
                this.adapter_.notifyClose();
            }
            else {
                this.adapter_.focusActiveNavigationItem();
                this.opened_();
                this.adapter_.notifyOpen();
            }
            this.adapter_.removeClass(ANIMATE);
            this.adapter_.removeClass(OPENING);
            this.adapter_.removeClass(CLOSING);
        };
        /**
         * Extension point for when drawer finishes open animation.
         */
        MDCDismissibleDrawerFoundation.prototype.opened_ = function () { }; // tslint:disable-line:no-empty
        /**
         * Extension point for when drawer finishes close animation.
         */
        MDCDismissibleDrawerFoundation.prototype.closed_ = function () { }; // tslint:disable-line:no-empty
        /**
         * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
         */
        MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame_ = function (callback) {
            var _this = this;
            cancelAnimationFrame(this.animationFrame_);
            this.animationFrame_ = requestAnimationFrame(function () {
                _this.animationFrame_ = 0;
                clearTimeout(_this.animationTimer_);
                _this.animationTimer_ = setTimeout(callback, 0);
            });
        };
        MDCDismissibleDrawerFoundation.prototype.isElement_ = function (element) {
            // In Edge, transitionend on ripple pseudo-elements yields a target without classList.
            return Boolean(element.classList);
        };
        return MDCDismissibleDrawerFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /* istanbul ignore next: subclass is not a branch statement */
    var MDCModalDrawerFoundation = /** @class */ (function (_super) {
        __extends(MDCModalDrawerFoundation, _super);
        function MDCModalDrawerFoundation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Handles click event on scrim.
         */
        MDCModalDrawerFoundation.prototype.handleScrimClick = function () {
            this.close();
        };
        /**
         * Called when drawer finishes open animation.
         */
        MDCModalDrawerFoundation.prototype.opened_ = function () {
            this.adapter_.trapFocus();
        };
        /**
         * Called when drawer finishes close animation.
         */
        MDCModalDrawerFoundation.prototype.closed_ = function () {
            this.adapter_.releaseFocus();
        };
        return MDCModalDrawerFoundation;
    }(MDCDismissibleDrawerFoundation));

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const blockingElements = document.$blockingElements;
    class DrawerBase extends BaseElement {
        constructor() {
            super(...arguments);
            this._previousFocus = null;
            this.open = false;
            this.hasHeader = false;
            this.type = '';
        }
        get mdcFoundationClass() {
            return this.type === 'modal' ? MDCModalDrawerFoundation :
                MDCDismissibleDrawerFoundation;
        }
        createAdapter() {
            return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { elementHasClass: (element, className) => element.classList.contains(className), saveFocus: () => {
                    // Note, casting to avoid cumbersome runtime check.
                    this._previousFocus =
                        this.getRootNode().activeElement;
                }, restoreFocus: () => {
                    const previousFocus = this._previousFocus && this._previousFocus.focus;
                    if (previousFocus) {
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        this._previousFocus.focus();
                    }
                }, notifyClose: () => {
                    this.open = false;
                    this.dispatchEvent(new Event(strings$2.CLOSE_EVENT, { bubbles: true, cancelable: true }));
                }, notifyOpen: () => {
                    this.open = true;
                    this.dispatchEvent(new Event(strings$2.OPEN_EVENT, { bubbles: true, cancelable: true }));
                }, 
                // TODO(sorvell): Implement list focusing integration.
                focusActiveNavigationItem: () => { }, trapFocus: () => {
                    blockingElements.push(this);
                    this.appContent.inert = true;
                }, releaseFocus: () => {
                    blockingElements.remove(this);
                    this.appContent.inert = false;
                } });
        }
        _handleScrimClick() {
            if (this.mdcFoundation instanceof MDCModalDrawerFoundation) {
                this.mdcFoundation.handleScrimClick();
            }
        }
        render() {
            const dismissible = this.type === 'dismissible' || this.type === 'modal';
            const modal = this.type === 'modal';
            const header = this.hasHeader ? html `
      <div class="mdc-drawer__header">
        <h3 class="mdc-drawer__title"><slot name="title"></slot></h3>
        <h6 class="mdc-drawer__subtitle"><slot name="subtitle"></slot></h6>
        <slot name="header"></slot>
      </div>
      ` :
                '';
            return html `
      <aside class="mdc-drawer
          ${classMap({
            'mdc-drawer--dismissible': dismissible,
            'mdc-drawer--modal': modal
        })}">
        ${header}
        <div class="mdc-drawer__content"><slot></slot></div>
      </aside>
      ${modal ? html `<div class="mdc-drawer-scrim"
                          @click="${this._handleScrimClick}"></div>` :
            ''}
      <div class="mdc-drawer-app-content">
        <slot name="appContent"></slot>
      </div>
      `;
        }
        // note, we avoid calling `super.firstUpdated()` to control when
        // `createFoundation()` is called.
        firstUpdated() {
            this.mdcRoot.addEventListener('keydown', (e) => this.mdcFoundation.handleKeydown(e));
            this.mdcRoot.addEventListener('transitionend', (e) => this.mdcFoundation.handleTransitionEnd(e));
        }
        updated(changedProperties) {
            if (changedProperties.has('type')) {
                this.createFoundation();
            }
        }
    }
    __decorate([
        query('.mdc-drawer')
    ], DrawerBase.prototype, "mdcRoot", void 0);
    __decorate([
        query('.mdc-drawer-app-content')
    ], DrawerBase.prototype, "appContent", void 0);
    __decorate([
        observer(function (value) {
            if (this.type === '') {
                return;
            }
            if (value) {
                this.mdcFoundation.open();
            }
            else {
                this.mdcFoundation.close();
            }
        }),
        property({ type: Boolean, reflect: true })
    ], DrawerBase.prototype, "open", void 0);
    __decorate([
        property({ type: Boolean })
    ], DrawerBase.prototype, "hasHeader", void 0);
    __decorate([
        property({ reflect: true })
    ], DrawerBase.prototype, "type", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$3 = css `.mdc-drawer{border-color:rgba(0,0,0,.12);background-color:#fff;border-radius:0 0 0 0;z-index:6;width:256px;display:flex;flex-direction:column;flex-shrink:0;box-sizing:border-box;height:100%;border-right-width:1px;border-right-style:solid;overflow:hidden;transition-property:transform;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.mdc-drawer .mdc-drawer__title{color:rgba(0,0,0,.87)}.mdc-drawer .mdc-list-group__subheader{color:rgba(0,0,0,.6)}.mdc-drawer .mdc-drawer__subtitle{color:rgba(0,0,0,.6)}.mdc-drawer .mdc-list-item__graphic{color:rgba(0,0,0,.6)}.mdc-drawer .mdc-list-item{color:rgba(0,0,0,.87)}.mdc-drawer .mdc-list-item--activated .mdc-list-item__graphic{color:#6200ee}.mdc-drawer .mdc-list-item--activated{color:rgba(98,0,238,.87)}[dir=rtl] .mdc-drawer,.mdc-drawer[dir=rtl]{border-radius:0 0 0 0}.mdc-drawer .mdc-list-item{border-radius:4px}.mdc-drawer.mdc-drawer--open:not(.mdc-drawer--closing)+.mdc-drawer-app-content{margin-left:256px;margin-right:0}[dir=rtl] .mdc-drawer.mdc-drawer--open:not(.mdc-drawer--closing)+.mdc-drawer-app-content,.mdc-drawer.mdc-drawer--open:not(.mdc-drawer--closing)+.mdc-drawer-app-content[dir=rtl]{margin-left:0;margin-right:256px}[dir=rtl] .mdc-drawer,.mdc-drawer[dir=rtl]{border-right-width:0;border-left-width:1px;border-right-style:none;border-left-style:solid}.mdc-drawer .mdc-list-item{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:1.375rem;font-weight:500;letter-spacing:.0071428571em;text-decoration:inherit;text-transform:inherit;height:calc(48px - 2 * 4px);margin:8px 8px;padding:0 8px}.mdc-drawer .mdc-list-item:nth-child(1){margin-top:2px}.mdc-drawer .mdc-list-item:nth-last-child(1){margin-bottom:0}.mdc-drawer .mdc-list-group__subheader{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:1.25rem;font-weight:400;letter-spacing:.0178571429em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin:0;padding:0 16px}.mdc-drawer .mdc-list-group__subheader::before{display:inline-block;width:0;height:24px;content:"";vertical-align:0}.mdc-drawer .mdc-list-divider{margin:3px 0 4px 0}.mdc-drawer .mdc-list-item__text,.mdc-drawer .mdc-list-item__graphic{pointer-events:none}.mdc-drawer--animate{transform:translateX(-100%)}[dir=rtl] .mdc-drawer--animate,.mdc-drawer--animate[dir=rtl]{transform:translateX(100%)}.mdc-drawer--opening{transform:translateX(0);transition-duration:250ms}[dir=rtl] .mdc-drawer--opening,.mdc-drawer--opening[dir=rtl]{transform:translateX(0)}.mdc-drawer--closing{transform:translateX(-100%);transition-duration:200ms}[dir=rtl] .mdc-drawer--closing,.mdc-drawer--closing[dir=rtl]{transform:translateX(100%)}.mdc-drawer__header{flex-shrink:0;box-sizing:border-box;min-height:64px;padding:0 16px 4px}.mdc-drawer__title{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1.25rem;line-height:2rem;font-weight:500;letter-spacing:.0125em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin-bottom:-20px}.mdc-drawer__title::before{display:inline-block;width:0;height:36px;content:"";vertical-align:0}.mdc-drawer__title::after{display:inline-block;width:0;height:20px;content:"";vertical-align:-20px}.mdc-drawer__subtitle{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:1.25rem;font-weight:400;letter-spacing:.0178571429em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin-bottom:0}.mdc-drawer__subtitle::before{display:inline-block;width:0;height:20px;content:"";vertical-align:0}.mdc-drawer__content{height:100%;overflow-y:auto;-webkit-overflow-scrolling:touch}.mdc-drawer--dismissible{left:0;right:initial;display:none;position:absolute}[dir=rtl] .mdc-drawer--dismissible,.mdc-drawer--dismissible[dir=rtl]{left:initial;right:0}.mdc-drawer--dismissible.mdc-drawer--open{display:flex}.mdc-drawer-app-content{margin-left:0;margin-right:0;position:relative}[dir=rtl] .mdc-drawer-app-content,.mdc-drawer-app-content[dir=rtl]{margin-left:0;margin-right:0}.mdc-drawer--modal{box-shadow:0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0,0,0,.12);left:0;right:initial;display:none;position:fixed}.mdc-drawer--modal+.mdc-drawer-scrim{background-color:rgba(0,0,0,.32)}[dir=rtl] .mdc-drawer--modal,.mdc-drawer--modal[dir=rtl]{left:initial;right:0}.mdc-drawer--modal.mdc-drawer--open{display:flex}.mdc-drawer-scrim{display:none;position:fixed;top:0;left:0;width:100%;height:100%;z-index:5;transition-property:opacity;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.mdc-drawer--open+.mdc-drawer-scrim{display:block}.mdc-drawer--animate+.mdc-drawer-scrim{opacity:0}.mdc-drawer--opening+.mdc-drawer-scrim{transition-duration:250ms;opacity:1}.mdc-drawer--closing+.mdc-drawer-scrim{transition-duration:200ms;opacity:0}.mdc-drawer-app-content{overflow:auto;flex:1}:host{display:flex;height:100%}`;

    let Drawer = class Drawer extends DrawerBase {
    };
    Drawer.styles = style$3;
    Drawer = __decorate([
        customElement('mwc-drawer')
    ], Drawer);

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$3 = {
        ROOT: 'mdc-form-field',
    };
    var strings$3 = {
        LABEL_SELECTOR: '.mdc-form-field > label',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFormFieldFoundation = /** @class */ (function (_super) {
        __extends(MDCFormFieldFoundation, _super);
        function MDCFormFieldFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCFormFieldFoundation.defaultAdapter, adapter)) || this;
            _this.clickHandler_ = function () { return _this.handleClick_(); };
            return _this;
        }
        Object.defineProperty(MDCFormFieldFoundation, "cssClasses", {
            get: function () {
                return cssClasses$3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFormFieldFoundation, "strings", {
            get: function () {
                return strings$3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFormFieldFoundation, "defaultAdapter", {
            get: function () {
                return {
                    activateInputRipple: function () { return undefined; },
                    deactivateInputRipple: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                    registerInteractionHandler: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCFormFieldFoundation.prototype.init = function () {
            this.adapter_.registerInteractionHandler('click', this.clickHandler_);
        };
        MDCFormFieldFoundation.prototype.destroy = function () {
            this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
        };
        MDCFormFieldFoundation.prototype.handleClick_ = function () {
            var _this = this;
            this.adapter_.activateInputRipple();
            requestAnimationFrame(function () { return _this.adapter_.deactivateInputRipple(); });
        };
        return MDCFormFieldFoundation;
    }(MDCFoundation));

    class FormfieldBase extends BaseElement {
        constructor() {
            super(...arguments);
            this.alignEnd = false;
            this.label = '';
            this.mdcFoundationClass = MDCFormFieldFoundation;
        }
        createAdapter() {
            return {
                registerInteractionHandler: (type, handler) => {
                    this.labelEl.addEventListener(type, handler);
                },
                deregisterInteractionHandler: (type, handler) => {
                    this.labelEl.removeEventListener(type, handler);
                },
                activateInputRipple: () => {
                    const input = this.input;
                    if (input instanceof FormElement && input.ripple) {
                        input.ripple.activate();
                    }
                },
                deactivateInputRipple: () => {
                    const input = this.input;
                    if (input instanceof FormElement && input.ripple) {
                        input.ripple.deactivate();
                    }
                },
            };
        }
        get input() {
            return findAssignedElement(this.slotEl, '*');
        }
        render() {
            return html `
      <div class="mdc-form-field ${classMap({
            'mdc-form-field--align-end': this.alignEnd
        })}">
        <slot></slot>
        <label class="mdc-label"
               @click="${this._labelClick}">${this.label}</label>
      </div>`;
        }
        _labelClick() {
            const input = this.input;
            if (input) {
                input.focus();
                input.click();
            }
        }
    }
    __decorate([
        property({ type: Boolean })
    ], FormfieldBase.prototype, "alignEnd", void 0);
    __decorate([
        property({ type: String }),
        observer(async function (label) {
            const input = this.input;
            if (input) {
                if (input.localName === 'input') {
                    input.setAttribute('aria-label', label);
                }
                else if (input instanceof FormElement) {
                    await input.updateComplete;
                    input.setAriaLabel(label);
                }
            }
        })
    ], FormfieldBase.prototype, "label", void 0);
    __decorate([
        query('.mdc-form-field')
    ], FormfieldBase.prototype, "mdcRoot", void 0);
    __decorate([
        query('slot')
    ], FormfieldBase.prototype, "slotEl", void 0);
    __decorate([
        query('label')
    ], FormfieldBase.prototype, "labelEl", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$4 = css `.mdc-form-field{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:1.25rem;font-weight:400;letter-spacing:.0178571429em;text-decoration:inherit;text-transform:inherit;color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));display:inline-flex;align-items:center;vertical-align:middle}.mdc-form-field>label{margin-left:0;margin-right:auto;padding-left:4px;padding-right:0;order:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{margin-left:auto;margin-right:0}[dir=rtl] .mdc-form-field>label,.mdc-form-field>label[dir=rtl]{padding-left:0;padding-right:4px}.mdc-form-field--align-end>label{margin-left:auto;margin-right:0;padding-left:0;padding-right:4px;order:-1}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-form-field--align-end>label,.mdc-form-field--align-end>label[dir=rtl]{padding-left:4px;padding-right:0}.mdc-form-field{align-items:center}::slotted(*){font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.875rem;line-height:1.25rem;font-weight:400;letter-spacing:.0178571429em;text-decoration:inherit;text-transform:inherit;color:rgba(0,0,0,.87);color:var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87))}::slotted(mwc-switch){margin-right:10px}[dir=rtl] ::slotted(mwc-switch),::slotted(mwc-switch)[dir=rtl]{margin-left:10px}`;

    let Formfield = class Formfield extends FormfieldBase {
    };
    Formfield.styles = style$4;
    Formfield = __decorate([
        customElement('mwc-formfield')
    ], Formfield);

    class IconButtonBase extends LitElement {
        constructor() {
            super(...arguments);
            this.disabled = false;
            this.icon = '';
            this.label = '';
        }
        render() {
            return html `<button
    .ripple="${ripple()}"
    class="mdc-icon-button"
    aria-label="${this.label || this.icon}"
    ?disabled="${this.disabled}">
    <i class="material-icons">${this.icon}</i>
    <slot></slot>
  </button>`;
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], IconButtonBase.prototype, "disabled", void 0);
    __decorate([
        property({ type: String })
    ], IconButtonBase.prototype, "icon", void 0);
    __decorate([
        property({ type: String })
    ], IconButtonBase.prototype, "label", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$5 = css `.mdc-icon-button{display:inline-block;position:relative;box-sizing:border-box;border:none;outline:none;background-color:transparent;fill:currentColor;color:inherit;font-size:24px;text-decoration:none;cursor:pointer;user-select:none;width:48px;height:48px;padding:12px}.mdc-icon-button svg,.mdc-icon-button img{width:24px;height:24px}.mdc-icon-button:disabled{color:rgba(0,0,0,.38);color:var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38))}.mdc-icon-button:disabled{cursor:default;pointer-events:none}.mdc-icon-button__icon{display:inline-block}.mdc-icon-button__icon.mdc-icon-button__icon--on{display:none}.mdc-icon-button--on .mdc-icon-button__icon{display:none}.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on{display:inline-block}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-icon-button{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-icon-button::before,.mdc-icon-button::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-icon-button::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-icon-button.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-icon-button.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-icon-button.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-icon-button.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-icon-button.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-icon-button::before,.mdc-icon-button::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-icon-button.mdc-ripple-upgraded::before,.mdc-icon-button.mdc-ripple-upgraded::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-icon-button.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-icon-button::before,.mdc-icon-button::after{background-color:#000}.mdc-icon-button:hover::before{opacity:.04}.mdc-icon-button.mdc-ripple-upgraded--background-focused::before,.mdc-icon-button:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-icon-button:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-icon-button:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.12}.mdc-icon-button.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}:host{display:inline-block;outline:none}:host,.mdc-icon-button{vertical-align:top}.mdc-icon-button{width:var(--mdc-icon-button-size, 48px);height:var(--mdc-icon-button-size, 48px);padding:calc((var(--mdc-icon-button-size, 48px) - var(--mdc-icon-size, 24px)) / 2)}.mdc-icon-button>i{position:absolute;top:0;padding-top:inherit}.mdc-icon-button i,.mdc-icon-button svg,.mdc-icon-button img,.mdc-icon-button ::slotted(*){display:block;width:var(--mdc-icon-size, 24px);height:var(--mdc-icon-size, 24px)}.mdc-ripple-upgraded:focus::before,.mdc-ripple-upgraded:focus::after{background-color:currentColor;background-color:var(--mdc-theme-on-primary, currentColor);opacity:.12;opacity:var(--mdc-icon-button-ripple-opacity, 0.12)}`;

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    let IconButton = class IconButton extends IconButtonBase {
    };
    IconButton.styles = style$5;
    IconButton = __decorate([
        customElement('mwc-icon-button')
    ], IconButton);

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$4 = {
        NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control',
    };
    var cssClasses$4 = {
        DISABLED: 'mdc-radio--disabled',
        ROOT: 'mdc-radio',
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCRadioFoundation = /** @class */ (function (_super) {
        __extends(MDCRadioFoundation, _super);
        function MDCRadioFoundation(adapter) {
            return _super.call(this, __assign({}, MDCRadioFoundation.defaultAdapter, adapter)) || this;
        }
        Object.defineProperty(MDCRadioFoundation, "cssClasses", {
            get: function () {
                return cssClasses$4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRadioFoundation, "strings", {
            get: function () {
                return strings$4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCRadioFoundation, "defaultAdapter", {
            get: function () {
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    setNativeControlDisabled: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCRadioFoundation.prototype.setDisabled = function (disabled) {
            var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;
            this.adapter_.setNativeControlDisabled(disabled);
            if (disabled) {
                this.adapter_.addClass(DISABLED);
            }
            else {
                this.adapter_.removeClass(DISABLED);
            }
        };
        return MDCRadioFoundation;
    }(MDCFoundation));

    class RadioBase extends FormElement {
        constructor() {
            super(...arguments);
            this._checked = false;
            this.disabled = false;
            this.value = '';
            this.name = '';
            this.mdcFoundationClass = MDCRadioFoundation;
        }
        get checked() {
            return this._checked;
        }
        /**
         * We define our own getter/setter for `checked` because we need to track
         * changes to it synchronously.
         *
         * The order in which the `checked` property is set across radio buttons
         * within the same group is very important. However, we can't rely on
         * UpdatingElement's `updated` callback to observe these changes (which is
         * also what the `@observer` decorator uses), because it batches changes to
         * all properties.
         *
         * Consider:
         *
         *   radio1.disabled = true;
         *   radio2.checked = true;
         *   radio1.checked = true;
         *
         * In this case we'd first see all changes for radio1, and then for radio2,
         * and we couldn't tell that radio1 was the most recently checked.
         */
        set checked(checked) {
            const oldValue = this._checked;
            if (!!checked === !!oldValue) {
                return;
            }
            this._checked = checked;
            if (this.formElement) {
                this.formElement.checked = checked;
            }
            if (this._selectionController !== undefined) {
                this._selectionController.update(this);
            }
            this.requestUpdate('checked', oldValue);
        }
        _handleUpdatedValue(newValue) {
            // the observer function can't access protected fields (according to
            // closure compiler) because it's not a method on the class, so we need this
            // wrapper.
            this.formElement.value = newValue;
        }
        connectedCallback() {
            super.connectedCallback();
            // Note that we must defer creating the selection controller until the
            // element has connected, because selection controllers are keyed by the
            // radio's shadow root. For example, if we're stamping in a lit-html map
            // or repeat, then we'll be constructed before we're added to a root node.
            //
            // Also note if we aren't using native shadow DOM, then we don't technically
            // need a SelectionController, because our inputs will share document-scoped
            // native selection groups. However, it simplifies implementation and
            // testing to use one in all cases. In particular, it means we correctly
            // manage groups before the first update stamps the native input.
            //
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            this._selectionController = SelectionController.getController(this);
            this._selectionController.register(this);
            // With native <input type="radio">, when a checked radio is added to the
            // root, then it wins. Immediately update to emulate this behavior.
            this._selectionController.update(this);
        }
        disconnectedCallback() {
            // The controller is initialized in connectedCallback, so if we are in
            // disconnectedCallback then it must be initialized.
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this._selectionController.unregister(this);
            this._selectionController = undefined;
        }
        focusNative() {
            this.formElement.focus();
        }
        get ripple() {
            return this.rippleElement.ripple;
        }
        createAdapter() {
            return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { setNativeControlDisabled: (disabled) => {
                    this.formElement.disabled = disabled;
                } });
        }
        _changeHandler() {
            this.checked = this.formElement.checked;
        }
        _focusHandler() {
            if (this._selectionController !== undefined) {
                this._selectionController.focus(this);
            }
        }
        _clickHandler() {
            // Firefox has weird behavior with radios if they are not focused
            this.formElement.focus();
        }
        render() {
            return html `
      <div class="mdc-radio" .ripple=${ripple()}>
        <input
          class="mdc-radio__native-control"
          type="radio"
          name="${this.name}"
          .checked="${this.checked}"
          .value="${this.value}"
          @change="${this._changeHandler}"
          @focus="${this._focusHandler}"
          @click="${this._clickHandler}">
        <div class="mdc-radio__background">
          <div class="mdc-radio__outer-circle"></div>
          <div class="mdc-radio__inner-circle"></div>
        </div>
        <div class="mdc-radio__ripple"></div>
      </div>`;
        }
        firstUpdated() {
            super.firstUpdated();
            // We might not have been able to synchronize this from the checked setter
            // earlier, if checked was set before the input was stamped.
            this.formElement.checked = this.checked;
            if (this._selectionController !== undefined) {
                this._selectionController.update(this);
            }
        }
    }
    __decorate([
        query('.mdc-radio')
    ], RadioBase.prototype, "mdcRoot", void 0);
    __decorate([
        query('input')
    ], RadioBase.prototype, "formElement", void 0);
    __decorate([
        query('.mdc-radio__ripple')
    ], RadioBase.prototype, "rippleElement", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], RadioBase.prototype, "checked", null);
    __decorate([
        property({ type: Boolean }),
        observer(function (disabled) {
            this.mdcFoundation.setDisabled(disabled);
        })
    ], RadioBase.prototype, "disabled", void 0);
    __decorate([
        property({ type: String }),
        observer(function (value) {
            this._handleUpdatedValue(value);
        })
    ], RadioBase.prototype, "value", void 0);
    __decorate([
        property({ type: String })
    ], RadioBase.prototype, "name", void 0);
    /**
     * Unique symbol for marking roots
     */
    const selectionController = Symbol('selection controller');
    class SelectionSet {
        constructor() {
            this.selected = null;
            this.ordered = null;
            this.set = new Set();
        }
    }
    /**
     * Only one <input type="radio" name="group"> per group name can be checked at
     * once. However, the scope of "name" is the document/shadow root, so built-in
     * de-selection does not occur when two radio buttons are in different shadow
     * roots. This class bridges the checked state of radio buttons with the same
     * group name across different shadow roots.
     */
    class SelectionController {
        constructor(element) {
            this.sets = {};
            this.focusedSet = null;
            this.mouseIsDown = false;
            this.updating = false;
            element.addEventListener('keydown', (e) => this.keyDownHandler(e));
            element.addEventListener('mousedown', () => this.mousedownHandler());
            element.addEventListener('mouseup', () => this.mouseupHandler());
        }
        static getController(element) {
            const root = element.getRootNode();
            let controller = root[selectionController];
            if (controller === undefined) {
                controller = new SelectionController(root);
                root[selectionController] = controller;
            }
            return controller;
        }
        keyDownHandler(e) {
            if (!(e.target instanceof RadioBase)) {
                return;
            }
            const element = e.target;
            if (!this.has(element)) {
                return;
            }
            if (e.key == 'ArrowRight' || e.key == 'ArrowDown') {
                this.next(element);
            }
            else if (e.key == 'ArrowLeft' || e.key == 'ArrowUp') {
                this.previous(element);
            }
        }
        mousedownHandler() {
            this.mouseIsDown = true;
        }
        mouseupHandler() {
            this.mouseIsDown = false;
        }
        has(element) {
            const set = this.getSet(element.name);
            return set.set.has(element);
        }
        previous(element) {
            const order = this.getOrdered(element);
            const i = order.indexOf(element);
            this.select(order[i - 1] || order[order.length - 1]);
        }
        next(element) {
            const order = this.getOrdered(element);
            const i = order.indexOf(element);
            this.select(order[i + 1] || order[0]);
        }
        select(element) {
            element.click();
        }
        /**
         * Helps to track the focused selection group and if it changes, focuses
         * the selected item in the group. This matches native radio button behavior.
         */
        focus(element) {
            // Only manage focus state when using keyboard
            if (this.mouseIsDown) {
                return;
            }
            const set = this.getSet(element.name);
            const currentFocusedSet = this.focusedSet;
            this.focusedSet = set;
            if (currentFocusedSet != set && set.selected && set.selected != element) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                set.selected.focusNative();
            }
        }
        getOrdered(element) {
            const set = this.getSet(element.name);
            if (!set.ordered) {
                set.ordered = Array.from(set.set);
                set.ordered.sort((a, b) => a.compareDocumentPosition(b) == Node.DOCUMENT_POSITION_PRECEDING ?
                    1 :
                    0);
            }
            return set.ordered;
        }
        getSet(name) {
            if (!this.sets[name]) {
                this.sets[name] = new SelectionSet();
            }
            return this.sets[name];
        }
        register(element) {
            const set = this.getSet(element.name);
            set.set.add(element);
            set.ordered = null;
        }
        unregister(element) {
            const set = this.getSet(element.name);
            set.set.delete(element);
            set.ordered = null;
            if (set.selected == element) {
                set.selected = null;
            }
        }
        update(element) {
            if (this.updating) {
                return;
            }
            this.updating = true;
            if (element.checked) {
                const set = this.getSet(element.name);
                for (const e of set.set) {
                    e.checked = (e == element);
                }
                set.selected = element;
            }
            this.updating = false;
        }
    }

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$6 = css `.mdc-touch-target-wrapper{display:inline}.mdc-radio{padding:10px;display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color}.mdc-radio .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:rgba(0,0,0,.54)}.mdc-radio .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786)}.mdc-radio .mdc-radio__native-control:enabled+.mdc-radio__background .mdc-radio__inner-circle{border-color:#018786;border-color:var(--mdc-theme-secondary, #018786)}.mdc-radio [aria-disabled=true] .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle,.mdc-radio .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:rgba(0,0,0,.38)}.mdc-radio [aria-disabled=true] .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mdc-radio .mdc-radio__native-control:disabled:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:rgba(0,0,0,.38)}.mdc-radio [aria-disabled=true] .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mdc-radio .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{border-color:rgba(0,0,0,.38)}.mdc-radio .mdc-radio__background::before{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-radio .mdc-radio__background::before{top:-10px;left:-10px;width:40px;height:40px}.mdc-radio .mdc-radio__native-control{top:0px;right:0px;left:0px;width:40px;height:40px}.mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:"";transition:opacity 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1),transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1),border-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;cursor:inherit;z-index:1}.mdc-radio--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-radio--touch .mdc-radio__native-control{top:-4px;right:-4px;left:-4px;width:48px;height:48px}.mdc-radio__native-control:checked+.mdc-radio__background,.mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1),border-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-radio--disabled{cursor:default;pointer-events:none}.mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1),border-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-radio__native-control:disabled+.mdc-radio__background,[aria-disabled=true] .mdc-radio__native-control+.mdc-radio__background{cursor:default}.mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1)}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-radio{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-radio .mdc-radio__ripple::before,.mdc-radio .mdc-radio__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-radio .mdc-radio__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-radio.mdc-ripple-upgraded .mdc-radio__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-radio.mdc-ripple-upgraded .mdc-radio__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-radio.mdc-ripple-upgraded--unbounded .mdc-radio__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-radio.mdc-ripple-upgraded--foreground-activation .mdc-radio__ripple::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-radio.mdc-ripple-upgraded--foreground-deactivation .mdc-radio__ripple::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-radio .mdc-radio__ripple::before,.mdc-radio .mdc-radio__ripple::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-radio.mdc-ripple-upgraded .mdc-radio__ripple::before,.mdc-radio.mdc-ripple-upgraded .mdc-radio__ripple::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-radio.mdc-ripple-upgraded .mdc-radio__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-radio .mdc-radio__ripple::before,.mdc-radio .mdc-radio__ripple::after{background-color:#018786;background-color:var(--mdc-theme-secondary, #018786)}.mdc-radio:hover .mdc-radio__ripple::before{opacity:.04}.mdc-radio.mdc-ripple-upgraded--background-focused .mdc-radio__ripple::before,.mdc-radio:not(.mdc-ripple-upgraded):focus .mdc-radio__ripple::before{transition-duration:75ms;opacity:.12}.mdc-radio:not(.mdc-ripple-upgraded) .mdc-radio__ripple::after{transition:opacity 150ms linear}.mdc-radio:not(.mdc-ripple-upgraded):active .mdc-radio__ripple::after{transition-duration:75ms;opacity:.12}.mdc-radio.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.12}.mdc-radio.mdc-ripple-upgraded--background-focused .mdc-radio__background::before{content:none}.mdc-radio__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}:host{display:inline-block;outline:none}.mdc-radio{vertical-align:bottom}.mdc-radio .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unchecked-color, rgba(0, 0, 0, 0.54))}.mdc-radio [aria-disabled=true] .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle,.mdc-radio .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-color, rgba(0, 0, 0, 0.38))}.mdc-radio [aria-disabled=true] .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mdc-radio .mdc-radio__native-control:disabled:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-color, rgba(0, 0, 0, 0.38))}.mdc-radio [aria-disabled=true] .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mdc-radio .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-disabled-color, rgba(0, 0, 0, 0.38))}`;

    let Radio = class Radio extends RadioBase {
    };
    Radio.styles = style$6;
    Radio = __decorate([
        customElement('mwc-radio')
    ], Radio);

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$5 = {
        NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',
    };
    var numbers$2 = {
        // This should stay in sync with $mdc-notched-outline-padding * 2.
        NOTCH_ELEMENT_PADDING: 8,
    };
    var cssClasses$5 = {
        NO_LABEL: 'mdc-notched-outline--no-label',
        OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
        OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',
    };

    /**
     * @license
     * Copyright 2017 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCNotchedOutlineFoundation = /** @class */ (function (_super) {
        __extends(MDCNotchedOutlineFoundation, _super);
        function MDCNotchedOutlineFoundation(adapter) {
            return _super.call(this, __assign({}, MDCNotchedOutlineFoundation.defaultAdapter, adapter)) || this;
        }
        Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
            get: function () {
                return strings$5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
            get: function () {
                return cssClasses$5;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
            get: function () {
                return numbers$2;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
            /**
             * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    setNotchWidthProperty: function () { return undefined; },
                    removeNotchWidthProperty: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
         */
        MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
            var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
            if (notchWidth > 0) {
                notchWidth += numbers$2.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
            }
            this.adapter_.setNotchWidthProperty(notchWidth);
            this.adapter_.addClass(OUTLINE_NOTCHED);
        };
        /**
         * Removes notched outline selector to close the notch in the outline.
         */
        MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
            var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
            this.adapter_.removeClass(OUTLINE_NOTCHED);
            this.adapter_.removeNotchWidthProperty();
        };
        return MDCNotchedOutlineFoundation;
    }(MDCFoundation));

    class NotchedOutlineBase extends BaseElement {
        constructor() {
            super(...arguments);
            this.mdcFoundationClass = MDCNotchedOutlineFoundation;
            this.width = 0;
            this.open = false;
            this.lastOpen = this.open;
        }
        createAdapter() {
            return {
                addClass: (className) => this.mdcRoot.classList.add(className),
                removeClass: (className) => this.mdcRoot.classList.remove(className),
                setNotchWidthProperty: (width) => this.notchElement.style.setProperty('width', `${width}px`),
                removeNotchWidthProperty: () => this.notchElement.style.removeProperty('width'),
            };
        }
        openOrClose(shouldOpen, width) {
            if (!this.mdcFoundation) {
                return;
            }
            if (shouldOpen && width !== undefined) {
                this.mdcFoundation.notch(width);
            }
            else {
                this.mdcFoundation.closeNotch();
            }
        }
        render() {
            this.openOrClose(this.open, this.width);
            return html `
      <div class="mdc-notched-outline">
        <div class="mdc-notched-outline__leading"></div>
        <div class="mdc-notched-outline__notch">
          <slot></slot>
        </div>
        <div class="mdc-notched-outline__trailing"></div>
      </div>`;
        }
    }
    __decorate([
        query('.mdc-notched-outline')
    ], NotchedOutlineBase.prototype, "mdcRoot", void 0);
    __decorate([
        property({ type: Number })
    ], NotchedOutlineBase.prototype, "width", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], NotchedOutlineBase.prototype, "open", void 0);
    __decorate([
        query('.mdc-notched-outline__notch')
    ], NotchedOutlineBase.prototype, "notchElement", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$7 = css `.mdc-notched-outline{display:flex;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / .75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{padding:0}:host{display:block;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] :host,:host[dir=rtl]{text-align:right}::slotted(.mdc-floating-label){display:inline-block;position:relative;top:17px;bottom:auto;max-width:100%}::slotted(.mdc-floating-label--float-above){text-overflow:clip}.mdc-notched-outline--upgraded ::slotted(.mdc-floating-label--float-above){max-width:calc(100% / .75)}.mdc-notched-outline__leading{width:12px;width:var(--mdc-notched-outline-leading-width, 12px);border-radius:4px 0 0 4px;border-radius:var(--mdc-notched-outline-leading-border-radius, 4px 0 0 4px)}.mdc-notched-outline__trailing{border-radius:0 4px 4px 0;border-radius:var(--mdc-notched-outline-trailing-border-radius, 0 4px 4px 0)}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{border-color:var(--mdc-notched-outline-border-color, var(--mdc-theme-primary, #6200ee));border-width:1px;border-width:var(--mdc-notched-outline-stroke-width, 1px)}`;

    let NotchedOutline = class NotchedOutline extends NotchedOutlineBase {
    };
    NotchedOutline.styles = style$7;
    NotchedOutline = __decorate([
        customElement('mwc-notched-outline')
    ], NotchedOutline);

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$6 = {
        LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
        LABEL_SHAKE: 'mdc-floating-label--shake',
        ROOT: 'mdc-floating-label',
    };

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCFloatingLabelFoundation = /** @class */ (function (_super) {
        __extends(MDCFloatingLabelFoundation, _super);
        function MDCFloatingLabelFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCFloatingLabelFoundation.defaultAdapter, adapter)) || this;
            _this.shakeAnimationEndHandler_ = function () { return _this.handleShakeAnimationEnd_(); };
            return _this;
        }
        Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
            get: function () {
                return cssClasses$6;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
            /**
             * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    getWidth: function () { return 0; },
                    registerInteractionHandler: function () { return undefined; },
                    deregisterInteractionHandler: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCFloatingLabelFoundation.prototype.init = function () {
            this.adapter_.registerInteractionHandler('animationend', this.shakeAnimationEndHandler_);
        };
        MDCFloatingLabelFoundation.prototype.destroy = function () {
            this.adapter_.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler_);
        };
        /**
         * Returns the width of the label element.
         */
        MDCFloatingLabelFoundation.prototype.getWidth = function () {
            return this.adapter_.getWidth();
        };
        /**
         * Styles the label to produce a shake animation to indicate an error.
         * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
         */
        MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
            var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
            if (shouldShake) {
                this.adapter_.addClass(LABEL_SHAKE);
            }
            else {
                this.adapter_.removeClass(LABEL_SHAKE);
            }
        };
        /**
         * Styles the label to float or dock.
         * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
         */
        MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
            var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
            if (shouldFloat) {
                this.adapter_.addClass(LABEL_FLOAT_ABOVE);
            }
            else {
                this.adapter_.removeClass(LABEL_FLOAT_ABOVE);
                this.adapter_.removeClass(LABEL_SHAKE);
            }
        };
        MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd_ = function () {
            var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
            this.adapter_.removeClass(LABEL_SHAKE);
        };
        return MDCFloatingLabelFoundation;
    }(MDCFoundation));

    const createAdapter = (labelElement) => {
        return {
            addClass: (className) => labelElement.classList.add(className),
            removeClass: (className) => labelElement.classList.remove(className),
            getWidth: () => labelElement.scrollWidth,
            registerInteractionHandler: (evtType, handler) => {
                labelElement.addEventListener(evtType, handler);
            },
            deregisterInteractionHandler: (evtType, handler) => {
                labelElement.removeEventListener(evtType, handler);
            },
        };
    };
    const partToFoundationMap = new WeakMap();
    const floatingLabel = directive((label) => (part) => {
        const lastFoundation = partToFoundationMap.get(part);
        if (!lastFoundation) {
            const labelElement = part.committer.element;
            labelElement.classList.add('mdc-floating-label');
            const adapter = createAdapter(labelElement);
            const foundation = new MDCFloatingLabelFoundation(adapter);
            foundation.init();
            part.setValue(foundation);
            partToFoundationMap.set(part, { label, foundation });
        }
        else if (lastFoundation.label !== label) {
            const labelElement = part.committer.element;
            const labelChangeEvent = new Event('labelchange');
            labelElement.dispatchEvent(labelChangeEvent);
        }
    });

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$7 = {
        LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
        LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCLineRippleFoundation = /** @class */ (function (_super) {
        __extends(MDCLineRippleFoundation, _super);
        function MDCLineRippleFoundation(adapter) {
            var _this = _super.call(this, __assign({}, MDCLineRippleFoundation.defaultAdapter, adapter)) || this;
            _this.transitionEndHandler_ = function (evt) { return _this.handleTransitionEnd(evt); };
            return _this;
        }
        Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
            get: function () {
                return cssClasses$7;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
            /**
             * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setStyle: function () { return undefined; },
                    registerEventHandler: function () { return undefined; },
                    deregisterEventHandler: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCLineRippleFoundation.prototype.init = function () {
            this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);
        };
        MDCLineRippleFoundation.prototype.destroy = function () {
            this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);
        };
        MDCLineRippleFoundation.prototype.activate = function () {
            this.adapter_.removeClass(cssClasses$7.LINE_RIPPLE_DEACTIVATING);
            this.adapter_.addClass(cssClasses$7.LINE_RIPPLE_ACTIVE);
        };
        MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
            this.adapter_.setStyle('transform-origin', xCoordinate + "px center");
        };
        MDCLineRippleFoundation.prototype.deactivate = function () {
            this.adapter_.addClass(cssClasses$7.LINE_RIPPLE_DEACTIVATING);
        };
        MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
            // Wait for the line ripple to be either transparent or opaque
            // before emitting the animation end event
            var isDeactivating = this.adapter_.hasClass(cssClasses$7.LINE_RIPPLE_DEACTIVATING);
            if (evt.propertyName === 'opacity') {
                if (isDeactivating) {
                    this.adapter_.removeClass(cssClasses$7.LINE_RIPPLE_ACTIVE);
                    this.adapter_.removeClass(cssClasses$7.LINE_RIPPLE_DEACTIVATING);
                }
            }
        };
        return MDCLineRippleFoundation;
    }(MDCFoundation));

    const createAdapter$1 = (lineElement) => {
        return {
            addClass: (className) => lineElement.classList.add(className),
            removeClass: (className) => lineElement.classList.remove(className),
            hasClass: (className) => lineElement.classList.contains(className),
            setStyle: (propertyName, value) => lineElement.style.setProperty(propertyName, value),
            registerEventHandler: (evtType, handler) => {
                lineElement.addEventListener(evtType, handler);
            },
            deregisterEventHandler: (evtType, handler) => {
                lineElement.removeEventListener(evtType, handler);
            },
        };
    };
    const partToFoundationMap$1 = new WeakMap();
    const lineRipple = directive(() => (part) => {
        const lastFoundation = partToFoundationMap$1.get(part);
        if (!lastFoundation) {
            const lineElement = part.committer.element;
            lineElement.classList.add('mdc-line-ripple');
            const adapter = createAdapter$1(lineElement);
            const foundation = new MDCLineRippleFoundation(adapter);
            foundation.init();
            part.setValue(foundation);
            partToFoundationMap$1.set(part, foundation);
        }
    });

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var strings$6 = {
        ARIA_CONTROLS: 'aria-controls',
        ICON_SELECTOR: '.mdc-text-field__icon',
        INPUT_SELECTOR: '.mdc-text-field__input',
        LABEL_SELECTOR: '.mdc-floating-label',
        LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
        OUTLINE_SELECTOR: '.mdc-notched-outline',
    };
    var cssClasses$8 = {
        DENSE: 'mdc-text-field--dense',
        DISABLED: 'mdc-text-field--disabled',
        FOCUSED: 'mdc-text-field--focused',
        FULLWIDTH: 'mdc-text-field--fullwidth',
        HELPER_LINE: 'mdc-text-field-helper-line',
        INVALID: 'mdc-text-field--invalid',
        NO_LABEL: 'mdc-text-field--no-label',
        OUTLINED: 'mdc-text-field--outlined',
        ROOT: 'mdc-text-field',
        TEXTAREA: 'mdc-text-field--textarea',
        WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
        WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon',
    };
    var numbers$3 = {
        DENSE_LABEL_SCALE: 0.923,
        LABEL_SCALE: 0.75,
    };
    /**
     * Whitelist based off of https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
     * under the "Validation-related attributes" section.
     */
    var VALIDATION_ATTR_WHITELIST = [
        'pattern', 'min', 'max', 'required', 'step', 'minlength', 'maxlength',
    ];
    /**
     * Label should always float for these types as they show some UI even if value is empty.
     */
    var ALWAYS_FLOAT_TYPES = [
        'color', 'date', 'datetime-local', 'month', 'range', 'time', 'week',
    ];

    /**
     * @license
     * Copyright 2016 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
    var INTERACTION_EVENTS = ['click', 'keydown'];
    var MDCTextFieldFoundation = /** @class */ (function (_super) {
        __extends(MDCTextFieldFoundation, _super);
        /**
         * @param adapter
         * @param foundationMap Map from subcomponent names to their subfoundations.
         */
        function MDCTextFieldFoundation(adapter, foundationMap) {
            if (foundationMap === void 0) { foundationMap = {}; }
            var _this = _super.call(this, __assign({}, MDCTextFieldFoundation.defaultAdapter, adapter)) || this;
            _this.isFocused_ = false;
            _this.receivedUserInput_ = false;
            _this.isValid_ = true;
            _this.useNativeValidation_ = true;
            _this.helperText_ = foundationMap.helperText;
            _this.characterCounter_ = foundationMap.characterCounter;
            _this.leadingIcon_ = foundationMap.leadingIcon;
            _this.trailingIcon_ = foundationMap.trailingIcon;
            _this.inputFocusHandler_ = function () { return _this.activateFocus(); };
            _this.inputBlurHandler_ = function () { return _this.deactivateFocus(); };
            _this.inputInputHandler_ = function () { return _this.handleInput(); };
            _this.setPointerXOffset_ = function (evt) { return _this.setTransformOrigin(evt); };
            _this.textFieldInteractionHandler_ = function () { return _this.handleTextFieldInteraction(); };
            _this.validationAttributeChangeHandler_ = function (attributesList) { return _this.handleValidationAttributeChange(attributesList); };
            return _this;
        }
        Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
            get: function () {
                return cssClasses$8;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation, "strings", {
            get: function () {
                return strings$6;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation, "numbers", {
            get: function () {
                return numbers$3;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat_", {
            get: function () {
                var type = this.getNativeInput_().type;
                return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
            get: function () {
                return this.shouldAlwaysFloat_ || this.isFocused_ || !!this.getValue() || this.isBadInput_();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
            get: function () {
                return !this.isFocused_ && !this.isValid() && !!this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
            /**
             * See {@link MDCTextFieldAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return true; },
                    registerTextFieldInteractionHandler: function () { return undefined; },
                    deregisterTextFieldInteractionHandler: function () { return undefined; },
                    registerInputInteractionHandler: function () { return undefined; },
                    deregisterInputInteractionHandler: function () { return undefined; },
                    registerValidationAttributeChangeHandler: function () { return new MutationObserver(function () { return undefined; }); },
                    deregisterValidationAttributeChangeHandler: function () { return undefined; },
                    getNativeInput: function () { return null; },
                    isFocused: function () { return false; },
                    activateLineRipple: function () { return undefined; },
                    deactivateLineRipple: function () { return undefined; },
                    setLineRippleTransformOrigin: function () { return undefined; },
                    shakeLabel: function () { return undefined; },
                    floatLabel: function () { return undefined; },
                    hasLabel: function () { return false; },
                    getLabelWidth: function () { return 0; },
                    hasOutline: function () { return false; },
                    notchOutline: function () { return undefined; },
                    closeOutline: function () { return undefined; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        MDCTextFieldFoundation.prototype.init = function () {
            var _this = this;
            if (this.adapter_.isFocused()) {
                this.inputFocusHandler_();
            }
            else if (this.adapter_.hasLabel() && this.shouldFloat) {
                this.notchOutline(true);
                this.adapter_.floatLabel(true);
            }
            this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);
            this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);
            this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);
            POINTERDOWN_EVENTS.forEach(function (evtType) {
                _this.adapter_.registerInputInteractionHandler(evtType, _this.setPointerXOffset_);
            });
            INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter_.registerTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);
            });
            this.validationObserver_ =
                this.adapter_.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler_);
            this.setCharacterCounter_(this.getValue().length);
        };
        MDCTextFieldFoundation.prototype.destroy = function () {
            var _this = this;
            this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);
            this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);
            this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);
            POINTERDOWN_EVENTS.forEach(function (evtType) {
                _this.adapter_.deregisterInputInteractionHandler(evtType, _this.setPointerXOffset_);
            });
            INTERACTION_EVENTS.forEach(function (evtType) {
                _this.adapter_.deregisterTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);
            });
            this.adapter_.deregisterValidationAttributeChangeHandler(this.validationObserver_);
        };
        /**
         * Handles user interactions with the Text Field.
         */
        MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
            var nativeInput = this.adapter_.getNativeInput();
            if (nativeInput && nativeInput.disabled) {
                return;
            }
            this.receivedUserInput_ = true;
        };
        /**
         * Handles validation attribute changes
         */
        MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
            var _this = this;
            attributesList.some(function (attributeName) {
                if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
                    _this.styleValidity_(true);
                    return true;
                }
                return false;
            });
            if (attributesList.indexOf('maxlength') > -1) {
                this.setCharacterCounter_(this.getValue().length);
            }
        };
        /**
         * Opens/closes the notched outline.
         */
        MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
            if (!this.adapter_.hasOutline()) {
                return;
            }
            if (openNotch) {
                var isDense = this.adapter_.hasClass(cssClasses$8.DENSE);
                var labelScale = isDense ? numbers$3.DENSE_LABEL_SCALE : numbers$3.LABEL_SCALE;
                var labelWidth = this.adapter_.getLabelWidth() * labelScale;
                this.adapter_.notchOutline(labelWidth);
            }
            else {
                this.adapter_.closeOutline();
            }
        };
        /**
         * Activates the text field focus state.
         */
        MDCTextFieldFoundation.prototype.activateFocus = function () {
            this.isFocused_ = true;
            this.styleFocused_(this.isFocused_);
            this.adapter_.activateLineRipple();
            if (this.adapter_.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter_.floatLabel(this.shouldFloat);
                this.adapter_.shakeLabel(this.shouldShake);
            }
            if (this.helperText_) {
                this.helperText_.showToScreenReader();
            }
        };
        /**
         * Sets the line ripple's transform origin, so that the line ripple activate
         * animation will animate out from the user's click location.
         */
        MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
            var touches = evt.touches;
            var targetEvent = touches ? touches[0] : evt;
            var targetClientRect = targetEvent.target.getBoundingClientRect();
            var normalizedX = targetEvent.clientX - targetClientRect.left;
            this.adapter_.setLineRippleTransformOrigin(normalizedX);
        };
        /**
         * Handles input change of text input and text area.
         */
        MDCTextFieldFoundation.prototype.handleInput = function () {
            this.autoCompleteFocus();
            this.setCharacterCounter_(this.getValue().length);
        };
        /**
         * Activates the Text Field's focus state in cases when the input value
         * changes without user input (e.g. programmatically).
         */
        MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
            if (!this.receivedUserInput_) {
                this.activateFocus();
            }
        };
        /**
         * Deactivates the Text Field's focus state.
         */
        MDCTextFieldFoundation.prototype.deactivateFocus = function () {
            this.isFocused_ = false;
            this.adapter_.deactivateLineRipple();
            var isValid = this.isValid();
            this.styleValidity_(isValid);
            this.styleFocused_(this.isFocused_);
            if (this.adapter_.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter_.floatLabel(this.shouldFloat);
                this.adapter_.shakeLabel(this.shouldShake);
            }
            if (!this.shouldFloat) {
                this.receivedUserInput_ = false;
            }
        };
        MDCTextFieldFoundation.prototype.getValue = function () {
            return this.getNativeInput_().value;
        };
        /**
         * @param value The value to set on the input Element.
         */
        MDCTextFieldFoundation.prototype.setValue = function (value) {
            // Prevent Safari from moving the caret to the end of the input when the value has not changed.
            if (this.getValue() !== value) {
                this.getNativeInput_().value = value;
            }
            this.setCharacterCounter_(value.length);
            var isValid = this.isValid();
            this.styleValidity_(isValid);
            if (this.adapter_.hasLabel()) {
                this.notchOutline(this.shouldFloat);
                this.adapter_.floatLabel(this.shouldFloat);
                this.adapter_.shakeLabel(this.shouldShake);
            }
        };
        /**
         * @return The custom validity state, if set; otherwise, the result of a native validity check.
         */
        MDCTextFieldFoundation.prototype.isValid = function () {
            return this.useNativeValidation_
                ? this.isNativeInputValid_() : this.isValid_;
        };
        /**
         * @param isValid Sets the custom validity state of the Text Field.
         */
        MDCTextFieldFoundation.prototype.setValid = function (isValid) {
            this.isValid_ = isValid;
            this.styleValidity_(isValid);
            var shouldShake = !isValid && !this.isFocused_ && !!this.getValue();
            if (this.adapter_.hasLabel()) {
                this.adapter_.shakeLabel(shouldShake);
            }
        };
        /**
         * Enables or disables the use of native validation. Use this for custom validation.
         * @param useNativeValidation Set this to false to ignore native input validation.
         */
        MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
            this.useNativeValidation_ = useNativeValidation;
        };
        MDCTextFieldFoundation.prototype.isDisabled = function () {
            return this.getNativeInput_().disabled;
        };
        /**
         * @param disabled Sets the text-field disabled or enabled.
         */
        MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
            this.getNativeInput_().disabled = disabled;
            this.styleDisabled_(disabled);
        };
        /**
         * @param content Sets the content of the helper text.
         */
        MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
            if (this.helperText_) {
                this.helperText_.setContent(content);
            }
        };
        /**
         * Sets the aria label of the leading icon.
         */
        MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
            if (this.leadingIcon_) {
                this.leadingIcon_.setAriaLabel(label);
            }
        };
        /**
         * Sets the text content of the leading icon.
         */
        MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
            if (this.leadingIcon_) {
                this.leadingIcon_.setContent(content);
            }
        };
        /**
         * Sets the aria label of the trailing icon.
         */
        MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
            if (this.trailingIcon_) {
                this.trailingIcon_.setAriaLabel(label);
            }
        };
        /**
         * Sets the text content of the trailing icon.
         */
        MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
            if (this.trailingIcon_) {
                this.trailingIcon_.setContent(content);
            }
        };
        /**
         * Sets character counter values that shows characters used and the total character limit.
         */
        MDCTextFieldFoundation.prototype.setCharacterCounter_ = function (currentLength) {
            if (!this.characterCounter_) {
                return;
            }
            var maxLength = this.getNativeInput_().maxLength;
            if (maxLength === -1) {
                throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
            }
            this.characterCounter_.setCounterValue(currentLength, maxLength);
        };
        /**
         * @return True if the Text Field input fails in converting the user-supplied value.
         */
        MDCTextFieldFoundation.prototype.isBadInput_ = function () {
            // The badInput property is not supported in IE 11 💩.
            return this.getNativeInput_().validity.badInput || false;
        };
        /**
         * @return The result of native validity checking (ValidityState.valid).
         */
        MDCTextFieldFoundation.prototype.isNativeInputValid_ = function () {
            return this.getNativeInput_().validity.valid;
        };
        /**
         * Styles the component based on the validity state.
         */
        MDCTextFieldFoundation.prototype.styleValidity_ = function (isValid) {
            var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
            if (isValid) {
                this.adapter_.removeClass(INVALID);
            }
            else {
                this.adapter_.addClass(INVALID);
            }
            if (this.helperText_) {
                this.helperText_.setValidity(isValid);
            }
        };
        /**
         * Styles the component based on the focused state.
         */
        MDCTextFieldFoundation.prototype.styleFocused_ = function (isFocused) {
            var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
            if (isFocused) {
                this.adapter_.addClass(FOCUSED);
            }
            else {
                this.adapter_.removeClass(FOCUSED);
            }
        };
        /**
         * Styles the component based on the disabled state.
         */
        MDCTextFieldFoundation.prototype.styleDisabled_ = function (isDisabled) {
            var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
            if (isDisabled) {
                this.adapter_.addClass(DISABLED);
                this.adapter_.removeClass(INVALID);
            }
            else {
                this.adapter_.removeClass(DISABLED);
            }
            if (this.leadingIcon_) {
                this.leadingIcon_.setDisabled(isDisabled);
            }
            if (this.trailingIcon_) {
                this.trailingIcon_.setDisabled(isDisabled);
            }
        };
        /**
         * @return The native text input element from the host environment, or an object with the same shape for unit tests.
         */
        MDCTextFieldFoundation.prototype.getNativeInput_ = function () {
            // this.adapter_ may be undefined in foundation unit tests. This happens when testdouble is creating a mock object
            // and invokes the shouldShake/shouldFloat getters (which in turn call getValue(), which calls this method) before
            // init() has been called from the MDCTextField constructor. To work around that issue, we return a dummy object.
            var nativeInput = this.adapter_ ? this.adapter_.getNativeInput() : null;
            return nativeInput || {
                disabled: false,
                maxLength: -1,
                type: 'input',
                validity: {
                    badInput: false,
                    valid: true,
                },
                value: '',
            };
        };
        return MDCTextFieldFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * For AttributeParts, sets the attribute if the value is defined and removes
     * the attribute if the value is undefined.
     *
     * For other part types, this directive is a no-op.
     */
    const ifDefined = directive((value) => (part) => {
        if (value === undefined && part instanceof AttributePart) {
            if (value !== part.value) {
                const name = part.committer.name;
                part.committer.element.removeAttribute(name);
            }
        }
        else {
            part.setValue(value);
        }
    });

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$9 = {
        ROOT: 'mdc-text-field-character-counter',
    };
    var strings$7 = {
        ROOT_SELECTOR: "." + cssClasses$9.ROOT,
    };

    /**
     * @license
     * Copyright 2019 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTextFieldCharacterCounterFoundation = /** @class */ (function (_super) {
        __extends(MDCTextFieldCharacterCounterFoundation, _super);
        function MDCTextFieldCharacterCounterFoundation(adapter) {
            return _super.call(this, __assign({}, MDCTextFieldCharacterCounterFoundation.defaultAdapter, adapter)) || this;
        }
        Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "cssClasses", {
            get: function () {
                return cssClasses$9;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "strings", {
            get: function () {
                return strings$7;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "defaultAdapter", {
            /**
             * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.
             */
            get: function () {
                return {
                    setContent: function () { return undefined; },
                };
            },
            enumerable: true,
            configurable: true
        });
        MDCTextFieldCharacterCounterFoundation.prototype.setCounterValue = function (currentLength, maxLength) {
            currentLength = Math.min(currentLength, maxLength);
            this.adapter_.setContent(currentLength + " / " + maxLength);
        };
        return MDCTextFieldCharacterCounterFoundation;
    }(MDCFoundation));

    const createAdapter$2 = (hostElement) => {
        return { setContent: (content) => hostElement.textContent = content };
    };
    const partToFoundationMap$2 = new WeakMap();
    const characterCounter = directive(() => (part) => {
        const lastFoundation = partToFoundationMap$2.get(part);
        if (!lastFoundation) {
            const hostElement = part.committer.element;
            hostElement.classList.add('mdc-text-field-character-counter');
            const adapter = createAdapter$2(hostElement);
            const foundation = new MDCTextFieldCharacterCounterFoundation(adapter);
            foundation.init();
            part.setValue(foundation);
            partToFoundationMap$2.set(part, foundation);
        }
    });

    const passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];
    const createValidityObj = (customValidity = {}) => {
        /*
         * We need to make ValidityState an object because it is readonly and
         * we cannot use the spread operator. Also, we don't export
         * `CustomValidityState` because it is a leaky implementation and the user
         * already has access to `ValidityState` in lib.dom.ts. Also an interface
         * {a: Type} can be casted to {readonly a: Type} so passing any object
         * should be fine.
         */
        const objectifiedCustomValidity = {};
        // eslint-disable-next-line guard-for-in
        for (const propName in customValidity) {
            /*
             * Casting is needed because ValidityState's props are all readonly and
             * thus cannot be set on `onjectifiedCustomValidity`. In the end, the
             * interface is the same as ValidityState (but not readonly), but the
             * function signature casts the output to ValidityState (thus readonly).
             */
            objectifiedCustomValidity[propName] =
                customValidity[propName];
        }
        return Object.assign({ badInput: false, customError: false, patternMismatch: false, rangeOverflow: false, rangeUnderflow: false, stepMismatch: false, tooLong: false, tooShort: false, typeMismatch: false, valid: true, valueMissing: false }, objectifiedCustomValidity);
    };
    class TextFieldBase extends FormElement {
        constructor() {
            super(...arguments);
            this.mdcFoundationClass = MDCTextFieldFoundation;
            this.value = '';
            this.type = 'text';
            this.placeholder = '';
            this.label = '';
            this.icon = '';
            this.iconTrailing = '';
            this.disabled = false;
            this.required = false;
            this.maxLength = -1;
            this.outlined = false;
            this.fullWidth = false;
            this.helper = '';
            this.validateOnInitialRender = false;
            this.validationMessage = '';
            this.pattern = '';
            this.min = '';
            this.max = '';
            this.step = null;
            this.helperPersistent = false;
            this.charCounter = false;
            this.outlineOpen = false;
            this.outlineWidth = 0;
            this.isUiValid = true;
            this._validity = createValidityObj();
            this._outlineUpdateComplete = null;
            this.validityTransform = null;
        }
        get validity() {
            this._checkValidity(this.value);
            return this._validity;
        }
        get willValidate() {
            return this.formElement.willValidate;
        }
        get selectionStart() {
            return this.formElement.selectionStart;
        }
        get selectionEnd() {
            return this.formElement.selectionEnd;
        }
        get shouldRenderHelperText() {
            return !!this.helper || !!this.validationMessage || this.charCounterVisible;
        }
        get charCounterVisible() {
            return this.charCounter && this.maxLength !== -1;
        }
        focus() {
            const focusEvt = new CustomEvent('focus');
            this.formElement.dispatchEvent(focusEvt);
            this.formElement.focus();
        }
        blur() {
            const blurEvt = new CustomEvent('blur');
            this.formElement.dispatchEvent(blurEvt);
            this.formElement.blur();
        }
        select() {
            this.formElement.select();
        }
        setSelectionRange(selectionStart, selectionEnd, selectionDirection) {
            this.formElement.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
        }
        render() {
            const classes = {
                'mdc-text-field--disabled': this.disabled,
                'mdc-text-field--no-label': !this.label,
                'mdc-text-field--outlined': this.outlined,
                'mdc-text-field--fullwidth': this.fullWidth,
                'mdc-text-field--with-leading-icon': this.icon,
                'mdc-text-field--with-trailing-icon': this.iconTrailing,
            };
            return html `
      <div class="mdc-text-field ${classMap(classes)}">
        ${this.icon ? this.renderIcon(this.icon) : ''}
        ${this.renderInput()}
        ${this.iconTrailing ? this.renderIcon(this.iconTrailing) : ''}
        ${this.outlined ? this.renderOutlined() : this.renderLabelText()}
      </div>
      ${this.renderHelperText(this.renderCharCounter())}
    `;
        }
        updated(changedProperties) {
            const maxLength = changedProperties.get('maxLength');
            const maxLengthBecameDefined = maxLength === -1 && this.maxLength !== -1;
            const maxLengthBecameUndefined = maxLength !== undefined && maxLength !== -1 && this.maxLength === -1;
            /* We want to recreate the foundation if maxLength changes to defined or
             * undefined, because the textfield foundation needs to be instantiated with
             * the char counter's foundation, and the char counter's foundation needs
             * to have maxLength defined to be instantiated. Additionally, there is no
             * exposed API on the MdcTextFieldFoundation to dynamically add a char
             * counter foundation, so we must recreate it.
             */
            if (maxLengthBecameDefined || maxLengthBecameUndefined) {
                this.createFoundation();
            }
            if (changedProperties.has('value') &&
                changedProperties.get('value') !== undefined) {
                this.mdcFoundation.setValue(this.value);
            }
        }
        renderInput() {
            const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;
            return html `
      <input
          id="text-field"
          class="mdc-text-field__input"
          type="${this.type}"
          .value="${this.value}"
          ?disabled="${this.disabled}"
          placeholder="${this.placeholder}"
          ?required="${this.required}"
          maxlength="${ifDefined(maxOrUndef)}"
          pattern="${ifDefined(this.pattern ? this.pattern : undefined)}"
          min="${ifDefined(this.min === '' ? undefined : this.min)}"
          max="${ifDefined(this.max === '' ? undefined : this.max)}"
          step="${ifDefined(this.step === null ? undefined : this.step)}"
          @input="${this.handleInputChange}"
          @blur="${this.onInputBlur}">`;
        }
        renderIcon(icon) {
            return html `<i class="material-icons mdc-text-field__icon">${icon}</i>`;
        }
        renderOutlined() {
            let labelTemplate = '';
            if (this.label) {
                labelTemplate = html `
        <label
            .floatingLabelFoundation=${floatingLabel(this.label)}
            @labelchange=${this.onLabelChange}
            for="text-field">
          ${this.label}
        </label>
      `;
            }
            return html `
      <mwc-notched-outline
          .width=${this.outlineWidth}
          .open=${this.outlineOpen}
          class="mdc-notched-outline">
        ${labelTemplate}
      </mwc-notched-outline>`;
        }
        renderLabelText() {
            let labelTemplate = '';
            if (this.label && !this.fullWidth) {
                labelTemplate = html `
      <label
          .floatingLabelFoundation=${floatingLabel(this.label)}
          for="text-field">
        ${this.label}
      </label>`;
            }
            return html `
      ${labelTemplate}
      <div .lineRippleFoundation=${lineRipple()}></div>
    `;
        }
        renderHelperText(charCounterTemplate) {
            const showValidationMessage = this.validationMessage && !this.isUiValid;
            const classes = {
                'mdc-text-field-helper-text--persistent': this.helperPersistent,
                'mdc-text-field-helper-text--validation-msg': showValidationMessage,
            };
            const rootClasses = {
                hidden: !this.shouldRenderHelperText,
            };
            return html `
      <div class="mdc-text-field-helper-line ${classMap(rootClasses)}">
        <div class="mdc-text-field-helper-text ${classMap(classes)}">
          ${showValidationMessage ? this.validationMessage : this.helper}
        </div>
        ${charCounterTemplate}
      </div>
    `;
        }
        renderCharCounter() {
            const counterClasses = {
                hidden: !this.charCounterVisible,
            };
            return html `
      <div
          class="${classMap(counterClasses)}"
          .charCounterFoundation=${characterCounter()}>
      </div>`;
        }
        onInputBlur() {
            this.reportValidity();
        }
        checkValidity() {
            const isValid = this._checkValidity(this.value);
            if (!isValid) {
                const invalidEvent = new Event('invalid', { bubbles: false, cancelable: true });
                this.dispatchEvent(invalidEvent);
            }
            return isValid;
        }
        reportValidity() {
            const isValid = this.checkValidity();
            this.mdcFoundation.setValid(isValid);
            this.isUiValid = isValid;
            return isValid;
        }
        _checkValidity(value) {
            const nativeValidity = this.formElement.validity;
            let validity = createValidityObj(nativeValidity);
            if (this.validityTransform) {
                const customValidity = this.validityTransform(value, validity);
                validity = Object.assign(Object.assign({}, validity), customValidity);
                this.mdcFoundation.setUseNativeValidation(false);
            }
            else {
                this.mdcFoundation.setUseNativeValidation(true);
            }
            this._validity = validity;
            return this._validity.valid;
        }
        setCustomValidity(message) {
            this.validationMessage = message;
            this.formElement.setCustomValidity(message);
        }
        handleInputChange() {
            this.value = this.formElement.value;
        }
        createFoundation() {
            if (this.mdcFoundation !== undefined) {
                this.mdcFoundation.destroy();
            }
            this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter(), {
                characterCounter: this.maxLength !== -1 ?
                    this.charCounterElement.charCounterFoundation :
                    undefined
            });
            this.mdcFoundation.init();
        }
        createAdapter() {
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
        }
        getRootAdapterMethods() {
            return Object.assign({ registerTextFieldInteractionHandler: (evtType, handler) => this.addEventListener(evtType, handler), deregisterTextFieldInteractionHandler: (evtType, handler) => this.removeEventListener(evtType, handler), registerValidationAttributeChangeHandler: () => {
                    const getAttributesList = (mutationsList) => {
                        return mutationsList.map((mutation) => mutation.attributeName)
                            .filter((attributeName) => attributeName);
                    };
                    const observer = new MutationObserver((mutationsList) => {
                        const attributes = getAttributesList(mutationsList);
                        if (attributes.indexOf('maxlength') !== -1 && this.maxLength !== -1) {
                            this.charCounterElement.charCounterFoundation.setCounterValue(this.value.length, this.maxLength);
                        }
                    });
                    const config = { attributes: true };
                    observer.observe(this.formElement, config);
                    return observer;
                }, deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect() }, addHasRemoveClass(this.mdcRoot));
        }
        getInputAdapterMethods() {
            return {
                getNativeInput: () => this.formElement,
                isFocused: () => this.shadowRoot ?
                    this.shadowRoot.activeElement === this.formElement :
                    false,
                registerInputInteractionHandler: (evtType, handler) => this.formElement.addEventListener(evtType, handler, { passive: evtType in passiveEvents }),
                deregisterInputInteractionHandler: (evtType, handler) => this.formElement.removeEventListener(evtType, handler),
            };
        }
        getLabelAdapterMethods() {
            return {
                floatLabel: (shouldFloat) => this.labelElement &&
                    this.labelElement.floatingLabelFoundation.float(shouldFloat),
                getLabelWidth: () => {
                    return this.labelElement ?
                        this.labelElement.floatingLabelFoundation.getWidth() :
                        0;
                },
                hasLabel: () => Boolean(this.labelElement),
                shakeLabel: (shouldShake) => this.labelElement &&
                    this.labelElement.floatingLabelFoundation.shake(shouldShake),
            };
        }
        getLineRippleAdapterMethods() {
            return {
                activateLineRipple: () => {
                    if (this.lineRippleElement) {
                        this.lineRippleElement.lineRippleFoundation.activate();
                    }
                },
                deactivateLineRipple: () => {
                    if (this.lineRippleElement) {
                        this.lineRippleElement.lineRippleFoundation.deactivate();
                    }
                },
                setLineRippleTransformOrigin: (normalizedX) => {
                    if (this.lineRippleElement) {
                        this.lineRippleElement.lineRippleFoundation.setRippleCenter(normalizedX);
                    }
                },
            };
        }
        async _getUpdateComplete() {
            await super._getUpdateComplete();
            await this._outlineUpdateComplete;
        }
        async firstUpdated() {
            const outlineElement = this.outlineElement;
            if (outlineElement) {
                this._outlineUpdateComplete = outlineElement.updateComplete;
                await this._outlineUpdateComplete;
            }
            super.firstUpdated();
            if (this.validateOnInitialRender) {
                this.reportValidity();
            }
        }
        getOutlineAdapterMethods() {
            return {
                closeOutline: () => this.outlineElement && (this.outlineOpen = false),
                hasOutline: () => Boolean(this.outlineElement),
                notchOutline: (labelWidth) => {
                    const outlineElement = this.outlineElement;
                    if (outlineElement && !this.outlineOpen) {
                        this.outlineWidth = labelWidth;
                        this.outlineOpen = true;
                    }
                }
            };
        }
        async onLabelChange() {
            if (this.label) {
                await this.layout();
            }
        }
        async layout() {
            await this.updateComplete;
            if (this.labelElement && this.outlineElement) {
                /* When the textfield automatically notches due to a value and label
                 * being defined, the textfield may be set to `display: none` by the user.
                 * this means that the notch is of size 0px. We provide this function so
                 * that the user may manually resize the notch to the floated label's
                 * width.
                 */
                const labelWidth = this.labelElement.floatingLabelFoundation.getWidth();
                if (this.outlineOpen) {
                    this.outlineWidth = labelWidth;
                }
            }
        }
    }
    __decorate([
        query('.mdc-text-field')
    ], TextFieldBase.prototype, "mdcRoot", void 0);
    __decorate([
        query('input')
    ], TextFieldBase.prototype, "formElement", void 0);
    __decorate([
        query('.mdc-floating-label')
    ], TextFieldBase.prototype, "labelElement", void 0);
    __decorate([
        query('.mdc-line-ripple')
    ], TextFieldBase.prototype, "lineRippleElement", void 0);
    __decorate([
        query('mwc-notched-outline')
    ], TextFieldBase.prototype, "outlineElement", void 0);
    __decorate([
        query('.mdc-notched-outline__notch')
    ], TextFieldBase.prototype, "notchElement", void 0);
    __decorate([
        query('.mdc-text-field-character-counter')
    ], TextFieldBase.prototype, "charCounterElement", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "value", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "type", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "placeholder", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "label", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "icon", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "iconTrailing", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], TextFieldBase.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean })
    ], TextFieldBase.prototype, "required", void 0);
    __decorate([
        property({ type: Number })
    ], TextFieldBase.prototype, "maxLength", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], TextFieldBase.prototype, "outlined", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], TextFieldBase.prototype, "fullWidth", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "helper", void 0);
    __decorate([
        property({ type: Boolean })
    ], TextFieldBase.prototype, "validateOnInitialRender", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "validationMessage", void 0);
    __decorate([
        property({ type: String })
    ], TextFieldBase.prototype, "pattern", void 0);
    __decorate([
        property({ type: Number })
    ], TextFieldBase.prototype, "min", void 0);
    __decorate([
        property({ type: Number })
    ], TextFieldBase.prototype, "max", void 0);
    __decorate([
        property({ type: Number })
    ], TextFieldBase.prototype, "step", void 0);
    __decorate([
        property({ type: Boolean })
    ], TextFieldBase.prototype, "helperPersistent", void 0);
    __decorate([
        property({ type: Boolean })
    ], TextFieldBase.prototype, "charCounter", void 0);
    __decorate([
        property({ type: Boolean })
    ], TextFieldBase.prototype, "outlineOpen", void 0);
    __decorate([
        property({ type: Number })
    ], TextFieldBase.prototype, "outlineWidth", void 0);
    __decorate([
        property({ type: Boolean })
    ], TextFieldBase.prototype, "isUiValid", void 0);
    __decorate([
        eventOptions({ passive: true })
    ], TextFieldBase.prototype, "handleInputChange", null);

    /**
    @license
    Copyright 2019 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    class TextAreaBase extends TextFieldBase {
        constructor() {
            super(...arguments);
            this.rows = 2;
            this.cols = 20;
        }
        get shouldRenderHelperText() {
            return !!this.helper || !!this.validationMessage;
        }
        render() {
            const classes = {
                'mdc-text-field--disabled': this.disabled,
                'mdc-text-field--no-label': !this.label,
                'mdc-text-field--outlined': this.outlined,
                'mdc-text-field--fullwidth': this.fullWidth,
            };
            return html `
      <div class="mdc-text-field mdc-text-field--textarea ${classMap(classes)}">
        ${this.renderCharCounter()}
        ${this.renderInput()}
        ${this.outlined ? this.renderOutlined() : this.renderLabelText()}
      </div>
      ${this.renderHelperText()}
    `;
        }
        renderInput() {
            const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;
            return html `
      <textarea
          id="text-field"
          class="mdc-text-field__input"
          .value="${this.value}"
          rows="${this.rows}"
          cols="${this.cols}"
          ?disabled="${this.disabled}"
          placeholder="${this.placeholder}"
          ?required="${this.required}"
          maxlength="${ifDefined(maxOrUndef)}"
          @input="${this.handleInputChange}"
          @blur="${this.onInputBlur}">
      </textarea>`;
        }
    }
    __decorate([
        query('textarea')
    ], TextAreaBase.prototype, "formElement", void 0);
    __decorate([
        property({ type: Number })
    ], TextAreaBase.prototype, "rows", void 0);
    __decorate([
        property({ type: Number })
    ], TextAreaBase.prototype, "cols", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$8 = css `.mdc-floating-label{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;line-height:1.75rem;font-weight:400;letter-spacing:.009375em;text-decoration:inherit;text-transform:inherit;position:absolute;left:0;transform-origin:left top;transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1);line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform}[dir=rtl] .mdc-floating-label,.mdc-floating-label[dir=rtl]{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-floating-label--float-above{cursor:auto}.mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-standard 250ms 1}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-106%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-106%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}}.mdc-line-ripple{position:absolute;bottom:0;left:0;width:100%;height:2px;transform:scaleX(0);transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;z-index:2}.mdc-line-ripple--active{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating{opacity:0}.mdc-notched-outline{display:flex;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / .75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{padding:0}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-text-field-helper-text{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.75rem;line-height:1.25rem;font-weight:400;letter-spacing:.0333333333em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin:0;transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;will-change:opacity}.mdc-text-field-helper-text::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}.mdc-text-field-helper-text--persistent{transition:none;opacity:1;will-change:initial}.mdc-text-field-character-counter{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.75rem;line-height:1.25rem;font-weight:400;letter-spacing:.0333333333em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin-left:auto;margin-right:0;padding-left:16px;padding-right:0;white-space:nowrap}.mdc-text-field-character-counter::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field--with-leading-icon .mdc-text-field__icon,.mdc-text-field--with-trailing-icon .mdc-text-field__icon{position:absolute;top:50%;transform:translateY(-50%);cursor:pointer}.mdc-text-field__icon:not([tabindex]),.mdc-text-field__icon[tabindex="-1"]{cursor:default;pointer-events:none}.mdc-text-field{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);height:56px;border-radius:4px 4px 0 0;display:inline-flex;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color}.mdc-text-field::before,.mdc-text-field::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-text-field::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-text-field.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-text-field.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-text-field.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-text-field.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field::before,.mdc-text-field::after{background-color:rgba(0,0,0,.87)}.mdc-text-field:hover::before{opacity:.04}.mdc-text-field.mdc-ripple-upgraded--background-focused::before,.mdc-text-field:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-text-field::before,.mdc-text-field::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-text-field.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{color:rgba(0,0,0,.87)}.mdc-text-field .mdc-text-field__input{caret-color:#6200ee;caret-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:hover{border-bottom-color:rgba(0,0,0,.87)}.mdc-text-field .mdc-line-ripple{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon{color:rgba(0,0,0,.54)}.mdc-text-field:not(.mdc-text-field--disabled){background-color:#f5f5f5}.mdc-text-field .mdc-floating-label{left:16px;right:initial;top:50%;transform:translateY(-50%);pointer-events:none}[dir=rtl] .mdc-text-field .mdc-floating-label,.mdc-text-field .mdc-floating-label[dir=rtl]{left:initial;right:16px}.mdc-text-field .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--textarea .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--textarea .mdc-floating-label,.mdc-text-field--textarea .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined--with-leading-icon .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--outlined--with-leading-icon .mdc-floating-label,.mdc-text-field--outlined--with-leading-icon .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above{left:40px;right:initial}[dir=rtl] .mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above,.mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above[dir=rtl]{left:initial;right:40px}.mdc-text-field__input{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;font-weight:400;letter-spacing:.009375em;text-decoration:inherit;text-transform:inherit;align-self:flex-end;box-sizing:border-box;width:100%;height:100%;padding:20px 16px 6px;transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);border:none;border-bottom:1px solid;border-radius:0;background:none;appearance:none}.mdc-text-field__input::placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;color:rgba(0,0,0,.54)}.mdc-text-field__input:-ms-input-placeholder{color:rgba(0,0,0,.54) !important}.mdc-text-field--fullwidth .mdc-text-field__input::placeholder,.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}.mdc-text-field__input:-webkit-autofill{z-index:auto !important}.mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mdc-text-field__input{padding-top:16px;padding-bottom:16px}.mdc-text-field__input:-webkit-autofill+.mdc-floating-label{transform:translateY(-50%) scale(0.75);cursor:auto}.mdc-text-field--outlined{border:none;overflow:visible}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined 250ms 1}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-radius:0 4px 4px 0}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:0 4px 4px 0}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-radius:4px 0 0 4px}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1)}.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--outlined::before,.mdc-text-field--outlined::after{content:none}.mdc-text-field--outlined:not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--outlined .mdc-text-field__input{display:flex;padding:12px 16px 14px;border:none !important;background-color:transparent;z-index:1}.mdc-text-field--outlined .mdc-text-field__icon{z-index:2}.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--outlined.mdc-text-field--disabled{background-color:transparent}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__input{border-bottom:none}.mdc-text-field--outlined.mdc-text-field--dense{height:48px}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{transform:translateY(-134%) scale(1)}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{font-size:.8rem}.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-120%) scale(0.8)}.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-dense 250ms 1}.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__input{padding:12px 12px 7px}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label{top:14px}.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__icon{top:12px}.mdc-text-field--with-leading-icon .mdc-text-field__icon{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-text-field__icon,.mdc-text-field--with-leading-icon .mdc-text-field__icon[dir=rtl]{left:initial;right:16px}.mdc-text-field--with-leading-icon .mdc-text-field__input{padding-left:48px;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-text-field__input,.mdc-text-field--with-leading-icon .mdc-text-field__input[dir=rtl]{padding-left:16px;padding-right:48px}.mdc-text-field--with-leading-icon .mdc-floating-label{left:48px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-floating-label,.mdc-text-field--with-leading-icon .mdc-floating-label[dir=rtl]{left:initial;right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon[dir=rtl]{left:initial;right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__input{padding-left:48px;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__input[dir=rtl]{padding-left:16px;padding-right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(-32px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-37.25px) translateX(32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(-32px) scale(0.75)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-34.75px) translateX(32px) scale(0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined[dir=rtl] .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl 250ms 1}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{transform:translateY(-134%) translateX(-21px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-134%) translateX(21px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{font-size:.8rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-120%) translateX(-21px) scale(0.8)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-120%) translateX(21px) scale(0.8)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense 250ms 1}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense[dir=rtl] .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense-rtl 250ms 1}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label{left:32px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label[dir=rtl]{left:initial;right:32px}.mdc-text-field--with-trailing-icon .mdc-text-field__icon{left:initial;right:12px}[dir=rtl] .mdc-text-field--with-trailing-icon .mdc-text-field__icon,.mdc-text-field--with-trailing-icon .mdc-text-field__icon[dir=rtl]{left:12px;right:initial}.mdc-text-field--with-trailing-icon .mdc-text-field__input{padding-left:16px;padding-right:48px}[dir=rtl] .mdc-text-field--with-trailing-icon .mdc-text-field__input,.mdc-text-field--with-trailing-icon .mdc-text-field__input[dir=rtl]{padding-left:48px;padding-right:16px}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__icon{left:initial;right:16px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__icon,.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__icon[dir=rtl]{left:16px;right:initial}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__input{padding-left:16px;padding-right:48px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__input[dir=rtl]{padding-left:48px;padding-right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon{left:16px;right:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon[dir=rtl]{left:auto;right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon~.mdc-text-field__icon{right:12px;left:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon~.mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon~.mdc-text-field__icon[dir=rtl]{right:auto;left:12px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__input{padding-left:48px;padding-right:48px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__input[dir=rtl]{padding-left:48px;padding-right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon{bottom:16px;transform:scale(0.8)}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon{left:12px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon[dir=rtl]{left:initial;right:12px}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input{padding-left:44px;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input[dir=rtl]{padding-left:16px;padding-right:44px}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-floating-label{left:44px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-floating-label[dir=rtl]{left:initial;right:44px}.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon{left:initial;right:12px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon[dir=rtl]{left:12px;right:initial}.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input{padding-left:16px;padding-right:44px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input,.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input[dir=rtl]{padding-left:44px;padding-right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon{left:12px;right:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon[dir=rtl]{left:auto;right:12px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon~.mdc-text-field__icon{right:12px;left:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon~.mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon~.mdc-text-field__icon[dir=rtl]{right:auto;left:12px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input{padding-left:44px;padding-right:44px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input[dir=rtl]{padding-left:44px;padding-right:44px}.mdc-text-field--dense .mdc-floating-label--float-above{transform:translateY(-70%) scale(0.8)}.mdc-text-field--dense .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-dense 250ms 1}.mdc-text-field--dense .mdc-text-field__input{padding:12px 12px 0}.mdc-text-field--dense .mdc-floating-label{font-size:.813rem}.mdc-text-field--dense .mdc-floating-label--float-above{font-size:.813rem}.mdc-text-field__input:required~.mdc-floating-label::after,.mdc-text-field__input:required~.mdc-notched-outline .mdc-floating-label::after{margin-left:1px;content:"*"}.mdc-text-field--textarea{display:inline-flex;width:auto;height:auto;transition:none;overflow:visible}.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--textarea .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea 250ms 1}.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}[dir=rtl] .mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-radius:0 4px 4px 0}.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:0 4px 4px 0}[dir=rtl] .mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-radius:4px 0 0 4px}.mdc-text-field--textarea::before,.mdc-text-field--textarea::after{content:none}.mdc-text-field--textarea:not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--textarea .mdc-floating-label--float-above{transform:translateY(-144%) scale(1)}.mdc-text-field--textarea .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--textarea.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-130%) scale(0.75)}.mdc-text-field--textarea.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--textarea .mdc-text-field-character-counter{left:initial;right:16px;position:absolute;bottom:13px}[dir=rtl] .mdc-text-field--textarea .mdc-text-field-character-counter,.mdc-text-field--textarea .mdc-text-field-character-counter[dir=rtl]{left:16px;right:initial}.mdc-text-field--textarea .mdc-text-field__input{align-self:auto;box-sizing:border-box;height:auto;margin:8px 1px 1px 0;padding:0 16px 16px;border:none;line-height:1.75rem}.mdc-text-field--textarea .mdc-text-field-character-counter+.mdc-text-field__input{margin-bottom:28px;padding-bottom:0}.mdc-text-field--textarea .mdc-floating-label{top:17px;width:auto;pointer-events:none}.mdc-text-field--textarea .mdc-floating-label:not(.mdc-floating-label--float-above){transform:none}.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--fullwidth{width:100%}.mdc-text-field--fullwidth:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--fullwidth.mdc-text-field--disabled .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea){display:block}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea)::before,.mdc-text-field--fullwidth:not(.mdc-text-field--textarea)::after{content:none}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea):not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea) .mdc-text-field__input{padding:0}.mdc-text-field--fullwidth.mdc-text-field--textarea .mdc-text-field__input{resize:vertical}.mdc-text-field--fullwidth.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field-helper-line{display:flex;justify-content:space-between;box-sizing:border-box}.mdc-text-field--dense+.mdc-text-field-helper-line{margin-bottom:4px}.mdc-text-field+.mdc-text-field-helper-line{padding-right:16px;padding-left:16px}.mdc-form-field>.mdc-text-field+label{align-self:flex-start}.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(98,0,238,.87)}.mdc-text-field--focused+.mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg){opacity:1}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input:hover{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple{background-color:#b00020;background-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-floating-label{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid .mdc-text-field__input{caret-color:#b00020;caret-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid.mdc-text-field--with-trailing-icon:not(.mdc-text-field--with-leading-icon):not(.mdc-text-field--disabled) .mdc-text-field__icon{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid.mdc-text-field--with-trailing-icon.mdc-text-field--with-leading-icon:not(.mdc-text-field--disabled) .mdc-text-field__icon~.mdc-text-field__icon{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{opacity:1}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--disabled{background-color:#fafafa;border-bottom:none;pointer-events:none}.mdc-text-field--disabled .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.06)}.mdc-text-field--disabled .mdc-text-field__input{color:rgba(0,0,0,.37)}.mdc-text-field--disabled .mdc-floating-label{color:rgba(0,0,0,.37)}.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.37)}.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0,0,0,.37)}.mdc-text-field--disabled .mdc-text-field__icon{color:rgba(0,0,0,.3)}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.mdc-text-field--textarea.mdc-text-field--disabled{background-color:transparent;background-color:#f9f9f9}.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}.mdc-text-field--textarea.mdc-text-field--disabled .mdc-text-field__input{border-bottom:none}@keyframes mdc-floating-label-shake-float-above-text-field-dense{0%{transform:translateX(calc(0 - 0%)) translateY(-70%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-70%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-70%) scale(0.8)}100%{transform:translateX(calc(0 - 0%)) translateY(-70%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-dense{0%{transform:translateX(calc(0 - 0%)) translateY(-120%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-120%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-120%) scale(0.8)}100%{transform:translateX(calc(0 - 0%)) translateY(-120%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense{0%{transform:translateX(calc(0 - 21px)) translateY(-120%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 21px)) translateY(-120%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 21px)) translateY(-120%) scale(0.8)}100%{transform:translateX(calc(0 - 21px)) translateY(-120%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense-rtl{0%{transform:translateX(calc(0 - -21px)) translateY(-120%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - -21px)) translateY(-120%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - -21px)) translateY(-120%) scale(0.8)}100%{transform:translateX(calc(0 - -21px)) translateY(-120%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-textarea{0%{transform:translateX(calc(0 - 0%)) translateY(-130%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-130%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-130%) scale(0.75)}}.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}.hidden,.hidden::before,.hidden::after{display:none}:host{display:inline-block;outline:none}:host([fullwidth]){display:block}.mdc-text-field{display:flex;width:100%;border-radius:4px 4px 0 0;border-radius:var(--mdc-text-field-filled-border-radius, 4px 4px 0 0)}mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-idle-border-color, rgba(0, 0, 0, 0.38))}:host(:not([disabled]):hover) :not(.mdc-text-field--invalid):not(.mdc-text-field--focused) mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-hover-border-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-fill-color, whitesmoke)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-character-counter,:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid .mdc-text-field__icon{color:var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused mwc-notched-outline{--mdc-notched-outline-stroke-width: 2px}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-focused-label-color, var(--mdc-theme-primary, rgba(98, 0, 238, 0.87)))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-floating-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-text-field__input:required~.mdc-floating-label::after,:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-text-field__input:required~.mdc-notched-outline .mdc-floating-label::after{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input{color:var(--mdc-text-field-ink-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg),:host(:not([disabled])) .mdc-text-field-helper-line:not(.mdc-text-field--invalid) .mdc-text-field-character-counter{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-disabled-fill-color, #fafafa)}:host([disabled]) .mdc-text-field.mdc-text-field--outlined mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-disabled-border-color, rgba(0, 0, 0, 0.06))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.37))}:host([disabled]) .mdc-text-field .mdc-text-field__input,:host([disabled]) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.37))}:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-helper-text,:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-character-counter{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.37))}.mdc-text-field:not(.mdc-text-field--outlined){border-bottom:1px solid}.mdc-text-field:not(.mdc-text-field--outlined) .mdc-line-ripple{bottom:-1px}.mdc-text-field:not(.mdc-text-field--outlined):not(.mdc-text-field--disabled):not(.mdc-text-field--invalid){border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field:not(.mdc-text-field--outlined):not(.mdc-text-field--disabled):not(.mdc-text-field--invalid):hover{border-bottom-color:rgba(0,0,0,.87)}.mdc-text-field:not(.mdc-text-field--outlined):not(.mdc-text-field--disabled).mdc-text-field--invalid{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field:not(.mdc-text-field--outlined) .mdc-floating-label.mdc-floating-label--float-above{transform:translateY(-50%) scale(0.75);font-size:initial}.mdc-text-field:not(.mdc-text-field--outlined).mdc-text-field--disabled{border-bottom-color:rgba(0,0,0,.06)}.mdc-text-field:not(.mdc-text-field--outlined) .mdc-text-field__input,.mdc-text-field:not(.mdc-text-field--outlined) .mdc-text-field-character-counter.hidden+.mdc-text-field__input{padding:0 16px 0 16px;margin:20px 0 1px 0}.mdc-text-field:not(.mdc-text-field--outlined) .mdc-text-field-character-counter:not(.hidden)+.mdc-text-field__input{margin-bottom:28px}.mdc-text-field:not(.mdc-text-field--outlined) .mdc-floating-label{top:18px;left:16px}.mdc-text-field{height:100%}.mdc-text-field.mdc-text-field--outlined.mdc-text-field--disabled{background-color:transparent}.mdc-text-field.mdc-text-field--outlined:not(.mdc-text-field--fullwidth) .mdc-text-field__input{margin-bottom:14px;padding-bottom:0px}.mdc-text-field.mdc-text-field--outlined:not(.mdc-text-field--fullwidth) .mdc-text-field-character-counter{bottom:14px}.mdc-text-field.mdc-text-field--outlined:not(.mdc-text-field--fullwidth) .mdc-text-field-character-counter:not(.hidden)+.mdc-text-field__input{margin-bottom:41px}.mdc-text-field__input{-ms-overflow-style:none;scrollbar-color:transparent transparent;resize:none}.mdc-text-field__input::-webkit-scrollbar{display:none}`;

    /**
    @license
    Copyright 2019 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    let TextArea = class TextArea extends TextAreaBase {
    };
    TextArea.styles = style$8;
    TextArea = __decorate([
        customElement('mwc-textarea')
    ], TextArea);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$9 = css `.mdc-floating-label{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;line-height:1.75rem;font-weight:400;letter-spacing:.009375em;text-decoration:inherit;text-transform:inherit;position:absolute;left:0;transform-origin:left top;transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1);line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform}[dir=rtl] .mdc-floating-label,.mdc-floating-label[dir=rtl]{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-floating-label--float-above{cursor:auto}.mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-standard 250ms 1}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-106%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-106%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}}.mdc-line-ripple{position:absolute;bottom:0;left:0;width:100%;height:2px;transform:scaleX(0);transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;z-index:2}.mdc-line-ripple--active{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating{opacity:0}.mdc-notched-outline{display:flex;position:absolute;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / .75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{padding:0}@keyframes mdc-ripple-fg-radius-in{from{animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-opacity-in{from{animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-out{from{animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-text-field-helper-text{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.75rem;line-height:1.25rem;font-weight:400;letter-spacing:.0333333333em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin:0;transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;will-change:opacity}.mdc-text-field-helper-text::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}.mdc-text-field-helper-text--persistent{transition:none;opacity:1;will-change:initial}.mdc-text-field-character-counter{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:.75rem;line-height:1.25rem;font-weight:400;letter-spacing:.0333333333em;text-decoration:inherit;text-transform:inherit;display:block;margin-top:0;line-height:normal;margin-left:auto;margin-right:0;padding-left:16px;padding-right:0;white-space:nowrap}.mdc-text-field-character-counter::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field--with-leading-icon .mdc-text-field__icon,.mdc-text-field--with-trailing-icon .mdc-text-field__icon{position:absolute;top:50%;transform:translateY(-50%);cursor:pointer}.mdc-text-field__icon:not([tabindex]),.mdc-text-field__icon[tabindex="-1"]{cursor:default;pointer-events:none}.mdc-text-field{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);height:56px;border-radius:4px 4px 0 0;display:inline-flex;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color}.mdc-text-field::before,.mdc-text-field::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-text-field::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1}.mdc-text-field.mdc-ripple-upgraded::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field.mdc-ripple-upgraded::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-text-field.mdc-ripple-upgraded--unbounded::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-text-field.mdc-ripple-upgraded--foreground-activation::after{animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-text-field.mdc-ripple-upgraded--foreground-deactivation::after{animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field::before,.mdc-text-field::after{background-color:rgba(0,0,0,.87)}.mdc-text-field:hover::before{opacity:.04}.mdc-text-field.mdc-ripple-upgraded--background-focused::before,.mdc-text-field:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.12}.mdc-text-field::before,.mdc-text-field::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-text-field.mdc-ripple-upgraded::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{color:rgba(0,0,0,.87)}.mdc-text-field .mdc-text-field__input{caret-color:#6200ee;caret-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:hover{border-bottom-color:rgba(0,0,0,.87)}.mdc-text-field .mdc-line-ripple{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0,0,0,.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon{color:rgba(0,0,0,.54)}.mdc-text-field:not(.mdc-text-field--disabled){background-color:#f5f5f5}.mdc-text-field .mdc-floating-label{left:16px;right:initial;top:50%;transform:translateY(-50%);pointer-events:none}[dir=rtl] .mdc-text-field .mdc-floating-label,.mdc-text-field .mdc-floating-label[dir=rtl]{left:initial;right:16px}.mdc-text-field .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--textarea .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--textarea .mdc-floating-label,.mdc-text-field--textarea .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined--with-leading-icon .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--outlined--with-leading-icon .mdc-floating-label,.mdc-text-field--outlined--with-leading-icon .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above{left:40px;right:initial}[dir=rtl] .mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above,.mdc-text-field--outlined--with-leading-icon .mdc-floating-label--float-above[dir=rtl]{left:initial;right:40px}.mdc-text-field__input{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1rem;font-weight:400;letter-spacing:.009375em;text-decoration:inherit;text-transform:inherit;align-self:flex-end;box-sizing:border-box;width:100%;height:100%;padding:20px 16px 6px;transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);border:none;border-bottom:1px solid;border-radius:0;background:none;appearance:none}.mdc-text-field__input::placeholder{transition:opacity 67ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;color:rgba(0,0,0,.54)}.mdc-text-field__input:-ms-input-placeholder{color:rgba(0,0,0,.54) !important}.mdc-text-field--fullwidth .mdc-text-field__input::placeholder,.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}.mdc-text-field__input:-webkit-autofill{z-index:auto !important}.mdc-text-field--no-label:not(.mdc-text-field--outlined):not(.mdc-text-field--textarea) .mdc-text-field__input{padding-top:16px;padding-bottom:16px}.mdc-text-field__input:-webkit-autofill+.mdc-floating-label{transform:translateY(-50%) scale(0.75);cursor:auto}.mdc-text-field--outlined{border:none;overflow:visible}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined 250ms 1}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-radius:0 4px 4px 0}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:0 4px 4px 0}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-radius:4px 0 0 4px}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1)}.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--outlined::before,.mdc-text-field--outlined::after{content:none}.mdc-text-field--outlined:not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--outlined .mdc-text-field__input{display:flex;padding:12px 16px 14px;border:none !important;background-color:transparent;z-index:1}.mdc-text-field--outlined .mdc-text-field__icon{z-index:2}.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--outlined.mdc-text-field--disabled{background-color:transparent}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}.mdc-text-field--outlined.mdc-text-field--disabled .mdc-text-field__input{border-bottom:none}.mdc-text-field--outlined.mdc-text-field--dense{height:48px}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{transform:translateY(-134%) scale(1)}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{font-size:.8rem}.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-120%) scale(0.8)}.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-dense 250ms 1}.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__input{padding:12px 12px 7px}.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label{top:14px}.mdc-text-field--outlined.mdc-text-field--dense .mdc-text-field__icon{top:12px}.mdc-text-field--with-leading-icon .mdc-text-field__icon{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-text-field__icon,.mdc-text-field--with-leading-icon .mdc-text-field__icon[dir=rtl]{left:initial;right:16px}.mdc-text-field--with-leading-icon .mdc-text-field__input{padding-left:48px;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-text-field__input,.mdc-text-field--with-leading-icon .mdc-text-field__input[dir=rtl]{padding-left:16px;padding-right:48px}.mdc-text-field--with-leading-icon .mdc-floating-label{left:48px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon .mdc-floating-label,.mdc-text-field--with-leading-icon .mdc-floating-label[dir=rtl]{left:initial;right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon{left:16px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__icon[dir=rtl]{left:initial;right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__input{padding-left:48px;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-text-field__input[dir=rtl]{padding-left:16px;padding-right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(-32px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-37.25px) translateX(32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(-32px) scale(0.75)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-34.75px) translateX(32px) scale(0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined[dir=rtl] .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl 250ms 1}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{transform:translateY(-134%) translateX(-21px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-134%) translateX(21px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--float-above{font-size:.8rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-120%) translateX(-21px) scale(0.8)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-120%) translateX(21px) scale(0.8)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense 250ms 1}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense[dir=rtl] .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense-rtl 250ms 1}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label{left:32px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-text-field--dense .mdc-floating-label[dir=rtl]{left:initial;right:32px}.mdc-text-field--with-trailing-icon .mdc-text-field__icon{left:initial;right:12px}[dir=rtl] .mdc-text-field--with-trailing-icon .mdc-text-field__icon,.mdc-text-field--with-trailing-icon .mdc-text-field__icon[dir=rtl]{left:12px;right:initial}.mdc-text-field--with-trailing-icon .mdc-text-field__input{padding-left:16px;padding-right:48px}[dir=rtl] .mdc-text-field--with-trailing-icon .mdc-text-field__input,.mdc-text-field--with-trailing-icon .mdc-text-field__input[dir=rtl]{padding-left:48px;padding-right:16px}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__icon{left:initial;right:16px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__icon,.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__icon[dir=rtl]{left:16px;right:initial}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__input{padding-left:16px;padding-right:48px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__input,.mdc-text-field--with-trailing-icon.mdc-text-field--outlined .mdc-text-field__input[dir=rtl]{padding-left:48px;padding-right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon{left:16px;right:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon[dir=rtl]{left:auto;right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon~.mdc-text-field__icon{right:12px;left:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon~.mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__icon~.mdc-text-field__icon[dir=rtl]{right:auto;left:12px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__input{padding-left:48px;padding-right:48px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon .mdc-text-field__input[dir=rtl]{padding-left:48px;padding-right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon{bottom:16px;transform:scale(0.8)}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon{left:12px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__icon[dir=rtl]{left:initial;right:12px}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input{padding-left:44px;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-text-field__input[dir=rtl]{padding-left:16px;padding-right:44px}.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-floating-label{left:44px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--dense .mdc-floating-label[dir=rtl]{left:initial;right:44px}.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon{left:initial;right:12px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon[dir=rtl]{left:12px;right:initial}.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input{padding-left:16px;padding-right:44px}[dir=rtl] .mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input,.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input[dir=rtl]{padding-left:44px;padding-right:16px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon{left:12px;right:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon[dir=rtl]{left:auto;right:12px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon~.mdc-text-field__icon{right:12px;left:auto}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon~.mdc-text-field__icon,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__icon~.mdc-text-field__icon[dir=rtl]{right:auto;left:12px}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input{padding-left:44px;padding-right:44px}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input,.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--dense .mdc-text-field__input[dir=rtl]{padding-left:44px;padding-right:44px}.mdc-text-field--dense .mdc-floating-label--float-above{transform:translateY(-70%) scale(0.8)}.mdc-text-field--dense .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-text-field-dense 250ms 1}.mdc-text-field--dense .mdc-text-field__input{padding:12px 12px 0}.mdc-text-field--dense .mdc-floating-label{font-size:.813rem}.mdc-text-field--dense .mdc-floating-label--float-above{font-size:.813rem}.mdc-text-field__input:required~.mdc-floating-label::after,.mdc-text-field__input:required~.mdc-notched-outline .mdc-floating-label::after{margin-left:1px;content:"*"}.mdc-text-field--textarea{display:inline-flex;width:auto;height:auto;transition:none;overflow:visible}.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.38)}.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.87)}.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-text-field--textarea .mdc-floating-label--shake{animation:mdc-floating-label-shake-float-above-textarea 250ms 1}.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading{border-radius:4px 0 0 4px}[dir=rtl] .mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-radius:0 4px 4px 0}.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing{border-radius:0 4px 4px 0}[dir=rtl] .mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-radius:4px 0 0 4px}.mdc-text-field--textarea::before,.mdc-text-field--textarea::after{content:none}.mdc-text-field--textarea:not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--textarea .mdc-floating-label--float-above{transform:translateY(-144%) scale(1)}.mdc-text-field--textarea .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--textarea.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-130%) scale(0.75)}.mdc-text-field--textarea.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--textarea .mdc-text-field-character-counter{left:initial;right:16px;position:absolute;bottom:13px}[dir=rtl] .mdc-text-field--textarea .mdc-text-field-character-counter,.mdc-text-field--textarea .mdc-text-field-character-counter[dir=rtl]{left:16px;right:initial}.mdc-text-field--textarea .mdc-text-field__input{align-self:auto;box-sizing:border-box;height:auto;margin:8px 1px 1px 0;padding:0 16px 16px;border:none;line-height:1.75rem}.mdc-text-field--textarea .mdc-text-field-character-counter+.mdc-text-field__input{margin-bottom:28px;padding-bottom:0}.mdc-text-field--textarea .mdc-floating-label{top:17px;width:auto;pointer-events:none}.mdc-text-field--textarea .mdc-floating-label:not(.mdc-floating-label--float-above){transform:none}.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--fullwidth{width:100%}.mdc-text-field--fullwidth:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--fullwidth.mdc-text-field--disabled .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.42)}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea){display:block}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea)::before,.mdc-text-field--fullwidth:not(.mdc-text-field--textarea)::after{content:none}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea):not(.mdc-text-field--disabled){background-color:transparent}.mdc-text-field--fullwidth:not(.mdc-text-field--textarea) .mdc-text-field__input{padding:0}.mdc-text-field--fullwidth.mdc-text-field--textarea .mdc-text-field__input{resize:vertical}.mdc-text-field--fullwidth.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field-helper-line{display:flex;justify-content:space-between;box-sizing:border-box}.mdc-text-field--dense+.mdc-text-field-helper-line{margin-bottom:4px}.mdc-text-field+.mdc-text-field-helper-line{padding-right:16px;padding-left:16px}.mdc-form-field>.mdc-text-field+label{align-self:flex-start}.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(98,0,238,.87)}.mdc-text-field--focused+.mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg){opacity:1}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__input:hover{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple{background-color:#b00020;background-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-floating-label{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid .mdc-text-field__input{caret-color:#b00020;caret-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid.mdc-text-field--with-trailing-icon:not(.mdc-text-field--with-leading-icon):not(.mdc-text-field--disabled) .mdc-text-field__icon{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid.mdc-text-field--with-trailing-icon.mdc-text-field--with-leading-icon:not(.mdc-text-field--disabled) .mdc-text-field__icon~.mdc-text-field__icon{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{opacity:1}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__input:hover~.mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused) .mdc-text-field__icon:hover~.mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--disabled{background-color:#fafafa;border-bottom:none;pointer-events:none}.mdc-text-field--disabled .mdc-text-field__input{border-bottom-color:rgba(0,0,0,.06)}.mdc-text-field--disabled .mdc-text-field__input{color:rgba(0,0,0,.37)}.mdc-text-field--disabled .mdc-floating-label{color:rgba(0,0,0,.37)}.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0,0,0,.37)}.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0,0,0,.37)}.mdc-text-field--disabled .mdc-text-field__icon{color:rgba(0,0,0,.3)}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.mdc-text-field--textarea.mdc-text-field--disabled{background-color:transparent;background-color:#f9f9f9}.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--textarea.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0,0,0,.06)}.mdc-text-field--textarea.mdc-text-field--disabled .mdc-text-field__input{border-bottom:none}@keyframes mdc-floating-label-shake-float-above-text-field-dense{0%{transform:translateX(calc(0 - 0%)) translateY(-70%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-70%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-70%) scale(0.8)}100%{transform:translateX(calc(0 - 0%)) translateY(-70%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-dense{0%{transform:translateX(calc(0 - 0%)) translateY(-120%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-120%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-120%) scale(0.8)}100%{transform:translateX(calc(0 - 0%)) translateY(-120%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense{0%{transform:translateX(calc(0 - 21px)) translateY(-120%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 21px)) translateY(-120%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 21px)) translateY(-120%) scale(0.8)}100%{transform:translateX(calc(0 - 21px)) translateY(-120%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0)) translateY(-34.75px) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense-rtl{0%{transform:translateX(calc(0 - -21px)) translateY(-120%) scale(0.8)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - -21px)) translateY(-120%) scale(0.8)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - -21px)) translateY(-120%) scale(0.8)}100%{transform:translateX(calc(0 - -21px)) translateY(-120%) scale(0.8)}}@keyframes mdc-floating-label-shake-float-above-textarea{0%{transform:translateX(calc(0 - 0%)) translateY(-130%) scale(0.75)}33%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-130%) scale(0.75)}66%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-130%) scale(0.75)}}.material-icons{font-family:var(--mdc-icon-font, "Material Icons");font-weight:normal;font-style:normal;font-size:var(--mdc-icon-size, 24px);line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;-moz-osx-font-smoothing:grayscale;font-feature-settings:"liga"}.hidden,.hidden::before,.hidden::after{display:none}:host{display:inline-block;outline:none}:host([fullwidth]){display:block}.mdc-text-field{display:flex;width:100%;border-radius:4px 4px 0 0;border-radius:var(--mdc-text-field-filled-border-radius, 4px 4px 0 0)}mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-idle-border-color, rgba(0, 0, 0, 0.38))}:host(:not([disabled]):hover) :not(.mdc-text-field--invalid):not(.mdc-text-field--focused) mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-hover-border-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-fill-color, whitesmoke)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-character-counter,:host(:not([disabled])) .mdc-text-field.mdc-text-field--invalid .mdc-text-field__icon{color:var(--mdc-text-field-error-color, var(--mdc-theme-error, #b00020))}:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host(:not([disabled])) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused mwc-notched-outline{--mdc-notched-outline-stroke-width: 2px}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-focused-label-color, var(--mdc-theme-primary, rgba(98, 0, 238, 0.87)))}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-floating-label{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-text-field__input:required~.mdc-floating-label::after,:host(:not([disabled])) .mdc-text-field.mdc-text-field--focused:not(.mdc-text-field--invalid) .mdc-text-field__input:required~.mdc-notched-outline .mdc-floating-label::after{color:#6200ee;color:var(--mdc-theme-primary, #6200ee)}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input{color:var(--mdc-text-field-ink-color, rgba(0, 0, 0, 0.87))}:host(:not([disabled])) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host(:not([disabled])) .mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg),:host(:not([disabled])) .mdc-text-field-helper-line:not(.mdc-text-field--invalid) .mdc-text-field-character-counter{color:var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--outlined){background-color:var(--mdc-text-field-disabled-fill-color, #fafafa)}:host([disabled]) .mdc-text-field.mdc-text-field--outlined mwc-notched-outline{--mdc-notched-outline-border-color: var(--mdc-text-field-outlined-disabled-border-color, rgba(0, 0, 0, 0.06))}:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label,:host([disabled]) .mdc-text-field:not(.mdc-text-field--invalid):not(.mdc-text-field--focused) .mdc-floating-label::after{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.37))}:host([disabled]) .mdc-text-field .mdc-text-field__input,:host([disabled]) .mdc-text-field .mdc-text-field__input::placeholder{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.37))}:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-helper-text,:host([disabled]) .mdc-text-field-helper-line .mdc-text-field-character-counter{color:var(--mdc-text-field-disabled-ink-color, rgba(0, 0, 0, 0.37))}`;

    /**
    @license
    Copyright 2019 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    let TextField = class TextField extends TextFieldBase {
    };
    TextField.styles = style$9;
    TextField = __decorate([
        customElement('mwc-textfield')
    ], TextField);

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var cssClasses$a = {
        FIXED_CLASS: 'mdc-top-app-bar--fixed',
        FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',
        SHORT_CLASS: 'mdc-top-app-bar--short',
        SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed',
        SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item',
    };
    var numbers$4 = {
        DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
        MAX_TOP_APP_BAR_HEIGHT: 128,
    };
    var strings$8 = {
        ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',
        NAVIGATION_EVENT: 'MDCTopAppBar:nav',
        NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',
        ROOT_SELECTOR: '.mdc-top-app-bar',
        TITLE_SELECTOR: '.mdc-top-app-bar__title',
    };

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var MDCTopAppBarBaseFoundation = /** @class */ (function (_super) {
        __extends(MDCTopAppBarBaseFoundation, _super);
        /* istanbul ignore next: optional argument is not a branch statement */
        function MDCTopAppBarBaseFoundation(adapter) {
            return _super.call(this, __assign({}, MDCTopAppBarBaseFoundation.defaultAdapter, adapter)) || this;
        }
        Object.defineProperty(MDCTopAppBarBaseFoundation, "strings", {
            get: function () {
                return strings$8;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTopAppBarBaseFoundation, "cssClasses", {
            get: function () {
                return cssClasses$a;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTopAppBarBaseFoundation, "numbers", {
            get: function () {
                return numbers$4;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MDCTopAppBarBaseFoundation, "defaultAdapter", {
            /**
             * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.
             */
            get: function () {
                // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
                return {
                    addClass: function () { return undefined; },
                    removeClass: function () { return undefined; },
                    hasClass: function () { return false; },
                    setStyle: function () { return undefined; },
                    getTopAppBarHeight: function () { return 0; },
                    notifyNavigationIconClicked: function () { return undefined; },
                    getViewportScrollY: function () { return 0; },
                    getTotalActionItems: function () { return 0; },
                };
                // tslint:enable:object-literal-sort-keys
            },
            enumerable: true,
            configurable: true
        });
        /** Other variants of TopAppBar foundation overrides this method */
        MDCTopAppBarBaseFoundation.prototype.handleTargetScroll = function () { }; // tslint:disable-line:no-empty
        /** Other variants of TopAppBar foundation overrides this method */
        MDCTopAppBarBaseFoundation.prototype.handleWindowResize = function () { }; // tslint:disable-line:no-empty
        MDCTopAppBarBaseFoundation.prototype.handleNavigationClick = function () {
            this.adapter_.notifyNavigationIconClicked();
        };
        return MDCTopAppBarBaseFoundation;
    }(MDCFoundation));

    /**
     * @license
     * Copyright 2018 Google Inc.
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    var INITIAL_VALUE = 0;
    var MDCTopAppBarFoundation = /** @class */ (function (_super) {
        __extends(MDCTopAppBarFoundation, _super);
        /* istanbul ignore next: optional argument is not a branch statement */
        function MDCTopAppBarFoundation(adapter) {
            var _this = _super.call(this, adapter) || this;
            /**
             * Indicates if the top app bar was docked in the previous scroll handler iteration.
             */
            _this.wasDocked_ = true;
            /**
             * Indicates if the top app bar is docked in the fully shown position.
             */
            _this.isDockedShowing_ = true;
            /**
             * Variable for current scroll position of the top app bar
             */
            _this.currentAppBarOffsetTop_ = 0;
            /**
             * Used to prevent the top app bar from being scrolled out of view during resize events
             */
            _this.isCurrentlyBeingResized_ = false;
            /**
             * The timeout that's used to throttle the resize events
             */
            _this.resizeThrottleId_ = INITIAL_VALUE;
            /**
             * The timeout that's used to debounce toggling the isCurrentlyBeingResized_ variable after a resize
             */
            _this.resizeDebounceId_ = INITIAL_VALUE;
            _this.lastScrollPosition_ = _this.adapter_.getViewportScrollY();
            _this.topAppBarHeight_ = _this.adapter_.getTopAppBarHeight();
            return _this;
        }
        MDCTopAppBarFoundation.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.adapter_.setStyle('top', '');
        };
        /**
         * Scroll handler for the default scroll behavior of the top app bar.
         * @override
         */
        MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {
            var currentScrollPosition = Math.max(this.adapter_.getViewportScrollY(), 0);
            var diff = currentScrollPosition - this.lastScrollPosition_;
            this.lastScrollPosition_ = currentScrollPosition;
            // If the window is being resized the lastScrollPosition_ needs to be updated but the
            // current scroll of the top app bar should stay in the same position.
            if (!this.isCurrentlyBeingResized_) {
                this.currentAppBarOffsetTop_ -= diff;
                if (this.currentAppBarOffsetTop_ > 0) {
                    this.currentAppBarOffsetTop_ = 0;
                }
                else if (Math.abs(this.currentAppBarOffsetTop_) > this.topAppBarHeight_) {
                    this.currentAppBarOffsetTop_ = -this.topAppBarHeight_;
                }
                this.moveTopAppBar_();
            }
        };
        /**
         * Top app bar resize handler that throttle/debounce functions that execute updates.
         * @override
         */
        MDCTopAppBarFoundation.prototype.handleWindowResize = function () {
            var _this = this;
            // Throttle resize events 10 p/s
            if (!this.resizeThrottleId_) {
                this.resizeThrottleId_ = setTimeout(function () {
                    _this.resizeThrottleId_ = INITIAL_VALUE;
                    _this.throttledResizeHandler_();
                }, numbers$4.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
            }
            this.isCurrentlyBeingResized_ = true;
            if (this.resizeDebounceId_) {
                clearTimeout(this.resizeDebounceId_);
            }
            this.resizeDebounceId_ = setTimeout(function () {
                _this.handleTargetScroll();
                _this.isCurrentlyBeingResized_ = false;
                _this.resizeDebounceId_ = INITIAL_VALUE;
            }, numbers$4.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
        };
        /**
         * Function to determine if the DOM needs to update.
         */
        MDCTopAppBarFoundation.prototype.checkForUpdate_ = function () {
            var offscreenBoundaryTop = -this.topAppBarHeight_;
            var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop_ < 0;
            var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop_ > offscreenBoundaryTop;
            var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;
            // If it's partially showing, it can't be docked.
            if (partiallyShowing) {
                this.wasDocked_ = false;
            }
            else {
                // Not previously docked and not partially showing, it's now docked.
                if (!this.wasDocked_) {
                    this.wasDocked_ = true;
                    return true;
                }
                else if (this.isDockedShowing_ !== hasAnyPixelsOnscreen) {
                    this.isDockedShowing_ = hasAnyPixelsOnscreen;
                    return true;
                }
            }
            return partiallyShowing;
        };
        /**
         * Function to move the top app bar if needed.
         */
        MDCTopAppBarFoundation.prototype.moveTopAppBar_ = function () {
            if (this.checkForUpdate_()) {
                // Once the top app bar is fully hidden we use the max potential top app bar height as our offset
                // so the top app bar doesn't show if the window resizes and the new height > the old height.
                var offset = this.currentAppBarOffsetTop_;
                if (Math.abs(offset) >= this.topAppBarHeight_) {
                    offset = -numbers$4.MAX_TOP_APP_BAR_HEIGHT;
                }
                this.adapter_.setStyle('top', offset + 'px');
            }
        };
        /**
         * Throttled function that updates the top app bar scrolled values if the
         * top app bar height changes.
         */
        MDCTopAppBarFoundation.prototype.throttledResizeHandler_ = function () {
            var currentHeight = this.adapter_.getTopAppBarHeight();
            if (this.topAppBarHeight_ !== currentHeight) {
                this.wasDocked_ = false;
                // Since the top app bar has a different height depending on the screen width, this
                // will ensure that the top app bar remains in the correct location if
                // completely hidden and a resize makes the top app bar a different height.
                this.currentAppBarOffsetTop_ -= this.topAppBarHeight_ - currentHeight;
                this.topAppBarHeight_ = currentHeight;
            }
            this.handleTargetScroll();
        };
        return MDCTopAppBarFoundation;
    }(MDCTopAppBarBaseFoundation));

    const passiveEventOptionsIfSupported = supportsPassiveEventListener ? { passive: true } : undefined;
    class TopAppBarBaseBase extends BaseElement {
        constructor() {
            super(...arguments);
            this.mdcFoundationClass = MDCTopAppBarBaseFoundation;
            this.centerTitle = false;
            this.handleTargetScroll = () => {
                this.mdcFoundation.handleTargetScroll();
            };
            this.handleNavigationClick = () => {
                this.mdcFoundation.handleNavigationClick();
            };
        }
        get scrollTarget() {
            return this._scrollTarget || window;
        }
        set scrollTarget(value) {
            const old = this.scrollTarget;
            this._scrollTarget = value;
            this.updateRootPosition();
            this.requestUpdate('scrollTarget', old);
        }
        updateRootPosition() {
            if (this.mdcRoot) {
                const windowScroller = this.scrollTarget === window;
                // we add support for top-app-bar's tied to an element scroller.
                this.mdcRoot.style.position = windowScroller ? '' : 'absolute';
            }
        }
        render() {
            // clang-format off
            let title = html `<span class="mdc-top-app-bar__title"><slot name="title"></slot></span>`;
            if (this.centerTitle) {
                title = html `<section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-center">${title}</section>`;
            }
            // clang-format on
            return html `
      <header class="mdc-top-app-bar ${classMap(this.barClasses())}">
      <div class="mdc-top-app-bar__row">
        <section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-start" id="navigation">
          <slot name="navigationIcon"
            @click=${this.handleNavigationClick}></slot>
          ${this.centerTitle ? null : title}
        </section>
        ${this.centerTitle ? title : null}
        <section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-end" id="actions" role="toolbar">
          <slot name="actionItems"></slot>
        </section>
      </div>
    </header>
    <div class="${classMap(this.contentClasses())}">
      <slot></slot>
    </div>
    `;
        }
        createAdapter() {
            return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), { setStyle: (property, value) => this.mdcRoot.style.setProperty(property, value), getTopAppBarHeight: () => this.mdcRoot.clientHeight, notifyNavigationIconClicked: () => {
                    this.dispatchEvent(new Event(strings$8.NAVIGATION_EVENT, { bubbles: true, cancelable: true }));
                }, getViewportScrollY: () => this.scrollTarget instanceof Window ?
                    this.scrollTarget.pageYOffset :
                    this.scrollTarget.scrollTop, getTotalActionItems: () => this._actionItemsSlot
                    .assignedNodes({ flatten: true })
                    .length });
        }
        registerListeners() {
            this.scrollTarget.addEventListener('scroll', this.handleTargetScroll, passiveEventOptionsIfSupported);
        }
        unregisterListeners() {
            this.scrollTarget.removeEventListener('scroll', this.handleTargetScroll);
        }
        firstUpdated() {
            super.firstUpdated();
            this.updateRootPosition();
            this.registerListeners();
        }
        disconnectedCallback() {
            super.disconnectedCallback();
            this.unregisterListeners();
        }
    }
    __decorate([
        query('.mdc-top-app-bar')
    ], TopAppBarBaseBase.prototype, "mdcRoot", void 0);
    __decorate([
        query('slot[name="actionItems"]')
    ], TopAppBarBaseBase.prototype, "_actionItemsSlot", void 0);
    __decorate([
        property({ type: Boolean })
    ], TopAppBarBaseBase.prototype, "centerTitle", void 0);
    __decorate([
        property()
    ], TopAppBarBaseBase.prototype, "scrollTarget", null);

    class TopAppBarBase extends TopAppBarBaseBase {
        constructor() {
            super(...arguments);
            this.mdcFoundationClass = MDCTopAppBarFoundation;
            this.prominent = false;
            this.dense = false;
            this.handleResize = () => {
                this.mdcFoundation.handleWindowResize();
            };
        }
        barClasses() {
            return {
                'mdc-top-app-bar--dense': this.dense,
                'mdc-top-app-bar--prominent': this.prominent,
                'center-title': this.centerTitle,
            };
        }
        contentClasses() {
            return {
                'mdc-top-app-bar--fixed-adjust': !this.dense && !this.prominent,
                'mdc-top-app-bar--dense-fixed-adjust': this.dense && !this.prominent,
                'mdc-top-app-bar--prominent-fixed-adjust': !this.dense && this.prominent,
                'mdc-top-app-bar--dense-prominent-fixed-adjust': this.dense && this.prominent,
            };
        }
        registerListeners() {
            super.registerListeners();
            window.addEventListener('resize', this.handleResize, passiveEventOptionsIfSupported);
        }
        unregisterListeners() {
            super.unregisterListeners();
            window.removeEventListener('resize', this.handleResize);
        }
    }
    __decorate([
        property({ type: Boolean, reflect: true })
    ], TopAppBarBase.prototype, "prominent", void 0);
    __decorate([
        property({ type: Boolean, reflect: true })
    ], TopAppBarBase.prototype, "dense", void 0);

    /**
    @license
    Copyright 2018 Google Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    const style$a = css `.mdc-top-app-bar{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee);color:#fff;display:flex;position:fixed;flex-direction:column;justify-content:space-between;box-sizing:border-box;width:100%;z-index:4}.mdc-top-app-bar .mdc-top-app-bar__action-item,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon{color:#fff;color:var(--mdc-theme-on-primary, #fff)}.mdc-top-app-bar .mdc-top-app-bar__action-item::before,.mdc-top-app-bar .mdc-top-app-bar__action-item::after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon::after{background-color:#fff;background-color:var(--mdc-theme-on-primary, #fff)}.mdc-top-app-bar .mdc-top-app-bar__action-item:hover::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:hover::before{opacity:.08}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded--background-focused::before,.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):focus::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded--background-focused::before,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:.24}.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded)::after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-top-app-bar .mdc-top-app-bar__action-item:not(.mdc-ripple-upgraded):active::after,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:.24}.mdc-top-app-bar .mdc-top-app-bar__action-item.mdc-ripple-upgraded,.mdc-top-app-bar .mdc-top-app-bar__navigation-icon.mdc-ripple-upgraded{--mdc-ripple-fg-opacity: 0.24}.mdc-top-app-bar__row{display:flex;position:relative;box-sizing:border-box;width:100%;height:64px}.mdc-top-app-bar__section{display:inline-flex;flex:1 1 auto;align-items:center;min-width:0;padding:8px 12px;z-index:1}.mdc-top-app-bar__section--align-start{justify-content:flex-start;order:-1}.mdc-top-app-bar__section--align-end{justify-content:flex-end;order:1}.mdc-top-app-bar__title{font-family:Roboto, sans-serif;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-size:1.25rem;line-height:2rem;font-weight:500;letter-spacing:.0125em;text-decoration:inherit;text-transform:inherit;padding-left:20px;padding-right:0;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;z-index:1}[dir=rtl] .mdc-top-app-bar__title,.mdc-top-app-bar__title[dir=rtl]{padding-left:0;padding-right:20px}.mdc-top-app-bar--short-collapsed{border-radius:0 0 24px 0}[dir=rtl] .mdc-top-app-bar--short-collapsed,.mdc-top-app-bar--short-collapsed[dir=rtl]{border-radius:0 0 0 24px}.mdc-top-app-bar--short{top:0;right:auto;left:0;width:100%;transition:width 250ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-top-app-bar--short,.mdc-top-app-bar--short[dir=rtl]{right:0;left:auto}.mdc-top-app-bar--short .mdc-top-app-bar__row{height:56px}.mdc-top-app-bar--short .mdc-top-app-bar__section{padding:4px}.mdc-top-app-bar--short .mdc-top-app-bar__title{transition:opacity 200ms cubic-bezier(0.4, 0, 0.2, 1);opacity:1}.mdc-top-app-bar--short-collapsed{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12);width:56px;transition:width 300ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__title{display:none}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__action-item{transition:padding 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item{width:112px}.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end{padding-left:0;padding-right:12px}[dir=rtl] .mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end,.mdc-top-app-bar--short-collapsed.mdc-top-app-bar--short-has-action-item .mdc-top-app-bar__section--align-end[dir=rtl]{padding-left:12px;padding-right:0}.mdc-top-app-bar--dense .mdc-top-app-bar__row{height:48px}.mdc-top-app-bar--dense .mdc-top-app-bar__section{padding:0 4px}.mdc-top-app-bar--dense .mdc-top-app-bar__title{padding-left:12px;padding-right:0}[dir=rtl] .mdc-top-app-bar--dense .mdc-top-app-bar__title,.mdc-top-app-bar--dense .mdc-top-app-bar__title[dir=rtl]{padding-left:0;padding-right:12px}.mdc-top-app-bar--prominent .mdc-top-app-bar__row{height:128px}.mdc-top-app-bar--prominent .mdc-top-app-bar__title{align-self:flex-end;padding-bottom:2px}.mdc-top-app-bar--prominent .mdc-top-app-bar__action-item,.mdc-top-app-bar--prominent .mdc-top-app-bar__navigation-icon{align-self:flex-start}.mdc-top-app-bar--fixed{transition:box-shadow 200ms linear}.mdc-top-app-bar--fixed-scrolled{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12);transition:box-shadow 200ms linear}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__row{height:96px}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__section{padding:0 12px}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title{padding-left:20px;padding-right:0;padding-bottom:9px}[dir=rtl] .mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title,.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__title[dir=rtl]{padding-left:0;padding-right:20px}.mdc-top-app-bar--fixed-adjust{padding-top:64px}.mdc-top-app-bar--dense-fixed-adjust{padding-top:48px}.mdc-top-app-bar--short-fixed-adjust{padding-top:56px}.mdc-top-app-bar--prominent-fixed-adjust{padding-top:128px}.mdc-top-app-bar--dense-prominent-fixed-adjust{padding-top:96px}@media(max-width: 599px){.mdc-top-app-bar__row{height:56px}.mdc-top-app-bar__section{padding:4px}.mdc-top-app-bar--short{transition:width 200ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed{transition:width 250ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end{padding-left:0;padding-right:12px}[dir=rtl] .mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end,.mdc-top-app-bar--short-collapsed .mdc-top-app-bar__section--align-end[dir=rtl]{padding-left:12px;padding-right:0}.mdc-top-app-bar--prominent .mdc-top-app-bar__title{padding-bottom:6px}.mdc-top-app-bar--fixed-adjust{padding-top:56px}}:host{display:block}.mdc-top-app-bar{color:#fff;color:var(--mdc-theme-on-primary, #fff)}.mdc-top-app-bar--prominent #navigation ::slotted(*),.mdc-top-app-bar--prominent #actions ::slotted(*){align-self:flex-start}#navigation ::slotted(*),#actions ::slotted(*){--mdc-icon-button-ripple-opacity: 0.24}.mdc-top-app-bar--short-collapsed #actions ::slotted(*){transition:padding 150ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-top-app-bar__section--align-center{justify-content:center}.mdc-top-app-bar__section--align-center .mdc-top-app-bar__title{padding-left:0;padding-right:0}.center-title .mdc-top-app-bar__section--align-start,.center-title .mdc-top-app-bar__section--align-end{flex-basis:0}.mdc-top-app-bar--dense.mdc-top-app-bar--prominent .mdc-top-app-bar__section--align-center .mdc-top-app-bar__title{padding-left:0;padding-right:0}`;

    let TopAppBar = class TopAppBar extends TopAppBarBase {
    };
    TopAppBar.styles = style$a;
    TopAppBar = __decorate([
        customElement('mwc-top-app-bar')
    ], TopAppBar);

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    /**
     * zrender: 生成唯一id
     *
     * @author errorrik (errorrik@gmail.com)
     */
    var idStart = 0x0907;

    function _default() {
      return idStart++;
    }

    var guid = _default;

    /**
     * echarts设备环境识别
     *
     * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
     * @author firede[firede@firede.us]
     * @desc thanks zepto.
     */

    /* global wx */
    var env = {};

    if (typeof wx === 'object' && typeof wx.getSystemInfoSync === 'function') {
      // In Weixin Application
      env = {
        browser: {},
        os: {},
        node: false,
        wxa: true,
        // Weixin Application
        canvasSupported: true,
        svgSupported: false,
        touchEventsSupported: true,
        domSupported: false
      };
    } else if (typeof document === 'undefined' && typeof self !== 'undefined') {
      // In worker
      env = {
        browser: {},
        os: {},
        node: false,
        worker: true,
        canvasSupported: true,
        domSupported: false
      };
    } else if (typeof navigator === 'undefined') {
      // In node
      env = {
        browser: {},
        os: {},
        node: true,
        worker: false,
        // Assume canvas is supported
        canvasSupported: true,
        svgSupported: true,
        domSupported: false
      };
    } else {
      env = detect(navigator.userAgent);
    }

    var _default$1 = env; // Zepto.js
    // (c) 2010-2013 Thomas Fuchs
    // Zepto.js may be freely distributed under the MIT license.

    function detect(ua) {
      var os = {};
      var browser = {}; // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
      // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
      // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
      // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
      // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
      // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
      // var touchpad = webos && ua.match(/TouchPad/);
      // var kindle = ua.match(/Kindle\/([\d.]+)/);
      // var silk = ua.match(/Silk\/([\d._]+)/);
      // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
      // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
      // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
      // var playbook = ua.match(/PlayBook/);
      // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);

      var firefox = ua.match(/Firefox\/([\d.]+)/); // var safari = webkit && ua.match(/Mobile\//) && !chrome;
      // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;

      var ie = ua.match(/MSIE\s([\d.]+)/) // IE 11 Trident/7.0; rv:11.0
      || ua.match(/Trident\/.+?rv:(([\d.]+))/);
      var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

      var weChat = /micromessenger/i.test(ua); // Todo: clean this up with a better OS/browser seperation:
      // - discern (more) between multiple browsers on android
      // - decide if kindle fire in silk mode is android or not
      // - Firefox on Android doesn't specify the Android version
      // - possibly devide in os, device and browser hashes
      // if (browser.webkit = !!webkit) browser.version = webkit[1];
      // if (android) os.android = true, os.version = android[2];
      // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
      // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
      // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
      // if (webos) os.webos = true, os.version = webos[2];
      // if (touchpad) os.touchpad = true;
      // if (blackberry) os.blackberry = true, os.version = blackberry[2];
      // if (bb10) os.bb10 = true, os.version = bb10[2];
      // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
      // if (playbook) browser.playbook = true;
      // if (kindle) os.kindle = true, os.version = kindle[1];
      // if (silk) browser.silk = true, browser.version = silk[1];
      // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
      // if (chrome) browser.chrome = true, browser.version = chrome[1];

      if (firefox) {
        browser.firefox = true;
        browser.version = firefox[1];
      } // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
      // if (webview) browser.webview = true;


      if (ie) {
        browser.ie = true;
        browser.version = ie[1];
      }

      if (edge) {
        browser.edge = true;
        browser.version = edge[1];
      } // It is difficult to detect WeChat in Win Phone precisely, because ua can
      // not be set on win phone. So we do not consider Win Phone.


      if (weChat) {
        browser.weChat = true;
      } // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
      //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
      // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
      //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
      //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));


      return {
        browser: browser,
        os: os,
        node: false,
        // 原生canvas支持，改极端点了
        // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
        canvasSupported: !!document.createElement('canvas').getContext,
        svgSupported: typeof SVGRect !== 'undefined',
        // works on most browsers
        // IE10/11 does not support touch event, and MS Edge supports them but not by
        // default, so we dont check navigator.maxTouchPoints for them here.
        touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
        // <http://caniuse.com/#search=pointer%20event>.
        pointerEventsSupported: // (1) Firefox supports pointer but not by default, only MS browsers are reliable on pointer
        // events currently. So we dont use that on other browsers unless tested sufficiently.
        // For example, in iOS 13 Mobile Chromium 78, if the touching behavior starts page
        // scroll, the `pointermove` event can not be fired any more. That will break some
        // features like "pan horizontally to move something and pan vertically to page scroll".
        // The horizontal pan probably be interrupted by the casually triggered page scroll.
        // (2) Although IE 10 supports pointer event, it use old style and is different from the
        // standard. So we exclude that. (IE 10 is hardly used on touch device)
        'onpointerdown' in window && (browser.edge || browser.ie && browser.version >= 11),
        // passiveSupported: detectPassiveSupport()
        domSupported: typeof document !== 'undefined'
      };
    } // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
    // function detectPassiveSupport() {
    //     // Test via a getter in the options object to see if the passive property is accessed
    //     var supportsPassive = false;
    //     try {
    //         var opts = Object.defineProperty({}, 'passive', {
    //             get: function() {
    //                 supportsPassive = true;
    //             }
    //         });
    //         window.addEventListener('testPassive', function() {}, opts);
    //     } catch (e) {
    //     }
    //     return supportsPassive;
    // }


    var env_1 = _default$1;

    /**
     * @module zrender/core/util
     */
    // 用于处理merge时无法遍历Date等对象的问题
    var BUILTIN_OBJECT = {
      '[object Function]': 1,
      '[object RegExp]': 1,
      '[object Date]': 1,
      '[object Error]': 1,
      '[object CanvasGradient]': 1,
      '[object CanvasPattern]': 1,
      // For node-canvas
      '[object Image]': 1,
      '[object Canvas]': 1
    };
    var TYPED_ARRAY = {
      '[object Int8Array]': 1,
      '[object Uint8Array]': 1,
      '[object Uint8ClampedArray]': 1,
      '[object Int16Array]': 1,
      '[object Uint16Array]': 1,
      '[object Int32Array]': 1,
      '[object Uint32Array]': 1,
      '[object Float32Array]': 1,
      '[object Float64Array]': 1
    };
    var objToString = Object.prototype.toString;
    var arrayProto = Array.prototype;
    var nativeForEach = arrayProto.forEach;
    var nativeFilter = arrayProto.filter;
    var nativeSlice = arrayProto.slice;
    var nativeMap = arrayProto.map;
    var nativeReduce = arrayProto.reduce; // Avoid assign to an exported variable, for transforming to cjs.

    var methods = {};

    function $override(name, fn) {
      // Clear ctx instance for different environment
      if (name === 'createCanvas') {
        _ctx = null;
      }

      methods[name] = fn;
    }
    /**
     * Those data types can be cloned:
     *     Plain object, Array, TypedArray, number, string, null, undefined.
     * Those data types will be assgined using the orginal data:
     *     BUILTIN_OBJECT
     * Instance of user defined class will be cloned to a plain object, without
     * properties in prototype.
     * Other data types is not supported (not sure what will happen).
     *
     * Caution: do not support clone Date, for performance consideration.
     * (There might be a large number of date in `series.data`).
     * So date should not be modified in and out of echarts.
     *
     * @param {*} source
     * @return {*} new
     */


    function clone(source) {
      if (source == null || typeof source !== 'object') {
        return source;
      }

      var result = source;
      var typeStr = objToString.call(source);

      if (typeStr === '[object Array]') {
        if (!isPrimitive$1(source)) {
          result = [];

          for (var i = 0, len = source.length; i < len; i++) {
            result[i] = clone(source[i]);
          }
        }
      } else if (TYPED_ARRAY[typeStr]) {
        if (!isPrimitive$1(source)) {
          var Ctor = source.constructor;

          if (source.constructor.from) {
            result = Ctor.from(source);
          } else {
            result = new Ctor(source.length);

            for (var i = 0, len = source.length; i < len; i++) {
              result[i] = clone(source[i]);
            }
          }
        }
      } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive$1(source) && !isDom(source)) {
        result = {};

        for (var key in source) {
          if (source.hasOwnProperty(key)) {
            result[key] = clone(source[key]);
          }
        }
      }

      return result;
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} target
     * @param {*} source
     * @param {boolean} [overwrite=false]
     */


    function merge(target, source, overwrite) {
      // We should escapse that source is string
      // and enter for ... in ...
      if (!isObject(source) || !isObject(target)) {
        return overwrite ? clone(source) : target;
      }

      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          var targetProp = target[key];
          var sourceProp = source[key];

          if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive$1(sourceProp) && !isPrimitive$1(targetProp)) {
            // 如果需要递归覆盖，就递归调用merge
            merge(targetProp, sourceProp, overwrite);
          } else if (overwrite || !(key in target)) {
            // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
            // NOTE，在 target[key] 不存在的时候也是直接覆盖
            target[key] = clone(source[key]);
          }
        }
      }

      return target;
    }
    /**
     * @param {Array} targetAndSources The first item is target, and the rests are source.
     * @param {boolean} [overwrite=false]
     * @return {*} target
     */


    function mergeAll(targetAndSources, overwrite) {
      var result = targetAndSources[0];

      for (var i = 1, len = targetAndSources.length; i < len; i++) {
        result = merge(result, targetAndSources[i], overwrite);
      }

      return result;
    }
    /**
     * @param {*} target
     * @param {*} source
     * @memberOf module:zrender/core/util
     */


    function extend(target, source) {
      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          target[key] = source[key];
        }
      }

      return target;
    }
    /**
     * @param {*} target
     * @param {*} source
     * @param {boolean} [overlay=false]
     * @memberOf module:zrender/core/util
     */


    function defaults(target, source, overlay) {
      for (var key in source) {
        if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
          target[key] = source[key];
        }
      }

      return target;
    }

    var createCanvas = function () {
      return methods.createCanvas();
    };

    methods.createCanvas = function () {
      return document.createElement('canvas');
    }; // FIXME


    var _ctx;

    function getContext() {
      if (!_ctx) {
        // Use util.createCanvas instead of createCanvas
        // because createCanvas may be overwritten in different environment
        _ctx = createCanvas().getContext('2d');
      }

      return _ctx;
    }
    /**
     * 查询数组中元素的index
     * @memberOf module:zrender/core/util
     */


    function indexOf(array, value) {
      if (array) {
        if (array.indexOf) {
          return array.indexOf(value);
        }

        for (var i = 0, len = array.length; i < len; i++) {
          if (array[i] === value) {
            return i;
          }
        }
      }

      return -1;
    }
    /**
     * 构造类继承关系
     *
     * @memberOf module:zrender/core/util
     * @param {Function} clazz 源类
     * @param {Function} baseClazz 基类
     */


    function inherits(clazz, baseClazz) {
      var clazzPrototype = clazz.prototype;

      function F() {}

      F.prototype = baseClazz.prototype;
      clazz.prototype = new F();

      for (var prop in clazzPrototype) {
        if (clazzPrototype.hasOwnProperty(prop)) {
          clazz.prototype[prop] = clazzPrototype[prop];
        }
      }

      clazz.prototype.constructor = clazz;
      clazz.superClass = baseClazz;
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {Object|Function} target
     * @param {Object|Function} sorce
     * @param {boolean} overlay
     */


    function mixin(target, source, overlay) {
      target = 'prototype' in target ? target.prototype : target;
      source = 'prototype' in source ? source.prototype : source;
      defaults(target, source, overlay);
    }
    /**
     * Consider typed array.
     * @param {Array|TypedArray} data
     */


    function isArrayLike(data) {
      if (!data) {
        return;
      }

      if (typeof data === 'string') {
        return false;
      }

      return typeof data.length === 'number';
    }
    /**
     * 数组或对象遍历
     * @memberOf module:zrender/core/util
     * @param {Object|Array} obj
     * @param {Function} cb
     * @param {*} [context]
     */


    function each(obj, cb, context) {
      if (!(obj && cb)) {
        return;
      }

      if (obj.forEach && obj.forEach === nativeForEach) {
        obj.forEach(cb, context);
      } else if (obj.length === +obj.length) {
        for (var i = 0, len = obj.length; i < len; i++) {
          cb.call(context, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            cb.call(context, obj[key], key, obj);
          }
        }
      }
    }
    /**
     * 数组映射
     * @memberOf module:zrender/core/util
     * @param {Array} obj
     * @param {Function} cb
     * @param {*} [context]
     * @return {Array}
     */


    function map(obj, cb, context) {
      if (!(obj && cb)) {
        return;
      }

      if (obj.map && obj.map === nativeMap) {
        return obj.map(cb, context);
      } else {
        var result = [];

        for (var i = 0, len = obj.length; i < len; i++) {
          result.push(cb.call(context, obj[i], i, obj));
        }

        return result;
      }
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {Array} obj
     * @param {Function} cb
     * @param {Object} [memo]
     * @param {*} [context]
     * @return {Array}
     */


    function reduce(obj, cb, memo, context) {
      if (!(obj && cb)) {
        return;
      }

      if (obj.reduce && obj.reduce === nativeReduce) {
        return obj.reduce(cb, memo, context);
      } else {
        for (var i = 0, len = obj.length; i < len; i++) {
          memo = cb.call(context, memo, obj[i], i, obj);
        }

        return memo;
      }
    }
    /**
     * 数组过滤
     * @memberOf module:zrender/core/util
     * @param {Array} obj
     * @param {Function} cb
     * @param {*} [context]
     * @return {Array}
     */


    function filter(obj, cb, context) {
      if (!(obj && cb)) {
        return;
      }

      if (obj.filter && obj.filter === nativeFilter) {
        return obj.filter(cb, context);
      } else {
        var result = [];

        for (var i = 0, len = obj.length; i < len; i++) {
          if (cb.call(context, obj[i], i, obj)) {
            result.push(obj[i]);
          }
        }

        return result;
      }
    }
    /**
     * 数组项查找
     * @memberOf module:zrender/core/util
     * @param {Array} obj
     * @param {Function} cb
     * @param {*} [context]
     * @return {*}
     */


    function find(obj, cb, context) {
      if (!(obj && cb)) {
        return;
      }

      for (var i = 0, len = obj.length; i < len; i++) {
        if (cb.call(context, obj[i], i, obj)) {
          return obj[i];
        }
      }
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {Function} func
     * @param {*} context
     * @return {Function}
     */


    function bind(func, context) {
      var args = nativeSlice.call(arguments, 2);
      return function () {
        return func.apply(context, args.concat(nativeSlice.call(arguments)));
      };
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {Function} func
     * @return {Function}
     */


    function curry(func) {
      var args = nativeSlice.call(arguments, 1);
      return function () {
        return func.apply(this, args.concat(nativeSlice.call(arguments)));
      };
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isArray(value) {
      return objToString.call(value) === '[object Array]';
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isFunction(value) {
      return typeof value === 'function';
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isString(value) {
      return objToString.call(value) === '[object String]';
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return type === 'function' || !!value && type === 'object';
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isBuiltInObject(value) {
      return !!BUILTIN_OBJECT[objToString.call(value)];
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isTypedArray(value) {
      return !!TYPED_ARRAY[objToString.call(value)];
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {*} value
     * @return {boolean}
     */


    function isDom(value) {
      return typeof value === 'object' && typeof value.nodeType === 'number' && typeof value.ownerDocument === 'object';
    }
    /**
     * Whether is exactly NaN. Notice isNaN('a') returns true.
     * @param {*} value
     * @return {boolean}
     */


    function eqNaN(value) {
      /* eslint-disable-next-line no-self-compare */
      return value !== value;
    }
    /**
     * If value1 is not null, then return value1, otherwise judget rest of values.
     * Low performance.
     * @memberOf module:zrender/core/util
     * @return {*} Final value
     */


    function retrieve(values) {
      for (var i = 0, len = arguments.length; i < len; i++) {
        if (arguments[i] != null) {
          return arguments[i];
        }
      }
    }

    function retrieve2(value0, value1) {
      return value0 != null ? value0 : value1;
    }

    function retrieve3(value0, value1, value2) {
      return value0 != null ? value0 : value1 != null ? value1 : value2;
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {Array} arr
     * @param {number} startIndex
     * @param {number} endIndex
     * @return {Array}
     */


    function slice$1() {
      return Function.call.apply(nativeSlice, arguments);
    }
    /**
     * Normalize css liked array configuration
     * e.g.
     *  3 => [3, 3, 3, 3]
     *  [4, 2] => [4, 2, 4, 2]
     *  [4, 3, 2] => [4, 3, 2, 3]
     * @param {number|Array.<number>} val
     * @return {Array.<number>}
     */


    function normalizeCssArray(val) {
      if (typeof val === 'number') {
        return [val, val, val, val];
      }

      var len = val.length;

      if (len === 2) {
        // vertical | horizontal
        return [val[0], val[1], val[0], val[1]];
      } else if (len === 3) {
        // top | horizontal | bottom
        return [val[0], val[1], val[2], val[1]];
      }

      return val;
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {boolean} condition
     * @param {string} message
     */


    function assert(condition, message) {
      if (!condition) {
        throw new Error(message);
      }
    }
    /**
     * @memberOf module:zrender/core/util
     * @param {string} str string to be trimed
     * @return {string} trimed string
     */


    function trim(str) {
      if (str == null) {
        return null;
      } else if (typeof str.trim === 'function') {
        return str.trim();
      } else {
        return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
      }
    }

    var primitiveKey = '__ec_primitive__';
    /**
     * Set an object as primitive to be ignored traversing children in clone or merge
     */

    function setAsPrimitive(obj) {
      obj[primitiveKey] = true;
    }

    function isPrimitive$1(obj) {
      return obj[primitiveKey];
    }
    /**
     * @constructor
     * @param {Object} obj Only apply `ownProperty`.
     */


    function HashMap(obj) {
      var isArr = isArray(obj); // Key should not be set on this, otherwise
      // methods get/set/... may be overrided.

      this.data = {};
      var thisMap = this;
      obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);

      function visit(value, key) {
        isArr ? thisMap.set(value, key) : thisMap.set(key, value);
      }
    }

    HashMap.prototype = {
      constructor: HashMap,
      // Do not provide `has` method to avoid defining what is `has`.
      // (We usually treat `null` and `undefined` as the same, different
      // from ES6 Map).
      get: function (key) {
        return this.data.hasOwnProperty(key) ? this.data[key] : null;
      },
      set: function (key, value) {
        // Comparing with invocation chaining, `return value` is more commonly
        // used in this case: `var someVal = map.set('a', genVal());`
        return this.data[key] = value;
      },
      // Although util.each can be performed on this hashMap directly, user
      // should not use the exposed keys, who are prefixed.
      each: function (cb, context) {
        context !== void 0 && (cb = bind(cb, context));
        /* eslint-disable guard-for-in */

        for (var key in this.data) {
          this.data.hasOwnProperty(key) && cb(this.data[key], key);
        }
        /* eslint-enable guard-for-in */

      },
      // Do not use this method if performance sensitive.
      removeKey: function (key) {
        delete this.data[key];
      }
    };

    function createHashMap(obj) {
      return new HashMap(obj);
    }

    function concatArray(a, b) {
      var newArray = new a.constructor(a.length + b.length);

      for (var i = 0; i < a.length; i++) {
        newArray[i] = a[i];
      }

      var offset = a.length;

      for (i = 0; i < b.length; i++) {
        newArray[i + offset] = b[i];
      }

      return newArray;
    }

    function noop() {}

    var $override_1 = $override;
    var clone_1 = clone;
    var merge_1 = merge;
    var mergeAll_1 = mergeAll;
    var extend_1 = extend;
    var defaults_1 = defaults;
    var createCanvas_1 = createCanvas;
    var getContext_1 = getContext;
    var indexOf_1 = indexOf;
    var inherits_1 = inherits;
    var mixin_1 = mixin;
    var isArrayLike_1 = isArrayLike;
    var each_1 = each;
    var map_1 = map;
    var reduce_1 = reduce;
    var filter_1 = filter;
    var find_1 = find;
    var bind_1 = bind;
    var curry_1 = curry;
    var isArray_1 = isArray;
    var isFunction_1 = isFunction;
    var isString_1 = isString;
    var isObject_1 = isObject;
    var isBuiltInObject_1 = isBuiltInObject;
    var isTypedArray_1 = isTypedArray;
    var isDom_1 = isDom;
    var eqNaN_1 = eqNaN;
    var retrieve_1 = retrieve;
    var retrieve2_1 = retrieve2;
    var retrieve3_1 = retrieve3;
    var slice_1 = slice$1;
    var normalizeCssArray_1 = normalizeCssArray;
    var assert_1 = assert;
    var trim_1 = trim;
    var setAsPrimitive_1 = setAsPrimitive;
    var isPrimitive_1 = isPrimitive$1;
    var createHashMap_1 = createHashMap;
    var concatArray_1 = concatArray;
    var noop_1 = noop;

    var util = {
    	$override: $override_1,
    	clone: clone_1,
    	merge: merge_1,
    	mergeAll: mergeAll_1,
    	extend: extend_1,
    	defaults: defaults_1,
    	createCanvas: createCanvas_1,
    	getContext: getContext_1,
    	indexOf: indexOf_1,
    	inherits: inherits_1,
    	mixin: mixin_1,
    	isArrayLike: isArrayLike_1,
    	each: each_1,
    	map: map_1,
    	reduce: reduce_1,
    	filter: filter_1,
    	find: find_1,
    	bind: bind_1,
    	curry: curry_1,
    	isArray: isArray_1,
    	isFunction: isFunction_1,
    	isString: isString_1,
    	isObject: isObject_1,
    	isBuiltInObject: isBuiltInObject_1,
    	isTypedArray: isTypedArray_1,
    	isDom: isDom_1,
    	eqNaN: eqNaN_1,
    	retrieve: retrieve_1,
    	retrieve2: retrieve2_1,
    	retrieve3: retrieve3_1,
    	slice: slice_1,
    	normalizeCssArray: normalizeCssArray_1,
    	assert: assert_1,
    	trim: trim_1,
    	setAsPrimitive: setAsPrimitive_1,
    	isPrimitive: isPrimitive_1,
    	createHashMap: createHashMap_1,
    	concatArray: concatArray_1,
    	noop: noop_1
    };

    /* global Float32Array */
    var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
    /**
     * 创建一个向量
     * @param {number} [x=0]
     * @param {number} [y=0]
     * @return {Vector2}
     */

    function create(x, y) {
      var out = new ArrayCtor(2);

      if (x == null) {
        x = 0;
      }

      if (y == null) {
        y = 0;
      }

      out[0] = x;
      out[1] = y;
      return out;
    }
    /**
     * 复制向量数据
     * @param {Vector2} out
     * @param {Vector2} v
     * @return {Vector2}
     */


    function copy(out, v) {
      out[0] = v[0];
      out[1] = v[1];
      return out;
    }
    /**
     * 克隆一个向量
     * @param {Vector2} v
     * @return {Vector2}
     */


    function clone$1(v) {
      var out = new ArrayCtor(2);
      out[0] = v[0];
      out[1] = v[1];
      return out;
    }
    /**
     * 设置向量的两个项
     * @param {Vector2} out
     * @param {number} a
     * @param {number} b
     * @return {Vector2} 结果
     */


    function set(out, a, b) {
      out[0] = a;
      out[1] = b;
      return out;
    }
    /**
     * 向量相加
     * @param {Vector2} out
     * @param {Vector2} v1
     * @param {Vector2} v2
     */


    function add(out, v1, v2) {
      out[0] = v1[0] + v2[0];
      out[1] = v1[1] + v2[1];
      return out;
    }
    /**
     * 向量缩放后相加
     * @param {Vector2} out
     * @param {Vector2} v1
     * @param {Vector2} v2
     * @param {number} a
     */


    function scaleAndAdd(out, v1, v2, a) {
      out[0] = v1[0] + v2[0] * a;
      out[1] = v1[1] + v2[1] * a;
      return out;
    }
    /**
     * 向量相减
     * @param {Vector2} out
     * @param {Vector2} v1
     * @param {Vector2} v2
     */


    function sub(out, v1, v2) {
      out[0] = v1[0] - v2[0];
      out[1] = v1[1] - v2[1];
      return out;
    }
    /**
     * 向量长度
     * @param {Vector2} v
     * @return {number}
     */


    function len(v) {
      return Math.sqrt(lenSquare(v));
    }

    var length = len; // jshint ignore:line

    /**
     * 向量长度平方
     * @param {Vector2} v
     * @return {number}
     */

    function lenSquare(v) {
      return v[0] * v[0] + v[1] * v[1];
    }

    var lengthSquare = lenSquare;
    /**
     * 向量乘法
     * @param {Vector2} out
     * @param {Vector2} v1
     * @param {Vector2} v2
     */

    function mul(out, v1, v2) {
      out[0] = v1[0] * v2[0];
      out[1] = v1[1] * v2[1];
      return out;
    }
    /**
     * 向量除法
     * @param {Vector2} out
     * @param {Vector2} v1
     * @param {Vector2} v2
     */


    function div(out, v1, v2) {
      out[0] = v1[0] / v2[0];
      out[1] = v1[1] / v2[1];
      return out;
    }
    /**
     * 向量点乘
     * @param {Vector2} v1
     * @param {Vector2} v2
     * @return {number}
     */


    function dot(v1, v2) {
      return v1[0] * v2[0] + v1[1] * v2[1];
    }
    /**
     * 向量缩放
     * @param {Vector2} out
     * @param {Vector2} v
     * @param {number} s
     */


    function scale(out, v, s) {
      out[0] = v[0] * s;
      out[1] = v[1] * s;
      return out;
    }
    /**
     * 向量归一化
     * @param {Vector2} out
     * @param {Vector2} v
     */


    function normalize(out, v) {
      var d = len(v);

      if (d === 0) {
        out[0] = 0;
        out[1] = 0;
      } else {
        out[0] = v[0] / d;
        out[1] = v[1] / d;
      }

      return out;
    }
    /**
     * 计算向量间距离
     * @param {Vector2} v1
     * @param {Vector2} v2
     * @return {number}
     */


    function distance(v1, v2) {
      return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
    }

    var dist = distance;
    /**
     * 向量距离平方
     * @param {Vector2} v1
     * @param {Vector2} v2
     * @return {number}
     */

    function distanceSquare(v1, v2) {
      return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
    }

    var distSquare = distanceSquare;
    /**
     * 求负向量
     * @param {Vector2} out
     * @param {Vector2} v
     */

    function negate(out, v) {
      out[0] = -v[0];
      out[1] = -v[1];
      return out;
    }
    /**
     * 插值两个点
     * @param {Vector2} out
     * @param {Vector2} v1
     * @param {Vector2} v2
     * @param {number} t
     */


    function lerp(out, v1, v2, t) {
      out[0] = v1[0] + t * (v2[0] - v1[0]);
      out[1] = v1[1] + t * (v2[1] - v1[1]);
      return out;
    }
    /**
     * 矩阵左乘向量
     * @param {Vector2} out
     * @param {Vector2} v
     * @param {Vector2} m
     */


    function applyTransform(out, v, m) {
      var x = v[0];
      var y = v[1];
      out[0] = m[0] * x + m[2] * y + m[4];
      out[1] = m[1] * x + m[3] * y + m[5];
      return out;
    }
    /**
     * 求两个向量最小值
     * @param  {Vector2} out
     * @param  {Vector2} v1
     * @param  {Vector2} v2
     */


    function min(out, v1, v2) {
      out[0] = Math.min(v1[0], v2[0]);
      out[1] = Math.min(v1[1], v2[1]);
      return out;
    }
    /**
     * 求两个向量最大值
     * @param  {Vector2} out
     * @param  {Vector2} v1
     * @param  {Vector2} v2
     */


    function max(out, v1, v2) {
      out[0] = Math.max(v1[0], v2[0]);
      out[1] = Math.max(v1[1], v2[1]);
      return out;
    }

    var create_1 = create;
    var copy_1 = copy;
    var clone_1$1 = clone$1;
    var set_1 = set;
    var add_1 = add;
    var scaleAndAdd_1 = scaleAndAdd;
    var sub_1 = sub;
    var len_1 = len;
    var length_1 = length;
    var lenSquare_1 = lenSquare;
    var lengthSquare_1 = lengthSquare;
    var mul_1 = mul;
    var div_1 = div;
    var dot_1 = dot;
    var scale_1 = scale;
    var normalize_1 = normalize;
    var distance_1 = distance;
    var dist_1 = dist;
    var distanceSquare_1 = distanceSquare;
    var distSquare_1 = distSquare;
    var negate_1 = negate;
    var lerp_1 = lerp;
    var applyTransform_1 = applyTransform;
    var min_1 = min;
    var max_1 = max;

    var vector = {
    	create: create_1,
    	copy: copy_1,
    	clone: clone_1$1,
    	set: set_1,
    	add: add_1,
    	scaleAndAdd: scaleAndAdd_1,
    	sub: sub_1,
    	len: len_1,
    	length: length_1,
    	lenSquare: lenSquare_1,
    	lengthSquare: lengthSquare_1,
    	mul: mul_1,
    	div: div_1,
    	dot: dot_1,
    	scale: scale_1,
    	normalize: normalize_1,
    	distance: distance_1,
    	dist: dist_1,
    	distanceSquare: distanceSquare_1,
    	distSquare: distSquare_1,
    	negate: negate_1,
    	lerp: lerp_1,
    	applyTransform: applyTransform_1,
    	min: min_1,
    	max: max_1
    };

    // TODO Draggable for group
    // FIXME Draggable on element which has parent rotation or scale
    function Draggable() {
      this.on('mousedown', this._dragStart, this);
      this.on('mousemove', this._drag, this);
      this.on('mouseup', this._dragEnd, this); // `mosuemove` and `mouseup` can be continue to fire when dragging.
      // See [Drag outside] in `Handler.js`. So we do not need to trigger
      // `_dragEnd` when globalout. That would brings better user experience.
      // this.on('globalout', this._dragEnd, this);
      // this._dropTarget = null;
      // this._draggingTarget = null;
      // this._x = 0;
      // this._y = 0;
    }

    Draggable.prototype = {
      constructor: Draggable,
      _dragStart: function (e) {
        var draggingTarget = e.target;

        if (draggingTarget && draggingTarget.draggable) {
          this._draggingTarget = draggingTarget;
          draggingTarget.dragging = true;
          this._x = e.offsetX;
          this._y = e.offsetY;
          this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);
        }
      },
      _drag: function (e) {
        var draggingTarget = this._draggingTarget;

        if (draggingTarget) {
          var x = e.offsetX;
          var y = e.offsetY;
          var dx = x - this._x;
          var dy = y - this._y;
          this._x = x;
          this._y = y;
          draggingTarget.drift(dx, dy, e);
          this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);
          var dropTarget = this.findHover(x, y, draggingTarget).target;
          var lastDropTarget = this._dropTarget;
          this._dropTarget = dropTarget;

          if (draggingTarget !== dropTarget) {
            if (lastDropTarget && dropTarget !== lastDropTarget) {
              this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);
            }

            if (dropTarget && dropTarget !== lastDropTarget) {
              this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);
            }
          }
        }
      },
      _dragEnd: function (e) {
        var draggingTarget = this._draggingTarget;

        if (draggingTarget) {
          draggingTarget.dragging = false;
        }

        this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);

        if (this._dropTarget) {
          this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);
        }

        this._draggingTarget = null;
        this._dropTarget = null;
      }
    };

    function param(target, e) {
      return {
        target: target,
        topTarget: e && e.topTarget
      };
    }

    var _default$2 = Draggable;
    var Draggable_1 = _default$2;

    /**
     * Event Mixin
     * @module zrender/mixin/Eventful
     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
     *         pissang (https://www.github.com/pissang)
     */
    var arrySlice = Array.prototype.slice;
    /**
     * Event dispatcher.
     *
     * @alias module:zrender/mixin/Eventful
     * @constructor
     * @param {Object} [eventProcessor] The object eventProcessor is the scope when
     *        `eventProcessor.xxx` called.
     * @param {Function} [eventProcessor.normalizeQuery]
     *        param: {string|Object} Raw query.
     *        return: {string|Object} Normalized query.
     * @param {Function} [eventProcessor.filter] Event will be dispatched only
     *        if it returns `true`.
     *        param: {string} eventType
     *        param: {string|Object} query
     *        return: {boolean}
     * @param {Function} [eventProcessor.afterTrigger] Called after all handlers called.
     *        param: {string} eventType
     */

    var Eventful = function (eventProcessor) {
      this._$handlers = {};
      this._$eventProcessor = eventProcessor;
    };

    Eventful.prototype = {
      constructor: Eventful,

      /**
       * The handler can only be triggered once, then removed.
       *
       * @param {string} event The event name.
       * @param {string|Object} [query] Condition used on event filter.
       * @param {Function} handler The event handler.
       * @param {Object} context
       */
      one: function (event, query, handler, context) {
        return on(this, event, query, handler, context, true);
      },

      /**
       * Bind a handler.
       *
       * @param {string} event The event name.
       * @param {string|Object} [query] Condition used on event filter.
       * @param {Function} handler The event handler.
       * @param {Object} [context]
       */
      on: function (event, query, handler, context) {
        return on(this, event, query, handler, context, false);
      },

      /**
       * Whether any handler has bound.
       *
       * @param  {string}  event
       * @return {boolean}
       */
      isSilent: function (event) {
        var _h = this._$handlers;
        return !_h[event] || !_h[event].length;
      },

      /**
       * Unbind a event.
       *
       * @param {string} [event] The event name.
       *        If no `event` input, "off" all listeners.
       * @param {Function} [handler] The event handler.
       *        If no `handler` input, "off" all listeners of the `event`.
       */
      off: function (event, handler) {
        var _h = this._$handlers;

        if (!event) {
          this._$handlers = {};
          return this;
        }

        if (handler) {
          if (_h[event]) {
            var newList = [];

            for (var i = 0, l = _h[event].length; i < l; i++) {
              if (_h[event][i].h !== handler) {
                newList.push(_h[event][i]);
              }
            }

            _h[event] = newList;
          }

          if (_h[event] && _h[event].length === 0) {
            delete _h[event];
          }
        } else {
          delete _h[event];
        }

        return this;
      },

      /**
       * Dispatch a event.
       *
       * @param {string} type The event name.
       */
      trigger: function (type) {
        var _h = this._$handlers[type];
        var eventProcessor = this._$eventProcessor;

        if (_h) {
          var args = arguments;
          var argLen = args.length;

          if (argLen > 3) {
            args = arrySlice.call(args, 1);
          }

          var len = _h.length;

          for (var i = 0; i < len;) {
            var hItem = _h[i];

            if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {
              i++;
              continue;
            } // Optimize advise from backbone


            switch (argLen) {
              case 1:
                hItem.h.call(hItem.ctx);
                break;

              case 2:
                hItem.h.call(hItem.ctx, args[1]);
                break;

              case 3:
                hItem.h.call(hItem.ctx, args[1], args[2]);
                break;

              default:
                // have more than 2 given arguments
                hItem.h.apply(hItem.ctx, args);
                break;
            }

            if (hItem.one) {
              _h.splice(i, 1);

              len--;
            } else {
              i++;
            }
          }
        }

        eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);
        return this;
      },

      /**
       * Dispatch a event with context, which is specified at the last parameter.
       *
       * @param {string} type The event name.
       */
      triggerWithContext: function (type) {
        var _h = this._$handlers[type];
        var eventProcessor = this._$eventProcessor;

        if (_h) {
          var args = arguments;
          var argLen = args.length;

          if (argLen > 4) {
            args = arrySlice.call(args, 1, args.length - 1);
          }

          var ctx = args[args.length - 1];
          var len = _h.length;

          for (var i = 0; i < len;) {
            var hItem = _h[i];

            if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {
              i++;
              continue;
            } // Optimize advise from backbone


            switch (argLen) {
              case 1:
                hItem.h.call(ctx);
                break;

              case 2:
                hItem.h.call(ctx, args[1]);
                break;

              case 3:
                hItem.h.call(ctx, args[1], args[2]);
                break;

              default:
                // have more than 2 given arguments
                hItem.h.apply(ctx, args);
                break;
            }

            if (hItem.one) {
              _h.splice(i, 1);

              len--;
            } else {
              i++;
            }
          }
        }

        eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);
        return this;
      }
    };

    function normalizeQuery(host, query) {
      var eventProcessor = host._$eventProcessor;

      if (query != null && eventProcessor && eventProcessor.normalizeQuery) {
        query = eventProcessor.normalizeQuery(query);
      }

      return query;
    }

    function on(eventful, event, query, handler, context, isOnce) {
      var _h = eventful._$handlers;

      if (typeof query === 'function') {
        context = handler;
        handler = query;
        query = null;
      }

      if (!handler || !event) {
        return eventful;
      }

      query = normalizeQuery(eventful, query);

      if (!_h[event]) {
        _h[event] = [];
      }

      for (var i = 0; i < _h[event].length; i++) {
        if (_h[event][i].h === handler) {
          return eventful;
        }
      }

      var wrap = {
        h: handler,
        one: isOnce,
        query: query,
        ctx: context || eventful,
        // FIXME
        // Do not publish this feature util it is proved that it makes sense.
        callAtLast: handler.zrEventfulCallAtLast
      };
      var lastIndex = _h[event].length - 1;
      var lastWrap = _h[event][lastIndex];
      lastWrap && lastWrap.callAtLast ? _h[event].splice(lastIndex, 0, wrap) : _h[event].push(wrap);
      return eventful;
    } // ----------------------
    // The events in zrender
    // ----------------------

    /**
     * @event module:zrender/mixin/Eventful#onclick
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#onmouseover
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#onmouseout
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#onmousemove
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#onmousewheel
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#onmousedown
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#onmouseup
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondrag
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondragstart
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondragend
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondragenter
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondragleave
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondragover
     * @type {Function}
     * @default null
     */

    /**
     * @event module:zrender/mixin/Eventful#ondrop
     * @type {Function}
     * @default null
     */


    var _default$3 = Eventful;
    var Eventful_1 = _default$3;

    /**
     * The algoritm is learnt from
     * https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/
     * And we made some optimization for matrix inversion.
     * Other similar approaches:
     * "cv::getPerspectiveTransform", "Direct Linear Transformation".
     */
    var LN2 = Math.log(2);

    function determinant(rows, rank, rowStart, rowMask, colMask, detCache) {
      var cacheKey = rowMask + '-' + colMask;
      var fullRank = rows.length;

      if (detCache.hasOwnProperty(cacheKey)) {
        return detCache[cacheKey];
      }

      if (rank === 1) {
        // In this case the colMask must be like: `11101111`. We can find the place of `0`.
        var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);
        return rows[rowStart][colStart];
      }

      var subRowMask = rowMask | 1 << rowStart;
      var subRowStart = rowStart + 1;

      while (rowMask & 1 << subRowStart) {
        subRowStart++;
      }

      var sum = 0;

      for (var j = 0, colLocalIdx = 0; j < fullRank; j++) {
        var colTag = 1 << j;

        if (!(colTag & colMask)) {
          sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] // det(subMatrix(0, j))
          * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);
          colLocalIdx++;
        }
      }

      detCache[cacheKey] = sum;
      return sum;
    }
    /**
     * Usage:
     * ```js
     * var transformer = buildTransformer(
     *     [10, 44, 100, 44, 100, 300, 10, 300],
     *     [50, 54, 130, 14, 140, 330, 14, 220]
     * );
     * var out = [];
     * transformer && transformer([11, 33], out);
     * ```
     *
     * Notice: `buildTransformer` may take more than 10ms in some Android device.
     *
     * @param {Array.<number>} src source four points, [x0, y0, x1, y1, x2, y2, x3, y3]
     * @param {Array.<number>} dest destination four points, [x0, y0, x1, y1, x2, y2, x3, y3]
     * @return {Function} transformer If fail, return null/undefined.
     */


    function buildTransformer(src, dest) {
      var mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];
      var detCache = {};
      var det = determinant(mA, 8, 0, 0, 0, detCache);

      if (det === 0) {
        return;
      } // `invert(mA) * dest`, that is, `adj(mA) / det * dest`.


      var vh = [];

      for (var i = 0; i < 8; i++) {
        for (var j = 0; j < 8; j++) {
          vh[j] == null && (vh[j] = 0);
          vh[j] += ((i + j) % 2 ? -1 : 1) * // det(subMatrix(i, j))
          determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];
        }
      }

      return function (out, srcPointX, srcPointY) {
        var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;
        out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;
        out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;
      };
    }

    var buildTransformer_1 = buildTransformer;

    var fourPointsTransform = {
    	buildTransformer: buildTransformer_1
    };

    var Dispatcher = Eventful_1;





    var buildTransformer$1 = fourPointsTransform.buildTransformer;

    /**
     * Utilities for mouse or touch events.
     */
    var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
    var MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
    var EVENT_SAVED_PROP = '___zrEVENTSAVED';
    var _calcOut = [];
    /**
     * Get the `zrX` and `zrY`, which are relative to the top-left of
     * the input `el`.
     * CSS transform (2D & 3D) is supported.
     *
     * The strategy to fetch the coords:
     * + If `calculate` is not set as `true`, users of this method should
     * ensure that `el` is the same or the same size & location as `e.target`.
     * Otherwise the result coords are probably not expected. Because we
     * firstly try to get coords from e.offsetX/e.offsetY.
     * + If `calculate` is set as `true`, the input `el` can be any element
     * and we force to calculate the coords based on `el`.
     * + The input `el` should be positionable (not position:static).
     *
     * The force `calculate` can be used in case like:
     * When mousemove event triggered on ec tooltip, `e.target` is not `el`(zr painter.dom).
     *
     * @param {HTMLElement} el DOM element.
     * @param {Event} e Mouse event or touch event.
     * @param {Object} out Get `out.zrX` and `out.zrY` as the result.
     * @param {boolean} [calculate=false] Whether to force calculate
     *        the coordinates but not use ones provided by browser.
     */

    function clientToLocal(el, e, out, calculate) {
      out = out || {}; // According to the W3C Working Draft, offsetX and offsetY should be relative
      // to the padding edge of the target element. The only browser using this convention
      // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
      // not support the properties.
      // (see http://www.jacklmoore.com/notes/mouse-position/)
      // In zr painter.dom, padding edge equals to border edge.

      if (calculate || !env_1.canvasSupported) {
        calculateZrXY(el, e, out);
      } // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
      // ancestor element, so we should make sure el is positioned (e.g., not position:static).
      // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
      // zoom-factor, overflow / opacity layers, transforms ...)
      // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
      // <https://bugs.jquery.com/ticket/8523#comment:14>
      // BTW3, In ff, offsetX/offsetY is always 0.
      else if (env_1.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
          out.zrX = e.layerX;
          out.zrY = e.layerY;
        } // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
        else if (e.offsetX != null) {
            out.zrX = e.offsetX;
            out.zrY = e.offsetY;
          } // For some other device, e.g., IOS safari.
          else {
              calculateZrXY(el, e, out);
            }

      return out;
    }

    function calculateZrXY(el, e, out) {
      // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect.
      if (el.getBoundingClientRect && env_1.domSupported) {
        var ex = e.clientX;
        var ey = e.clientY;

        if (el.nodeName.toUpperCase() === 'CANVAS') {
          // Original approach, which do not support CSS transform.
          // marker can not be locationed in a canvas container
          // (getBoundingClientRect is always 0). We do not support
          // that input a pre-created canvas to zr while using css
          // transform in iOS.
          var box = el.getBoundingClientRect();
          out.zrX = ex - box.left;
          out.zrY = ey - box.top;
          return;
        } else {
          var saved = el[EVENT_SAVED_PROP] || (el[EVENT_SAVED_PROP] = {});
          var transformer = preparePointerTransformer(prepareCoordMarkers(el, saved), saved);

          if (transformer) {
            transformer(_calcOut, ex, ey);
            out.zrX = _calcOut[0];
            out.zrY = _calcOut[1];
            return;
          }
        }
      }

      out.zrX = out.zrY = 0;
    }

    function prepareCoordMarkers(el, saved) {
      var markers = saved.markers;

      if (markers) {
        return markers;
      }

      markers = saved.markers = [];
      var propLR = ['left', 'right'];
      var propTB = ['top', 'bottom'];

      for (var i = 0; i < 4; i++) {
        var marker = document.createElement('div');
        var stl = marker.style;
        var idxLR = i % 2;
        var idxTB = (i >> 1) % 2;
        stl.cssText = ['position:absolute', 'visibility: hidden', 'padding: 0', 'margin: 0', 'border-width: 0', 'width:0', 'height:0', // 'width: 5px',
        // 'height: 5px',
        propLR[idxLR] + ':0', propTB[idxTB] + ':0', propLR[1 - idxLR] + ':auto', propTB[1 - idxTB] + ':auto', ''].join('!important;');
        el.appendChild(marker);
        markers.push(marker);
      }

      return markers;
    }

    function preparePointerTransformer(markers, saved) {
      var transformer = saved.transformer;
      var oldSrcCoords = saved.srcCoords;
      var useOld = true;
      var srcCoords = [];
      var destCoords = [];

      for (var i = 0; i < 4; i++) {
        var rect = markers[i].getBoundingClientRect();
        var ii = 2 * i;
        var x = rect.left;
        var y = rect.top;
        srcCoords.push(x, y);
        useOld &= oldSrcCoords && x === oldSrcCoords[ii] && y === oldSrcCoords[ii + 1];
        destCoords.push(markers[i].offsetLeft, markers[i].offsetTop);
      } // Cache to avoid time consuming of `buildTransformer`.


      return useOld ? transformer : (saved.srcCoords = srcCoords, saved.transformer = buildTransformer$1(srcCoords, destCoords));
    }
    /**
     * Find native event compat for legency IE.
     * Should be called at the begining of a native event listener.
     *
     * @param {Event} [e] Mouse event or touch event or pointer event.
     *        For lagency IE, we use `window.event` is used.
     * @return {Event} The native event.
     */


    function getNativeEvent(e) {
      return e || window.event;
    }
    /**
     * Normalize the coordinates of the input event.
     *
     * Get the `e.zrX` and `e.zrY`, which are relative to the top-left of
     * the input `el`.
     * Get `e.zrDelta` if using mouse wheel.
     * Get `e.which`, see the comment inside this function.
     *
     * Do not calculate repeatly if `zrX` and `zrY` already exist.
     *
     * Notice: see comments in `clientToLocal`. check the relationship
     * between the result coords and the parameters `el` and `calculate`.
     *
     * @param {HTMLElement} el DOM element.
     * @param {Event} [e] See `getNativeEvent`.
     * @param {boolean} [calculate=false] Whether to force calculate
     *        the coordinates but not use ones provided by browser.
     * @return {UIEvent} The normalized native UIEvent.
     */


    function normalizeEvent(el, e, calculate) {
      e = getNativeEvent(e);

      if (e.zrX != null) {
        return e;
      }

      var eventType = e.type;
      var isTouch = eventType && eventType.indexOf('touch') >= 0;

      if (!isTouch) {
        clientToLocal(el, e, e, calculate);
        e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
      } else {
        var touch = eventType !== 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
        touch && clientToLocal(el, touch, e, calculate);
      } // Add which for click: 1 === left; 2 === middle; 3 === right; otherwise: 0;
      // See jQuery: https://github.com/jquery/jquery/blob/master/src/event.js
      // If e.which has been defined, it may be readonly,
      // see: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which


      var button = e.button;

      if (e.which == null && button !== undefined && MOUSE_EVENT_REG.test(e.type)) {
        e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
      } // [Caution]: `e.which` from browser is not always reliable. For example,
      // when press left button and `mousemove (pointermove)` in Edge, the `e.which`
      // is 65536 and the `e.button` is -1. But the `mouseup (pointerup)` and
      // `mousedown (pointerdown)` is the same as Chrome does.


      return e;
    }
    /**
     * @param {HTMLElement} el
     * @param {string} name
     * @param {Function} handler
     * @param {Object|boolean} opt If boolean, means `opt.capture`
     * @param {boolean} [opt.capture=false]
     * @param {boolean} [opt.passive=false]
     */


    function addEventListener(el, name, handler, opt) {
      if (isDomLevel2) {
        // Reproduct the console warning:
        // [Violation] Added non-passive event listener to a scroll-blocking <some> event.
        // Consider marking event handler as 'passive' to make the page more responsive.
        // Just set console log level: verbose in chrome dev tool.
        // then the warning log will be printed when addEventListener called.
        // See https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
        // We have not yet found a neat way to using passive. Because in zrender the dom event
        // listener delegate all of the upper events of element. Some of those events need
        // to prevent default. For example, the feature `preventDefaultMouseMove` of echarts.
        // Before passive can be adopted, these issues should be considered:
        // (1) Whether and how a zrender user specifies an event listener passive. And by default,
        // passive or not.
        // (2) How to tread that some zrender event listener is passive, and some is not. If
        // we use other way but not preventDefault of mousewheel and touchmove, browser
        // compatibility should be handled.
        // var opts = (env.passiveSupported && name === 'mousewheel')
        //     ? {passive: true}
        //     // By default, the third param of el.addEventListener is `capture: false`.
        //     : void 0;
        // el.addEventListener(name, handler /* , opts */);
        el.addEventListener(name, handler, opt);
      } else {
        // For simplicity, do not implement `setCapture` for IE9-.
        el.attachEvent('on' + name, handler);
      }
    }
    /**
     * Parameter are the same as `addEventListener`.
     *
     * Notice that if a listener is registered twice, one with capture and one without,
     * remove each one separately. Removal of a capturing listener does not affect a
     * non-capturing version of the same listener, and vice versa.
     */


    function removeEventListener(el, name, handler, opt) {
      if (isDomLevel2) {
        el.removeEventListener(name, handler, opt);
      } else {
        el.detachEvent('on' + name, handler);
      }
    }
    /**
     * preventDefault and stopPropagation.
     * Notice: do not use this method in zrender. It can only be
     * used by upper applications if necessary.
     *
     * @param {Event} e A mouse or touch event.
     */


    var stop = isDomLevel2 ? function (e) {
      e.preventDefault();
      e.stopPropagation();
      e.cancelBubble = true;
    } : function (e) {
      e.returnValue = false;
      e.cancelBubble = true;
    };
    /**
     * This method only works for mouseup and mousedown. The functionality is restricted
     * for fault tolerance, See the `e.which` compatibility above.
     *
     * @param {MouseEvent} e
     * @return {boolean}
     */

    function isMiddleOrRightButtonOnMouseUpDown(e) {
      return e.which === 2 || e.which === 3;
    }
    /**
     * To be removed.
     * @deprecated
     */


    function notLeftMouse(e) {
      // If e.which is undefined, considered as left mouse event.
      return e.which > 1;
    } // For backward compatibility


    var clientToLocal_1 = clientToLocal;
    var getNativeEvent_1 = getNativeEvent;
    var normalizeEvent_1 = normalizeEvent;
    var addEventListener_1 = addEventListener;
    var removeEventListener_1 = removeEventListener;
    var stop_1 = stop;
    var isMiddleOrRightButtonOnMouseUpDown_1 = isMiddleOrRightButtonOnMouseUpDown;
    var notLeftMouse_1 = notLeftMouse;

    var event = {
    	Dispatcher: Dispatcher,
    	clientToLocal: clientToLocal_1,
    	getNativeEvent: getNativeEvent_1,
    	normalizeEvent: normalizeEvent_1,
    	addEventListener: addEventListener_1,
    	removeEventListener: removeEventListener_1,
    	stop: stop_1,
    	isMiddleOrRightButtonOnMouseUpDown: isMiddleOrRightButtonOnMouseUpDown_1,
    	notLeftMouse: notLeftMouse_1
    };

    /**
     * Only implements needed gestures for mobile.
     */
    var GestureMgr = function () {
      /**
       * @private
       * @type {Array.<Object>}
       */
      this._track = [];
    };

    GestureMgr.prototype = {
      constructor: GestureMgr,
      recognize: function (event, target, root) {
        this._doTrack(event, target, root);

        return this._recognize(event);
      },
      clear: function () {
        this._track.length = 0;
        return this;
      },
      _doTrack: function (event$1, target, root) {
        var touches = event$1.touches;

        if (!touches) {
          return;
        }

        var trackItem = {
          points: [],
          touches: [],
          target: target,
          event: event$1
        };

        for (var i = 0, len = touches.length; i < len; i++) {
          var touch = touches[i];
          var pos = event.clientToLocal(root, touch, {});
          trackItem.points.push([pos.zrX, pos.zrY]);
          trackItem.touches.push(touch);
        }

        this._track.push(trackItem);
      },
      _recognize: function (event) {
        for (var eventName in recognizers) {
          if (recognizers.hasOwnProperty(eventName)) {
            var gestureInfo = recognizers[eventName](this._track, event);

            if (gestureInfo) {
              return gestureInfo;
            }
          }
        }
      }
    };

    function dist$1(pointPair) {
      var dx = pointPair[1][0] - pointPair[0][0];
      var dy = pointPair[1][1] - pointPair[0][1];
      return Math.sqrt(dx * dx + dy * dy);
    }

    function center(pointPair) {
      return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
    }

    var recognizers = {
      pinch: function (track, event) {
        var trackLen = track.length;

        if (!trackLen) {
          return;
        }

        var pinchEnd = (track[trackLen - 1] || {}).points;
        var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

        if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
          var pinchScale = dist$1(pinchEnd) / dist$1(pinchPre);
          !isFinite(pinchScale) && (pinchScale = 1);
          event.pinchScale = pinchScale;
          var pinchCenter = center(pinchEnd);
          event.pinchX = pinchCenter[0];
          event.pinchY = pinchCenter[1];
          return {
            type: 'pinch',
            target: track[0].target,
            event: event
          };
        }
      } // Only pinch currently.

    };
    var _default$4 = GestureMgr;
    var GestureMgr_1 = _default$4;

    /**
     * [The interface between `Handler` and `HandlerProxy`]:
     *
     * The default `HandlerProxy` only support the common standard web environment
     * (e.g., standalone browser, headless browser, embed browser in mobild APP, ...).
     * But `HandlerProxy` can be replaced to support more non-standard environment
     * (e.g., mini app), or to support more feature that the default `HandlerProxy`
     * not provided (like echarts-gl did).
     * So the interface between `Handler` and `HandlerProxy` should be stable. Do not
     * make break changes util inevitable. The interface include the public methods
     * of `Handler` and the events listed in `handlerNames` below, by which `HandlerProxy`
     * drives `Handler`.
     */

    /**
     * [Drag outside]:
     *
     * That is, triggering `mousemove` and `mouseup` event when the pointer is out of the
     * zrender area when dragging. That is important for the improvement of the user experience
     * when dragging something near the boundary without being terminated unexpectedly.
     *
     * We originally consider to introduce new events like `pagemovemove` and `pagemouseup`
     * to resolve this issue. But some drawbacks of it is described in
     * https://github.com/ecomfe/zrender/pull/536#issuecomment-560286899
     *
     * Instead, we referenced the specifications:
     * https://www.w3.org/TR/touch-events/#the-touchmove-event
     * https://www.w3.org/TR/2014/WD-DOM-Level-3-Events-20140925/#event-type-mousemove
     * where the the mousemove/touchmove can be continue to fire if the user began a drag
     * operation and the pointer has left the boundary. (for the mouse event, browsers
     * only do it on `document` and when the pointer has left the boundary of the browser.)
     *
     * So the default `HandlerProxy` supports this feature similarly: if it is in the dragging
     * state (see `pointerCapture` in `HandlerProxy`), the `mousemove` and `mouseup` continue
     * to fire until release the pointer. That is implemented by listen to those event on
     * `document`.
     * If we implement some other `HandlerProxy` only for touch device, that would be easier.
     * The touch event support this feature by default.
     *
     * Note:
     * There might be some cases that the mouse event can not be
     * received on `document`. For example,
     * (A) `useCapture` is not supported and some user defined event listeners on the ancestor
     * of zr dom throw Error .
     * (B) `useCapture` is not supported Some user defined event listeners on the ancestor of
     * zr dom call `stopPropagation`.
     * In these cases, the `mousemove` event might be keep triggered event
     * if the mouse is released. We try to reduce the side-effect in those cases.
     * That is, do nothing (especially, `findHover`) in those cases. See `isOutsideBoundary`.
     *
     * Note:
     * If `HandlerProxy` listens to `document` with `useCapture`, `HandlerProxy` needs to
     * make sure `stopPropagation` and `preventDefault` doing nothing if and only if the event
     * target is not zrender dom. Becuase it is dangerous to enable users to call them in
     * `document` capture phase to prevent the propagation to any listener of the webpage.
     * But they are needed to work when the pointer inside the zrender dom.
     */
    var SILENT = 'silent';

    function makeEventPacket(eveType, targetInfo, event) {
      return {
        type: eveType,
        event: event,
        // target can only be an element that is not silent.
        target: targetInfo.target,
        // topTarget can be a silent element.
        topTarget: targetInfo.topTarget,
        cancelBubble: false,
        offsetX: event.zrX,
        offsetY: event.zrY,
        gestureEvent: event.gestureEvent,
        pinchX: event.pinchX,
        pinchY: event.pinchY,
        pinchScale: event.pinchScale,
        wheelDelta: event.zrDelta,
        zrByTouch: event.zrByTouch,
        which: event.which,
        stop: stopEvent
      };
    }

    function stopEvent() {
      event.stop(this.event);
    }

    function EmptyProxy() {}

    EmptyProxy.prototype.dispose = function () {};

    var handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
    /**
     * @alias module:zrender/Handler
     * @constructor
     * @extends module:zrender/mixin/Eventful
     * @param {module:zrender/Storage} storage Storage instance.
     * @param {module:zrender/Painter} painter Painter instance.
     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
     */

    var Handler = function (storage, painter, proxy, painterRoot) {
      Eventful_1.call(this);
      this.storage = storage;
      this.painter = painter;
      this.painterRoot = painterRoot;
      proxy = proxy || new EmptyProxy();
      /**
       * Proxy of event. can be Dom, WebGLSurface, etc.
       */

      this.proxy = null;
      /**
       * {target, topTarget, x, y}
       * @private
       * @type {Object}
       */

      this._hovered = {};
      /**
       * @private
       * @type {Date}
       */

      this._lastTouchMoment;
      /**
       * @private
       * @type {number}
       */

      this._lastX;
      /**
       * @private
       * @type {number}
       */

      this._lastY;
      /**
       * @private
       * @type {module:zrender/core/GestureMgr}
       */

      this._gestureMgr;
      Draggable_1.call(this);
      this.setHandlerProxy(proxy);
    };

    Handler.prototype = {
      constructor: Handler,
      setHandlerProxy: function (proxy) {
        if (this.proxy) {
          this.proxy.dispose();
        }

        if (proxy) {
          util.each(handlerNames, function (name) {
            proxy.on && proxy.on(name, this[name], this);
          }, this); // Attach handler

          proxy.handler = this;
        }

        this.proxy = proxy;
      },
      mousemove: function (event) {
        var x = event.zrX;
        var y = event.zrY;
        var isOutside = isOutsideBoundary(this, x, y);
        var lastHovered = this._hovered;
        var lastHoveredTarget = lastHovered.target; // If lastHoveredTarget is removed from zr (detected by '__zr') by some API call
        // (like 'setOption' or 'dispatchAction') in event handlers, we should find
        // lastHovered again here. Otherwise 'mouseout' can not be triggered normally.
        // See #6198.

        if (lastHoveredTarget && !lastHoveredTarget.__zr) {
          lastHovered = this.findHover(lastHovered.x, lastHovered.y);
          lastHoveredTarget = lastHovered.target;
        }

        var hovered = this._hovered = isOutside ? {
          x: x,
          y: y
        } : this.findHover(x, y);
        var hoveredTarget = hovered.target;
        var proxy = this.proxy;
        proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default'); // Mouse out on previous hovered element

        if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {
          this.dispatchToElement(lastHovered, 'mouseout', event);
        } // Mouse moving on one element


        this.dispatchToElement(hovered, 'mousemove', event); // Mouse over on a new element

        if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {
          this.dispatchToElement(hovered, 'mouseover', event);
        }
      },
      mouseout: function (event) {
        var eventControl = event.zrEventControl;
        var zrIsToLocalDOM = event.zrIsToLocalDOM;

        if (eventControl !== 'only_globalout') {
          this.dispatchToElement(this._hovered, 'mouseout', event);
        }

        if (eventControl !== 'no_globalout') {
          // FIXME: if the pointer moving from the extra doms to realy "outside",
          // the `globalout` should have been triggered. But currently not.
          !zrIsToLocalDOM && this.trigger('globalout', {
            type: 'globalout',
            event: event
          });
        }
      },

      /**
       * Resize
       */
      resize: function (event) {
        this._hovered = {};
      },

      /**
       * Dispatch event
       * @param {string} eventName
       * @param {event=} eventArgs
       */
      dispatch: function (eventName, eventArgs) {
        var handler = this[eventName];
        handler && handler.call(this, eventArgs);
      },

      /**
       * Dispose
       */
      dispose: function () {
        this.proxy.dispose();
        this.storage = this.proxy = this.painter = null;
      },

      /**
       * 设置默认的cursor style
       * @param {string} [cursorStyle='default'] 例如 crosshair
       */
      setCursorStyle: function (cursorStyle) {
        var proxy = this.proxy;
        proxy.setCursor && proxy.setCursor(cursorStyle);
      },

      /**
       * 事件分发代理
       *
       * @private
       * @param {Object} targetInfo {target, topTarget} 目标图形元素
       * @param {string} eventName 事件名称
       * @param {Object} event 事件对象
       */
      dispatchToElement: function (targetInfo, eventName, event) {
        targetInfo = targetInfo || {};
        var el = targetInfo.target;

        if (el && el.silent) {
          return;
        }

        var eventHandler = 'on' + eventName;
        var eventPacket = makeEventPacket(eventName, targetInfo, event);

        while (el) {
          el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
          el.trigger(eventName, eventPacket);
          el = el.parent;

          if (eventPacket.cancelBubble) {
            break;
          }
        }

        if (!eventPacket.cancelBubble) {
          // 冒泡到顶级 zrender 对象
          this.trigger(eventName, eventPacket); // 分发事件到用户自定义层
          // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在

          this.painter && this.painter.eachOtherLayer(function (layer) {
            if (typeof layer[eventHandler] === 'function') {
              layer[eventHandler].call(layer, eventPacket);
            }

            if (layer.trigger) {
              layer.trigger(eventName, eventPacket);
            }
          });
        }
      },

      /**
       * @private
       * @param {number} x
       * @param {number} y
       * @param {module:zrender/graphic/Displayable} exclude
       * @return {model:zrender/Element}
       * @method
       */
      findHover: function (x, y, exclude) {
        var list = this.storage.getDisplayList();
        var out = {
          x: x,
          y: y
        };

        for (var i = list.length - 1; i >= 0; i--) {
          var hoverCheckResult;

          if (list[i] !== exclude // getDisplayList may include ignored item in VML mode
          && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {
            !out.topTarget && (out.topTarget = list[i]);

            if (hoverCheckResult !== SILENT) {
              out.target = list[i];
              break;
            }
          }
        }

        return out;
      },
      processGesture: function (event, stage) {
        if (!this._gestureMgr) {
          this._gestureMgr = new GestureMgr_1();
        }

        var gestureMgr = this._gestureMgr;
        stage === 'start' && gestureMgr.clear();
        var gestureInfo = gestureMgr.recognize(event, this.findHover(event.zrX, event.zrY, null).target, this.proxy.dom);
        stage === 'end' && gestureMgr.clear(); // Do not do any preventDefault here. Upper application do that if necessary.

        if (gestureInfo) {
          var type = gestureInfo.type;
          event.gestureEvent = type;
          this.dispatchToElement({
            target: gestureInfo.target
          }, type, gestureInfo.event);
        }
      }
    }; // Common handlers

    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
      Handler.prototype[name] = function (event) {
        var x = event.zrX;
        var y = event.zrY;
        var isOutside = isOutsideBoundary(this, x, y);
        var hovered;
        var hoveredTarget;

        if (name !== 'mouseup' || !isOutside) {
          // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
          hovered = this.findHover(x, y);
          hoveredTarget = hovered.target;
        }

        if (name === 'mousedown') {
          this._downEl = hoveredTarget;
          this._downPoint = [event.zrX, event.zrY]; // In case click triggered before mouseup

          this._upEl = hoveredTarget;
        } else if (name === 'mouseup') {
          this._upEl = hoveredTarget;
        } else if (name === 'click') {
          if (this._downEl !== this._upEl // Original click event is triggered on the whole canvas element,
          // including the case that `mousedown` - `mousemove` - `mouseup`,
          // which should be filtered, otherwise it will bring trouble to
          // pan and zoom.
          || !this._downPoint // Arbitrary value
          || vector.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {
            return;
          }

          this._downPoint = null;
        }

        this.dispatchToElement(hovered, name, event);
      };
    });

    function isHover(displayable, x, y) {
      if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
        var el = displayable;
        var isSilent;

        while (el) {
          // If clipped by ancestor.
          // FIXME: If clipPath has neither stroke nor fill,
          // el.clipPath.contain(x, y) will always return false.
          if (el.clipPath && !el.clipPath.contain(x, y)) {
            return false;
          }

          if (el.silent) {
            isSilent = true;
          }

          el = el.parent;
        }

        return isSilent ? SILENT : true;
      }

      return false;
    }
    /**
     * See [Drag outside].
     */


    function isOutsideBoundary(handlerInstance, x, y) {
      var painter = handlerInstance.painter;
      return x < 0 || x > painter.getWidth() || y < 0 || y > painter.getHeight();
    }

    util.mixin(Handler, Eventful_1);
    util.mixin(Handler, Draggable_1);
    var _default$5 = Handler;
    var Handler_1 = _default$5;

    /**
     * 3x2矩阵操作类
     * @exports zrender/tool/matrix
     */

    /* global Float32Array */
    var ArrayCtor$1 = typeof Float32Array === 'undefined' ? Array : Float32Array;
    /**
     * Create a identity matrix.
     * @return {Float32Array|Array.<number>}
     */

    function create$1() {
      var out = new ArrayCtor$1(6);
      identity(out);
      return out;
    }
    /**
     * 设置矩阵为单位矩阵
     * @param {Float32Array|Array.<number>} out
     */


    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      out[4] = 0;
      out[5] = 0;
      return out;
    }
    /**
     * 复制矩阵
     * @param {Float32Array|Array.<number>} out
     * @param {Float32Array|Array.<number>} m
     */


    function copy$1(out, m) {
      out[0] = m[0];
      out[1] = m[1];
      out[2] = m[2];
      out[3] = m[3];
      out[4] = m[4];
      out[5] = m[5];
      return out;
    }
    /**
     * 矩阵相乘
     * @param {Float32Array|Array.<number>} out
     * @param {Float32Array|Array.<number>} m1
     * @param {Float32Array|Array.<number>} m2
     */


    function mul$1(out, m1, m2) {
      // Consider matrix.mul(m, m2, m);
      // where out is the same as m2.
      // So use temp variable to escape error.
      var out0 = m1[0] * m2[0] + m1[2] * m2[1];
      var out1 = m1[1] * m2[0] + m1[3] * m2[1];
      var out2 = m1[0] * m2[2] + m1[2] * m2[3];
      var out3 = m1[1] * m2[2] + m1[3] * m2[3];
      var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
      var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
      out[0] = out0;
      out[1] = out1;
      out[2] = out2;
      out[3] = out3;
      out[4] = out4;
      out[5] = out5;
      return out;
    }
    /**
     * 平移变换
     * @param {Float32Array|Array.<number>} out
     * @param {Float32Array|Array.<number>} a
     * @param {Float32Array|Array.<number>} v
     */


    function translate(out, a, v) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4] + v[0];
      out[5] = a[5] + v[1];
      return out;
    }
    /**
     * 旋转变换
     * @param {Float32Array|Array.<number>} out
     * @param {Float32Array|Array.<number>} a
     * @param {number} rad
     */


    function rotate(out, a, rad) {
      var aa = a[0];
      var ac = a[2];
      var atx = a[4];
      var ab = a[1];
      var ad = a[3];
      var aty = a[5];
      var st = Math.sin(rad);
      var ct = Math.cos(rad);
      out[0] = aa * ct + ab * st;
      out[1] = -aa * st + ab * ct;
      out[2] = ac * ct + ad * st;
      out[3] = -ac * st + ct * ad;
      out[4] = ct * atx + st * aty;
      out[5] = ct * aty - st * atx;
      return out;
    }
    /**
     * 缩放变换
     * @param {Float32Array|Array.<number>} out
     * @param {Float32Array|Array.<number>} a
     * @param {Float32Array|Array.<number>} v
     */


    function scale$1(out, a, v) {
      var vx = v[0];
      var vy = v[1];
      out[0] = a[0] * vx;
      out[1] = a[1] * vy;
      out[2] = a[2] * vx;
      out[3] = a[3] * vy;
      out[4] = a[4] * vx;
      out[5] = a[5] * vy;
      return out;
    }
    /**
     * 求逆矩阵
     * @param {Float32Array|Array.<number>} out
     * @param {Float32Array|Array.<number>} a
     */


    function invert(out, a) {
      var aa = a[0];
      var ac = a[2];
      var atx = a[4];
      var ab = a[1];
      var ad = a[3];
      var aty = a[5];
      var det = aa * ad - ab * ac;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = ad * det;
      out[1] = -ab * det;
      out[2] = -ac * det;
      out[3] = aa * det;
      out[4] = (ac * aty - ad * atx) * det;
      out[5] = (ab * atx - aa * aty) * det;
      return out;
    }
    /**
     * Clone a new matrix.
     * @param {Float32Array|Array.<number>} a
     */


    function clone$2(a) {
      var b = create$1();
      copy$1(b, a);
      return b;
    }

    var create_1$1 = create$1;
    var identity_1 = identity;
    var copy_1$1 = copy$1;
    var mul_1$1 = mul$1;
    var translate_1 = translate;
    var rotate_1 = rotate;
    var scale_1$1 = scale$1;
    var invert_1 = invert;
    var clone_1$2 = clone$2;

    var matrix = {
    	create: create_1$1,
    	identity: identity_1,
    	copy: copy_1$1,
    	mul: mul_1$1,
    	translate: translate_1,
    	rotate: rotate_1,
    	scale: scale_1$1,
    	invert: invert_1,
    	clone: clone_1$2
    };

    /**
     * 提供变换扩展
     * @module zrender/mixin/Transformable
     * @author pissang (https://www.github.com/pissang)
     */
    var mIdentity = matrix.identity;
    var EPSILON = 5e-5;

    function isNotAroundZero(val) {
      return val > EPSILON || val < -EPSILON;
    }
    /**
     * @alias module:zrender/mixin/Transformable
     * @constructor
     */


    var Transformable = function (opts) {
      opts = opts || {}; // If there are no given position, rotation, scale

      if (!opts.position) {
        /**
         * 平移
         * @type {Array.<number>}
         * @default [0, 0]
         */
        this.position = [0, 0];
      }

      if (opts.rotation == null) {
        /**
         * 旋转
         * @type {Array.<number>}
         * @default 0
         */
        this.rotation = 0;
      }

      if (!opts.scale) {
        /**
         * 缩放
         * @type {Array.<number>}
         * @default [1, 1]
         */
        this.scale = [1, 1];
      }
      /**
       * 旋转和缩放的原点
       * @type {Array.<number>}
       * @default null
       */


      this.origin = this.origin || null;
    };

    var transformableProto = Transformable.prototype;
    transformableProto.transform = null;
    /**
     * 判断是否需要有坐标变换
     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
     */

    transformableProto.needLocalTransform = function () {
      return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
    };

    var scaleTmp = [];

    transformableProto.updateTransform = function () {
      var parent = this.parent;
      var parentHasTransform = parent && parent.transform;
      var needLocalTransform = this.needLocalTransform();
      var m = this.transform;

      if (!(needLocalTransform || parentHasTransform)) {
        m && mIdentity(m);
        return;
      }

      m = m || matrix.create();

      if (needLocalTransform) {
        this.getLocalTransform(m);
      } else {
        mIdentity(m);
      } // 应用父节点变换


      if (parentHasTransform) {
        if (needLocalTransform) {
          matrix.mul(m, parent.transform, m);
        } else {
          matrix.copy(m, parent.transform);
        }
      } // 保存这个变换矩阵


      this.transform = m;
      var globalScaleRatio = this.globalScaleRatio;

      if (globalScaleRatio != null && globalScaleRatio !== 1) {
        this.getGlobalScale(scaleTmp);
        var relX = scaleTmp[0] < 0 ? -1 : 1;
        var relY = scaleTmp[1] < 0 ? -1 : 1;
        var sx = ((scaleTmp[0] - relX) * globalScaleRatio + relX) / scaleTmp[0] || 0;
        var sy = ((scaleTmp[1] - relY) * globalScaleRatio + relY) / scaleTmp[1] || 0;
        m[0] *= sx;
        m[1] *= sx;
        m[2] *= sy;
        m[3] *= sy;
      }

      this.invTransform = this.invTransform || matrix.create();
      matrix.invert(this.invTransform, m);
    };

    transformableProto.getLocalTransform = function (m) {
      return Transformable.getLocalTransform(this, m);
    };
    /**
     * 将自己的transform应用到context上
     * @param {CanvasRenderingContext2D} ctx
     */


    transformableProto.setTransform = function (ctx) {
      var m = this.transform;
      var dpr = ctx.dpr || 1;

      if (m) {
        ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
      } else {
        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
      }
    };

    transformableProto.restoreTransform = function (ctx) {
      var dpr = ctx.dpr || 1;
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    };

    var tmpTransform = [];
    var originTransform = matrix.create();

    transformableProto.setLocalTransform = function (m) {
      if (!m) {
        // TODO return or set identity?
        return;
      }

      var sx = m[0] * m[0] + m[1] * m[1];
      var sy = m[2] * m[2] + m[3] * m[3];
      var position = this.position;
      var scale = this.scale;

      if (isNotAroundZero(sx - 1)) {
        sx = Math.sqrt(sx);
      }

      if (isNotAroundZero(sy - 1)) {
        sy = Math.sqrt(sy);
      }

      if (m[0] < 0) {
        sx = -sx;
      }

      if (m[3] < 0) {
        sy = -sy;
      }

      position[0] = m[4];
      position[1] = m[5];
      scale[0] = sx;
      scale[1] = sy;
      this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
    };
    /**
     * 分解`transform`矩阵到`position`, `rotation`, `scale`
     */


    transformableProto.decomposeTransform = function () {
      if (!this.transform) {
        return;
      }

      var parent = this.parent;
      var m = this.transform;

      if (parent && parent.transform) {
        // Get local transform and decompose them to position, scale, rotation
        matrix.mul(tmpTransform, parent.invTransform, m);
        m = tmpTransform;
      }

      var origin = this.origin;

      if (origin && (origin[0] || origin[1])) {
        originTransform[4] = origin[0];
        originTransform[5] = origin[1];
        matrix.mul(tmpTransform, m, originTransform);
        tmpTransform[4] -= origin[0];
        tmpTransform[5] -= origin[1];
        m = tmpTransform;
      }

      this.setLocalTransform(m);
    };
    /**
     * Get global scale
     * @return {Array.<number>}
     */


    transformableProto.getGlobalScale = function (out) {
      var m = this.transform;
      out = out || [];

      if (!m) {
        out[0] = 1;
        out[1] = 1;
        return out;
      }

      out[0] = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
      out[1] = Math.sqrt(m[2] * m[2] + m[3] * m[3]);

      if (m[0] < 0) {
        out[0] = -out[0];
      }

      if (m[3] < 0) {
        out[1] = -out[1];
      }

      return out;
    };
    /**
     * 变换坐标位置到 shape 的局部坐标空间
     * @method
     * @param {number} x
     * @param {number} y
     * @return {Array.<number>}
     */


    transformableProto.transformCoordToLocal = function (x, y) {
      var v2 = [x, y];
      var invTransform = this.invTransform;

      if (invTransform) {
        vector.applyTransform(v2, v2, invTransform);
      }

      return v2;
    };
    /**
     * 变换局部坐标位置到全局坐标空间
     * @method
     * @param {number} x
     * @param {number} y
     * @return {Array.<number>}
     */


    transformableProto.transformCoordToGlobal = function (x, y) {
      var v2 = [x, y];
      var transform = this.transform;

      if (transform) {
        vector.applyTransform(v2, v2, transform);
      }

      return v2;
    };
    /**
     * @static
     * @param {Object} target
     * @param {Array.<number>} target.origin
     * @param {number} target.rotation
     * @param {Array.<number>} target.position
     * @param {Array.<number>} [m]
     */


    Transformable.getLocalTransform = function (target, m) {
      m = m || [];
      mIdentity(m);
      var origin = target.origin;
      var scale = target.scale || [1, 1];
      var rotation = target.rotation || 0;
      var position = target.position || [0, 0];

      if (origin) {
        // Translate to origin
        m[4] -= origin[0];
        m[5] -= origin[1];
      }

      matrix.scale(m, m, scale);

      if (rotation) {
        matrix.rotate(m, m, rotation);
      }

      if (origin) {
        // Translate back from origin
        m[4] += origin[0];
        m[5] += origin[1];
      }

      m[4] += position[0];
      m[5] += position[1];
      return m;
    };

    var _default$6 = Transformable;
    var Transformable_1 = _default$6;

    /**
     * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
     * @see http://sole.github.io/tween.js/examples/03_graphs.html
     * @exports zrender/animation/easing
     */
    var easing = {
      /**
      * @param {number} k
      * @return {number}
      */
      linear: function (k) {
        return k;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quadraticIn: function (k) {
        return k * k;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quadraticOut: function (k) {
        return k * (2 - k);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quadraticInOut: function (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k;
        }

        return -0.5 * (--k * (k - 2) - 1);
      },
      // 三次方的缓动（t^3）

      /**
      * @param {number} k
      * @return {number}
      */
      cubicIn: function (k) {
        return k * k * k;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      cubicOut: function (k) {
        return --k * k * k + 1;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      cubicInOut: function (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k * k;
        }

        return 0.5 * ((k -= 2) * k * k + 2);
      },
      // 四次方的缓动（t^4）

      /**
      * @param {number} k
      * @return {number}
      */
      quarticIn: function (k) {
        return k * k * k * k;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quarticOut: function (k) {
        return 1 - --k * k * k * k;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quarticInOut: function (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k * k * k;
        }

        return -0.5 * ((k -= 2) * k * k * k - 2);
      },
      // 五次方的缓动（t^5）

      /**
      * @param {number} k
      * @return {number}
      */
      quinticIn: function (k) {
        return k * k * k * k * k;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quinticOut: function (k) {
        return --k * k * k * k * k + 1;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      quinticInOut: function (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k * k * k * k;
        }

        return 0.5 * ((k -= 2) * k * k * k * k + 2);
      },
      // 正弦曲线的缓动（sin(t)）

      /**
      * @param {number} k
      * @return {number}
      */
      sinusoidalIn: function (k) {
        return 1 - Math.cos(k * Math.PI / 2);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      sinusoidalOut: function (k) {
        return Math.sin(k * Math.PI / 2);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      sinusoidalInOut: function (k) {
        return 0.5 * (1 - Math.cos(Math.PI * k));
      },
      // 指数曲线的缓动（2^t）

      /**
      * @param {number} k
      * @return {number}
      */
      exponentialIn: function (k) {
        return k === 0 ? 0 : Math.pow(1024, k - 1);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      exponentialOut: function (k) {
        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      exponentialInOut: function (k) {
        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if ((k *= 2) < 1) {
          return 0.5 * Math.pow(1024, k - 1);
        }

        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
      },
      // 圆形曲线的缓动（sqrt(1-t^2)）

      /**
      * @param {number} k
      * @return {number}
      */
      circularIn: function (k) {
        return 1 - Math.sqrt(1 - k * k);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      circularOut: function (k) {
        return Math.sqrt(1 - --k * k);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      circularInOut: function (k) {
        if ((k *= 2) < 1) {
          return -0.5 * (Math.sqrt(1 - k * k) - 1);
        }

        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
      },
      // 创建类似于弹簧在停止前来回振荡的动画

      /**
      * @param {number} k
      * @return {number}
      */
      elasticIn: function (k) {
        var s;
        var a = 0.1;
        var p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
      },

      /**
      * @param {number} k
      * @return {number}
      */
      elasticOut: function (k) {
        var s;
        var a = 0.1;
        var p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      elasticInOut: function (k) {
        var s;
        var a = 0.1;
        var p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        if ((k *= 2) < 1) {
          return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
        }

        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
      },
      // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动

      /**
      * @param {number} k
      * @return {number}
      */
      backIn: function (k) {
        var s = 1.70158;
        return k * k * ((s + 1) * k - s);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      backOut: function (k) {
        var s = 1.70158;
        return --k * k * ((s + 1) * k + s) + 1;
      },

      /**
      * @param {number} k
      * @return {number}
      */
      backInOut: function (k) {
        var s = 1.70158 * 1.525;

        if ((k *= 2) < 1) {
          return 0.5 * (k * k * ((s + 1) * k - s));
        }

        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
      },
      // 创建弹跳效果

      /**
      * @param {number} k
      * @return {number}
      */
      bounceIn: function (k) {
        return 1 - easing.bounceOut(1 - k);
      },

      /**
      * @param {number} k
      * @return {number}
      */
      bounceOut: function (k) {
        if (k < 1 / 2.75) {
          return 7.5625 * k * k;
        } else if (k < 2 / 2.75) {
          return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
        } else if (k < 2.5 / 2.75) {
          return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
        } else {
          return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
        }
      },

      /**
      * @param {number} k
      * @return {number}
      */
      bounceInOut: function (k) {
        if (k < 0.5) {
          return easing.bounceIn(k * 2) * 0.5;
        }

        return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
      }
    };
    var _default$7 = easing;
    var easing_1 = _default$7;

    /**
     * 动画主控制器
     * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
     * @config life(1000) 动画时长
     * @config delay(0) 动画延迟时间
     * @config loop(true)
     * @config gap(0) 循环的间隔时间
     * @config onframe
     * @config easing(optional)
     * @config ondestroy(optional)
     * @config onrestart(optional)
     *
     * TODO pause
     */
    function Clip(options) {
      this._target = options.target; // 生命周期

      this._life = options.life || 1000; // 延时

      this._delay = options.delay || 0; // 开始时间
      // this._startTime = new Date().getTime() + this._delay;// 单位毫秒

      this._initialized = false; // 是否循环

      this.loop = options.loop == null ? false : options.loop;
      this.gap = options.gap || 0;
      this.easing = options.easing || 'Linear';
      this.onframe = options.onframe;
      this.ondestroy = options.ondestroy;
      this.onrestart = options.onrestart;
      this._pausedTime = 0;
      this._paused = false;
    }

    Clip.prototype = {
      constructor: Clip,
      step: function (globalTime, deltaTime) {
        // Set startTime on first step, or _startTime may has milleseconds different between clips
        // PENDING
        if (!this._initialized) {
          this._startTime = globalTime + this._delay;
          this._initialized = true;
        }

        if (this._paused) {
          this._pausedTime += deltaTime;
          return;
        }

        var percent = (globalTime - this._startTime - this._pausedTime) / this._life; // 还没开始

        if (percent < 0) {
          return;
        }

        percent = Math.min(percent, 1);
        var easing = this.easing;
        var easingFunc = typeof easing === 'string' ? easing_1[easing] : easing;
        var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
        this.fire('frame', schedule); // 结束

        if (percent === 1) {
          if (this.loop) {
            this.restart(globalTime); // 重新开始周期
            // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件

            return 'restart';
          } // 动画完成将这个控制器标识为待删除
          // 在Animation.update中进行批量删除


          this._needsRemove = true;
          return 'destroy';
        }

        return null;
      },
      restart: function (globalTime) {
        var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
        this._startTime = globalTime - remainder + this.gap;
        this._pausedTime = 0;
        this._needsRemove = false;
      },
      fire: function (eventType, arg) {
        eventType = 'on' + eventType;

        if (this[eventType]) {
          this[eventType](this._target, arg);
        }
      },
      pause: function () {
        this._paused = true;
      },
      resume: function () {
        this._paused = false;
      }
    };
    var _default$8 = Clip;
    var Clip_1 = _default$8;

    // Simple LRU cache use doubly linked list
    // @module zrender/core/LRU

    /**
     * Simple double linked list. Compared with array, it has O(1) remove operation.
     * @constructor
     */
    var LinkedList = function () {
      /**
       * @type {module:zrender/core/LRU~Entry}
       */
      this.head = null;
      /**
       * @type {module:zrender/core/LRU~Entry}
       */

      this.tail = null;
      this._len = 0;
    };

    var linkedListProto = LinkedList.prototype;
    /**
     * Insert a new value at the tail
     * @param  {} val
     * @return {module:zrender/core/LRU~Entry}
     */

    linkedListProto.insert = function (val) {
      var entry = new Entry(val);
      this.insertEntry(entry);
      return entry;
    };
    /**
     * Insert an entry at the tail
     * @param  {module:zrender/core/LRU~Entry} entry
     */


    linkedListProto.insertEntry = function (entry) {
      if (!this.head) {
        this.head = this.tail = entry;
      } else {
        this.tail.next = entry;
        entry.prev = this.tail;
        entry.next = null;
        this.tail = entry;
      }

      this._len++;
    };
    /**
     * Remove entry.
     * @param  {module:zrender/core/LRU~Entry} entry
     */


    linkedListProto.remove = function (entry) {
      var prev = entry.prev;
      var next = entry.next;

      if (prev) {
        prev.next = next;
      } else {
        // Is head
        this.head = next;
      }

      if (next) {
        next.prev = prev;
      } else {
        // Is tail
        this.tail = prev;
      }

      entry.next = entry.prev = null;
      this._len--;
    };
    /**
     * @return {number}
     */


    linkedListProto.len = function () {
      return this._len;
    };
    /**
     * Clear list
     */


    linkedListProto.clear = function () {
      this.head = this.tail = null;
      this._len = 0;
    };
    /**
     * @constructor
     * @param {} val
     */


    var Entry = function (val) {
      /**
       * @type {}
       */
      this.value = val;
      /**
       * @type {module:zrender/core/LRU~Entry}
       */

      this.next;
      /**
       * @type {module:zrender/core/LRU~Entry}
       */

      this.prev;
    };
    /**
     * LRU Cache
     * @constructor
     * @alias module:zrender/core/LRU
     */


    var LRU = function (maxSize) {
      this._list = new LinkedList();
      this._map = {};
      this._maxSize = maxSize || 10;
      this._lastRemovedEntry = null;
    };

    var LRUProto = LRU.prototype;
    /**
     * @param  {string} key
     * @param  {} value
     * @return {} Removed value
     */

    LRUProto.put = function (key, value) {
      var list = this._list;
      var map = this._map;
      var removed = null;

      if (map[key] == null) {
        var len = list.len(); // Reuse last removed entry

        var entry = this._lastRemovedEntry;

        if (len >= this._maxSize && len > 0) {
          // Remove the least recently used
          var leastUsedEntry = list.head;
          list.remove(leastUsedEntry);
          delete map[leastUsedEntry.key];
          removed = leastUsedEntry.value;
          this._lastRemovedEntry = leastUsedEntry;
        }

        if (entry) {
          entry.value = value;
        } else {
          entry = new Entry(value);
        }

        entry.key = key;
        list.insertEntry(entry);
        map[key] = entry;
      }

      return removed;
    };
    /**
     * @param  {string} key
     * @return {}
     */


    LRUProto.get = function (key) {
      var entry = this._map[key];
      var list = this._list;

      if (entry != null) {
        // Put the latest used entry in the tail
        if (entry !== list.tail) {
          list.remove(entry);
          list.insertEntry(entry);
        }

        return entry.value;
      }
    };
    /**
     * Clear the cache
     */


    LRUProto.clear = function () {
      this._list.clear();

      this._map = {};
    };

    var _default$9 = LRU;
    var LRU_1 = _default$9;

    var kCSSColorTable = {
      'transparent': [0, 0, 0, 0],
      'aliceblue': [240, 248, 255, 1],
      'antiquewhite': [250, 235, 215, 1],
      'aqua': [0, 255, 255, 1],
      'aquamarine': [127, 255, 212, 1],
      'azure': [240, 255, 255, 1],
      'beige': [245, 245, 220, 1],
      'bisque': [255, 228, 196, 1],
      'black': [0, 0, 0, 1],
      'blanchedalmond': [255, 235, 205, 1],
      'blue': [0, 0, 255, 1],
      'blueviolet': [138, 43, 226, 1],
      'brown': [165, 42, 42, 1],
      'burlywood': [222, 184, 135, 1],
      'cadetblue': [95, 158, 160, 1],
      'chartreuse': [127, 255, 0, 1],
      'chocolate': [210, 105, 30, 1],
      'coral': [255, 127, 80, 1],
      'cornflowerblue': [100, 149, 237, 1],
      'cornsilk': [255, 248, 220, 1],
      'crimson': [220, 20, 60, 1],
      'cyan': [0, 255, 255, 1],
      'darkblue': [0, 0, 139, 1],
      'darkcyan': [0, 139, 139, 1],
      'darkgoldenrod': [184, 134, 11, 1],
      'darkgray': [169, 169, 169, 1],
      'darkgreen': [0, 100, 0, 1],
      'darkgrey': [169, 169, 169, 1],
      'darkkhaki': [189, 183, 107, 1],
      'darkmagenta': [139, 0, 139, 1],
      'darkolivegreen': [85, 107, 47, 1],
      'darkorange': [255, 140, 0, 1],
      'darkorchid': [153, 50, 204, 1],
      'darkred': [139, 0, 0, 1],
      'darksalmon': [233, 150, 122, 1],
      'darkseagreen': [143, 188, 143, 1],
      'darkslateblue': [72, 61, 139, 1],
      'darkslategray': [47, 79, 79, 1],
      'darkslategrey': [47, 79, 79, 1],
      'darkturquoise': [0, 206, 209, 1],
      'darkviolet': [148, 0, 211, 1],
      'deeppink': [255, 20, 147, 1],
      'deepskyblue': [0, 191, 255, 1],
      'dimgray': [105, 105, 105, 1],
      'dimgrey': [105, 105, 105, 1],
      'dodgerblue': [30, 144, 255, 1],
      'firebrick': [178, 34, 34, 1],
      'floralwhite': [255, 250, 240, 1],
      'forestgreen': [34, 139, 34, 1],
      'fuchsia': [255, 0, 255, 1],
      'gainsboro': [220, 220, 220, 1],
      'ghostwhite': [248, 248, 255, 1],
      'gold': [255, 215, 0, 1],
      'goldenrod': [218, 165, 32, 1],
      'gray': [128, 128, 128, 1],
      'green': [0, 128, 0, 1],
      'greenyellow': [173, 255, 47, 1],
      'grey': [128, 128, 128, 1],
      'honeydew': [240, 255, 240, 1],
      'hotpink': [255, 105, 180, 1],
      'indianred': [205, 92, 92, 1],
      'indigo': [75, 0, 130, 1],
      'ivory': [255, 255, 240, 1],
      'khaki': [240, 230, 140, 1],
      'lavender': [230, 230, 250, 1],
      'lavenderblush': [255, 240, 245, 1],
      'lawngreen': [124, 252, 0, 1],
      'lemonchiffon': [255, 250, 205, 1],
      'lightblue': [173, 216, 230, 1],
      'lightcoral': [240, 128, 128, 1],
      'lightcyan': [224, 255, 255, 1],
      'lightgoldenrodyellow': [250, 250, 210, 1],
      'lightgray': [211, 211, 211, 1],
      'lightgreen': [144, 238, 144, 1],
      'lightgrey': [211, 211, 211, 1],
      'lightpink': [255, 182, 193, 1],
      'lightsalmon': [255, 160, 122, 1],
      'lightseagreen': [32, 178, 170, 1],
      'lightskyblue': [135, 206, 250, 1],
      'lightslategray': [119, 136, 153, 1],
      'lightslategrey': [119, 136, 153, 1],
      'lightsteelblue': [176, 196, 222, 1],
      'lightyellow': [255, 255, 224, 1],
      'lime': [0, 255, 0, 1],
      'limegreen': [50, 205, 50, 1],
      'linen': [250, 240, 230, 1],
      'magenta': [255, 0, 255, 1],
      'maroon': [128, 0, 0, 1],
      'mediumaquamarine': [102, 205, 170, 1],
      'mediumblue': [0, 0, 205, 1],
      'mediumorchid': [186, 85, 211, 1],
      'mediumpurple': [147, 112, 219, 1],
      'mediumseagreen': [60, 179, 113, 1],
      'mediumslateblue': [123, 104, 238, 1],
      'mediumspringgreen': [0, 250, 154, 1],
      'mediumturquoise': [72, 209, 204, 1],
      'mediumvioletred': [199, 21, 133, 1],
      'midnightblue': [25, 25, 112, 1],
      'mintcream': [245, 255, 250, 1],
      'mistyrose': [255, 228, 225, 1],
      'moccasin': [255, 228, 181, 1],
      'navajowhite': [255, 222, 173, 1],
      'navy': [0, 0, 128, 1],
      'oldlace': [253, 245, 230, 1],
      'olive': [128, 128, 0, 1],
      'olivedrab': [107, 142, 35, 1],
      'orange': [255, 165, 0, 1],
      'orangered': [255, 69, 0, 1],
      'orchid': [218, 112, 214, 1],
      'palegoldenrod': [238, 232, 170, 1],
      'palegreen': [152, 251, 152, 1],
      'paleturquoise': [175, 238, 238, 1],
      'palevioletred': [219, 112, 147, 1],
      'papayawhip': [255, 239, 213, 1],
      'peachpuff': [255, 218, 185, 1],
      'peru': [205, 133, 63, 1],
      'pink': [255, 192, 203, 1],
      'plum': [221, 160, 221, 1],
      'powderblue': [176, 224, 230, 1],
      'purple': [128, 0, 128, 1],
      'red': [255, 0, 0, 1],
      'rosybrown': [188, 143, 143, 1],
      'royalblue': [65, 105, 225, 1],
      'saddlebrown': [139, 69, 19, 1],
      'salmon': [250, 128, 114, 1],
      'sandybrown': [244, 164, 96, 1],
      'seagreen': [46, 139, 87, 1],
      'seashell': [255, 245, 238, 1],
      'sienna': [160, 82, 45, 1],
      'silver': [192, 192, 192, 1],
      'skyblue': [135, 206, 235, 1],
      'slateblue': [106, 90, 205, 1],
      'slategray': [112, 128, 144, 1],
      'slategrey': [112, 128, 144, 1],
      'snow': [255, 250, 250, 1],
      'springgreen': [0, 255, 127, 1],
      'steelblue': [70, 130, 180, 1],
      'tan': [210, 180, 140, 1],
      'teal': [0, 128, 128, 1],
      'thistle': [216, 191, 216, 1],
      'tomato': [255, 99, 71, 1],
      'turquoise': [64, 224, 208, 1],
      'violet': [238, 130, 238, 1],
      'wheat': [245, 222, 179, 1],
      'white': [255, 255, 255, 1],
      'whitesmoke': [245, 245, 245, 1],
      'yellow': [255, 255, 0, 1],
      'yellowgreen': [154, 205, 50, 1]
    };

    function clampCssByte(i) {
      // Clamp to integer 0 .. 255.
      i = Math.round(i); // Seems to be what Chrome does (vs truncation).

      return i < 0 ? 0 : i > 255 ? 255 : i;
    }

    function clampCssAngle(i) {
      // Clamp to integer 0 .. 360.
      i = Math.round(i); // Seems to be what Chrome does (vs truncation).

      return i < 0 ? 0 : i > 360 ? 360 : i;
    }

    function clampCssFloat(f) {
      // Clamp to float 0.0 .. 1.0.
      return f < 0 ? 0 : f > 1 ? 1 : f;
    }

    function parseCssInt(str) {
      // int or percentage.
      if (str.length && str.charAt(str.length - 1) === '%') {
        return clampCssByte(parseFloat(str) / 100 * 255);
      }

      return clampCssByte(parseInt(str, 10));
    }

    function parseCssFloat(str) {
      // float or percentage.
      if (str.length && str.charAt(str.length - 1) === '%') {
        return clampCssFloat(parseFloat(str) / 100);
      }

      return clampCssFloat(parseFloat(str));
    }

    function cssHueToRgb(m1, m2, h) {
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }

      if (h * 6 < 1) {
        return m1 + (m2 - m1) * h * 6;
      }

      if (h * 2 < 1) {
        return m2;
      }

      if (h * 3 < 2) {
        return m1 + (m2 - m1) * (2 / 3 - h) * 6;
      }

      return m1;
    }

    function lerpNumber(a, b, p) {
      return a + (b - a) * p;
    }

    function setRgba(out, r, g, b, a) {
      out[0] = r;
      out[1] = g;
      out[2] = b;
      out[3] = a;
      return out;
    }

    function copyRgba(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }

    var colorCache = new LRU_1(20);
    var lastRemovedArr = null;

    function putToCache(colorStr, rgbaArr) {
      // Reuse removed array
      if (lastRemovedArr) {
        copyRgba(lastRemovedArr, rgbaArr);
      }

      lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
    }
    /**
     * @param {string} colorStr
     * @param {Array.<number>} out
     * @return {Array.<number>}
     * @memberOf module:zrender/util/color
     */


    function parse(colorStr, rgbaArr) {
      if (!colorStr) {
        return;
      }

      rgbaArr = rgbaArr || [];
      var cached = colorCache.get(colorStr);

      if (cached) {
        return copyRgba(rgbaArr, cached);
      } // colorStr may be not string


      colorStr = colorStr + ''; // Remove all whitespace, not compliant, but should just be more accepting.

      var str = colorStr.replace(/ /g, '').toLowerCase(); // Color keywords (and transparent) lookup.

      if (str in kCSSColorTable) {
        copyRgba(rgbaArr, kCSSColorTable[str]);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      } // #abc and #abc123 syntax.


      if (str.charAt(0) === '#') {
        if (str.length === 4) {
          var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

          if (!(iv >= 0 && iv <= 0xfff)) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return; // Covers NaN.
          }

          setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;
        } else if (str.length === 7) {
          var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.

          if (!(iv >= 0 && iv <= 0xffffff)) {
            setRgba(rgbaArr, 0, 0, 0, 1);
            return; // Covers NaN.
          }

          setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1);
          putToCache(colorStr, rgbaArr);
          return rgbaArr;
        }

        return;
      }

      var op = str.indexOf('(');
      var ep = str.indexOf(')');

      if (op !== -1 && ep + 1 === str.length) {
        var fname = str.substr(0, op);
        var params = str.substr(op + 1, ep - (op + 1)).split(',');
        var alpha = 1; // To allow case fallthrough.

        switch (fname) {
          case 'rgba':
            if (params.length !== 4) {
              setRgba(rgbaArr, 0, 0, 0, 1);
              return;
            }

            alpha = parseCssFloat(params.pop());
          // jshint ignore:line
          // Fall through.

          case 'rgb':
            if (params.length !== 3) {
              setRgba(rgbaArr, 0, 0, 0, 1);
              return;
            }

            setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
            putToCache(colorStr, rgbaArr);
            return rgbaArr;

          case 'hsla':
            if (params.length !== 4) {
              setRgba(rgbaArr, 0, 0, 0, 1);
              return;
            }

            params[3] = parseCssFloat(params[3]);
            hsla2rgba(params, rgbaArr);
            putToCache(colorStr, rgbaArr);
            return rgbaArr;

          case 'hsl':
            if (params.length !== 3) {
              setRgba(rgbaArr, 0, 0, 0, 1);
              return;
            }

            hsla2rgba(params, rgbaArr);
            putToCache(colorStr, rgbaArr);
            return rgbaArr;

          default:
            return;
        }
      }

      setRgba(rgbaArr, 0, 0, 0, 1);
      return;
    }
    /**
     * @param {Array.<number>} hsla
     * @param {Array.<number>} rgba
     * @return {Array.<number>} rgba
     */


    function hsla2rgba(hsla, rgba) {
      var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
      // NOTE(deanm): According to the CSS spec s/l should only be
      // percentages, but we don't bother and let float or percentage.

      var s = parseCssFloat(hsla[1]);
      var l = parseCssFloat(hsla[2]);
      var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
      var m1 = l * 2 - m2;
      rgba = rgba || [];
      setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);

      if (hsla.length === 4) {
        rgba[3] = hsla[3];
      }

      return rgba;
    }
    /**
     * @param {Array.<number>} rgba
     * @return {Array.<number>} hsla
     */


    function rgba2hsla(rgba) {
      if (!rgba) {
        return;
      } // RGB from 0 to 255


      var R = rgba[0] / 255;
      var G = rgba[1] / 255;
      var B = rgba[2] / 255;
      var vMin = Math.min(R, G, B); // Min. value of RGB

      var vMax = Math.max(R, G, B); // Max. value of RGB

      var delta = vMax - vMin; // Delta RGB value

      var L = (vMax + vMin) / 2;
      var H;
      var S; // HSL results from 0 to 1

      if (delta === 0) {
        H = 0;
        S = 0;
      } else {
        if (L < 0.5) {
          S = delta / (vMax + vMin);
        } else {
          S = delta / (2 - vMax - vMin);
        }

        var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
        var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
        var deltaB = ((vMax - B) / 6 + delta / 2) / delta;

        if (R === vMax) {
          H = deltaB - deltaG;
        } else if (G === vMax) {
          H = 1 / 3 + deltaR - deltaB;
        } else if (B === vMax) {
          H = 2 / 3 + deltaG - deltaR;
        }

        if (H < 0) {
          H += 1;
        }

        if (H > 1) {
          H -= 1;
        }
      }

      var hsla = [H * 360, S, L];

      if (rgba[3] != null) {
        hsla.push(rgba[3]);
      }

      return hsla;
    }
    /**
     * @param {string} color
     * @param {number} level
     * @return {string}
     * @memberOf module:zrender/util/color
     */


    function lift(color, level) {
      var colorArr = parse(color);

      if (colorArr) {
        for (var i = 0; i < 3; i++) {
          if (level < 0) {
            colorArr[i] = colorArr[i] * (1 - level) | 0;
          } else {
            colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
          }

          if (colorArr[i] > 255) {
            colorArr[i] = 255;
          } else if (color[i] < 0) {
            colorArr[i] = 0;
          }
        }

        return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
      }
    }
    /**
     * @param {string} color
     * @return {string}
     * @memberOf module:zrender/util/color
     */


    function toHex(color) {
      var colorArr = parse(color);

      if (colorArr) {
        return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
      }
    }
    /**
     * Map value to color. Faster than lerp methods because color is represented by rgba array.
     * @param {number} normalizedValue A float between 0 and 1.
     * @param {Array.<Array.<number>>} colors List of rgba color array
     * @param {Array.<number>} [out] Mapped gba color array
     * @return {Array.<number>} will be null/undefined if input illegal.
     */


    function fastLerp(normalizedValue, colors, out) {
      if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
        return;
      }

      out = out || [];
      var value = normalizedValue * (colors.length - 1);
      var leftIndex = Math.floor(value);
      var rightIndex = Math.ceil(value);
      var leftColor = colors[leftIndex];
      var rightColor = colors[rightIndex];
      var dv = value - leftIndex;
      out[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
      out[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
      out[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
      out[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
      return out;
    }
    /**
     * @deprecated
     */


    var fastMapToColor = fastLerp;
    /**
     * @param {number} normalizedValue A float between 0 and 1.
     * @param {Array.<string>} colors Color list.
     * @param {boolean=} fullOutput Default false.
     * @return {(string|Object)} Result color. If fullOutput,
     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
     * @memberOf module:zrender/util/color
     */

    function lerp$1(normalizedValue, colors, fullOutput) {
      if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
        return;
      }

      var value = normalizedValue * (colors.length - 1);
      var leftIndex = Math.floor(value);
      var rightIndex = Math.ceil(value);
      var leftColor = parse(colors[leftIndex]);
      var rightColor = parse(colors[rightIndex]);
      var dv = value - leftIndex;
      var color = stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], 'rgba');
      return fullOutput ? {
        color: color,
        leftIndex: leftIndex,
        rightIndex: rightIndex,
        value: value
      } : color;
    }
    /**
     * @deprecated
     */


    var mapToColor = lerp$1;
    /**
     * @param {string} color
     * @param {number=} h 0 ~ 360, ignore when null.
     * @param {number=} s 0 ~ 1, ignore when null.
     * @param {number=} l 0 ~ 1, ignore when null.
     * @return {string} Color string in rgba format.
     * @memberOf module:zrender/util/color
     */

    function modifyHSL(color, h, s, l) {
      color = parse(color);

      if (color) {
        color = rgba2hsla(color);
        h != null && (color[0] = clampCssAngle(h));
        s != null && (color[1] = parseCssFloat(s));
        l != null && (color[2] = parseCssFloat(l));
        return stringify(hsla2rgba(color), 'rgba');
      }
    }
    /**
     * @param {string} color
     * @param {number=} alpha 0 ~ 1
     * @return {string} Color string in rgba format.
     * @memberOf module:zrender/util/color
     */


    function modifyAlpha(color, alpha) {
      color = parse(color);

      if (color && alpha != null) {
        color[3] = clampCssFloat(alpha);
        return stringify(color, 'rgba');
      }
    }
    /**
     * @param {Array.<number>} arrColor like [12,33,44,0.4]
     * @param {string} type 'rgba', 'hsva', ...
     * @return {string} Result color. (If input illegal, return undefined).
     */


    function stringify(arrColor, type) {
      if (!arrColor || !arrColor.length) {
        return;
      }

      var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];

      if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
        colorStr += ',' + arrColor[3];
      }

      return type + '(' + colorStr + ')';
    }

    var parse_1 = parse;
    var lift_1 = lift;
    var toHex_1 = toHex;
    var fastLerp_1 = fastLerp;
    var fastMapToColor_1 = fastMapToColor;
    var lerp_1$1 = lerp$1;
    var mapToColor_1 = mapToColor;
    var modifyHSL_1 = modifyHSL;
    var modifyAlpha_1 = modifyAlpha;
    var stringify_1 = stringify;

    var color = {
    	parse: parse_1,
    	lift: lift_1,
    	toHex: toHex_1,
    	fastLerp: fastLerp_1,
    	fastMapToColor: fastMapToColor_1,
    	lerp: lerp_1$1,
    	mapToColor: mapToColor_1,
    	modifyHSL: modifyHSL_1,
    	modifyAlpha: modifyAlpha_1,
    	stringify: stringify_1
    };

    var isArrayLike$1 = util.isArrayLike;

    /**
     * @module echarts/animation/Animator
     */
    var arraySlice = Array.prototype.slice;

    function defaultGetter(target, key) {
      return target[key];
    }

    function defaultSetter(target, key, value) {
      target[key] = value;
    }
    /**
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} percent
     * @return {number}
     */


    function interpolateNumber(p0, p1, percent) {
      return (p1 - p0) * percent + p0;
    }
    /**
     * @param  {string} p0
     * @param  {string} p1
     * @param  {number} percent
     * @return {string}
     */


    function interpolateString(p0, p1, percent) {
      return percent > 0.5 ? p1 : p0;
    }
    /**
     * @param  {Array} p0
     * @param  {Array} p1
     * @param  {number} percent
     * @param  {Array} out
     * @param  {number} arrDim
     */


    function interpolateArray(p0, p1, percent, out, arrDim) {
      var len = p0.length;

      if (arrDim === 1) {
        for (var i = 0; i < len; i++) {
          out[i] = interpolateNumber(p0[i], p1[i], percent);
        }
      } else {
        var len2 = len && p0[0].length;

        for (var i = 0; i < len; i++) {
          for (var j = 0; j < len2; j++) {
            out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
          }
        }
      }
    } // arr0 is source array, arr1 is target array.
    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1


    function fillArr(arr0, arr1, arrDim) {
      var arr0Len = arr0.length;
      var arr1Len = arr1.length;

      if (arr0Len !== arr1Len) {
        // FIXME Not work for TypedArray
        var isPreviousLarger = arr0Len > arr1Len;

        if (isPreviousLarger) {
          // Cut the previous
          arr0.length = arr1Len;
        } else {
          // Fill the previous
          for (var i = arr0Len; i < arr1Len; i++) {
            arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
          }
        }
      } // Handling NaN value


      var len2 = arr0[0] && arr0[0].length;

      for (var i = 0; i < arr0.length; i++) {
        if (arrDim === 1) {
          if (isNaN(arr0[i])) {
            arr0[i] = arr1[i];
          }
        } else {
          for (var j = 0; j < len2; j++) {
            if (isNaN(arr0[i][j])) {
              arr0[i][j] = arr1[i][j];
            }
          }
        }
      }
    }
    /**
     * @param  {Array} arr0
     * @param  {Array} arr1
     * @param  {number} arrDim
     * @return {boolean}
     */


    function isArraySame(arr0, arr1, arrDim) {
      if (arr0 === arr1) {
        return true;
      }

      var len = arr0.length;

      if (len !== arr1.length) {
        return false;
      }

      if (arrDim === 1) {
        for (var i = 0; i < len; i++) {
          if (arr0[i] !== arr1[i]) {
            return false;
          }
        }
      } else {
        var len2 = arr0[0].length;

        for (var i = 0; i < len; i++) {
          for (var j = 0; j < len2; j++) {
            if (arr0[i][j] !== arr1[i][j]) {
              return false;
            }
          }
        }
      }

      return true;
    }
    /**
     * Catmull Rom interpolate array
     * @param  {Array} p0
     * @param  {Array} p1
     * @param  {Array} p2
     * @param  {Array} p3
     * @param  {number} t
     * @param  {number} t2
     * @param  {number} t3
     * @param  {Array} out
     * @param  {number} arrDim
     */


    function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
      var len = p0.length;

      if (arrDim === 1) {
        for (var i = 0; i < len; i++) {
          out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
        }
      } else {
        var len2 = p0[0].length;

        for (var i = 0; i < len; i++) {
          for (var j = 0; j < len2; j++) {
            out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
          }
        }
      }
    }
    /**
     * Catmull Rom interpolate number
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} p3
     * @param  {number} t
     * @param  {number} t2
     * @param  {number} t3
     * @return {number}
     */


    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
      var v0 = (p2 - p0) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
    }

    function cloneValue(value) {
      if (isArrayLike$1(value)) {
        var len = value.length;

        if (isArrayLike$1(value[0])) {
          var ret = [];

          for (var i = 0; i < len; i++) {
            ret.push(arraySlice.call(value[i]));
          }

          return ret;
        }

        return arraySlice.call(value);
      }

      return value;
    }

    function rgba2String(rgba) {
      rgba[0] = Math.floor(rgba[0]);
      rgba[1] = Math.floor(rgba[1]);
      rgba[2] = Math.floor(rgba[2]);
      return 'rgba(' + rgba.join(',') + ')';
    }

    function getArrayDim(keyframes) {
      var lastValue = keyframes[keyframes.length - 1].value;
      return isArrayLike$1(lastValue && lastValue[0]) ? 2 : 1;
    }

    function createTrackClip(animator, easing, oneTrackDone, keyframes, propName, forceAnimate) {
      var getter = animator._getter;
      var setter = animator._setter;
      var useSpline = easing === 'spline';
      var trackLen = keyframes.length;

      if (!trackLen) {
        return;
      } // Guess data type


      var firstVal = keyframes[0].value;
      var isValueArray = isArrayLike$1(firstVal);
      var isValueColor = false;
      var isValueString = false; // For vertices morphing

      var arrDim = isValueArray ? getArrayDim(keyframes) : 0;
      var trackMaxTime; // Sort keyframe as ascending

      keyframes.sort(function (a, b) {
        return a.time - b.time;
      });
      trackMaxTime = keyframes[trackLen - 1].time; // Percents of each keyframe

      var kfPercents = []; // Value of each keyframe

      var kfValues = [];
      var prevValue = keyframes[0].value;
      var isAllValueEqual = true;

      for (var i = 0; i < trackLen; i++) {
        kfPercents.push(keyframes[i].time / trackMaxTime); // Assume value is a color when it is a string

        var value = keyframes[i].value; // Check if value is equal, deep check if value is array

        if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
          isAllValueEqual = false;
        }

        prevValue = value; // Try converting a string to a color array

        if (typeof value === 'string') {
          var colorArray = color.parse(value);

          if (colorArray) {
            value = colorArray;
            isValueColor = true;
          } else {
            isValueString = true;
          }
        }

        kfValues.push(value);
      }

      if (!forceAnimate && isAllValueEqual) {
        return;
      }

      var lastValue = kfValues[trackLen - 1]; // Polyfill array and NaN value

      for (var i = 0; i < trackLen - 1; i++) {
        if (isValueArray) {
          fillArr(kfValues[i], lastValue, arrDim);
        } else {
          if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
            kfValues[i] = lastValue;
          }
        }
      }

      isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim); // Cache the key of last frame to speed up when
      // animation playback is sequency

      var lastFrame = 0;
      var lastFramePercent = 0;
      var start;
      var w;
      var p0;
      var p1;
      var p2;
      var p3;

      if (isValueColor) {
        var rgba = [0, 0, 0, 0];
      }

      var onframe = function (target, percent) {
        // Find the range keyframes
        // kf1-----kf2---------current--------kf3
        // find kf2 and kf3 and do interpolation
        var frame; // In the easing function like elasticOut, percent may less than 0

        if (percent < 0) {
          frame = 0;
        } else if (percent < lastFramePercent) {
          // Start from next key
          // PENDING start from lastFrame ?
          start = Math.min(lastFrame + 1, trackLen - 1);

          for (frame = start; frame >= 0; frame--) {
            if (kfPercents[frame] <= percent) {
              break;
            }
          } // PENDING really need to do this ?


          frame = Math.min(frame, trackLen - 2);
        } else {
          for (frame = lastFrame; frame < trackLen; frame++) {
            if (kfPercents[frame] > percent) {
              break;
            }
          }

          frame = Math.min(frame - 1, trackLen - 2);
        }

        lastFrame = frame;
        lastFramePercent = percent;
        var range = kfPercents[frame + 1] - kfPercents[frame];

        if (range === 0) {
          return;
        } else {
          w = (percent - kfPercents[frame]) / range;
        }

        if (useSpline) {
          p1 = kfValues[frame];
          p0 = kfValues[frame === 0 ? frame : frame - 1];
          p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
          p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];

          if (isValueArray) {
            catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
          } else {
            var value;

            if (isValueColor) {
              value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
              value = rgba2String(rgba);
            } else if (isValueString) {
              // String is step(0.5)
              return interpolateString(p1, p2, w);
            } else {
              value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
            }

            setter(target, propName, value);
          }
        } else {
          if (isValueArray) {
            interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
          } else {
            var value;

            if (isValueColor) {
              interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
              value = rgba2String(rgba);
            } else if (isValueString) {
              // String is step(0.5)
              return interpolateString(kfValues[frame], kfValues[frame + 1], w);
            } else {
              value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
            }

            setter(target, propName, value);
          }
        }
      };

      var clip = new Clip_1({
        target: animator._target,
        life: trackMaxTime,
        loop: animator._loop,
        delay: animator._delay,
        onframe: onframe,
        ondestroy: oneTrackDone
      });

      if (easing && easing !== 'spline') {
        clip.easing = easing;
      }

      return clip;
    }
    /**
     * @alias module:zrender/animation/Animator
     * @constructor
     * @param {Object} target
     * @param {boolean} loop
     * @param {Function} getter
     * @param {Function} setter
     */


    var Animator = function (target, loop, getter, setter) {
      this._tracks = {};
      this._target = target;
      this._loop = loop || false;
      this._getter = getter || defaultGetter;
      this._setter = setter || defaultSetter;
      this._clipCount = 0;
      this._delay = 0;
      this._doneList = [];
      this._onframeList = [];
      this._clipList = [];
    };

    Animator.prototype = {
      /**
       * 设置动画关键帧
       * @param  {number} time 关键帧时间，单位是ms
       * @param  {Object} props 关键帧的属性值，key-value表示
       * @return {module:zrender/animation/Animator}
       */
      when: function (time
      /* ms */
      , props) {
        var tracks = this._tracks;

        for (var propName in props) {
          if (!props.hasOwnProperty(propName)) {
            continue;
          }

          if (!tracks[propName]) {
            tracks[propName] = []; // Invalid value

            var value = this._getter(this._target, propName);

            if (value == null) {
              // zrLog('Invalid property ' + propName);
              continue;
            } // If time is 0
            //  Then props is given initialize value
            // Else
            //  Initialize value from current prop value


            if (time !== 0) {
              tracks[propName].push({
                time: 0,
                value: cloneValue(value)
              });
            }
          }

          tracks[propName].push({
            time: time,
            value: props[propName]
          });
        }

        return this;
      },

      /**
       * 添加动画每一帧的回调函数
       * @param  {Function} callback
       * @return {module:zrender/animation/Animator}
       */
      during: function (callback) {
        this._onframeList.push(callback);

        return this;
      },
      pause: function () {
        for (var i = 0; i < this._clipList.length; i++) {
          this._clipList[i].pause();
        }

        this._paused = true;
      },
      resume: function () {
        for (var i = 0; i < this._clipList.length; i++) {
          this._clipList[i].resume();
        }

        this._paused = false;
      },
      isPaused: function () {
        return !!this._paused;
      },
      _doneCallback: function () {
        // Clear all tracks
        this._tracks = {}; // Clear all clips

        this._clipList.length = 0;
        var doneList = this._doneList;
        var len = doneList.length;

        for (var i = 0; i < len; i++) {
          doneList[i].call(this);
        }
      },

      /**
       * 开始执行动画
       * @param  {string|Function} [easing]
       *         动画缓动函数，详见{@link module:zrender/animation/easing}
       * @param  {boolean} forceAnimate
       * @return {module:zrender/animation/Animator}
       */
      start: function (easing, forceAnimate) {
        var self = this;
        var clipCount = 0;

        var oneTrackDone = function () {
          clipCount--;

          if (!clipCount) {
            self._doneCallback();
          }
        };

        var lastClip;

        for (var propName in this._tracks) {
          if (!this._tracks.hasOwnProperty(propName)) {
            continue;
          }

          var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName, forceAnimate);

          if (clip) {
            this._clipList.push(clip);

            clipCount++; // If start after added to animation

            if (this.animation) {
              this.animation.addClip(clip);
            }

            lastClip = clip;
          }
        } // Add during callback on the last clip


        if (lastClip) {
          var oldOnFrame = lastClip.onframe;

          lastClip.onframe = function (target, percent) {
            oldOnFrame(target, percent);

            for (var i = 0; i < self._onframeList.length; i++) {
              self._onframeList[i](target, percent);
            }
          };
        } // This optimization will help the case that in the upper application
        // the view may be refreshed frequently, where animation will be
        // called repeatly but nothing changed.


        if (!clipCount) {
          this._doneCallback();
        }

        return this;
      },

      /**
       * 停止动画
       * @param {boolean} forwardToLast If move to last frame before stop
       */
      stop: function (forwardToLast) {
        var clipList = this._clipList;
        var animation = this.animation;

        for (var i = 0; i < clipList.length; i++) {
          var clip = clipList[i];

          if (forwardToLast) {
            // Move to last frame before stop
            clip.onframe(this._target, 1);
          }

          animation && animation.removeClip(clip);
        }

        clipList.length = 0;
      },

      /**
       * 设置动画延迟开始的时间
       * @param  {number} time 单位ms
       * @return {module:zrender/animation/Animator}
       */
      delay: function (time) {
        this._delay = time;
        return this;
      },

      /**
       * 添加动画结束的回调
       * @param  {Function} cb
       * @return {module:zrender/animation/Animator}
       */
      done: function (cb) {
        if (cb) {
          this._doneList.push(cb);
        }

        return this;
      },

      /**
       * @return {Array.<module:zrender/animation/Clip>}
       */
      getClips: function () {
        return this._clipList;
      }
    };
    var _default$a = Animator;
    var Animator_1 = _default$a;

    var dpr = 1; // If in browser environment

    if (typeof window !== 'undefined') {
      dpr = Math.max(window.devicePixelRatio || 1, 1);
    }
    /**
     * config默认配置项
     * @exports zrender/config
     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
     */

    /**
     * Debug log mode:
     * 0: Do nothing, for release.
     * 1: console.error, for debug.
     */


    var debugMode = 0; // retina 屏幕优化

    var devicePixelRatio = dpr;
    var debugMode_1 = debugMode;
    var devicePixelRatio_1 = devicePixelRatio;

    var config = {
    	debugMode: debugMode_1,
    	devicePixelRatio: devicePixelRatio_1
    };

    var logError = function () {};

    var _default$b = logError;
    var log = _default$b;

    var isString$1 = util.isString;
    var isFunction$1 = util.isFunction;
    var isObject$1 = util.isObject;
    var isArrayLike$2 = util.isArrayLike;
    var indexOf$1 = util.indexOf;

    /**
     * @alias modue:zrender/mixin/Animatable
     * @constructor
     */
    var Animatable = function () {
      /**
       * @type {Array.<module:zrender/animation/Animator>}
       * @readOnly
       */
      this.animators = [];
    };

    Animatable.prototype = {
      constructor: Animatable,

      /**
       * 动画
       *
       * @param {string} path The path to fetch value from object, like 'a.b.c'.
       * @param {boolean} [loop] Whether to loop animation.
       * @return {module:zrender/animation/Animator}
       * @example:
       *     el.animate('style', false)
       *         .when(1000, {x: 10} )
       *         .done(function(){ // Animation done })
       *         .start()
       */
      animate: function (path, loop) {
        var target;
        var animatingShape = false;
        var el = this;
        var zr = this.__zr;

        if (path) {
          var pathSplitted = path.split('.');
          var prop = el; // If animating shape

          animatingShape = pathSplitted[0] === 'shape';

          for (var i = 0, l = pathSplitted.length; i < l; i++) {
            if (!prop) {
              continue;
            }

            prop = prop[pathSplitted[i]];
          }

          if (prop) {
            target = prop;
          }
        } else {
          target = el;
        }

        if (!target) {
          log('Property "' + path + '" is not existed in element ' + el.id);
          return;
        }

        var animators = el.animators;
        var animator = new Animator_1(target, loop);
        animator.during(function (target) {
          el.dirty(animatingShape);
        }).done(function () {
          // FIXME Animator will not be removed if use `Animator#stop` to stop animation
          animators.splice(indexOf$1(animators, animator), 1);
        });
        animators.push(animator); // If animate after added to the zrender

        if (zr) {
          zr.animation.addAnimator(animator);
        }

        return animator;
      },

      /**
       * 停止动画
       * @param {boolean} forwardToLast If move to last frame before stop
       */
      stopAnimation: function (forwardToLast) {
        var animators = this.animators;
        var len = animators.length;

        for (var i = 0; i < len; i++) {
          animators[i].stop(forwardToLast);
        }

        animators.length = 0;
        return this;
      },

      /**
       * Caution: this method will stop previous animation.
       * So do not use this method to one element twice before
       * animation starts, unless you know what you are doing.
       * @param {Object} target
       * @param {number} [time=500] Time in ms
       * @param {string} [easing='linear']
       * @param {number} [delay=0]
       * @param {Function} [callback]
       * @param {Function} [forceAnimate] Prevent stop animation and callback
       *        immediently when target values are the same as current values.
       *
       * @example
       *  // Animate position
       *  el.animateTo({
       *      position: [10, 10]
       *  }, function () { // done })
       *
       *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
       *  el.animateTo({
       *      shape: {
       *          width: 500
       *      },
       *      style: {
       *          fill: 'red'
       *      }
       *      position: [10, 10]
       *  }, 100, 100, 'cubicOut', function () { // done })
       */
      // TODO Return animation key
      animateTo: function (target, time, delay, easing, callback, forceAnimate) {
        animateTo(this, target, time, delay, easing, callback, forceAnimate);
      },

      /**
       * Animate from the target state to current state.
       * The params and the return value are the same as `this.animateTo`.
       */
      animateFrom: function (target, time, delay, easing, callback, forceAnimate) {
        animateTo(this, target, time, delay, easing, callback, forceAnimate, true);
      }
    };

    function animateTo(animatable, target, time, delay, easing, callback, forceAnimate, reverse) {
      // animateTo(target, time, easing, callback);
      if (isString$1(delay)) {
        callback = easing;
        easing = delay;
        delay = 0;
      } // animateTo(target, time, delay, callback);
      else if (isFunction$1(easing)) {
          callback = easing;
          easing = 'linear';
          delay = 0;
        } // animateTo(target, time, callback);
        else if (isFunction$1(delay)) {
            callback = delay;
            delay = 0;
          } // animateTo(target, callback)
          else if (isFunction$1(time)) {
              callback = time;
              time = 500;
            } // animateTo(target)
            else if (!time) {
                time = 500;
              } // Stop all previous animations


      animatable.stopAnimation();
      animateToShallow(animatable, '', animatable, target, time, delay, reverse); // Animators may be removed immediately after start
      // if there is nothing to animate

      var animators = animatable.animators.slice();
      var count = animators.length;

      function done() {
        count--;

        if (!count) {
          callback && callback();
        }
      } // No animators. This should be checked before animators[i].start(),
      // because 'done' may be executed immediately if no need to animate.


      if (!count) {
        callback && callback();
      } // Start after all animators created
      // Incase any animator is done immediately when all animation properties are not changed


      for (var i = 0; i < animators.length; i++) {
        animators[i].done(done).start(easing, forceAnimate);
      }
    }
    /**
     * @param {string} path=''
     * @param {Object} source=animatable
     * @param {Object} target
     * @param {number} [time=500]
     * @param {number} [delay=0]
     * @param {boolean} [reverse] If `true`, animate
     *        from the `target` to current state.
     *
     * @example
     *  // Animate position
     *  el._animateToShallow({
     *      position: [10, 10]
     *  })
     *
     *  // Animate shape, style and position in 100ms, delayed 100ms
     *  el._animateToShallow({
     *      shape: {
     *          width: 500
     *      },
     *      style: {
     *          fill: 'red'
     *      }
     *      position: [10, 10]
     *  }, 100, 100)
     */


    function animateToShallow(animatable, path, source, target, time, delay, reverse) {
      var objShallow = {};
      var propertyCount = 0;

      for (var name in target) {
        if (!target.hasOwnProperty(name)) {
          continue;
        }

        if (source[name] != null) {
          if (isObject$1(target[name]) && !isArrayLike$2(target[name])) {
            animateToShallow(animatable, path ? path + '.' + name : name, source[name], target[name], time, delay, reverse);
          } else {
            if (reverse) {
              objShallow[name] = source[name];
              setAttrByPath(animatable, path, name, target[name]);
            } else {
              objShallow[name] = target[name];
            }

            propertyCount++;
          }
        } else if (target[name] != null && !reverse) {
          setAttrByPath(animatable, path, name, target[name]);
        }
      }

      if (propertyCount > 0) {
        animatable.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
      }
    }

    function setAttrByPath(el, path, name, value) {
      // Attr directly if not has property
      // FIXME, if some property not needed for element ?
      if (!path) {
        el.attr(name, value);
      } else {
        // Only support set shape or style
        var props = {};
        props[path] = {};
        props[path][name] = value;
        el.attr(props);
      }
    }

    var _default$c = Animatable;
    var Animatable_1 = _default$c;

    /**
     * @alias module:zrender/Element
     * @constructor
     * @extends {module:zrender/mixin/Animatable}
     * @extends {module:zrender/mixin/Transformable}
     * @extends {module:zrender/mixin/Eventful}
     */
    var Element$1 = function (opts) {
      // jshint ignore:line
      Transformable_1.call(this, opts);
      Eventful_1.call(this, opts);
      Animatable_1.call(this, opts);
      /**
       * 画布元素ID
       * @type {string}
       */

      this.id = opts.id || guid();
    };

    Element$1.prototype = {
      /**
       * 元素类型
       * Element type
       * @type {string}
       */
      type: 'element',

      /**
       * 元素名字
       * Element name
       * @type {string}
       */
      name: '',

      /**
       * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
       * ZRender instance will be assigned when element is associated with zrender
       * @name module:/zrender/Element#__zr
       * @type {module:zrender/ZRender}
       */
      __zr: null,

      /**
       * 图形是否忽略，为true时忽略图形的绘制以及事件触发
       * If ignore drawing and events of the element object
       * @name module:/zrender/Element#ignore
       * @type {boolean}
       * @default false
       */
      ignore: false,

      /**
       * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
       * 该路径会继承被裁减对象的变换
       * @type {module:zrender/graphic/Path}
       * @see http://www.w3.org/TR/2dcontext/#clipping-region
       * @readOnly
       */
      clipPath: null,

      /**
       * 是否是 Group
       * @type {boolean}
       */
      isGroup: false,

      /**
       * Drift element
       * @param  {number} dx dx on the global space
       * @param  {number} dy dy on the global space
       */
      drift: function (dx, dy) {
        switch (this.draggable) {
          case 'horizontal':
            dy = 0;
            break;

          case 'vertical':
            dx = 0;
            break;
        }

        var m = this.transform;

        if (!m) {
          m = this.transform = [1, 0, 0, 1, 0, 0];
        }

        m[4] += dx;
        m[5] += dy;
        this.decomposeTransform();
        this.dirty(false);
      },

      /**
       * Hook before update
       */
      beforeUpdate: function () {},

      /**
       * Hook after update
       */
      afterUpdate: function () {},

      /**
       * Update each frame
       */
      update: function () {
        this.updateTransform();
      },

      /**
       * @param  {Function} cb
       * @param  {}   context
       */
      traverse: function (cb, context) {},

      /**
       * @protected
       */
      attrKV: function (key, value) {
        if (key === 'position' || key === 'scale' || key === 'origin') {
          // Copy the array
          if (value) {
            var target = this[key];

            if (!target) {
              target = this[key] = [];
            }

            target[0] = value[0];
            target[1] = value[1];
          }
        } else {
          this[key] = value;
        }
      },

      /**
       * Hide the element
       */
      hide: function () {
        this.ignore = true;
        this.__zr && this.__zr.refresh();
      },

      /**
       * Show the element
       */
      show: function () {
        this.ignore = false;
        this.__zr && this.__zr.refresh();
      },

      /**
       * @param {string|Object} key
       * @param {*} value
       */
      attr: function (key, value) {
        if (typeof key === 'string') {
          this.attrKV(key, value);
        } else if (util.isObject(key)) {
          for (var name in key) {
            if (key.hasOwnProperty(name)) {
              this.attrKV(name, key[name]);
            }
          }
        }

        this.dirty(false);
        return this;
      },

      /**
       * @param {module:zrender/graphic/Path} clipPath
       */
      setClipPath: function (clipPath) {
        var zr = this.__zr;

        if (zr) {
          clipPath.addSelfToZr(zr);
        } // Remove previous clip path


        if (this.clipPath && this.clipPath !== clipPath) {
          this.removeClipPath();
        }

        this.clipPath = clipPath;
        clipPath.__zr = zr;
        clipPath.__clipTarget = this;
        this.dirty(false);
      },

      /**
       */
      removeClipPath: function () {
        var clipPath = this.clipPath;

        if (clipPath) {
          if (clipPath.__zr) {
            clipPath.removeSelfFromZr(clipPath.__zr);
          }

          clipPath.__zr = null;
          clipPath.__clipTarget = null;
          this.clipPath = null;
          this.dirty(false);
        }
      },

      /**
       * Add self from zrender instance.
       * Not recursively because it will be invoked when element added to storage.
       * @param {module:zrender/ZRender} zr
       */
      addSelfToZr: function (zr) {
        this.__zr = zr; // 添加动画

        var animators = this.animators;

        if (animators) {
          for (var i = 0; i < animators.length; i++) {
            zr.animation.addAnimator(animators[i]);
          }
        }

        if (this.clipPath) {
          this.clipPath.addSelfToZr(zr);
        }
      },

      /**
       * Remove self from zrender instance.
       * Not recursively because it will be invoked when element added to storage.
       * @param {module:zrender/ZRender} zr
       */
      removeSelfFromZr: function (zr) {
        this.__zr = null; // 移除动画

        var animators = this.animators;

        if (animators) {
          for (var i = 0; i < animators.length; i++) {
            zr.animation.removeAnimator(animators[i]);
          }
        }

        if (this.clipPath) {
          this.clipPath.removeSelfFromZr(zr);
        }
      }
    };
    util.mixin(Element$1, Animatable_1);
    util.mixin(Element$1, Transformable_1);
    util.mixin(Element$1, Eventful_1);
    var _default$d = Element$1;
    var Element_1 = _default$d;

    /**
     * @module echarts/core/BoundingRect
     */
    var v2ApplyTransform = vector.applyTransform;
    var mathMin = Math.min;
    var mathMax = Math.max;
    /**
     * @alias module:echarts/core/BoundingRect
     */

    function BoundingRect(x, y, width, height) {
      if (width < 0) {
        x = x + width;
        width = -width;
      }

      if (height < 0) {
        y = y + height;
        height = -height;
      }
      /**
       * @type {number}
       */


      this.x = x;
      /**
       * @type {number}
       */

      this.y = y;
      /**
       * @type {number}
       */

      this.width = width;
      /**
       * @type {number}
       */

      this.height = height;
    }

    BoundingRect.prototype = {
      constructor: BoundingRect,

      /**
       * @param {module:echarts/core/BoundingRect} other
       */
      union: function (other) {
        var x = mathMin(other.x, this.x);
        var y = mathMin(other.y, this.y);
        this.width = mathMax(other.x + other.width, this.x + this.width) - x;
        this.height = mathMax(other.y + other.height, this.y + this.height) - y;
        this.x = x;
        this.y = y;
      },

      /**
       * @param {Array.<number>} m
       * @methods
       */
      applyTransform: function () {
        var lt = [];
        var rb = [];
        var lb = [];
        var rt = [];
        return function (m) {
          // In case usage like this
          // el.getBoundingRect().applyTransform(el.transform)
          // And element has no transform
          if (!m) {
            return;
          }

          lt[0] = lb[0] = this.x;
          lt[1] = rt[1] = this.y;
          rb[0] = rt[0] = this.x + this.width;
          rb[1] = lb[1] = this.y + this.height;
          v2ApplyTransform(lt, lt, m);
          v2ApplyTransform(rb, rb, m);
          v2ApplyTransform(lb, lb, m);
          v2ApplyTransform(rt, rt, m);
          this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
          this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
          var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
          var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
          this.width = maxX - this.x;
          this.height = maxY - this.y;
        };
      }(),

      /**
       * Calculate matrix of transforming from self to target rect
       * @param  {module:zrender/core/BoundingRect} b
       * @return {Array.<number>}
       */
      calculateTransform: function (b) {
        var a = this;
        var sx = b.width / a.width;
        var sy = b.height / a.height;
        var m = matrix.create(); // 矩阵右乘

        matrix.translate(m, m, [-a.x, -a.y]);
        matrix.scale(m, m, [sx, sy]);
        matrix.translate(m, m, [b.x, b.y]);
        return m;
      },

      /**
       * @param {(module:echarts/core/BoundingRect|Object)} b
       * @return {boolean}
       */
      intersect: function (b) {
        if (!b) {
          return false;
        }

        if (!(b instanceof BoundingRect)) {
          // Normalize negative width/height.
          b = BoundingRect.create(b);
        }

        var a = this;
        var ax0 = a.x;
        var ax1 = a.x + a.width;
        var ay0 = a.y;
        var ay1 = a.y + a.height;
        var bx0 = b.x;
        var bx1 = b.x + b.width;
        var by0 = b.y;
        var by1 = b.y + b.height;
        return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
      },
      contain: function (x, y) {
        var rect = this;
        return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
      },

      /**
       * @return {module:echarts/core/BoundingRect}
       */
      clone: function () {
        return new BoundingRect(this.x, this.y, this.width, this.height);
      },

      /**
       * Copy from another rect
       */
      copy: function (other) {
        this.x = other.x;
        this.y = other.y;
        this.width = other.width;
        this.height = other.height;
      },
      plain: function () {
        return {
          x: this.x,
          y: this.y,
          width: this.width,
          height: this.height
        };
      }
    };
    /**
     * @param {Object|module:zrender/core/BoundingRect} rect
     * @param {number} rect.x
     * @param {number} rect.y
     * @param {number} rect.width
     * @param {number} rect.height
     * @return {module:zrender/core/BoundingRect}
     */

    BoundingRect.create = function (rect) {
      return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
    };

    var _default$e = BoundingRect;
    var BoundingRect_1 = _default$e;

    /**
     * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
     * @module zrender/graphic/Group
     * @example
     *     var Group = require('zrender/container/Group');
     *     var Circle = require('zrender/graphic/shape/Circle');
     *     var g = new Group();
     *     g.position[0] = 100;
     *     g.position[1] = 100;
     *     g.add(new Circle({
     *         style: {
     *             x: 100,
     *             y: 100,
     *             r: 20,
     *         }
     *     }));
     *     zr.add(g);
     */

    /**
     * @alias module:zrender/graphic/Group
     * @constructor
     * @extends module:zrender/mixin/Transformable
     * @extends module:zrender/mixin/Eventful
     */
    var Group = function (opts) {
      opts = opts || {};
      Element_1.call(this, opts);

      for (var key in opts) {
        if (opts.hasOwnProperty(key)) {
          this[key] = opts[key];
        }
      }

      this._children = [];
      this.__storage = null;
      this.__dirty = true;
    };

    Group.prototype = {
      constructor: Group,
      isGroup: true,

      /**
       * @type {string}
       */
      type: 'group',

      /**
       * 所有子孙元素是否响应鼠标事件
       * @name module:/zrender/container/Group#silent
       * @type {boolean}
       * @default false
       */
      silent: false,

      /**
       * @return {Array.<module:zrender/Element>}
       */
      children: function () {
        return this._children.slice();
      },

      /**
       * 获取指定 index 的儿子节点
       * @param  {number} idx
       * @return {module:zrender/Element}
       */
      childAt: function (idx) {
        return this._children[idx];
      },

      /**
       * 获取指定名字的儿子节点
       * @param  {string} name
       * @return {module:zrender/Element}
       */
      childOfName: function (name) {
        var children = this._children;

        for (var i = 0; i < children.length; i++) {
          if (children[i].name === name) {
            return children[i];
          }
        }
      },

      /**
       * @return {number}
       */
      childCount: function () {
        return this._children.length;
      },

      /**
       * 添加子节点到最后
       * @param {module:zrender/Element} child
       */
      add: function (child) {
        if (child && child !== this && child.parent !== this) {
          this._children.push(child);

          this._doAdd(child);
        }

        return this;
      },

      /**
       * 添加子节点在 nextSibling 之前
       * @param {module:zrender/Element} child
       * @param {module:zrender/Element} nextSibling
       */
      addBefore: function (child, nextSibling) {
        if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
          var children = this._children;
          var idx = children.indexOf(nextSibling);

          if (idx >= 0) {
            children.splice(idx, 0, child);

            this._doAdd(child);
          }
        }

        return this;
      },
      _doAdd: function (child) {
        if (child.parent) {
          child.parent.remove(child);
        }

        child.parent = this;
        var storage = this.__storage;
        var zr = this.__zr;

        if (storage && storage !== child.__storage) {
          storage.addToStorage(child);

          if (child instanceof Group) {
            child.addChildrenToStorage(storage);
          }
        }

        zr && zr.refresh();
      },

      /**
       * 移除子节点
       * @param {module:zrender/Element} child
       */
      remove: function (child) {
        var zr = this.__zr;
        var storage = this.__storage;
        var children = this._children;
        var idx = util.indexOf(children, child);

        if (idx < 0) {
          return this;
        }

        children.splice(idx, 1);
        child.parent = null;

        if (storage) {
          storage.delFromStorage(child);

          if (child instanceof Group) {
            child.delChildrenFromStorage(storage);
          }
        }

        zr && zr.refresh();
        return this;
      },

      /**
       * 移除所有子节点
       */
      removeAll: function () {
        var children = this._children;
        var storage = this.__storage;
        var child;
        var i;

        for (i = 0; i < children.length; i++) {
          child = children[i];

          if (storage) {
            storage.delFromStorage(child);

            if (child instanceof Group) {
              child.delChildrenFromStorage(storage);
            }
          }

          child.parent = null;
        }

        children.length = 0;
        return this;
      },

      /**
       * 遍历所有子节点
       * @param  {Function} cb
       * @param  {}   context
       */
      eachChild: function (cb, context) {
        var children = this._children;

        for (var i = 0; i < children.length; i++) {
          var child = children[i];
          cb.call(context, child, i);
        }

        return this;
      },

      /**
       * 深度优先遍历所有子孙节点
       * @param  {Function} cb
       * @param  {}   context
       */
      traverse: function (cb, context) {
        for (var i = 0; i < this._children.length; i++) {
          var child = this._children[i];
          cb.call(context, child);

          if (child.type === 'group') {
            child.traverse(cb, context);
          }
        }

        return this;
      },
      addChildrenToStorage: function (storage) {
        for (var i = 0; i < this._children.length; i++) {
          var child = this._children[i];
          storage.addToStorage(child);

          if (child instanceof Group) {
            child.addChildrenToStorage(storage);
          }
        }
      },
      delChildrenFromStorage: function (storage) {
        for (var i = 0; i < this._children.length; i++) {
          var child = this._children[i];
          storage.delFromStorage(child);

          if (child instanceof Group) {
            child.delChildrenFromStorage(storage);
          }
        }
      },
      dirty: function () {
        this.__dirty = true;
        this.__zr && this.__zr.refresh();
        return this;
      },

      /**
       * @return {module:zrender/core/BoundingRect}
       */
      getBoundingRect: function (includeChildren) {
        // TODO Caching
        var rect = null;
        var tmpRect = new BoundingRect_1(0, 0, 0, 0);
        var children = includeChildren || this._children;
        var tmpMat = [];

        for (var i = 0; i < children.length; i++) {
          var child = children[i];

          if (child.ignore || child.invisible) {
            continue;
          }

          var childRect = child.getBoundingRect();
          var transform = child.getLocalTransform(tmpMat); // TODO
          // The boundingRect cacluated by transforming original
          // rect may be bigger than the actual bundingRect when rotation
          // is used. (Consider a circle rotated aginst its center, where
          // the actual boundingRect should be the same as that not be
          // rotated.) But we can not find better approach to calculate
          // actual boundingRect yet, considering performance.

          if (transform) {
            tmpRect.copy(childRect);
            tmpRect.applyTransform(transform);
            rect = rect || tmpRect.clone();
            rect.union(tmpRect);
          } else {
            rect = rect || childRect.clone();
            rect.union(childRect);
          }
        }

        return rect || tmpRect;
      }
    };
    util.inherits(Group, Element_1);
    var _default$f = Group;
    var Group_1 = _default$f;

    // https://github.com/mziccard/node-timsort
    var DEFAULT_MIN_MERGE = 32;
    var DEFAULT_MIN_GALLOPING = 7;

    function minRunLength(n) {
      var r = 0;

      while (n >= DEFAULT_MIN_MERGE) {
        r |= n & 1;
        n >>= 1;
      }

      return n + r;
    }

    function makeAscendingRun(array, lo, hi, compare) {
      var runHi = lo + 1;

      if (runHi === hi) {
        return 1;
      }

      if (compare(array[runHi++], array[lo]) < 0) {
        while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
          runHi++;
        }

        reverseRun(array, lo, runHi);
      } else {
        while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
          runHi++;
        }
      }

      return runHi - lo;
    }

    function reverseRun(array, lo, hi) {
      hi--;

      while (lo < hi) {
        var t = array[lo];
        array[lo++] = array[hi];
        array[hi--] = t;
      }
    }

    function binaryInsertionSort(array, lo, hi, start, compare) {
      if (start === lo) {
        start++;
      }

      for (; start < hi; start++) {
        var pivot = array[start];
        var left = lo;
        var right = start;
        var mid;

        while (left < right) {
          mid = left + right >>> 1;

          if (compare(pivot, array[mid]) < 0) {
            right = mid;
          } else {
            left = mid + 1;
          }
        }

        var n = start - left;

        switch (n) {
          case 3:
            array[left + 3] = array[left + 2];

          case 2:
            array[left + 2] = array[left + 1];

          case 1:
            array[left + 1] = array[left];
            break;

          default:
            while (n > 0) {
              array[left + n] = array[left + n - 1];
              n--;
            }

        }

        array[left] = pivot;
      }
    }

    function gallopLeft(value, array, start, length, hint, compare) {
      var lastOffset = 0;
      var maxOffset = 0;
      var offset = 1;

      if (compare(value, array[start + hint]) > 0) {
        maxOffset = length - hint;

        while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;

          if (offset <= 0) {
            offset = maxOffset;
          }
        }

        if (offset > maxOffset) {
          offset = maxOffset;
        }

        lastOffset += hint;
        offset += hint;
      } else {
        maxOffset = hint + 1;

        while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;

          if (offset <= 0) {
            offset = maxOffset;
          }
        }

        if (offset > maxOffset) {
          offset = maxOffset;
        }

        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
      }

      lastOffset++;

      while (lastOffset < offset) {
        var m = lastOffset + (offset - lastOffset >>> 1);

        if (compare(value, array[start + m]) > 0) {
          lastOffset = m + 1;
        } else {
          offset = m;
        }
      }

      return offset;
    }

    function gallopRight(value, array, start, length, hint, compare) {
      var lastOffset = 0;
      var maxOffset = 0;
      var offset = 1;

      if (compare(value, array[start + hint]) < 0) {
        maxOffset = hint + 1;

        while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;

          if (offset <= 0) {
            offset = maxOffset;
          }
        }

        if (offset > maxOffset) {
          offset = maxOffset;
        }

        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
      } else {
        maxOffset = length - hint;

        while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
          lastOffset = offset;
          offset = (offset << 1) + 1;

          if (offset <= 0) {
            offset = maxOffset;
          }
        }

        if (offset > maxOffset) {
          offset = maxOffset;
        }

        lastOffset += hint;
        offset += hint;
      }

      lastOffset++;

      while (lastOffset < offset) {
        var m = lastOffset + (offset - lastOffset >>> 1);

        if (compare(value, array[start + m]) < 0) {
          offset = m;
        } else {
          lastOffset = m + 1;
        }
      }

      return offset;
    }

    function TimSort(array, compare) {
      var minGallop = DEFAULT_MIN_GALLOPING;
      var length = 0;
      var runStart;
      var runLength;
      var stackSize = 0;
      length = array.length;

      var tmp = [];
      runStart = [];
      runLength = [];

      function pushRun(_runStart, _runLength) {
        runStart[stackSize] = _runStart;
        runLength[stackSize] = _runLength;
        stackSize += 1;
      }

      function mergeRuns() {
        while (stackSize > 1) {
          var n = stackSize - 2;

          if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
            if (runLength[n - 1] < runLength[n + 1]) {
              n--;
            }
          } else if (runLength[n] > runLength[n + 1]) {
            break;
          }

          mergeAt(n);
        }
      }

      function forceMergeRuns() {
        while (stackSize > 1) {
          var n = stackSize - 2;

          if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
            n--;
          }

          mergeAt(n);
        }
      }

      function mergeAt(i) {
        var start1 = runStart[i];
        var length1 = runLength[i];
        var start2 = runStart[i + 1];
        var length2 = runLength[i + 1];
        runLength[i] = length1 + length2;

        if (i === stackSize - 3) {
          runStart[i + 1] = runStart[i + 2];
          runLength[i + 1] = runLength[i + 2];
        }

        stackSize--;
        var k = gallopRight(array[start2], array, start1, length1, 0, compare);
        start1 += k;
        length1 -= k;

        if (length1 === 0) {
          return;
        }

        length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

        if (length2 === 0) {
          return;
        }

        if (length1 <= length2) {
          mergeLow(start1, length1, start2, length2);
        } else {
          mergeHigh(start1, length1, start2, length2);
        }
      }

      function mergeLow(start1, length1, start2, length2) {
        var i = 0;

        for (i = 0; i < length1; i++) {
          tmp[i] = array[start1 + i];
        }

        var cursor1 = 0;
        var cursor2 = start2;
        var dest = start1;
        array[dest++] = array[cursor2++];

        if (--length2 === 0) {
          for (i = 0; i < length1; i++) {
            array[dest + i] = tmp[cursor1 + i];
          }

          return;
        }

        if (length1 === 1) {
          for (i = 0; i < length2; i++) {
            array[dest + i] = array[cursor2 + i];
          }

          array[dest + length2] = tmp[cursor1];
          return;
        }

        var _minGallop = minGallop;
        var count1;
        var count2;
        var exit;

        while (1) {
          count1 = 0;
          count2 = 0;
          exit = false;

          do {
            if (compare(array[cursor2], tmp[cursor1]) < 0) {
              array[dest++] = array[cursor2++];
              count2++;
              count1 = 0;

              if (--length2 === 0) {
                exit = true;
                break;
              }
            } else {
              array[dest++] = tmp[cursor1++];
              count1++;
              count2 = 0;

              if (--length1 === 1) {
                exit = true;
                break;
              }
            }
          } while ((count1 | count2) < _minGallop);

          if (exit) {
            break;
          }

          do {
            count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

            if (count1 !== 0) {
              for (i = 0; i < count1; i++) {
                array[dest + i] = tmp[cursor1 + i];
              }

              dest += count1;
              cursor1 += count1;
              length1 -= count1;

              if (length1 <= 1) {
                exit = true;
                break;
              }
            }

            array[dest++] = array[cursor2++];

            if (--length2 === 0) {
              exit = true;
              break;
            }

            count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

            if (count2 !== 0) {
              for (i = 0; i < count2; i++) {
                array[dest + i] = array[cursor2 + i];
              }

              dest += count2;
              cursor2 += count2;
              length2 -= count2;

              if (length2 === 0) {
                exit = true;
                break;
              }
            }

            array[dest++] = tmp[cursor1++];

            if (--length1 === 1) {
              exit = true;
              break;
            }

            _minGallop--;
          } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

          if (exit) {
            break;
          }

          if (_minGallop < 0) {
            _minGallop = 0;
          }

          _minGallop += 2;
        }

        minGallop = _minGallop;
        minGallop < 1 && (minGallop = 1);

        if (length1 === 1) {
          for (i = 0; i < length2; i++) {
            array[dest + i] = array[cursor2 + i];
          }

          array[dest + length2] = tmp[cursor1];
        } else if (length1 === 0) {
          throw new Error(); // throw new Error('mergeLow preconditions were not respected');
        } else {
          for (i = 0; i < length1; i++) {
            array[dest + i] = tmp[cursor1 + i];
          }
        }
      }

      function mergeHigh(start1, length1, start2, length2) {
        var i = 0;

        for (i = 0; i < length2; i++) {
          tmp[i] = array[start2 + i];
        }

        var cursor1 = start1 + length1 - 1;
        var cursor2 = length2 - 1;
        var dest = start2 + length2 - 1;
        var customCursor = 0;
        var customDest = 0;
        array[dest--] = array[cursor1--];

        if (--length1 === 0) {
          customCursor = dest - (length2 - 1);

          for (i = 0; i < length2; i++) {
            array[customCursor + i] = tmp[i];
          }

          return;
        }

        if (length2 === 1) {
          dest -= length1;
          cursor1 -= length1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;

          for (i = length1 - 1; i >= 0; i--) {
            array[customDest + i] = array[customCursor + i];
          }

          array[dest] = tmp[cursor2];
          return;
        }

        var _minGallop = minGallop;

        while (true) {
          var count1 = 0;
          var count2 = 0;
          var exit = false;

          do {
            if (compare(tmp[cursor2], array[cursor1]) < 0) {
              array[dest--] = array[cursor1--];
              count1++;
              count2 = 0;

              if (--length1 === 0) {
                exit = true;
                break;
              }
            } else {
              array[dest--] = tmp[cursor2--];
              count2++;
              count1 = 0;

              if (--length2 === 1) {
                exit = true;
                break;
              }
            }
          } while ((count1 | count2) < _minGallop);

          if (exit) {
            break;
          }

          do {
            count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

            if (count1 !== 0) {
              dest -= count1;
              cursor1 -= count1;
              length1 -= count1;
              customDest = dest + 1;
              customCursor = cursor1 + 1;

              for (i = count1 - 1; i >= 0; i--) {
                array[customDest + i] = array[customCursor + i];
              }

              if (length1 === 0) {
                exit = true;
                break;
              }
            }

            array[dest--] = tmp[cursor2--];

            if (--length2 === 1) {
              exit = true;
              break;
            }

            count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

            if (count2 !== 0) {
              dest -= count2;
              cursor2 -= count2;
              length2 -= count2;
              customDest = dest + 1;
              customCursor = cursor2 + 1;

              for (i = 0; i < count2; i++) {
                array[customDest + i] = tmp[customCursor + i];
              }

              if (length2 <= 1) {
                exit = true;
                break;
              }
            }

            array[dest--] = array[cursor1--];

            if (--length1 === 0) {
              exit = true;
              break;
            }

            _minGallop--;
          } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

          if (exit) {
            break;
          }

          if (_minGallop < 0) {
            _minGallop = 0;
          }

          _minGallop += 2;
        }

        minGallop = _minGallop;

        if (minGallop < 1) {
          minGallop = 1;
        }

        if (length2 === 1) {
          dest -= length1;
          cursor1 -= length1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;

          for (i = length1 - 1; i >= 0; i--) {
            array[customDest + i] = array[customCursor + i];
          }

          array[dest] = tmp[cursor2];
        } else if (length2 === 0) {
          throw new Error(); // throw new Error('mergeHigh preconditions were not respected');
        } else {
          customCursor = dest - (length2 - 1);

          for (i = 0; i < length2; i++) {
            array[customCursor + i] = tmp[i];
          }
        }
      }

      this.mergeRuns = mergeRuns;
      this.forceMergeRuns = forceMergeRuns;
      this.pushRun = pushRun;
    }

    function sort(array, compare, lo, hi) {
      if (!lo) {
        lo = 0;
      }

      if (!hi) {
        hi = array.length;
      }

      var remaining = hi - lo;

      if (remaining < 2) {
        return;
      }

      var runLength = 0;

      if (remaining < DEFAULT_MIN_MERGE) {
        runLength = makeAscendingRun(array, lo, hi, compare);
        binaryInsertionSort(array, lo, hi, lo + runLength, compare);
        return;
      }

      var ts = new TimSort(array, compare);
      var minRun = minRunLength(remaining);

      do {
        runLength = makeAscendingRun(array, lo, hi, compare);

        if (runLength < minRun) {
          var force = remaining;

          if (force > minRun) {
            force = minRun;
          }

          binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
          runLength = force;
        }

        ts.pushRun(lo, runLength);
        ts.mergeRuns();
        remaining -= runLength;
        lo += runLength;
      } while (remaining !== 0);

      ts.forceMergeRuns();
    }

    var timsort = sort;

    // Use timsort because in most case elements are partially sorted
    // https://jsfiddle.net/pissang/jr4x7mdm/8/
    function shapeCompareFunc(a, b) {
      if (a.zlevel === b.zlevel) {
        if (a.z === b.z) {
          // if (a.z2 === b.z2) {
          //     // FIXME Slow has renderidx compare
          //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
          //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
          //     return a.__renderidx - b.__renderidx;
          // }
          return a.z2 - b.z2;
        }

        return a.z - b.z;
      }

      return a.zlevel - b.zlevel;
    }
    /**
     * 内容仓库 (M)
     * @alias module:zrender/Storage
     * @constructor
     */


    var Storage = function () {
      // jshint ignore:line
      this._roots = [];
      this._displayList = [];
      this._displayListLen = 0;
    };

    Storage.prototype = {
      constructor: Storage,

      /**
       * @param  {Function} cb
       *
       */
      traverse: function (cb, context) {
        for (var i = 0; i < this._roots.length; i++) {
          this._roots[i].traverse(cb, context);
        }
      },

      /**
       * 返回所有图形的绘制队列
       * @param {boolean} [update=false] 是否在返回前更新该数组
       * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
       *
       * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
       * @return {Array.<module:zrender/graphic/Displayable>}
       */
      getDisplayList: function (update, includeIgnore) {
        includeIgnore = includeIgnore || false;

        if (update) {
          this.updateDisplayList(includeIgnore);
        }

        return this._displayList;
      },

      /**
       * 更新图形的绘制队列。
       * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
       * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
       * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
       */
      updateDisplayList: function (includeIgnore) {
        this._displayListLen = 0;
        var roots = this._roots;
        var displayList = this._displayList;

        for (var i = 0, len = roots.length; i < len; i++) {
          this._updateAndAddDisplayable(roots[i], null, includeIgnore);
        }

        displayList.length = this._displayListLen;
        env_1.canvasSupported && timsort(displayList, shapeCompareFunc);
      },
      _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
        if (el.ignore && !includeIgnore) {
          return;
        }

        el.beforeUpdate();

        if (el.__dirty) {
          el.update();
        }

        el.afterUpdate();
        var userSetClipPath = el.clipPath;

        if (userSetClipPath) {
          // FIXME 效率影响
          if (clipPaths) {
            clipPaths = clipPaths.slice();
          } else {
            clipPaths = [];
          }

          var currentClipPath = userSetClipPath;
          var parentClipPath = el; // Recursively add clip path

          while (currentClipPath) {
            // clipPath 的变换是基于使用这个 clipPath 的元素
            currentClipPath.parent = parentClipPath;
            currentClipPath.updateTransform();
            clipPaths.push(currentClipPath);
            parentClipPath = currentClipPath;
            currentClipPath = currentClipPath.clipPath;
          }
        }

        if (el.isGroup) {
          var children = el._children;

          for (var i = 0; i < children.length; i++) {
            var child = children[i]; // Force to mark as dirty if group is dirty
            // FIXME __dirtyPath ?

            if (el.__dirty) {
              child.__dirty = true;
            }

            this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
          } // Mark group clean here


          el.__dirty = false;
        } else {
          el.__clipPaths = clipPaths;
          this._displayList[this._displayListLen++] = el;
        }
      },

      /**
       * 添加图形(Shape)或者组(Group)到根节点
       * @param {module:zrender/Element} el
       */
      addRoot: function (el) {
        if (el.__storage === this) {
          return;
        }

        if (el instanceof Group_1) {
          el.addChildrenToStorage(this);
        }

        this.addToStorage(el);

        this._roots.push(el);
      },

      /**
       * 删除指定的图形(Shape)或者组(Group)
       * @param {string|Array.<string>} [el] 如果为空清空整个Storage
       */
      delRoot: function (el) {
        if (el == null) {
          // 不指定el清空
          for (var i = 0; i < this._roots.length; i++) {
            var root = this._roots[i];

            if (root instanceof Group_1) {
              root.delChildrenFromStorage(this);
            }
          }

          this._roots = [];
          this._displayList = [];
          this._displayListLen = 0;
          return;
        }

        if (el instanceof Array) {
          for (var i = 0, l = el.length; i < l; i++) {
            this.delRoot(el[i]);
          }

          return;
        }

        var idx = util.indexOf(this._roots, el);

        if (idx >= 0) {
          this.delFromStorage(el);

          this._roots.splice(idx, 1);

          if (el instanceof Group_1) {
            el.delChildrenFromStorage(this);
          }
        }
      },
      addToStorage: function (el) {
        if (el) {
          el.__storage = this;
          el.dirty(false);
        }

        return this;
      },
      delFromStorage: function (el) {
        if (el) {
          el.__storage = null;
        }

        return this;
      },

      /**
       * 清空并且释放Storage
       */
      dispose: function () {
        this._renderList = this._roots = null;
      },
      displayableSortFunc: shapeCompareFunc
    };
    var _default$g = Storage;
    var Storage_1 = _default$g;

    var SHADOW_PROPS = {
      'shadowBlur': 1,
      'shadowOffsetX': 1,
      'shadowOffsetY': 1,
      'textShadowBlur': 1,
      'textShadowOffsetX': 1,
      'textShadowOffsetY': 1,
      'textBoxShadowBlur': 1,
      'textBoxShadowOffsetX': 1,
      'textBoxShadowOffsetY': 1
    };

    function _default$h(ctx, propName, value) {
      if (SHADOW_PROPS.hasOwnProperty(propName)) {
        return value *= ctx.dpr;
      }

      return value;
    }

    var fixShadow = _default$h;

    var ContextCachedBy = {
      NONE: 0,
      STYLE_BIND: 1,
      PLAIN_TEXT: 2
    }; // Avoid confused with 0/false.

    var WILL_BE_RESTORED = 9;
    var ContextCachedBy_1 = ContextCachedBy;
    var WILL_BE_RESTORED_1 = WILL_BE_RESTORED;

    var constant = {
    	ContextCachedBy: ContextCachedBy_1,
    	WILL_BE_RESTORED: WILL_BE_RESTORED_1
    };

    var ContextCachedBy$1 = constant.ContextCachedBy;
    var STYLE_COMMON_PROPS = [['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'], ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]]; // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);

    var Style = function (opts) {
      this.extendFrom(opts, false);
    };

    function createLinearGradient(ctx, obj, rect) {
      var x = obj.x == null ? 0 : obj.x;
      var x2 = obj.x2 == null ? 1 : obj.x2;
      var y = obj.y == null ? 0 : obj.y;
      var y2 = obj.y2 == null ? 0 : obj.y2;

      if (!obj.global) {
        x = x * rect.width + rect.x;
        x2 = x2 * rect.width + rect.x;
        y = y * rect.height + rect.y;
        y2 = y2 * rect.height + rect.y;
      } // Fix NaN when rect is Infinity


      x = isNaN(x) ? 0 : x;
      x2 = isNaN(x2) ? 1 : x2;
      y = isNaN(y) ? 0 : y;
      y2 = isNaN(y2) ? 0 : y2;
      var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
      return canvasGradient;
    }

    function createRadialGradient(ctx, obj, rect) {
      var width = rect.width;
      var height = rect.height;
      var min = Math.min(width, height);
      var x = obj.x == null ? 0.5 : obj.x;
      var y = obj.y == null ? 0.5 : obj.y;
      var r = obj.r == null ? 0.5 : obj.r;

      if (!obj.global) {
        x = x * width + rect.x;
        y = y * height + rect.y;
        r = r * min;
      }

      var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
      return canvasGradient;
    }

    Style.prototype = {
      constructor: Style,

      /**
       * @type {string}
       */
      fill: '#000',

      /**
       * @type {string}
       */
      stroke: null,

      /**
       * @type {number}
       */
      opacity: 1,

      /**
       * @type {number}
       */
      fillOpacity: null,

      /**
       * @type {number}
       */
      strokeOpacity: null,

      /**
       * `true` is not supported.
       * `false`/`null`/`undefined` are the same.
       * `false` is used to remove lineDash in some
       * case that `null`/`undefined` can not be set.
       * (e.g., emphasis.lineStyle in echarts)
       * @type {Array.<number>|boolean}
       */
      lineDash: null,

      /**
       * @type {number}
       */
      lineDashOffset: 0,

      /**
       * @type {number}
       */
      shadowBlur: 0,

      /**
       * @type {number}
       */
      shadowOffsetX: 0,

      /**
       * @type {number}
       */
      shadowOffsetY: 0,

      /**
       * @type {number}
       */
      lineWidth: 1,

      /**
       * If stroke ignore scale
       * @type {Boolean}
       */
      strokeNoScale: false,
      // Bounding rect text configuration
      // Not affected by element transform

      /**
       * @type {string}
       */
      text: null,

      /**
       * If `fontSize` or `fontFamily` exists, `font` will be reset by
       * `fontSize`, `fontStyle`, `fontWeight`, `fontFamily`.
       * So do not visit it directly in upper application (like echarts),
       * but use `contain/text#makeFont` instead.
       * @type {string}
       */
      font: null,

      /**
       * The same as font. Use font please.
       * @deprecated
       * @type {string}
       */
      textFont: null,

      /**
       * It helps merging respectively, rather than parsing an entire font string.
       * @type {string}
       */
      fontStyle: null,

      /**
       * It helps merging respectively, rather than parsing an entire font string.
       * @type {string}
       */
      fontWeight: null,

      /**
       * It helps merging respectively, rather than parsing an entire font string.
       * Should be 12 but not '12px'.
       * @type {number}
       */
      fontSize: null,

      /**
       * It helps merging respectively, rather than parsing an entire font string.
       * @type {string}
       */
      fontFamily: null,

      /**
       * Reserved for special functinality, like 'hr'.
       * @type {string}
       */
      textTag: null,

      /**
       * @type {string}
       */
      textFill: '#000',

      /**
       * @type {string}
       */
      textStroke: null,

      /**
       * @type {number}
       */
      textWidth: null,

      /**
       * Only for textBackground.
       * @type {number}
       */
      textHeight: null,

      /**
       * textStroke may be set as some color as a default
       * value in upper applicaion, where the default value
       * of textStrokeWidth should be 0 to make sure that
       * user can choose to do not use text stroke.
       * @type {number}
       */
      textStrokeWidth: 0,

      /**
       * @type {number}
       */
      textLineHeight: null,

      /**
       * 'inside', 'left', 'right', 'top', 'bottom'
       * [x, y]
       * Based on x, y of rect.
       * @type {string|Array.<number>}
       * @default 'inside'
       */
      textPosition: 'inside',

      /**
       * If not specified, use the boundingRect of a `displayable`.
       * @type {Object}
       */
      textRect: null,

      /**
       * [x, y]
       * @type {Array.<number>}
       */
      textOffset: null,

      /**
       * @type {string}
       */
      textAlign: null,

      /**
       * @type {string}
       */
      textVerticalAlign: null,

      /**
       * @type {number}
       */
      textDistance: 5,

      /**
       * @type {string}
       */
      textShadowColor: 'transparent',

      /**
       * @type {number}
       */
      textShadowBlur: 0,

      /**
       * @type {number}
       */
      textShadowOffsetX: 0,

      /**
       * @type {number}
       */
      textShadowOffsetY: 0,

      /**
       * @type {string}
       */
      textBoxShadowColor: 'transparent',

      /**
       * @type {number}
       */
      textBoxShadowBlur: 0,

      /**
       * @type {number}
       */
      textBoxShadowOffsetX: 0,

      /**
       * @type {number}
       */
      textBoxShadowOffsetY: 0,

      /**
       * Whether transform text.
       * Only available in Path and Image element,
       * where the text is called as `RectText`.
       * @type {boolean}
       */
      transformText: false,

      /**
       * Text rotate around position of Path or Image.
       * The origin of the rotation can be specified by `textOrigin`.
       * Only available in Path and Image element,
       * where the text is called as `RectText`.
       */
      textRotation: 0,

      /**
       * Text origin of text rotation.
       * Useful in the case like label rotation of circular symbol.
       * Only available in Path and Image element, where the text is called
       * as `RectText` and the element is called as "host element".
       * The value can be:
       * + If specified as a coordinate like `[10, 40]`, it is the `[x, y]`
       * base on the left-top corner of the rect of its host element.
       * + If specified as a string `center`, it is the center of the rect of
       * its host element.
       * + By default, this origin is the `textPosition`.
       * @type {string|Array.<number>}
       */
      textOrigin: null,

      /**
       * @type {string}
       */
      textBackgroundColor: null,

      /**
       * @type {string}
       */
      textBorderColor: null,

      /**
       * @type {number}
       */
      textBorderWidth: 0,

      /**
       * @type {number}
       */
      textBorderRadius: 0,

      /**
       * Can be `2` or `[2, 4]` or `[2, 3, 4, 5]`
       * @type {number|Array.<number>}
       */
      textPadding: null,

      /**
       * Text styles for rich text.
       * @type {Object}
       */
      rich: null,

      /**
       * {outerWidth, outerHeight, ellipsis, placeholder}
       * @type {Object}
       */
      truncate: null,

      /**
       * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
       * @type {string}
       */
      blend: null,

      /**
       * @param {CanvasRenderingContext2D} ctx
       */
      bind: function (ctx, el, prevEl) {
        var style = this;
        var prevStyle = prevEl && prevEl.style; // If no prevStyle, it means first draw.
        // Only apply cache if the last time cachced by this function.

        var notCheckCache = !prevStyle || ctx.__attrCachedBy !== ContextCachedBy$1.STYLE_BIND;
        ctx.__attrCachedBy = ContextCachedBy$1.STYLE_BIND;

        for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
          var prop = STYLE_COMMON_PROPS[i];
          var styleName = prop[0];

          if (notCheckCache || style[styleName] !== prevStyle[styleName]) {
            // FIXME Invalid property value will cause style leak from previous element.
            ctx[styleName] = fixShadow(ctx, styleName, style[styleName] || prop[1]);
          }
        }

        if (notCheckCache || style.fill !== prevStyle.fill) {
          ctx.fillStyle = style.fill;
        }

        if (notCheckCache || style.stroke !== prevStyle.stroke) {
          ctx.strokeStyle = style.stroke;
        }

        if (notCheckCache || style.opacity !== prevStyle.opacity) {
          ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
        }

        if (notCheckCache || style.blend !== prevStyle.blend) {
          ctx.globalCompositeOperation = style.blend || 'source-over';
        }

        if (this.hasStroke()) {
          var lineWidth = style.lineWidth;
          ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
        }
      },
      hasFill: function () {
        var fill = this.fill;
        return fill != null && fill !== 'none';
      },
      hasStroke: function () {
        var stroke = this.stroke;
        return stroke != null && stroke !== 'none' && this.lineWidth > 0;
      },

      /**
       * Extend from other style
       * @param {zrender/graphic/Style} otherStyle
       * @param {boolean} overwrite true: overwrirte any way.
       *                            false: overwrite only when !target.hasOwnProperty
       *                            others: overwrite when property is not null/undefined.
       */
      extendFrom: function (otherStyle, overwrite) {
        if (otherStyle) {
          for (var name in otherStyle) {
            if (otherStyle.hasOwnProperty(name) && (overwrite === true || (overwrite === false ? !this.hasOwnProperty(name) : otherStyle[name] != null))) {
              this[name] = otherStyle[name];
            }
          }
        }
      },

      /**
       * Batch setting style with a given object
       * @param {Object|string} obj
       * @param {*} [obj]
       */
      set: function (obj, value) {
        if (typeof obj === 'string') {
          this[obj] = value;
        } else {
          this.extendFrom(obj, true);
        }
      },

      /**
       * Clone
       * @return {zrender/graphic/Style} [description]
       */
      clone: function () {
        var newStyle = new this.constructor();
        newStyle.extendFrom(this, true);
        return newStyle;
      },
      getGradient: function (ctx, obj, rect) {
        var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
        var canvasGradient = method(ctx, obj, rect);
        var colorStops = obj.colorStops;

        for (var i = 0; i < colorStops.length; i++) {
          canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
        }

        return canvasGradient;
      }
    };
    var styleProto = Style.prototype;

    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
      var prop = STYLE_COMMON_PROPS[i];

      if (!(prop[0] in styleProto)) {
        styleProto[prop[0]] = prop[1];
      }
    } // Provide for others


    Style.getGradient = styleProto.getGradient;
    var _default$i = Style;
    var Style_1 = _default$i;

    var Pattern = function (image, repeat) {
      // Should do nothing more in this constructor. Because gradient can be
      // declard by `color: {image: ...}`, where this constructor will not be called.
      this.image = image;
      this.repeat = repeat; // Can be cloned

      this.type = 'pattern';
    };

    Pattern.prototype.getCanvasPattern = function (ctx) {
      return ctx.createPattern(this.image, this.repeat || 'repeat');
    };

    var _default$j = Pattern;
    var Pattern_1 = _default$j;

    var devicePixelRatio$1 = config.devicePixelRatio;





    /**
     * @module zrender/Layer
     * @author pissang(https://www.github.com/pissang)
     */
    function returnFalse() {
      return false;
    }
    /**
     * 创建dom
     *
     * @inner
     * @param {string} id dom id 待用
     * @param {Painter} painter painter instance
     * @param {number} number
     */


    function createDom(id, painter, dpr) {
      var newDom = util.createCanvas();
      var width = painter.getWidth();
      var height = painter.getHeight();
      var newDomStyle = newDom.style;

      if (newDomStyle) {
        // In node or some other non-browser environment
        newDomStyle.position = 'absolute';
        newDomStyle.left = 0;
        newDomStyle.top = 0;
        newDomStyle.width = width + 'px';
        newDomStyle.height = height + 'px';
        newDom.setAttribute('data-zr-dom-id', id);
      }

      newDom.width = width * dpr;
      newDom.height = height * dpr;
      return newDom;
    }
    /**
     * @alias module:zrender/Layer
     * @constructor
     * @extends module:zrender/mixin/Transformable
     * @param {string} id
     * @param {module:zrender/Painter} painter
     * @param {number} [dpr]
     */


    var Layer = function (id, painter, dpr) {
      var dom;
      dpr = dpr || devicePixelRatio$1;

      if (typeof id === 'string') {
        dom = createDom(id, painter, dpr);
      } // Not using isDom because in node it will return false
      else if (util.isObject(id)) {
          dom = id;
          id = dom.id;
        }

      this.id = id;
      this.dom = dom;
      var domStyle = dom.style;

      if (domStyle) {
        // Not in node
        dom.onselectstart = returnFalse; // 避免页面选中的尴尬

        domStyle['-webkit-user-select'] = 'none';
        domStyle['user-select'] = 'none';
        domStyle['-webkit-touch-callout'] = 'none';
        domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
        domStyle['padding'] = 0; // eslint-disable-line dot-notation

        domStyle['margin'] = 0; // eslint-disable-line dot-notation

        domStyle['border-width'] = 0;
      }

      this.domBack = null;
      this.ctxBack = null;
      this.painter = painter;
      this.config = null; // Configs

      /**
       * 每次清空画布的颜色
       * @type {string}
       * @default 0
       */

      this.clearColor = 0;
      /**
       * 是否开启动态模糊
       * @type {boolean}
       * @default false
       */

      this.motionBlur = false;
      /**
       * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
       * @type {number}
       * @default 0.7
       */

      this.lastFrameAlpha = 0.7;
      /**
       * Layer dpr
       * @type {number}
       */

      this.dpr = dpr;
    };

    Layer.prototype = {
      constructor: Layer,
      __dirty: true,
      __used: false,
      __drawIndex: 0,
      __startIndex: 0,
      __endIndex: 0,
      incremental: false,
      getElementCount: function () {
        return this.__endIndex - this.__startIndex;
      },
      initContext: function () {
        this.ctx = this.dom.getContext('2d');
        this.ctx.dpr = this.dpr;
      },
      createBackBuffer: function () {
        var dpr = this.dpr;
        this.domBack = createDom('back-' + this.id, this.painter, dpr);
        this.ctxBack = this.domBack.getContext('2d');

        if (dpr !== 1) {
          this.ctxBack.scale(dpr, dpr);
        }
      },

      /**
       * @param  {number} width
       * @param  {number} height
       */
      resize: function (width, height) {
        var dpr = this.dpr;
        var dom = this.dom;
        var domStyle = dom.style;
        var domBack = this.domBack;

        if (domStyle) {
          domStyle.width = width + 'px';
          domStyle.height = height + 'px';
        }

        dom.width = width * dpr;
        dom.height = height * dpr;

        if (domBack) {
          domBack.width = width * dpr;
          domBack.height = height * dpr;

          if (dpr !== 1) {
            this.ctxBack.scale(dpr, dpr);
          }
        }
      },

      /**
       * 清空该层画布
       * @param {boolean} [clearAll]=false Clear all with out motion blur
       * @param {Color} [clearColor]
       */
      clear: function (clearAll, clearColor) {
        var dom = this.dom;
        var ctx = this.ctx;
        var width = dom.width;
        var height = dom.height;
        var clearColor = clearColor || this.clearColor;
        var haveMotionBLur = this.motionBlur && !clearAll;
        var lastFrameAlpha = this.lastFrameAlpha;
        var dpr = this.dpr;

        if (haveMotionBLur) {
          if (!this.domBack) {
            this.createBackBuffer();
          }

          this.ctxBack.globalCompositeOperation = 'copy';
          this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
        }

        ctx.clearRect(0, 0, width, height);

        if (clearColor && clearColor !== 'transparent') {
          var clearColorGradientOrPattern; // Gradient

          if (clearColor.colorStops) {
            // Cache canvas gradient
            clearColorGradientOrPattern = clearColor.__canvasGradient || Style_1.getGradient(ctx, clearColor, {
              x: 0,
              y: 0,
              width: width,
              height: height
            });
            clearColor.__canvasGradient = clearColorGradientOrPattern;
          } // Pattern
          else if (clearColor.image) {
              clearColorGradientOrPattern = Pattern_1.prototype.getCanvasPattern.call(clearColor, ctx);
            }

          ctx.save();
          ctx.fillStyle = clearColorGradientOrPattern || clearColor;
          ctx.fillRect(0, 0, width, height);
          ctx.restore();
        }

        if (haveMotionBLur) {
          var domBack = this.domBack;
          ctx.save();
          ctx.globalAlpha = lastFrameAlpha;
          ctx.drawImage(domBack, 0, 0, width, height);
          ctx.restore();
        }
      }
    };
    var _default$k = Layer;
    var Layer_1 = _default$k;

    var _default$l = typeof window !== 'undefined' && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || // https://github.com/ecomfe/zrender/issues/189#issuecomment-224919809
    window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
      setTimeout(func, 16);
    };

    var requestAnimationFrame$1 = _default$l;

    var globalImageCache = new LRU_1(50);
    /**
     * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
     * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
     */

    function findExistImage(newImageOrSrc) {
      if (typeof newImageOrSrc === 'string') {
        var cachedImgObj = globalImageCache.get(newImageOrSrc);
        return cachedImgObj && cachedImgObj.image;
      } else {
        return newImageOrSrc;
      }
    }
    /**
     * Caution: User should cache loaded images, but not just count on LRU.
     * Consider if required images more than LRU size, will dead loop occur?
     *
     * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc
     * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.
     * @param {module:zrender/Element} [hostEl] For calling `dirty`.
     * @param {Function} [cb] params: (image, cbPayload)
     * @param {Object} [cbPayload] Payload on cb calling.
     * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image
     */


    function createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {
      if (!newImageOrSrc) {
        return image;
      } else if (typeof newImageOrSrc === 'string') {
        // Image should not be loaded repeatly.
        if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {
          return image;
        } // Only when there is no existent image or existent image src
        // is different, this method is responsible for load.


        var cachedImgObj = globalImageCache.get(newImageOrSrc);
        var pendingWrap = {
          hostEl: hostEl,
          cb: cb,
          cbPayload: cbPayload
        };

        if (cachedImgObj) {
          image = cachedImgObj.image;
          !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);
        } else {
          image = new Image();
          image.onload = image.onerror = imageOnLoad;
          globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
            image: image,
            pending: [pendingWrap]
          });
          image.src = image.__zrImageSrc = newImageOrSrc;
        }

        return image;
      } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas
      else {
          return newImageOrSrc;
        }
    }

    function imageOnLoad() {
      var cachedImgObj = this.__cachedImgObj;
      this.onload = this.onerror = this.__cachedImgObj = null;

      for (var i = 0; i < cachedImgObj.pending.length; i++) {
        var pendingWrap = cachedImgObj.pending[i];
        var cb = pendingWrap.cb;
        cb && cb(this, pendingWrap.cbPayload);
        pendingWrap.hostEl.dirty();
      }

      cachedImgObj.pending.length = 0;
    }

    function isImageReady(image) {
      return image && image.width && image.height;
    }

    var findExistImage_1 = findExistImage;
    var createOrUpdateImage_1 = createOrUpdateImage;
    var isImageReady_1 = isImageReady;

    var image = {
    	findExistImage: findExistImage_1,
    	createOrUpdateImage: createOrUpdateImage_1,
    	isImageReady: isImageReady_1
    };

    var getContext$1 = util.getContext;
    var extend$1 = util.extend;
    var retrieve2$1 = util.retrieve2;
    var retrieve3$1 = util.retrieve3;
    var trim$1 = util.trim;
    var textWidthCache = {};
    var textWidthCacheCounter = 0;
    var TEXT_CACHE_MAX = 5000;
    var STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
    var DEFAULT_FONT = '12px sans-serif'; // Avoid assign to an exported variable, for transforming to cjs.

    var methods$1 = {};

    function $override$1(name, fn) {
      methods$1[name] = fn;
    }
    /**
     * @public
     * @param {string} text
     * @param {string} font
     * @return {number} width
     */


    function getWidth(text, font) {
      font = font || DEFAULT_FONT;
      var key = text + ':' + font;

      if (textWidthCache[key]) {
        return textWidthCache[key];
      }

      var textLines = (text + '').split('\n');
      var width = 0;

      for (var i = 0, l = textLines.length; i < l; i++) {
        // textContain.measureText may be overrided in SVG or VML
        width = Math.max(measureText(textLines[i], font).width, width);
      }

      if (textWidthCacheCounter > TEXT_CACHE_MAX) {
        textWidthCacheCounter = 0;
        textWidthCache = {};
      }

      textWidthCacheCounter++;
      textWidthCache[key] = width;
      return width;
    }
    /**
     * @public
     * @param {string} text
     * @param {string} font
     * @param {string} [textAlign='left']
     * @param {string} [textVerticalAlign='top']
     * @param {Array.<number>} [textPadding]
     * @param {Object} [rich]
     * @param {Object} [truncate]
     * @return {Object} {x, y, width, height, lineHeight}
     */


    function getBoundingRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) {
      return rich ? getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) : getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, truncate);
    }

    function getPlainTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, truncate) {
      var contentBlock = parsePlainText(text, font, textPadding, textLineHeight, truncate);
      var outerWidth = getWidth(text, font);

      if (textPadding) {
        outerWidth += textPadding[1] + textPadding[3];
      }

      var outerHeight = contentBlock.outerHeight;
      var x = adjustTextX(0, outerWidth, textAlign);
      var y = adjustTextY(0, outerHeight, textVerticalAlign);
      var rect = new BoundingRect_1(x, y, outerWidth, outerHeight);
      rect.lineHeight = contentBlock.lineHeight;
      return rect;
    }

    function getRichTextRect(text, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate) {
      var contentBlock = parseRichText(text, {
        rich: rich,
        truncate: truncate,
        font: font,
        textAlign: textAlign,
        textPadding: textPadding,
        textLineHeight: textLineHeight
      });
      var outerWidth = contentBlock.outerWidth;
      var outerHeight = contentBlock.outerHeight;
      var x = adjustTextX(0, outerWidth, textAlign);
      var y = adjustTextY(0, outerHeight, textVerticalAlign);
      return new BoundingRect_1(x, y, outerWidth, outerHeight);
    }
    /**
     * @public
     * @param {number} x
     * @param {number} width
     * @param {string} [textAlign='left']
     * @return {number} Adjusted x.
     */


    function adjustTextX(x, width, textAlign) {
      // FIXME Right to left language
      if (textAlign === 'right') {
        x -= width;
      } else if (textAlign === 'center') {
        x -= width / 2;
      }

      return x;
    }
    /**
     * @public
     * @param {number} y
     * @param {number} height
     * @param {string} [textVerticalAlign='top']
     * @return {number} Adjusted y.
     */


    function adjustTextY(y, height, textVerticalAlign) {
      if (textVerticalAlign === 'middle') {
        y -= height / 2;
      } else if (textVerticalAlign === 'bottom') {
        y -= height;
      }

      return y;
    }
    /**
     * Follow same interface to `Displayable.prototype.calculateTextPosition`.
     * @public
     * @param {Obejct} [out] Prepared out object. If not input, auto created in the method.
     * @param {module:zrender/graphic/Style} style where `textPosition` and `textDistance` are visited.
     * @param {Object} rect {x, y, width, height} Rect of the host elment, according to which the text positioned.
     * @return {Object} The input `out`. Set: {x, y, textAlign, textVerticalAlign}
     */


    function calculateTextPosition(out, style, rect) {
      var textPosition = style.textPosition;
      var distance = style.textDistance;
      var x = rect.x;
      var y = rect.y;
      distance = distance || 0;
      var height = rect.height;
      var width = rect.width;
      var halfHeight = height / 2;
      var textAlign = 'left';
      var textVerticalAlign = 'top';

      switch (textPosition) {
        case 'left':
          x -= distance;
          y += halfHeight;
          textAlign = 'right';
          textVerticalAlign = 'middle';
          break;

        case 'right':
          x += distance + width;
          y += halfHeight;
          textVerticalAlign = 'middle';
          break;

        case 'top':
          x += width / 2;
          y -= distance;
          textAlign = 'center';
          textVerticalAlign = 'bottom';
          break;

        case 'bottom':
          x += width / 2;
          y += height + distance;
          textAlign = 'center';
          break;

        case 'inside':
          x += width / 2;
          y += halfHeight;
          textAlign = 'center';
          textVerticalAlign = 'middle';
          break;

        case 'insideLeft':
          x += distance;
          y += halfHeight;
          textVerticalAlign = 'middle';
          break;

        case 'insideRight':
          x += width - distance;
          y += halfHeight;
          textAlign = 'right';
          textVerticalAlign = 'middle';
          break;

        case 'insideTop':
          x += width / 2;
          y += distance;
          textAlign = 'center';
          break;

        case 'insideBottom':
          x += width / 2;
          y += height - distance;
          textAlign = 'center';
          textVerticalAlign = 'bottom';
          break;

        case 'insideTopLeft':
          x += distance;
          y += distance;
          break;

        case 'insideTopRight':
          x += width - distance;
          y += distance;
          textAlign = 'right';
          break;

        case 'insideBottomLeft':
          x += distance;
          y += height - distance;
          textVerticalAlign = 'bottom';
          break;

        case 'insideBottomRight':
          x += width - distance;
          y += height - distance;
          textAlign = 'right';
          textVerticalAlign = 'bottom';
          break;
      }

      out = out || {};
      out.x = x;
      out.y = y;
      out.textAlign = textAlign;
      out.textVerticalAlign = textVerticalAlign;
      return out;
    }
    /**
     * To be removed. But still do not remove in case that some one has imported it.
     * @deprecated
     * @public
     * @param {stirng} textPosition
     * @param {Object} rect {x, y, width, height}
     * @param {number} distance
     * @return {Object} {x, y, textAlign, textVerticalAlign}
     */


    function adjustTextPositionOnRect(textPosition, rect, distance) {
      var dummyStyle = {
        textPosition: textPosition,
        textDistance: distance
      };
      return calculateTextPosition({}, dummyStyle, rect);
    }
    /**
     * Show ellipsis if overflow.
     *
     * @public
     * @param  {string} text
     * @param  {string} containerWidth
     * @param  {string} font
     * @param  {number} [ellipsis='...']
     * @param  {Object} [options]
     * @param  {number} [options.maxIterations=3]
     * @param  {number} [options.minChar=0] If truncate result are less
     *                  then minChar, ellipsis will not show, which is
     *                  better for user hint in some cases.
     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
     * @return {string}
     */


    function truncateText(text, containerWidth, font, ellipsis, options) {
      if (!containerWidth) {
        return '';
      }

      var textLines = (text + '').split('\n');
      options = prepareTruncateOptions(containerWidth, font, ellipsis, options); // FIXME
      // It is not appropriate that every line has '...' when truncate multiple lines.

      for (var i = 0, len = textLines.length; i < len; i++) {
        textLines[i] = truncateSingleLine(textLines[i], options);
      }

      return textLines.join('\n');
    }

    function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
      options = extend$1({}, options);
      options.font = font;
      var ellipsis = retrieve2$1(ellipsis, '...');
      options.maxIterations = retrieve2$1(options.maxIterations, 2);
      var minChar = options.minChar = retrieve2$1(options.minChar, 0); // FIXME
      // Other languages?

      options.cnCharWidth = getWidth('国', font); // FIXME
      // Consider proportional font?

      var ascCharWidth = options.ascCharWidth = getWidth('a', font);
      options.placeholder = retrieve2$1(options.placeholder, ''); // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
      // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.

      var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.

      for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
        contentWidth -= ascCharWidth;
      }

      var ellipsisWidth = getWidth(ellipsis, font);

      if (ellipsisWidth > contentWidth) {
        ellipsis = '';
        ellipsisWidth = 0;
      }

      contentWidth = containerWidth - ellipsisWidth;
      options.ellipsis = ellipsis;
      options.ellipsisWidth = ellipsisWidth;
      options.contentWidth = contentWidth;
      options.containerWidth = containerWidth;
      return options;
    }

    function truncateSingleLine(textLine, options) {
      var containerWidth = options.containerWidth;
      var font = options.font;
      var contentWidth = options.contentWidth;

      if (!containerWidth) {
        return '';
      }

      var lineWidth = getWidth(textLine, font);

      if (lineWidth <= containerWidth) {
        return textLine;
      }

      for (var j = 0;; j++) {
        if (lineWidth <= contentWidth || j >= options.maxIterations) {
          textLine += options.ellipsis;
          break;
        }

        var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
        textLine = textLine.substr(0, subLength);
        lineWidth = getWidth(textLine, font);
      }

      if (textLine === '') {
        textLine = options.placeholder;
      }

      return textLine;
    }

    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
      var width = 0;
      var i = 0;

      for (var len = text.length; i < len && width < contentWidth; i++) {
        var charCode = text.charCodeAt(i);
        width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
      }

      return i;
    }
    /**
     * @public
     * @param {string} font
     * @return {number} line height
     */


    function getLineHeight(font) {
      // FIXME A rough approach.
      return getWidth('国', font);
    }
    /**
     * @public
     * @param {string} text
     * @param {string} font
     * @return {Object} width
     */


    function measureText(text, font) {
      return methods$1.measureText(text, font);
    } // Avoid assign to an exported variable, for transforming to cjs.


    methods$1.measureText = function (text, font) {
      var ctx = getContext$1();
      ctx.font = font || DEFAULT_FONT;
      return ctx.measureText(text);
    };
    /**
     * @public
     * @param {string} text
     * @param {string} font
     * @param {Object} [truncate]
     * @return {Object} block: {lineHeight, lines, height, outerHeight, canCacheByTextString}
     *  Notice: for performance, do not calculate outerWidth util needed.
     *  `canCacheByTextString` means the result `lines` is only determined by the input `text`.
     *  Thus we can simply comparing the `input` text to determin whether the result changed,
     *  without travel the result `lines`.
     */


    function parsePlainText(text, font, padding, textLineHeight, truncate) {
      text != null && (text += '');
      var lineHeight = retrieve2$1(textLineHeight, getLineHeight(font));
      var lines = text ? text.split('\n') : [];
      var height = lines.length * lineHeight;
      var outerHeight = height;
      var canCacheByTextString = true;

      if (padding) {
        outerHeight += padding[0] + padding[2];
      }

      if (text && truncate) {
        canCacheByTextString = false;
        var truncOuterHeight = truncate.outerHeight;
        var truncOuterWidth = truncate.outerWidth;

        if (truncOuterHeight != null && outerHeight > truncOuterHeight) {
          text = '';
          lines = [];
        } else if (truncOuterWidth != null) {
          var options = prepareTruncateOptions(truncOuterWidth - (padding ? padding[1] + padding[3] : 0), font, truncate.ellipsis, {
            minChar: truncate.minChar,
            placeholder: truncate.placeholder
          }); // FIXME
          // It is not appropriate that every line has '...' when truncate multiple lines.

          for (var i = 0, len = lines.length; i < len; i++) {
            lines[i] = truncateSingleLine(lines[i], options);
          }
        }
      }

      return {
        lines: lines,
        height: height,
        outerHeight: outerHeight,
        lineHeight: lineHeight,
        canCacheByTextString: canCacheByTextString
      };
    }
    /**
     * For example: 'some text {a|some text}other text{b|some text}xxx{c|}xxx'
     * Also consider 'bbbb{a|xxx\nzzz}xxxx\naaaa'.
     *
     * @public
     * @param {string} text
     * @param {Object} style
     * @return {Object} block
     * {
     *      width,
     *      height,
     *      lines: [{
     *          lineHeight,
     *          width,
     *          tokens: [[{
     *              styleName,
     *              text,
     *              width,      // include textPadding
     *              height,     // include textPadding
     *              textWidth, // pure text width
     *              textHeight, // pure text height
     *              lineHeihgt,
     *              font,
     *              textAlign,
     *              textVerticalAlign
     *          }], [...], ...]
     *      }, ...]
     * }
     * If styleName is undefined, it is plain text.
     */


    function parseRichText(text, style) {
      var contentBlock = {
        lines: [],
        width: 0,
        height: 0
      };
      text != null && (text += '');

      if (!text) {
        return contentBlock;
      }

      var lastIndex = STYLE_REG.lastIndex = 0;
      var result;

      while ((result = STYLE_REG.exec(text)) != null) {
        var matchedIndex = result.index;

        if (matchedIndex > lastIndex) {
          pushTokens(contentBlock, text.substring(lastIndex, matchedIndex));
        }

        pushTokens(contentBlock, result[2], result[1]);
        lastIndex = STYLE_REG.lastIndex;
      }

      if (lastIndex < text.length) {
        pushTokens(contentBlock, text.substring(lastIndex, text.length));
      }

      var lines = contentBlock.lines;
      var contentHeight = 0;
      var contentWidth = 0; // For `textWidth: 100%`

      var pendingList = [];
      var stlPadding = style.textPadding;
      var truncate = style.truncate;
      var truncateWidth = truncate && truncate.outerWidth;
      var truncateHeight = truncate && truncate.outerHeight;

      if (stlPadding) {
        truncateWidth != null && (truncateWidth -= stlPadding[1] + stlPadding[3]);
        truncateHeight != null && (truncateHeight -= stlPadding[0] + stlPadding[2]);
      } // Calculate layout info of tokens.


      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        var lineHeight = 0;
        var lineWidth = 0;

        for (var j = 0; j < line.tokens.length; j++) {
          var token = line.tokens[j];
          var tokenStyle = token.styleName && style.rich[token.styleName] || {}; // textPadding should not inherit from style.

          var textPadding = token.textPadding = tokenStyle.textPadding; // textFont has been asigned to font by `normalizeStyle`.

          var font = token.font = tokenStyle.font || style.font; // textHeight can be used when textVerticalAlign is specified in token.

          var tokenHeight = token.textHeight = retrieve2$1( // textHeight should not be inherited, consider it can be specified
          // as box height of the block.
          tokenStyle.textHeight, getLineHeight(font));
          textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
          token.height = tokenHeight;
          token.lineHeight = retrieve3$1(tokenStyle.textLineHeight, style.textLineHeight, tokenHeight);
          token.textAlign = tokenStyle && tokenStyle.textAlign || style.textAlign;
          token.textVerticalAlign = tokenStyle && tokenStyle.textVerticalAlign || 'middle';

          if (truncateHeight != null && contentHeight + token.lineHeight > truncateHeight) {
            return {
              lines: [],
              width: 0,
              height: 0
            };
          }

          token.textWidth = getWidth(token.text, font);
          var tokenWidth = tokenStyle.textWidth;
          var tokenWidthNotSpecified = tokenWidth == null || tokenWidth === 'auto'; // Percent width, can be `100%`, can be used in drawing separate
          // line when box width is needed to be auto.

          if (typeof tokenWidth === 'string' && tokenWidth.charAt(tokenWidth.length - 1) === '%') {
            token.percentWidth = tokenWidth;
            pendingList.push(token);
            tokenWidth = 0; // Do not truncate in this case, because there is no user case
            // and it is too complicated.
          } else {
            if (tokenWidthNotSpecified) {
              tokenWidth = token.textWidth; // FIXME: If image is not loaded and textWidth is not specified, calling
              // `getBoundingRect()` will not get correct result.

              var textBackgroundColor = tokenStyle.textBackgroundColor;
              var bgImg = textBackgroundColor && textBackgroundColor.image; // Use cases:
              // (1) If image is not loaded, it will be loaded at render phase and call
              // `dirty()` and `textBackgroundColor.image` will be replaced with the loaded
              // image, and then the right size will be calculated here at the next tick.
              // See `graphic/helper/text.js`.
              // (2) If image loaded, and `textBackgroundColor.image` is image src string,
              // use `imageHelper.findExistImage` to find cached image.
              // `imageHelper.findExistImage` will always be called here before
              // `imageHelper.createOrUpdateImage` in `graphic/helper/text.js#renderRichText`
              // which ensures that image will not be rendered before correct size calcualted.

              if (bgImg) {
                bgImg = image.findExistImage(bgImg);

                if (image.isImageReady(bgImg)) {
                  tokenWidth = Math.max(tokenWidth, bgImg.width * tokenHeight / bgImg.height);
                }
              }
            }

            var paddingW = textPadding ? textPadding[1] + textPadding[3] : 0;
            tokenWidth += paddingW;
            var remianTruncWidth = truncateWidth != null ? truncateWidth - lineWidth : null;

            if (remianTruncWidth != null && remianTruncWidth < tokenWidth) {
              if (!tokenWidthNotSpecified || remianTruncWidth < paddingW) {
                token.text = '';
                token.textWidth = tokenWidth = 0;
              } else {
                token.text = truncateText(token.text, remianTruncWidth - paddingW, font, truncate.ellipsis, {
                  minChar: truncate.minChar
                });
                token.textWidth = getWidth(token.text, font);
                tokenWidth = token.textWidth + paddingW;
              }
            }
          }

          lineWidth += token.width = tokenWidth;
          tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
        }

        line.width = lineWidth;
        line.lineHeight = lineHeight;
        contentHeight += lineHeight;
        contentWidth = Math.max(contentWidth, lineWidth);
      }

      contentBlock.outerWidth = contentBlock.width = retrieve2$1(style.textWidth, contentWidth);
      contentBlock.outerHeight = contentBlock.height = retrieve2$1(style.textHeight, contentHeight);

      if (stlPadding) {
        contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
        contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
      }

      for (var i = 0; i < pendingList.length; i++) {
        var token = pendingList[i];
        var percentWidth = token.percentWidth; // Should not base on outerWidth, because token can not be placed out of padding.

        token.width = parseInt(percentWidth, 10) / 100 * contentWidth;
      }

      return contentBlock;
    }

    function pushTokens(block, str, styleName) {
      var isEmptyStr = str === '';
      var strs = str.split('\n');
      var lines = block.lines;

      for (var i = 0; i < strs.length; i++) {
        var text = strs[i];
        var token = {
          styleName: styleName,
          text: text,
          isLineHolder: !text && !isEmptyStr
        }; // The first token should be appended to the last line.

        if (!i) {
          var tokens = (lines[lines.length - 1] || (lines[0] = {
            tokens: []
          })).tokens; // Consider cases:
          // (1) ''.split('\n') => ['', '\n', ''], the '' at the first item
          // (which is a placeholder) should be replaced by new token.
          // (2) A image backage, where token likes {a|}.
          // (3) A redundant '' will affect textAlign in line.
          // (4) tokens with the same tplName should not be merged, because
          // they should be displayed in different box (with border and padding).

          var tokensLen = tokens.length;
          tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : // Consider text is '', only insert when it is the "lineHolder" or
          // "emptyStr". Otherwise a redundant '' will affect textAlign in line.
          (text || !tokensLen || isEmptyStr) && tokens.push(token);
        } // Other tokens always start a new line.
        else {
            // If there is '', insert it as a placeholder.
            lines.push({
              tokens: [token]
            });
          }
      }
    }

    function makeFont(style) {
      // FIXME in node-canvas fontWeight is before fontStyle
      // Use `fontSize` `fontFamily` to check whether font properties are defined.
      var font = (style.fontSize || style.fontFamily) && [style.fontStyle, style.fontWeight, (style.fontSize || 12) + 'px', // If font properties are defined, `fontFamily` should not be ignored.
      style.fontFamily || 'sans-serif'].join(' ');
      return font && trim$1(font) || style.textFont || style.font;
    }

    var DEFAULT_FONT_1 = DEFAULT_FONT;
    var $override_1$1 = $override$1;
    var getWidth_1 = getWidth;
    var getBoundingRect_1 = getBoundingRect;
    var adjustTextX_1 = adjustTextX;
    var adjustTextY_1 = adjustTextY;
    var calculateTextPosition_1 = calculateTextPosition;
    var adjustTextPositionOnRect_1 = adjustTextPositionOnRect;
    var truncateText_1 = truncateText;
    var getLineHeight_1 = getLineHeight;
    var measureText_1 = measureText;
    var parsePlainText_1 = parsePlainText;
    var parseRichText_1 = parseRichText;
    var makeFont_1 = makeFont;

    var text = {
    	DEFAULT_FONT: DEFAULT_FONT_1,
    	$override: $override_1$1,
    	getWidth: getWidth_1,
    	getBoundingRect: getBoundingRect_1,
    	adjustTextX: adjustTextX_1,
    	adjustTextY: adjustTextY_1,
    	calculateTextPosition: calculateTextPosition_1,
    	adjustTextPositionOnRect: adjustTextPositionOnRect_1,
    	truncateText: truncateText_1,
    	getLineHeight: getLineHeight_1,
    	measureText: measureText_1,
    	parsePlainText: parsePlainText_1,
    	parseRichText: parseRichText_1,
    	makeFont: makeFont_1
    };

    /**
     * @param {Object} ctx
     * @param {Object} shape
     * @param {number} shape.x
     * @param {number} shape.y
     * @param {number} shape.width
     * @param {number} shape.height
     * @param {number} shape.r
     */
    function buildPath(ctx, shape) {
      var x = shape.x;
      var y = shape.y;
      var width = shape.width;
      var height = shape.height;
      var r = shape.r;
      var r1;
      var r2;
      var r3;
      var r4; // Convert width and height to positive for better borderRadius

      if (width < 0) {
        x = x + width;
        width = -width;
      }

      if (height < 0) {
        y = y + height;
        height = -height;
      }

      if (typeof r === 'number') {
        r1 = r2 = r3 = r4 = r;
      } else if (r instanceof Array) {
        if (r.length === 1) {
          r1 = r2 = r3 = r4 = r[0];
        } else if (r.length === 2) {
          r1 = r3 = r[0];
          r2 = r4 = r[1];
        } else if (r.length === 3) {
          r1 = r[0];
          r2 = r4 = r[1];
          r3 = r[2];
        } else {
          r1 = r[0];
          r2 = r[1];
          r3 = r[2];
          r4 = r[3];
        }
      } else {
        r1 = r2 = r3 = r4 = 0;
      }

      var total;

      if (r1 + r2 > width) {
        total = r1 + r2;
        r1 *= width / total;
        r2 *= width / total;
      }

      if (r3 + r4 > width) {
        total = r3 + r4;
        r3 *= width / total;
        r4 *= width / total;
      }

      if (r2 + r3 > height) {
        total = r2 + r3;
        r2 *= height / total;
        r3 *= height / total;
      }

      if (r1 + r4 > height) {
        total = r1 + r4;
        r1 *= height / total;
        r4 *= height / total;
      }

      ctx.moveTo(x + r1, y);
      ctx.lineTo(x + width - r2, y);
      r2 !== 0 && ctx.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
      ctx.lineTo(x + width, y + height - r3);
      r3 !== 0 && ctx.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
      ctx.lineTo(x + r4, y + height);
      r4 !== 0 && ctx.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
      ctx.lineTo(x, y + r1);
      r1 !== 0 && ctx.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
    }

    var buildPath_1 = buildPath;

    var roundRect = {
    	buildPath: buildPath_1
    };

    var retrieve2$2 = util.retrieve2;
    var retrieve3$2 = util.retrieve3;
    var each$1 = util.each;
    var normalizeCssArray$1 = util.normalizeCssArray;
    var isString$2 = util.isString;
    var isObject$2 = util.isObject;











    var ContextCachedBy$2 = constant.ContextCachedBy;
    var WILL_BE_RESTORED$1 = constant.WILL_BE_RESTORED;
    var DEFAULT_FONT$1 = text.DEFAULT_FONT; // TODO: Have not support 'start', 'end' yet.

    var VALID_TEXT_ALIGN = {
      left: 1,
      right: 1,
      center: 1
    };
    var VALID_TEXT_VERTICAL_ALIGN = {
      top: 1,
      bottom: 1,
      middle: 1
    }; // Different from `STYLE_COMMON_PROPS` of `graphic/Style`,
    // the default value of shadowColor is `'transparent'`.

    var SHADOW_STYLE_COMMON_PROPS = [['textShadowBlur', 'shadowBlur', 0], ['textShadowOffsetX', 'shadowOffsetX', 0], ['textShadowOffsetY', 'shadowOffsetY', 0], ['textShadowColor', 'shadowColor', 'transparent']];
    var _tmpTextPositionResult = {};
    var _tmpBoxPositionResult = {};
    /**
     * @param {module:zrender/graphic/Style} style
     * @return {module:zrender/graphic/Style} The input style.
     */

    function normalizeTextStyle(style) {
      normalizeStyle(style);
      each$1(style.rich, normalizeStyle);
      return style;
    }

    function normalizeStyle(style) {
      if (style) {
        style.font = text.makeFont(style);
        var textAlign = style.textAlign;
        textAlign === 'middle' && (textAlign = 'center');
        style.textAlign = textAlign == null || VALID_TEXT_ALIGN[textAlign] ? textAlign : 'left'; // Compatible with textBaseline.

        var textVerticalAlign = style.textVerticalAlign || style.textBaseline;
        textVerticalAlign === 'center' && (textVerticalAlign = 'middle');
        style.textVerticalAlign = textVerticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[textVerticalAlign] ? textVerticalAlign : 'top';
        var textPadding = style.textPadding;

        if (textPadding) {
          style.textPadding = normalizeCssArray$1(style.textPadding);
        }
      }
    }
    /**
     * @param {CanvasRenderingContext2D} ctx
     * @param {string} text
     * @param {module:zrender/graphic/Style} style
     * @param {Object|boolean} [rect] {x, y, width, height}
     *                  If set false, rect text is not used.
     * @param {Element|module:zrender/graphic/helper/constant.WILL_BE_RESTORED} [prevEl] For ctx prop cache.
     */


    function renderText(hostEl, ctx, text, style, rect, prevEl) {
      style.rich ? renderRichText(hostEl, ctx, text, style, rect, prevEl) : renderPlainText(hostEl, ctx, text, style, rect, prevEl);
    } // Avoid setting to ctx according to prevEl if possible for
    // performance in scenarios of large amount text.


    function renderPlainText(hostEl, ctx, text$1, style, rect, prevEl) {

      var needDrawBg = needDrawBackground(style);
      var prevStyle;
      var checkCache = false;
      var cachedByMe = ctx.__attrCachedBy === ContextCachedBy$2.PLAIN_TEXT; // Only take and check cache for `Text` el, but not RectText.

      if (prevEl !== WILL_BE_RESTORED$1) {
        if (prevEl) {
          prevStyle = prevEl.style;
          checkCache = !needDrawBg && cachedByMe && prevStyle;
        } // Prevent from using cache in `Style::bind`, because of the case:
        // ctx property is modified by other properties than `Style::bind`
        // used, and Style::bind is called next.


        ctx.__attrCachedBy = needDrawBg ? ContextCachedBy$2.NONE : ContextCachedBy$2.PLAIN_TEXT;
      } // Since this will be restored, prevent from using these props to check cache in the next
      // entering of this method. But do not need to clear other cache like `Style::bind`.
      else if (cachedByMe) {
          ctx.__attrCachedBy = ContextCachedBy$2.NONE;
        }

      var styleFont = style.font || DEFAULT_FONT$1; // PENDING
      // Only `Text` el set `font` and keep it (`RectText` will restore). So theoretically
      // we can make font cache on ctx, which can cache for text el that are discontinuous.
      // But layer save/restore needed to be considered.
      // if (styleFont !== ctx.__fontCache) {
      //     ctx.font = styleFont;
      //     if (prevEl !== WILL_BE_RESTORED) {
      //         ctx.__fontCache = styleFont;
      //     }
      // }

      if (!checkCache || styleFont !== (prevStyle.font || DEFAULT_FONT$1)) {
        ctx.font = styleFont;
      } // Use the final font from context-2d, because the final
      // font might not be the style.font when it is illegal.
      // But get `ctx.font` might be time consuming.


      var computedFont = hostEl.__computedFont;

      if (hostEl.__styleFont !== styleFont) {
        hostEl.__styleFont = styleFont;
        computedFont = hostEl.__computedFont = ctx.font;
      }

      var textPadding = style.textPadding;
      var textLineHeight = style.textLineHeight;
      var contentBlock = hostEl.__textCotentBlock;

      if (!contentBlock || hostEl.__dirtyText) {
        contentBlock = hostEl.__textCotentBlock = text.parsePlainText(text$1, computedFont, textPadding, textLineHeight, style.truncate);
      }

      var outerHeight = contentBlock.outerHeight;
      var textLines = contentBlock.lines;
      var lineHeight = contentBlock.lineHeight;
      var boxPos = getBoxPosition(_tmpBoxPositionResult, hostEl, style, rect);
      var baseX = boxPos.baseX;
      var baseY = boxPos.baseY;
      var textAlign = boxPos.textAlign || 'left';
      var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

      applyTextRotation(ctx, style, rect, baseX, baseY);
      var boxY = text.adjustTextY(baseY, outerHeight, textVerticalAlign);
      var textX = baseX;
      var textY = boxY;

      if (needDrawBg || textPadding) {
        // Consider performance, do not call getTextWidth util necessary.
        var textWidth = text.getWidth(text$1, computedFont);
        var outerWidth = textWidth;
        textPadding && (outerWidth += textPadding[1] + textPadding[3]);
        var boxX = text.adjustTextX(baseX, outerWidth, textAlign);
        needDrawBg && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

        if (textPadding) {
          textX = getTextXForPadding(baseX, textAlign, textPadding);
          textY += textPadding[0];
        }
      } // Always set textAlign and textBase line, because it is difficute to calculate
      // textAlign from prevEl, and we dont sure whether textAlign will be reset if
      // font set happened.


      ctx.textAlign = textAlign; // Force baseline to be "middle". Otherwise, if using "top", the
      // text will offset downward a little bit in font "Microsoft YaHei".

      ctx.textBaseline = 'middle'; // Set text opacity

      ctx.globalAlpha = style.opacity || 1; // Always set shadowBlur and shadowOffset to avoid leak from displayable.

      for (var i = 0; i < SHADOW_STYLE_COMMON_PROPS.length; i++) {
        var propItem = SHADOW_STYLE_COMMON_PROPS[i];
        var styleProp = propItem[0];
        var ctxProp = propItem[1];
        var val = style[styleProp];

        if (!checkCache || val !== prevStyle[styleProp]) {
          ctx[ctxProp] = fixShadow(ctx, ctxProp, val || propItem[2]);
        }
      } // `textBaseline` is set as 'middle'.


      textY += lineHeight / 2;
      var textStrokeWidth = style.textStrokeWidth;
      var textStrokeWidthPrev = checkCache ? prevStyle.textStrokeWidth : null;
      var strokeWidthChanged = !checkCache || textStrokeWidth !== textStrokeWidthPrev;
      var strokeChanged = !checkCache || strokeWidthChanged || style.textStroke !== prevStyle.textStroke;
      var textStroke = getStroke(style.textStroke, textStrokeWidth);
      var textFill = getFill(style.textFill);

      if (textStroke) {
        if (strokeWidthChanged) {
          ctx.lineWidth = textStrokeWidth;
        }

        if (strokeChanged) {
          ctx.strokeStyle = textStroke;
        }
      }

      if (textFill) {
        if (!checkCache || style.textFill !== prevStyle.textFill) {
          ctx.fillStyle = textFill;
        }
      } // Optimize simply, in most cases only one line exists.


      if (textLines.length === 1) {
        // Fill after stroke so the outline will not cover the main part.
        textStroke && ctx.strokeText(textLines[0], textX, textY);
        textFill && ctx.fillText(textLines[0], textX, textY);
      } else {
        for (var i = 0; i < textLines.length; i++) {
          // Fill after stroke so the outline will not cover the main part.
          textStroke && ctx.strokeText(textLines[i], textX, textY);
          textFill && ctx.fillText(textLines[i], textX, textY);
          textY += lineHeight;
        }
      }
    }

    function renderRichText(hostEl, ctx, text$1, style, rect, prevEl) {
      // Do not do cache for rich text because of the complexity.
      // But `RectText` this will be restored, do not need to clear other cache like `Style::bind`.
      if (prevEl !== WILL_BE_RESTORED$1) {
        ctx.__attrCachedBy = ContextCachedBy$2.NONE;
      }

      var contentBlock = hostEl.__textCotentBlock;

      if (!contentBlock || hostEl.__dirtyText) {
        contentBlock = hostEl.__textCotentBlock = text.parseRichText(text$1, style);
      }

      drawRichText(hostEl, ctx, contentBlock, style, rect);
    }

    function drawRichText(hostEl, ctx, contentBlock, style, rect) {
      var contentWidth = contentBlock.width;
      var outerWidth = contentBlock.outerWidth;
      var outerHeight = contentBlock.outerHeight;
      var textPadding = style.textPadding;
      var boxPos = getBoxPosition(_tmpBoxPositionResult, hostEl, style, rect);
      var baseX = boxPos.baseX;
      var baseY = boxPos.baseY;
      var textAlign = boxPos.textAlign;
      var textVerticalAlign = boxPos.textVerticalAlign; // Origin of textRotation should be the base point of text drawing.

      applyTextRotation(ctx, style, rect, baseX, baseY);
      var boxX = text.adjustTextX(baseX, outerWidth, textAlign);
      var boxY = text.adjustTextY(baseY, outerHeight, textVerticalAlign);
      var xLeft = boxX;
      var lineTop = boxY;

      if (textPadding) {
        xLeft += textPadding[3];
        lineTop += textPadding[0];
      }

      var xRight = xLeft + contentWidth;
      needDrawBackground(style) && drawBackground(hostEl, ctx, style, boxX, boxY, outerWidth, outerHeight);

      for (var i = 0; i < contentBlock.lines.length; i++) {
        var line = contentBlock.lines[i];
        var tokens = line.tokens;
        var tokenCount = tokens.length;
        var lineHeight = line.lineHeight;
        var usedWidth = line.width;
        var leftIndex = 0;
        var lineXLeft = xLeft;
        var lineXRight = xRight;
        var rightIndex = tokenCount - 1;
        var token;

        while (leftIndex < tokenCount && (token = tokens[leftIndex], !token.textAlign || token.textAlign === 'left')) {
          placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft, 'left');
          usedWidth -= token.width;
          lineXLeft += token.width;
          leftIndex++;
        }

        while (rightIndex >= 0 && (token = tokens[rightIndex], token.textAlign === 'right')) {
          placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXRight, 'right');
          usedWidth -= token.width;
          lineXRight -= token.width;
          rightIndex--;
        } // The other tokens are placed as textAlign 'center' if there is enough space.


        lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - usedWidth) / 2;

        while (leftIndex <= rightIndex) {
          token = tokens[leftIndex]; // Consider width specified by user, use 'center' rather than 'left'.

          placeToken(hostEl, ctx, token, style, lineHeight, lineTop, lineXLeft + token.width / 2, 'center');
          lineXLeft += token.width;
          leftIndex++;
        }

        lineTop += lineHeight;
      }
    }

    function applyTextRotation(ctx, style, rect, x, y) {
      // textRotation only apply in RectText.
      if (rect && style.textRotation) {
        var origin = style.textOrigin;

        if (origin === 'center') {
          x = rect.width / 2 + rect.x;
          y = rect.height / 2 + rect.y;
        } else if (origin) {
          x = origin[0] + rect.x;
          y = origin[1] + rect.y;
        }

        ctx.translate(x, y); // Positive: anticlockwise

        ctx.rotate(-style.textRotation);
        ctx.translate(-x, -y);
      }
    }

    function placeToken(hostEl, ctx, token, style, lineHeight, lineTop, x, textAlign) {
      var tokenStyle = style.rich[token.styleName] || {};
      tokenStyle.text = token.text; // 'ctx.textBaseline' is always set as 'middle', for sake of
      // the bias of "Microsoft YaHei".

      var textVerticalAlign = token.textVerticalAlign;
      var y = lineTop + lineHeight / 2;

      if (textVerticalAlign === 'top') {
        y = lineTop + token.height / 2;
      } else if (textVerticalAlign === 'bottom') {
        y = lineTop + lineHeight - token.height / 2;
      }

      !token.isLineHolder && needDrawBackground(tokenStyle) && drawBackground(hostEl, ctx, tokenStyle, textAlign === 'right' ? x - token.width : textAlign === 'center' ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
      var textPadding = token.textPadding;

      if (textPadding) {
        x = getTextXForPadding(x, textAlign, textPadding);
        y -= token.height / 2 - textPadding[2] - token.textHeight / 2;
      }

      setCtx(ctx, 'shadowBlur', retrieve3$2(tokenStyle.textShadowBlur, style.textShadowBlur, 0));
      setCtx(ctx, 'shadowColor', tokenStyle.textShadowColor || style.textShadowColor || 'transparent');
      setCtx(ctx, 'shadowOffsetX', retrieve3$2(tokenStyle.textShadowOffsetX, style.textShadowOffsetX, 0));
      setCtx(ctx, 'shadowOffsetY', retrieve3$2(tokenStyle.textShadowOffsetY, style.textShadowOffsetY, 0));
      setCtx(ctx, 'textAlign', textAlign); // Force baseline to be "middle". Otherwise, if using "top", the
      // text will offset downward a little bit in font "Microsoft YaHei".

      setCtx(ctx, 'textBaseline', 'middle');
      setCtx(ctx, 'font', token.font || DEFAULT_FONT$1);
      var textStroke = getStroke(tokenStyle.textStroke || style.textStroke, textStrokeWidth);
      var textFill = getFill(tokenStyle.textFill || style.textFill);
      var textStrokeWidth = retrieve2$2(tokenStyle.textStrokeWidth, style.textStrokeWidth); // Fill after stroke so the outline will not cover the main part.

      if (textStroke) {
        setCtx(ctx, 'lineWidth', textStrokeWidth);
        setCtx(ctx, 'strokeStyle', textStroke);
        ctx.strokeText(token.text, x, y);
      }

      if (textFill) {
        setCtx(ctx, 'fillStyle', textFill);
        ctx.fillText(token.text, x, y);
      }
    }

    function needDrawBackground(style) {
      return !!(style.textBackgroundColor || style.textBorderWidth && style.textBorderColor);
    } // style: {textBackgroundColor, textBorderWidth, textBorderColor, textBorderRadius, text}
    // shape: {x, y, width, height}


    function drawBackground(hostEl, ctx, style, x, y, width, height) {
      var textBackgroundColor = style.textBackgroundColor;
      var textBorderWidth = style.textBorderWidth;
      var textBorderColor = style.textBorderColor;
      var isPlainBg = isString$2(textBackgroundColor);
      setCtx(ctx, 'shadowBlur', style.textBoxShadowBlur || 0);
      setCtx(ctx, 'shadowColor', style.textBoxShadowColor || 'transparent');
      setCtx(ctx, 'shadowOffsetX', style.textBoxShadowOffsetX || 0);
      setCtx(ctx, 'shadowOffsetY', style.textBoxShadowOffsetY || 0);

      if (isPlainBg || textBorderWidth && textBorderColor) {
        ctx.beginPath();
        var textBorderRadius = style.textBorderRadius;

        if (!textBorderRadius) {
          ctx.rect(x, y, width, height);
        } else {
          roundRect.buildPath(ctx, {
            x: x,
            y: y,
            width: width,
            height: height,
            r: textBorderRadius
          });
        }

        ctx.closePath();
      }

      if (isPlainBg) {
        setCtx(ctx, 'fillStyle', textBackgroundColor);

        if (style.fillOpacity != null) {
          var originalGlobalAlpha = ctx.globalAlpha;
          ctx.globalAlpha = style.fillOpacity * style.opacity;
          ctx.fill();
          ctx.globalAlpha = originalGlobalAlpha;
        } else {
          ctx.fill();
        }
      } else if (isObject$2(textBackgroundColor)) {
        var image$1 = textBackgroundColor.image;
        image$1 = image.createOrUpdateImage(image$1, null, hostEl, onBgImageLoaded, textBackgroundColor);

        if (image$1 && image.isImageReady(image$1)) {
          ctx.drawImage(image$1, x, y, width, height);
        }
      }

      if (textBorderWidth && textBorderColor) {
        setCtx(ctx, 'lineWidth', textBorderWidth);
        setCtx(ctx, 'strokeStyle', textBorderColor);

        if (style.strokeOpacity != null) {
          var originalGlobalAlpha = ctx.globalAlpha;
          ctx.globalAlpha = style.strokeOpacity * style.opacity;
          ctx.stroke();
          ctx.globalAlpha = originalGlobalAlpha;
        } else {
          ctx.stroke();
        }
      }
    }

    function onBgImageLoaded(image, textBackgroundColor) {
      // Replace image, so that `contain/text.js#parseRichText`
      // will get correct result in next tick.
      textBackgroundColor.image = image;
    }

    function getBoxPosition(out, hostEl, style, rect) {
      var baseX = style.x || 0;
      var baseY = style.y || 0;
      var textAlign = style.textAlign;
      var textVerticalAlign = style.textVerticalAlign; // Text position represented by coord

      if (rect) {
        var textPosition = style.textPosition;

        if (textPosition instanceof Array) {
          // Percent
          baseX = rect.x + parsePercent(textPosition[0], rect.width);
          baseY = rect.y + parsePercent(textPosition[1], rect.height);
        } else {
          var res = hostEl && hostEl.calculateTextPosition ? hostEl.calculateTextPosition(_tmpTextPositionResult, style, rect) : text.calculateTextPosition(_tmpTextPositionResult, style, rect);
          baseX = res.x;
          baseY = res.y; // Default align and baseline when has textPosition

          textAlign = textAlign || res.textAlign;
          textVerticalAlign = textVerticalAlign || res.textVerticalAlign;
        } // textOffset is only support in RectText, otherwise
        // we have to adjust boundingRect for textOffset.


        var textOffset = style.textOffset;

        if (textOffset) {
          baseX += textOffset[0];
          baseY += textOffset[1];
        }
      }

      out = out || {};
      out.baseX = baseX;
      out.baseY = baseY;
      out.textAlign = textAlign;
      out.textVerticalAlign = textVerticalAlign;
      return out;
    }

    function setCtx(ctx, prop, value) {
      ctx[prop] = fixShadow(ctx, prop, value);
      return ctx[prop];
    }
    /**
     * @param {string} [stroke] If specified, do not check style.textStroke.
     * @param {string} [lineWidth] If specified, do not check style.textStroke.
     * @param {number} style
     */


    function getStroke(stroke, lineWidth) {
      return stroke == null || lineWidth <= 0 || stroke === 'transparent' || stroke === 'none' ? null // TODO pattern and gradient?
      : stroke.image || stroke.colorStops ? '#000' : stroke;
    }

    function getFill(fill) {
      return fill == null || fill === 'none' ? null // TODO pattern and gradient?
      : fill.image || fill.colorStops ? '#000' : fill;
    }

    function parsePercent(value, maxValue) {
      if (typeof value === 'string') {
        if (value.lastIndexOf('%') >= 0) {
          return parseFloat(value) / 100 * maxValue;
        }

        return parseFloat(value);
      }

      return value;
    }

    function getTextXForPadding(x, textAlign, textPadding) {
      return textAlign === 'right' ? x - textPadding[1] : textAlign === 'center' ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
    }
    /**
     * @param {string} text
     * @param {module:zrender/Style} style
     * @return {boolean}
     */


    function needDrawText(text, style) {
      return text != null && (text || style.textBackgroundColor || style.textBorderWidth && style.textBorderColor || style.textPadding);
    }

    var normalizeTextStyle_1 = normalizeTextStyle;
    var renderText_1 = renderText;
    var getBoxPosition_1 = getBoxPosition;
    var getStroke_1 = getStroke;
    var getFill_1 = getFill;
    var parsePercent_1 = parsePercent;
    var needDrawText_1 = needDrawText;

    var text$1 = {
    	normalizeTextStyle: normalizeTextStyle_1,
    	renderText: renderText_1,
    	getBoxPosition: getBoxPosition_1,
    	getStroke: getStroke_1,
    	getFill: getFill_1,
    	parsePercent: parsePercent_1,
    	needDrawText: needDrawText_1
    };

    var WILL_BE_RESTORED$2 = constant.WILL_BE_RESTORED;

    /**
     * Mixin for drawing text in a element bounding rect
     * @module zrender/mixin/RectText
     */
    var tmpRect = new BoundingRect_1();

    var RectText = function () {};

    RectText.prototype = {
      constructor: RectText,

      /**
       * Draw text in a rect with specified position.
       * @param  {CanvasRenderingContext2D} ctx
       * @param  {Object} rect Displayable rect
       */
      drawRectText: function (ctx, rect) {
        var style = this.style;
        rect = style.textRect || rect; // Optimize, avoid normalize every time.

        this.__dirty && text$1.normalizeTextStyle(style, true);
        var text = style.text; // Convert to string

        text != null && (text += '');

        if (!text$1.needDrawText(text, style)) {
          return;
        } // FIXME
        // Do not provide prevEl to `textHelper.renderText` for ctx prop cache,
        // but use `ctx.save()` and `ctx.restore()`. Because the cache for rect
        // text propably break the cache for its host elements.


        ctx.save(); // Transform rect to view space

        var transform = this.transform;

        if (!style.transformText) {
          if (transform) {
            tmpRect.copy(rect);
            tmpRect.applyTransform(transform);
            rect = tmpRect;
          }
        } else {
          this.setTransform(ctx);
        } // transformText and textRotation can not be used at the same time.


        text$1.renderText(this, ctx, text, style, rect, WILL_BE_RESTORED$2);
        ctx.restore();
      }
    };
    var _default$m = RectText;
    var RectText_1 = _default$m;

    /**
     * Base class of all displayable graphic objects
     * @module zrender/graphic/Displayable
     */

    /**
     * @alias module:zrender/graphic/Displayable
     * @extends module:zrender/Element
     * @extends module:zrender/graphic/mixin/RectText
     */
    function Displayable(opts) {
      opts = opts || {};
      Element_1.call(this, opts); // Extend properties

      for (var name in opts) {
        if (opts.hasOwnProperty(name) && name !== 'style') {
          this[name] = opts[name];
        }
      }
      /**
       * @type {module:zrender/graphic/Style}
       */


      this.style = new Style_1(opts.style, this);
      this._rect = null; // Shapes for cascade clipping.
      // Can only be `null`/`undefined` or an non-empty array, MUST NOT be an empty array.
      // because it is easy to only using null to check whether clipPaths changed.

      this.__clipPaths = null; // FIXME Stateful must be mixined after style is setted
      // Stateful.call(this, opts);
    }

    Displayable.prototype = {
      constructor: Displayable,
      type: 'displayable',

      /**
       * Dirty flag. From which painter will determine if this displayable object needs brush.
       * @name module:zrender/graphic/Displayable#__dirty
       * @type {boolean}
       */
      __dirty: true,

      /**
       * Whether the displayable object is visible. when it is true, the displayable object
       * is not drawn, but the mouse event can still trigger the object.
       * @name module:/zrender/graphic/Displayable#invisible
       * @type {boolean}
       * @default false
       */
      invisible: false,

      /**
       * @name module:/zrender/graphic/Displayable#z
       * @type {number}
       * @default 0
       */
      z: 0,

      /**
       * @name module:/zrender/graphic/Displayable#z
       * @type {number}
       * @default 0
       */
      z2: 0,

      /**
       * The z level determines the displayable object can be drawn in which layer canvas.
       * @name module:/zrender/graphic/Displayable#zlevel
       * @type {number}
       * @default 0
       */
      zlevel: 0,

      /**
       * Whether it can be dragged.
       * @name module:/zrender/graphic/Displayable#draggable
       * @type {boolean}
       * @default false
       */
      draggable: false,

      /**
       * Whether is it dragging.
       * @name module:/zrender/graphic/Displayable#draggable
       * @type {boolean}
       * @default false
       */
      dragging: false,

      /**
       * Whether to respond to mouse events.
       * @name module:/zrender/graphic/Displayable#silent
       * @type {boolean}
       * @default false
       */
      silent: false,

      /**
       * If enable culling
       * @type {boolean}
       * @default false
       */
      culling: false,

      /**
       * Mouse cursor when hovered
       * @name module:/zrender/graphic/Displayable#cursor
       * @type {string}
       */
      cursor: 'pointer',

      /**
       * If hover area is bounding rect
       * @name module:/zrender/graphic/Displayable#rectHover
       * @type {string}
       */
      rectHover: false,

      /**
       * Render the element progressively when the value >= 0,
       * usefull for large data.
       * @type {boolean}
       */
      progressive: false,

      /**
       * @type {boolean}
       */
      incremental: false,

      /**
       * Scale ratio for global scale.
       * @type {boolean}
       */
      globalScaleRatio: 1,
      beforeBrush: function (ctx) {},
      afterBrush: function (ctx) {},

      /**
       * Graphic drawing method.
       * @param {CanvasRenderingContext2D} ctx
       */
      // Interface
      brush: function (ctx, prevEl) {},

      /**
       * Get the minimum bounding box.
       * @return {module:zrender/core/BoundingRect}
       */
      // Interface
      getBoundingRect: function () {},

      /**
       * If displayable element contain coord x, y
       * @param  {number} x
       * @param  {number} y
       * @return {boolean}
       */
      contain: function (x, y) {
        return this.rectContain(x, y);
      },

      /**
       * @param  {Function} cb
       * @param  {}   context
       */
      traverse: function (cb, context) {
        cb.call(context, this);
      },

      /**
       * If bounding rect of element contain coord x, y
       * @param  {number} x
       * @param  {number} y
       * @return {boolean}
       */
      rectContain: function (x, y) {
        var coord = this.transformCoordToLocal(x, y);
        var rect = this.getBoundingRect();
        return rect.contain(coord[0], coord[1]);
      },

      /**
       * Mark displayable element dirty and refresh next frame
       */
      dirty: function () {
        this.__dirty = this.__dirtyText = true;
        this._rect = null;
        this.__zr && this.__zr.refresh();
      },

      /**
       * If displayable object binded any event
       * @return {boolean}
       */
      // TODO, events bound by bind
      // isSilent: function () {
      //     return !(
      //         this.hoverable || this.draggable
      //         || this.onmousemove || this.onmouseover || this.onmouseout
      //         || this.onmousedown || this.onmouseup || this.onclick
      //         || this.ondragenter || this.ondragover || this.ondragleave
      //         || this.ondrop
      //     );
      // },

      /**
       * Alias for animate('style')
       * @param {boolean} loop
       */
      animateStyle: function (loop) {
        return this.animate('style', loop);
      },
      attrKV: function (key, value) {
        if (key !== 'style') {
          Element_1.prototype.attrKV.call(this, key, value);
        } else {
          this.style.set(value);
        }
      },

      /**
       * @param {Object|string} key
       * @param {*} value
       */
      setStyle: function (key, value) {
        this.style.set(key, value);
        this.dirty(false);
        return this;
      },

      /**
       * Use given style object
       * @param  {Object} obj
       */
      useStyle: function (obj) {
        this.style = new Style_1(obj, this);
        this.dirty(false);
        return this;
      },

      /**
       * The string value of `textPosition` needs to be calculated to a real postion.
       * For example, `'inside'` is calculated to `[rect.width/2, rect.height/2]`
       * by default. See `contain/text.js#calculateTextPosition` for more details.
       * But some coutom shapes like "pin", "flag" have center that is not exactly
       * `[width/2, height/2]`. So we provide this hook to customize the calculation
       * for those shapes. It will be called if the `style.textPosition` is a string.
       * @param {Obejct} [out] Prepared out object. If not provided, this method should
       *        be responsible for creating one.
       * @param {module:zrender/graphic/Style} style
       * @param {Object} rect {x, y, width, height}
       * @return {Obejct} out The same as the input out.
       *         {
       *             x: number. mandatory.
       *             y: number. mandatory.
       *             textAlign: string. optional. use style.textAlign by default.
       *             textVerticalAlign: string. optional. use style.textVerticalAlign by default.
       *         }
       */
      calculateTextPosition: null
    };
    util.inherits(Displayable, Element_1);
    util.mixin(Displayable, RectText_1); // zrUtil.mixin(Displayable, Stateful);

    var _default$n = Displayable;
    var Displayable_1 = _default$n;

    /**
     * @alias zrender/graphic/Image
     * @extends module:zrender/graphic/Displayable
     * @constructor
     * @param {Object} opts
     */
    function ZImage(opts) {
      Displayable_1.call(this, opts);
    }

    ZImage.prototype = {
      constructor: ZImage,
      type: 'image',
      brush: function (ctx, prevEl) {
        var style = this.style;
        var src = style.image; // Must bind each time

        style.bind(ctx, this, prevEl);
        var image$1 = this._image = image.createOrUpdateImage(src, this._image, this, this.onload);

        if (!image$1 || !image.isImageReady(image$1)) {
          return;
        } // 图片已经加载完成
        // if (image.nodeName.toUpperCase() == 'IMG') {
        //     if (!image.complete) {
        //         return;
        //     }
        // }
        // Else is canvas


        var x = style.x || 0;
        var y = style.y || 0;
        var width = style.width;
        var height = style.height;
        var aspect = image$1.width / image$1.height;

        if (width == null && height != null) {
          // Keep image/height ratio
          width = height * aspect;
        } else if (height == null && width != null) {
          height = width / aspect;
        } else if (width == null && height == null) {
          width = image$1.width;
          height = image$1.height;
        } // 设置transform


        this.setTransform(ctx);

        if (style.sWidth && style.sHeight) {
          var sx = style.sx || 0;
          var sy = style.sy || 0;
          ctx.drawImage(image$1, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
        } else if (style.sx && style.sy) {
          var sx = style.sx;
          var sy = style.sy;
          var sWidth = width - sx;
          var sHeight = height - sy;
          ctx.drawImage(image$1, sx, sy, sWidth, sHeight, x, y, width, height);
        } else {
          ctx.drawImage(image$1, x, y, width, height);
        } // Draw rect text


        if (style.text != null) {
          // Only restore transform when needs draw text.
          this.restoreTransform(ctx);
          this.drawRectText(ctx, this.getBoundingRect());
        }
      },
      getBoundingRect: function () {
        var style = this.style;

        if (!this._rect) {
          this._rect = new BoundingRect_1(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
        }

        return this._rect;
      }
    };
    util.inherits(ZImage, Displayable_1);
    var _default$o = ZImage;
    var Image$1 = _default$o;

    var devicePixelRatio$2 = config.devicePixelRatio;

















    var HOVER_LAYER_ZLEVEL = 1e5;
    var CANVAS_ZLEVEL = 314159;
    var EL_AFTER_INCREMENTAL_INC = 0.01;
    var INCREMENTAL_INC = 0.001;

    function parseInt10(val) {
      return parseInt(val, 10);
    }

    function isLayerValid(layer) {
      if (!layer) {
        return false;
      }

      if (layer.__builtin__) {
        return true;
      }

      if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
        return false;
      }

      return true;
    }

    var tmpRect$1 = new BoundingRect_1(0, 0, 0, 0);
    var viewRect = new BoundingRect_1(0, 0, 0, 0);

    function isDisplayableCulled(el, width, height) {
      tmpRect$1.copy(el.getBoundingRect());

      if (el.transform) {
        tmpRect$1.applyTransform(el.transform);
      }

      viewRect.width = width;
      viewRect.height = height;
      return !tmpRect$1.intersect(viewRect);
    }

    function isClipPathChanged(clipPaths, prevClipPaths) {
      // displayable.__clipPaths can only be `null`/`undefined` or an non-empty array.
      if (clipPaths === prevClipPaths) {
        return false;
      }

      if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
        return true;
      }

      for (var i = 0; i < clipPaths.length; i++) {
        if (clipPaths[i] !== prevClipPaths[i]) {
          return true;
        }
      }

      return false;
    }

    function doClip(clipPaths, ctx) {
      for (var i = 0; i < clipPaths.length; i++) {
        var clipPath = clipPaths[i];
        clipPath.setTransform(ctx);
        ctx.beginPath();
        clipPath.buildPath(ctx, clipPath.shape);
        ctx.clip(); // Transform back

        clipPath.restoreTransform(ctx);
      }
    }

    function createRoot(width, height) {
      var domRoot = document.createElement('div'); // domRoot.onselectstart = returnFalse; // Avoid page selected

      domRoot.style.cssText = ['position:relative', // IOS13 safari probably has a compositing bug (z order of the canvas and the consequent
      // dom does not act as expected) when some of the parent dom has
      // `-webkit-overflow-scrolling: touch;` and the webpage is longer than one screen and
      // the canvas is not at the top part of the page.
      // Check `https://bugs.webkit.org/show_bug.cgi?id=203681` for more details. We remove
      // this `overflow:hidden` to avoid the bug.
      // 'overflow:hidden',
      'width:' + width + 'px', 'height:' + height + 'px', 'padding:0', 'margin:0', 'border-width:0'].join(';') + ';';
      return domRoot;
    }
    /**
     * @alias module:zrender/Painter
     * @constructor
     * @param {HTMLElement} root 绘图容器
     * @param {module:zrender/Storage} storage
     * @param {Object} opts
     */


    var Painter = function (root, storage, opts) {
      this.type = 'canvas'; // In node environment using node-canvas

      var singleCanvas = !root.nodeName // In node ?
      || root.nodeName.toUpperCase() === 'CANVAS';
      this._opts = opts = util.extend({}, opts || {});
      /**
       * @type {number}
       */

      this.dpr = opts.devicePixelRatio || devicePixelRatio$2;
      /**
       * @type {boolean}
       * @private
       */

      this._singleCanvas = singleCanvas;
      /**
       * 绘图容器
       * @type {HTMLElement}
       */

      this.root = root;
      var rootStyle = root.style;

      if (rootStyle) {
        rootStyle['-webkit-tap-highlight-color'] = 'transparent';
        rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';
        root.innerHTML = '';
      }
      /**
       * @type {module:zrender/Storage}
       */


      this.storage = storage;
      /**
       * @type {Array.<number>}
       * @private
       */

      var zlevelList = this._zlevelList = [];
      /**
       * @type {Object.<string, module:zrender/Layer>}
       * @private
       */

      var layers = this._layers = {};
      /**
       * @type {Object.<string, Object>}
       * @private
       */

      this._layerConfig = {};
      /**
       * zrender will do compositing when root is a canvas and have multiple zlevels.
       */

      this._needsManuallyCompositing = false;

      if (!singleCanvas) {
        this._width = this._getSize(0);
        this._height = this._getSize(1);
        var domRoot = this._domRoot = createRoot(this._width, this._height);
        root.appendChild(domRoot);
      } else {
        var width = root.width;
        var height = root.height;

        if (opts.width != null) {
          width = opts.width;
        }

        if (opts.height != null) {
          height = opts.height;
        }

        this.dpr = opts.devicePixelRatio || 1; // Use canvas width and height directly

        root.width = width * this.dpr;
        root.height = height * this.dpr;
        this._width = width;
        this._height = height; // Create layer if only one given canvas
        // Device can be specified to create a high dpi image.

        var mainLayer = new Layer_1(root, this, this.dpr);
        mainLayer.__builtin__ = true;
        mainLayer.initContext(); // FIXME Use canvas width and height
        // mainLayer.resize(width, height);

        layers[CANVAS_ZLEVEL] = mainLayer;
        mainLayer.zlevel = CANVAS_ZLEVEL; // Not use common zlevel.

        zlevelList.push(CANVAS_ZLEVEL);
        this._domRoot = root;
      }
      /**
       * @type {module:zrender/Layer}
       * @private
       */


      this._hoverlayer = null;
      this._hoverElements = [];
    };

    Painter.prototype = {
      constructor: Painter,
      getType: function () {
        return 'canvas';
      },

      /**
       * If painter use a single canvas
       * @return {boolean}
       */
      isSingleCanvas: function () {
        return this._singleCanvas;
      },

      /**
       * @return {HTMLDivElement}
       */
      getViewportRoot: function () {
        return this._domRoot;
      },
      getViewportRootOffset: function () {
        var viewportRoot = this.getViewportRoot();

        if (viewportRoot) {
          return {
            offsetLeft: viewportRoot.offsetLeft || 0,
            offsetTop: viewportRoot.offsetTop || 0
          };
        }
      },

      /**
       * 刷新
       * @param {boolean} [paintAll=false] 强制绘制所有displayable
       */
      refresh: function (paintAll) {
        var list = this.storage.getDisplayList(true);
        var zlevelList = this._zlevelList;
        this._redrawId = Math.random();

        this._paintList(list, paintAll, this._redrawId); // Paint custum layers


        for (var i = 0; i < zlevelList.length; i++) {
          var z = zlevelList[i];
          var layer = this._layers[z];

          if (!layer.__builtin__ && layer.refresh) {
            var clearColor = i === 0 ? this._backgroundColor : null;
            layer.refresh(clearColor);
          }
        }

        this.refreshHover();
        return this;
      },
      addHover: function (el, hoverStyle) {
        if (el.__hoverMir) {
          return;
        }

        var elMirror = new el.constructor({
          style: el.style,
          shape: el.shape,
          z: el.z,
          z2: el.z2,
          silent: el.silent
        });
        elMirror.__from = el;
        el.__hoverMir = elMirror;
        hoverStyle && elMirror.setStyle(hoverStyle);

        this._hoverElements.push(elMirror);

        return elMirror;
      },
      removeHover: function (el) {
        var elMirror = el.__hoverMir;
        var hoverElements = this._hoverElements;
        var idx = util.indexOf(hoverElements, elMirror);

        if (idx >= 0) {
          hoverElements.splice(idx, 1);
        }

        el.__hoverMir = null;
      },
      clearHover: function (el) {
        var hoverElements = this._hoverElements;

        for (var i = 0; i < hoverElements.length; i++) {
          var from = hoverElements[i].__from;

          if (from) {
            from.__hoverMir = null;
          }
        }

        hoverElements.length = 0;
      },
      refreshHover: function () {
        var hoverElements = this._hoverElements;
        var len = hoverElements.length;
        var hoverLayer = this._hoverlayer;
        hoverLayer && hoverLayer.clear();

        if (!len) {
          return;
        }

        timsort(hoverElements, this.storage.displayableSortFunc); // Use a extream large zlevel
        // FIXME?

        if (!hoverLayer) {
          hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);
        }

        var scope = {};
        hoverLayer.ctx.save();

        for (var i = 0; i < len;) {
          var el = hoverElements[i];
          var originalEl = el.__from; // Original el is removed
          // PENDING

          if (!(originalEl && originalEl.__zr)) {
            hoverElements.splice(i, 1);
            originalEl.__hoverMir = null;
            len--;
            continue;
          }

          i++; // Use transform
          // FIXME style and shape ?

          if (!originalEl.invisible) {
            el.transform = originalEl.transform;
            el.invTransform = originalEl.invTransform;
            el.__clipPaths = originalEl.__clipPaths; // el.

            this._doPaintEl(el, hoverLayer, true, scope);
          }
        }

        hoverLayer.ctx.restore();
      },
      getHoverLayer: function () {
        return this.getLayer(HOVER_LAYER_ZLEVEL);
      },
      _paintList: function (list, paintAll, redrawId) {
        if (this._redrawId !== redrawId) {
          return;
        }

        paintAll = paintAll || false;

        this._updateLayerStatus(list);

        var finished = this._doPaintList(list, paintAll);

        if (this._needsManuallyCompositing) {
          this._compositeManually();
        }

        if (!finished) {
          var self = this;
          requestAnimationFrame$1(function () {
            self._paintList(list, paintAll, redrawId);
          });
        }
      },
      _compositeManually: function () {
        var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;
        var width = this._domRoot.width;
        var height = this._domRoot.height;
        ctx.clearRect(0, 0, width, height); // PENDING, If only builtin layer?

        this.eachBuiltinLayer(function (layer) {
          if (layer.virtual) {
            ctx.drawImage(layer.dom, 0, 0, width, height);
          }
        });
      },
      _doPaintList: function (list, paintAll) {
        var layerList = [];

        for (var zi = 0; zi < this._zlevelList.length; zi++) {
          var zlevel = this._zlevelList[zi];
          var layer = this._layers[zlevel];

          if (layer.__builtin__ && layer !== this._hoverlayer && (layer.__dirty || paintAll)) {
            layerList.push(layer);
          }
        }

        var finished = true;

        for (var k = 0; k < layerList.length; k++) {
          var layer = layerList[k];
          var ctx = layer.ctx;
          var scope = {};
          ctx.save();
          var start = paintAll ? layer.__startIndex : layer.__drawIndex;
          var useTimer = !paintAll && layer.incremental && Date.now;
          var startTime = useTimer && Date.now();
          var clearColor = layer.zlevel === this._zlevelList[0] ? this._backgroundColor : null; // All elements in this layer are cleared.

          if (layer.__startIndex === layer.__endIndex) {
            layer.clear(false, clearColor);
          } else if (start === layer.__startIndex) {
            var firstEl = list[start];

            if (!firstEl.incremental || !firstEl.notClear || paintAll) {
              layer.clear(false, clearColor);
            }
          }

          if (start === -1) {
            console.error('For some unknown reason. drawIndex is -1');
            start = layer.__startIndex;
          }

          for (var i = start; i < layer.__endIndex; i++) {
            var el = list[i];

            this._doPaintEl(el, layer, paintAll, scope);

            el.__dirty = el.__dirtyText = false;

            if (useTimer) {
              // Date.now can be executed in 13,025,305 ops/second.
              var dTime = Date.now() - startTime; // Give 15 millisecond to draw.
              // The rest elements will be drawn in the next frame.

              if (dTime > 15) {
                break;
              }
            }
          }

          layer.__drawIndex = i;

          if (layer.__drawIndex < layer.__endIndex) {
            finished = false;
          }

          if (scope.prevElClipPaths) {
            // Needs restore the state. If last drawn element is in the clipping area.
            ctx.restore();
          }

          ctx.restore();
        }

        if (env_1.wxa) {
          // Flush for weixin application
          util.each(this._layers, function (layer) {
            if (layer && layer.ctx && layer.ctx.draw) {
              layer.ctx.draw();
            }
          });
        }

        return finished;
      },
      _doPaintEl: function (el, currentLayer, forcePaint, scope) {
        var ctx = currentLayer.ctx;
        var m = el.transform;

        if ((currentLayer.__dirty || forcePaint) && // Ignore invisible element
        !el.invisible // Ignore transparent element
        && el.style.opacity !== 0 // Ignore scale 0 element, in some environment like node-canvas
        // Draw a scale 0 element can cause all following draw wrong
        // And setTransform with scale 0 will cause set back transform failed.
        && !(m && !m[0] && !m[3]) // Ignore culled element
        && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {
          var clipPaths = el.__clipPaths;
          var prevElClipPaths = scope.prevElClipPaths; // Optimize when clipping on group with several elements

          if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {
            // If has previous clipping state, restore from it
            if (prevElClipPaths) {
              ctx.restore();
              scope.prevElClipPaths = null; // Reset prevEl since context has been restored

              scope.prevEl = null;
            } // New clipping state


            if (clipPaths) {
              ctx.save();
              doClip(clipPaths, ctx);
              scope.prevElClipPaths = clipPaths;
            }
          }

          el.beforeBrush && el.beforeBrush(ctx);
          el.brush(ctx, scope.prevEl || null);
          scope.prevEl = el;
          el.afterBrush && el.afterBrush(ctx);
        }
      },

      /**
       * 获取 zlevel 所在层，如果不存在则会创建一个新的层
       * @param {number} zlevel
       * @param {boolean} virtual Virtual layer will not be inserted into dom.
       * @return {module:zrender/Layer}
       */
      getLayer: function (zlevel, virtual) {
        if (this._singleCanvas && !this._needsManuallyCompositing) {
          zlevel = CANVAS_ZLEVEL;
        }

        var layer = this._layers[zlevel];

        if (!layer) {
          // Create a new layer
          layer = new Layer_1('zr_' + zlevel, this, this.dpr);
          layer.zlevel = zlevel;
          layer.__builtin__ = true;

          if (this._layerConfig[zlevel]) {
            util.merge(layer, this._layerConfig[zlevel], true);
          }

          if (virtual) {
            layer.virtual = virtual;
          }

          this.insertLayer(zlevel, layer); // Context is created after dom inserted to document
          // Or excanvas will get 0px clientWidth and clientHeight

          layer.initContext();
        }

        return layer;
      },
      insertLayer: function (zlevel, layer) {
        var layersMap = this._layers;
        var zlevelList = this._zlevelList;
        var len = zlevelList.length;
        var prevLayer = null;
        var i = -1;
        var domRoot = this._domRoot;

        if (layersMap[zlevel]) {
          return;
        } // Check if is a valid layer


        if (!isLayerValid(layer)) {
          return;
        }

        if (len > 0 && zlevel > zlevelList[0]) {
          for (i = 0; i < len - 1; i++) {
            if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
              break;
            }
          }

          prevLayer = layersMap[zlevelList[i]];
        }

        zlevelList.splice(i + 1, 0, zlevel);
        layersMap[zlevel] = layer; // Vitual layer will not directly show on the screen.
        // (It can be a WebGL layer and assigned to a ZImage element)
        // But it still under management of zrender.

        if (!layer.virtual) {
          if (prevLayer) {
            var prevDom = prevLayer.dom;

            if (prevDom.nextSibling) {
              domRoot.insertBefore(layer.dom, prevDom.nextSibling);
            } else {
              domRoot.appendChild(layer.dom);
            }
          } else {
            if (domRoot.firstChild) {
              domRoot.insertBefore(layer.dom, domRoot.firstChild);
            } else {
              domRoot.appendChild(layer.dom);
            }
          }
        }
      },
      // Iterate each layer
      eachLayer: function (cb, context) {
        var zlevelList = this._zlevelList;
        var z;
        var i;

        for (i = 0; i < zlevelList.length; i++) {
          z = zlevelList[i];
          cb.call(context, this._layers[z], z);
        }
      },
      // Iterate each buildin layer
      eachBuiltinLayer: function (cb, context) {
        var zlevelList = this._zlevelList;
        var layer;
        var z;
        var i;

        for (i = 0; i < zlevelList.length; i++) {
          z = zlevelList[i];
          layer = this._layers[z];

          if (layer.__builtin__) {
            cb.call(context, layer, z);
          }
        }
      },
      // Iterate each other layer except buildin layer
      eachOtherLayer: function (cb, context) {
        var zlevelList = this._zlevelList;
        var layer;
        var z;
        var i;

        for (i = 0; i < zlevelList.length; i++) {
          z = zlevelList[i];
          layer = this._layers[z];

          if (!layer.__builtin__) {
            cb.call(context, layer, z);
          }
        }
      },

      /**
       * 获取所有已创建的层
       * @param {Array.<module:zrender/Layer>} [prevLayer]
       */
      getLayers: function () {
        return this._layers;
      },
      _updateLayerStatus: function (list) {
        this.eachBuiltinLayer(function (layer, z) {
          layer.__dirty = layer.__used = false;
        });

        function updatePrevLayer(idx) {
          if (prevLayer) {
            if (prevLayer.__endIndex !== idx) {
              prevLayer.__dirty = true;
            }

            prevLayer.__endIndex = idx;
          }
        }

        if (this._singleCanvas) {
          for (var i = 1; i < list.length; i++) {
            var el = list[i];

            if (el.zlevel !== list[i - 1].zlevel || el.incremental) {
              this._needsManuallyCompositing = true;
              break;
            }
          }
        }

        var prevLayer = null;
        var incrementalLayerCount = 0;

        for (var i = 0; i < list.length; i++) {
          var el = list[i];
          var zlevel = el.zlevel;
          var layer; // PENDING If change one incremental element style ?
          // TODO Where there are non-incremental elements between incremental elements.

          if (el.incremental) {
            layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);
            layer.incremental = true;
            incrementalLayerCount = 1;
          } else {
            layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);
          }

          if (!layer.__builtin__) {
            log('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);
          }

          if (layer !== prevLayer) {
            layer.__used = true;

            if (layer.__startIndex !== i) {
              layer.__dirty = true;
            }

            layer.__startIndex = i;

            if (!layer.incremental) {
              layer.__drawIndex = i;
            } else {
              // Mark layer draw index needs to update.
              layer.__drawIndex = -1;
            }

            updatePrevLayer(i);
            prevLayer = layer;
          }

          if (el.__dirty) {
            layer.__dirty = true;

            if (layer.incremental && layer.__drawIndex < 0) {
              // Start draw from the first dirty element.
              layer.__drawIndex = i;
            }
          }
        }

        updatePrevLayer(i);
        this.eachBuiltinLayer(function (layer, z) {
          // Used in last frame but not in this frame. Needs clear
          if (!layer.__used && layer.getElementCount() > 0) {
            layer.__dirty = true;
            layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;
          } // For incremental layer. In case start index changed and no elements are dirty.


          if (layer.__dirty && layer.__drawIndex < 0) {
            layer.__drawIndex = layer.__startIndex;
          }
        });
      },

      /**
       * 清除hover层外所有内容
       */
      clear: function () {
        this.eachBuiltinLayer(this._clearLayer);
        return this;
      },
      _clearLayer: function (layer) {
        layer.clear();
      },
      setBackgroundColor: function (backgroundColor) {
        this._backgroundColor = backgroundColor;
      },

      /**
       * 修改指定zlevel的绘制参数
       *
       * @param {string} zlevel
       * @param {Object} config 配置对象
       * @param {string} [config.clearColor=0] 每次清空画布的颜色
       * @param {string} [config.motionBlur=false] 是否开启动态模糊
       * @param {number} [config.lastFrameAlpha=0.7]
       *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
       */
      configLayer: function (zlevel, config) {
        if (config) {
          var layerConfig = this._layerConfig;

          if (!layerConfig[zlevel]) {
            layerConfig[zlevel] = config;
          } else {
            util.merge(layerConfig[zlevel], config, true);
          }

          for (var i = 0; i < this._zlevelList.length; i++) {
            var _zlevel = this._zlevelList[i];

            if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {
              var layer = this._layers[_zlevel];
              util.merge(layer, layerConfig[zlevel], true);
            }
          }
        }
      },

      /**
       * 删除指定层
       * @param {number} zlevel 层所在的zlevel
       */
      delLayer: function (zlevel) {
        var layers = this._layers;
        var zlevelList = this._zlevelList;
        var layer = layers[zlevel];

        if (!layer) {
          return;
        }

        layer.dom.parentNode.removeChild(layer.dom);
        delete layers[zlevel];
        zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
      },

      /**
       * 区域大小变化后重绘
       */
      resize: function (width, height) {
        if (!this._domRoot.style) {
          // Maybe in node or worker
          if (width == null || height == null) {
            return;
          }

          this._width = width;
          this._height = height;
          this.getLayer(CANVAS_ZLEVEL).resize(width, height);
        } else {
          var domRoot = this._domRoot; // FIXME Why ?

          domRoot.style.display = 'none'; // Save input w/h

          var opts = this._opts;
          width != null && (opts.width = width);
          height != null && (opts.height = height);
          width = this._getSize(0);
          height = this._getSize(1);
          domRoot.style.display = ''; // 优化没有实际改变的resize

          if (this._width !== width || height !== this._height) {
            domRoot.style.width = width + 'px';
            domRoot.style.height = height + 'px';

            for (var id in this._layers) {
              if (this._layers.hasOwnProperty(id)) {
                this._layers[id].resize(width, height);
              }
            }

            util.each(this._progressiveLayers, function (layer) {
              layer.resize(width, height);
            });
            this.refresh(true);
          }

          this._width = width;
          this._height = height;
        }

        return this;
      },

      /**
       * 清除单独的一个层
       * @param {number} zlevel
       */
      clearLayer: function (zlevel) {
        var layer = this._layers[zlevel];

        if (layer) {
          layer.clear();
        }
      },

      /**
       * 释放
       */
      dispose: function () {
        this.root.innerHTML = '';
        this.root = this.storage = this._domRoot = this._layers = null;
      },

      /**
       * Get canvas which has all thing rendered
       * @param {Object} opts
       * @param {string} [opts.backgroundColor]
       * @param {number} [opts.pixelRatio]
       */
      getRenderedCanvas: function (opts) {
        opts = opts || {};

        if (this._singleCanvas && !this._compositeManually) {
          return this._layers[CANVAS_ZLEVEL].dom;
        }

        var imageLayer = new Layer_1('image', this, opts.pixelRatio || this.dpr);
        imageLayer.initContext();
        imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);

        if (opts.pixelRatio <= this.dpr) {
          this.refresh();
          var width = imageLayer.dom.width;
          var height = imageLayer.dom.height;
          var ctx = imageLayer.ctx;
          this.eachLayer(function (layer) {
            if (layer.__builtin__) {
              ctx.drawImage(layer.dom, 0, 0, width, height);
            } else if (layer.renderToCanvas) {
              imageLayer.ctx.save();
              layer.renderToCanvas(imageLayer.ctx);
              imageLayer.ctx.restore();
            }
          });
        } else {
          // PENDING, echarts-gl and incremental rendering.
          var scope = {};
          var displayList = this.storage.getDisplayList(true);

          for (var i = 0; i < displayList.length; i++) {
            var el = displayList[i];

            this._doPaintEl(el, imageLayer, true, scope);
          }
        }

        return imageLayer.dom;
      },

      /**
       * 获取绘图区域宽度
       */
      getWidth: function () {
        return this._width;
      },

      /**
       * 获取绘图区域高度
       */
      getHeight: function () {
        return this._height;
      },
      _getSize: function (whIdx) {
        var opts = this._opts;
        var wh = ['width', 'height'][whIdx];
        var cwh = ['clientWidth', 'clientHeight'][whIdx];
        var plt = ['paddingLeft', 'paddingTop'][whIdx];
        var prb = ['paddingRight', 'paddingBottom'][whIdx];

        if (opts[wh] != null && opts[wh] !== 'auto') {
          return parseFloat(opts[wh]);
        }

        var root = this.root; // IE8 does not support getComputedStyle, but it use VML.

        var stl = document.defaultView.getComputedStyle(root);
        return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
      },
      pathToImage: function (path, dpr) {
        dpr = dpr || this.dpr;
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');
        var rect = path.getBoundingRect();
        var style = path.style;
        var shadowBlurSize = style.shadowBlur * dpr;
        var shadowOffsetX = style.shadowOffsetX * dpr;
        var shadowOffsetY = style.shadowOffsetY * dpr;
        var lineWidth = style.hasStroke() ? style.lineWidth : 0;
        var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);
        var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);
        var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);
        var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);
        var width = rect.width + leftMargin + rightMargin;
        var height = rect.height + topMargin + bottomMargin;
        canvas.width = width * dpr;
        canvas.height = height * dpr;
        ctx.scale(dpr, dpr);
        ctx.clearRect(0, 0, width, height);
        ctx.dpr = dpr;
        var pathTransform = {
          position: path.position,
          rotation: path.rotation,
          scale: path.scale
        };
        path.position = [leftMargin - rect.x, topMargin - rect.y];
        path.rotation = 0;
        path.scale = [1, 1];
        path.updateTransform();

        if (path) {
          path.brush(ctx);
        }

        var ImageShape = Image$1;
        var imgShape = new ImageShape({
          style: {
            x: 0,
            y: 0,
            image: canvas
          }
        });

        if (pathTransform.position != null) {
          imgShape.position = path.position = pathTransform.position;
        }

        if (pathTransform.rotation != null) {
          imgShape.rotation = path.rotation = pathTransform.rotation;
        }

        if (pathTransform.scale != null) {
          imgShape.scale = path.scale = pathTransform.scale;
        }

        return imgShape;
      }
    };
    var _default$p = Painter;
    var Painter_1 = _default$p;

    var Dispatcher$1 = event.Dispatcher;





    /**
     * 动画主类, 调度和管理所有动画控制器
     *
     * @module zrender/animation/Animation
     * @author pissang(https://github.com/pissang)
     */
    // TODO Additive animation
    // http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
    // https://developer.apple.com/videos/wwdc2014/#236

    /**
     * @typedef {Object} IZRenderStage
     * @property {Function} update
     */

    /**
     * @alias module:zrender/animation/Animation
     * @constructor
     * @param {Object} [options]
     * @param {Function} [options.onframe]
     * @param {IZRenderStage} [options.stage]
     * @example
     *     var animation = new Animation();
     *     var obj = {
     *         x: 100,
     *         y: 100
     *     };
     *     animation.animate(node.position)
     *         .when(1000, {
     *             x: 500,
     *             y: 500
     *         })
     *         .when(2000, {
     *             x: 100,
     *             y: 100
     *         })
     *         .start('spline');
     */
    var Animation = function (options) {
      options = options || {};
      this.stage = options.stage || {};

      this.onframe = options.onframe || function () {}; // private properties


      this._clips = [];
      this._running = false;
      this._time;
      this._pausedTime;
      this._pauseStart;
      this._paused = false;
      Dispatcher$1.call(this);
    };

    Animation.prototype = {
      constructor: Animation,

      /**
       * 添加 clip
       * @param {module:zrender/animation/Clip} clip
       */
      addClip: function (clip) {
        this._clips.push(clip);
      },

      /**
       * 添加 animator
       * @param {module:zrender/animation/Animator} animator
       */
      addAnimator: function (animator) {
        animator.animation = this;
        var clips = animator.getClips();

        for (var i = 0; i < clips.length; i++) {
          this.addClip(clips[i]);
        }
      },

      /**
       * 删除动画片段
       * @param {module:zrender/animation/Clip} clip
       */
      removeClip: function (clip) {
        var idx = util.indexOf(this._clips, clip);

        if (idx >= 0) {
          this._clips.splice(idx, 1);
        }
      },

      /**
       * 删除动画片段
       * @param {module:zrender/animation/Animator} animator
       */
      removeAnimator: function (animator) {
        var clips = animator.getClips();

        for (var i = 0; i < clips.length; i++) {
          this.removeClip(clips[i]);
        }

        animator.animation = null;
      },
      _update: function () {
        var time = new Date().getTime() - this._pausedTime;

        var delta = time - this._time;
        var clips = this._clips;
        var len = clips.length;
        var deferredEvents = [];
        var deferredClips = [];

        for (var i = 0; i < len; i++) {
          var clip = clips[i];
          var e = clip.step(time, delta); // Throw out the events need to be called after
          // stage.update, like destroy

          if (e) {
            deferredEvents.push(e);
            deferredClips.push(clip);
          }
        } // Remove the finished clip


        for (var i = 0; i < len;) {
          if (clips[i]._needsRemove) {
            clips[i] = clips[len - 1];
            clips.pop();
            len--;
          } else {
            i++;
          }
        }

        len = deferredEvents.length;

        for (var i = 0; i < len; i++) {
          deferredClips[i].fire(deferredEvents[i]);
        }

        this._time = time;
        this.onframe(delta); // 'frame' should be triggered before stage, because upper application
        // depends on the sequence (e.g., echarts-stream and finish
        // event judge)

        this.trigger('frame', delta);

        if (this.stage.update) {
          this.stage.update();
        }
      },
      _startLoop: function () {
        var self = this;
        this._running = true;

        function step() {
          if (self._running) {
            requestAnimationFrame$1(step);
            !self._paused && self._update();
          }
        }

        requestAnimationFrame$1(step);
      },

      /**
       * Start animation.
       */
      start: function () {
        this._time = new Date().getTime();
        this._pausedTime = 0;

        this._startLoop();
      },

      /**
       * Stop animation.
       */
      stop: function () {
        this._running = false;
      },

      /**
       * Pause animation.
       */
      pause: function () {
        if (!this._paused) {
          this._pauseStart = new Date().getTime();
          this._paused = true;
        }
      },

      /**
       * Resume animation.
       */
      resume: function () {
        if (this._paused) {
          this._pausedTime += new Date().getTime() - this._pauseStart;
          this._paused = false;
        }
      },

      /**
       * Clear animation.
       */
      clear: function () {
        this._clips = [];
      },

      /**
       * Whether animation finished.
       */
      isFinished: function () {
        return !this._clips.length;
      },

      /**
       * Creat animator for a target, whose props can be animated.
       *
       * @param  {Object} target
       * @param  {Object} options
       * @param  {boolean} [options.loop=false] Whether loop animation.
       * @param  {Function} [options.getter=null] Get value from target.
       * @param  {Function} [options.setter=null] Set value to target.
       * @return {module:zrender/animation/Animation~Animator}
       */
      // TODO Gap
      animate: function (target, options) {
        options = options || {};
        var animator = new Animator_1(target, options.loop, options.getter, options.setter);
        this.addAnimator(animator);
        return animator;
      }
    };
    util.mixin(Animation, Dispatcher$1);
    var _default$q = Animation;
    var Animation_1 = _default$q;

    var addEventListener$1 = event.addEventListener;
    var removeEventListener$1 = event.removeEventListener;
    var normalizeEvent$1 = event.normalizeEvent;
    var getNativeEvent$1 = event.getNativeEvent;







    /* global document */
    var TOUCH_CLICK_DELAY = 300;
    var globalEventSupported = env_1.domSupported;

    var localNativeListenerNames = function () {
      var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];
      var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];
      var pointerEventNameMap = {
        pointerdown: 1,
        pointerup: 1,
        pointermove: 1,
        pointerout: 1
      };
      var pointerHandlerNames = util.map(mouseHandlerNames, function (name) {
        var nm = name.replace('mouse', 'pointer');
        return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;
      });
      return {
        mouse: mouseHandlerNames,
        touch: touchHandlerNames,
        pointer: pointerHandlerNames
      };
    }();

    var globalNativeListenerNames = {
      mouse: ['mousemove', 'mouseup'],
      pointer: ['pointermove', 'pointerup']
    };

    function eventNameFix(name) {
      return name === 'mousewheel' && env_1.browser.firefox ? 'DOMMouseScroll' : name;
    }

    function isPointerFromTouch(event) {
      var pointerType = event.pointerType;
      return pointerType === 'pen' || pointerType === 'touch';
    } // function useMSGuesture(handlerProxy, event) {
    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
    // }
    // function onMSGestureChange(proxy, event) {
    //     if (event.translationX || event.translationY) {
    //         // mousemove is carried by MSGesture to reduce the sensitivity.
    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
    //     }
    //     if (event.scale !== 1) {
    //         event.pinchX = event.offsetX;
    //         event.pinchY = event.offsetY;
    //         event.pinchScale = event.scale;
    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);
    //     }
    // }

    /**
     * Prevent mouse event from being dispatched after Touch Events action
     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
     * 1. Mobile browsers dispatch mouse events 300ms after touchend.
     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
     * Result: Blocking Mouse Events for 700ms.
     *
     * @param {DOMHandlerScope} scope
     */


    function setTouchTimer(scope) {
      scope.touching = true;

      if (scope.touchTimer != null) {
        clearTimeout(scope.touchTimer);
        scope.touchTimer = null;
      }

      scope.touchTimer = setTimeout(function () {
        scope.touching = false;
        scope.touchTimer = null;
      }, 700);
    } // Mark touch, which is useful in distinguish touch and
    // mouse event in upper applicatoin.


    function markTouch(event) {
      event && (event.zrByTouch = true);
    } // function markTriggeredFromLocal(event) {
    //     event && (event.__zrIsFromLocal = true);
    // }
    // function isTriggeredFromLocal(instance, event) {
    //     return !!(event && event.__zrIsFromLocal);
    // }


    function normalizeGlobalEvent(instance, event) {
      // offsetX, offsetY still need to be calculated. They are necessary in the event
      // handlers of the upper applications. Set `true` to force calculate them.
      return normalizeEvent$1(instance.dom, new FakeGlobalEvent(instance, event), true);
    }
    /**
     * Detect whether the given el is in `painterRoot`.
     */


    function isLocalEl(instance, el) {
      var isLocal = false;

      do {
        el = el && el.parentNode;
      } while (el && el.nodeType !== 9 && !(isLocal = el === instance.painterRoot));

      return isLocal;
    }
    /**
     * Make a fake event but not change the original event,
     * becuase the global event probably be used by other
     * listeners not belonging to zrender.
     * @class
     */


    function FakeGlobalEvent(instance, event) {
      this.type = event.type;
      this.target = this.currentTarget = instance.dom;
      this.pointerType = event.pointerType; // Necessray for the force calculation of zrX, zrY

      this.clientX = event.clientX;
      this.clientY = event.clientY; // Because we do not mount global listeners to touch events,
      // we do not copy `targetTouches` and `changedTouches` here.
    }

    var fakeGlobalEventProto = FakeGlobalEvent.prototype; // we make the default methods on the event do nothing,
    // otherwise it is dangerous. See more details in
    // [Drag outside] in `Handler.js`.

    fakeGlobalEventProto.stopPropagation = fakeGlobalEventProto.stopImmediatePropagation = fakeGlobalEventProto.preventDefault = util.noop;
    /**
     * Local DOM Handlers
     * @this {HandlerProxy}
     */

    var localDOMHandlers = {
      mousedown: function (event) {
        event = normalizeEvent$1(this.dom, event);
        this._mayPointerCapture = [event.zrX, event.zrY];
        this.trigger('mousedown', event);
      },
      mousemove: function (event) {
        event = normalizeEvent$1(this.dom, event);
        var downPoint = this._mayPointerCapture;

        if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {
          togglePointerCapture(this, true);
        }

        this.trigger('mousemove', event);
      },
      mouseup: function (event) {
        event = normalizeEvent$1(this.dom, event);
        togglePointerCapture(this, false);
        this.trigger('mouseup', event);
      },
      mouseout: function (event) {
        event = normalizeEvent$1(this.dom, event); // Similarly to the browser did on `document` and touch event,
        // `globalout` will be delayed to final pointer cature release.

        if (this._pointerCapturing) {
          event.zrEventControl = 'no_globalout';
        } // There might be some doms created by upper layer application
        // at the same level of painter.getViewportRoot() (e.g., tooltip
        // dom created by echarts), where 'globalout' event should not
        // be triggered when mouse enters these doms. (But 'mouseout'
        // should be triggered at the original hovered element as usual).


        var element = event.toElement || event.relatedTarget;
        event.zrIsToLocalDOM = isLocalEl(this, element);
        this.trigger('mouseout', event);
      },
      touchstart: function (event) {
        // Default mouse behaviour should not be disabled here.
        // For example, page may needs to be slided.
        event = normalizeEvent$1(this.dom, event);
        markTouch(event);
        this._lastTouchMoment = new Date();
        this.handler.processGesture(event, 'start'); // For consistent event listener for both touch device and mouse device,
        // we simulate "mouseover-->mousedown" in touch device. So we trigger
        // `mousemove` here (to trigger `mouseover` inside), and then trigger
        // `mousedown`.

        localDOMHandlers.mousemove.call(this, event);
        localDOMHandlers.mousedown.call(this, event);
      },
      touchmove: function (event) {
        event = normalizeEvent$1(this.dom, event);
        markTouch(event);
        this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether
        // there is gestrue event, because mouse move and pinch may
        // be used at the same time.

        localDOMHandlers.mousemove.call(this, event);
      },
      touchend: function (event) {
        event = normalizeEvent$1(this.dom, event);
        markTouch(event);
        this.handler.processGesture(event, 'end');
        localDOMHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
        // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
        // we can conveniently implement "hover style" in both PC and touch device just
        // by listening to `mouseover` to add "hover style" and listening to `mouseout`
        // to remove "hover style" on an element, without any additional code for
        // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
        // style" will remain for user view)
        // click event should always be triggered no matter whether
        // there is gestrue event. System click can not be prevented.

        if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
          localDOMHandlers.click.call(this, event);
        }
      },
      pointerdown: function (event) {
        localDOMHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {
        //     this._msGesture.addPointer(event.pointerId);
        // }
      },
      pointermove: function (event) {
        // FIXME
        // pointermove is so sensitive that it always triggered when
        // tap(click) on touch screen, which affect some judgement in
        // upper application. So, we dont support mousemove on MS touch
        // device yet.
        if (!isPointerFromTouch(event)) {
          localDOMHandlers.mousemove.call(this, event);
        }
      },
      pointerup: function (event) {
        localDOMHandlers.mouseup.call(this, event);
      },
      pointerout: function (event) {
        // pointerout will be triggered when tap on touch screen
        // (IE11+/Edge on MS Surface) after click event triggered,
        // which is inconsistent with the mousout behavior we defined
        // in touchend. So we unify them.
        // (check localDOMHandlers.touchend for detailed explanation)
        if (!isPointerFromTouch(event)) {
          localDOMHandlers.mouseout.call(this, event);
        }
      }
    };
    /**
     * Othere DOM UI Event handlers for zr dom.
     * @this {HandlerProxy}
     */

    util.each(['click', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
      localDOMHandlers[name] = function (event) {
        event = normalizeEvent$1(this.dom, event);
        this.trigger(name, event);
      };
    });
    /**
     * DOM UI Event handlers for global page.
     *
     * [Caution]:
     * those handlers should both support in capture phase and bubble phase!
     *
     * @this {HandlerProxy}
     */

    var globalDOMHandlers = {
      pointermove: function (event) {
        // FIXME
        // pointermove is so sensitive that it always triggered when
        // tap(click) on touch screen, which affect some judgement in
        // upper application. So, we dont support mousemove on MS touch
        // device yet.
        if (!isPointerFromTouch(event)) {
          globalDOMHandlers.mousemove.call(this, event);
        }
      },
      pointerup: function (event) {
        globalDOMHandlers.mouseup.call(this, event);
      },
      mousemove: function (event) {
        this.trigger('mousemove', event);
      },
      mouseup: function (event) {
        var pointerCaptureReleasing = this._pointerCapturing;
        togglePointerCapture(this, false);
        this.trigger('mouseup', event);

        if (pointerCaptureReleasing) {
          event.zrEventControl = 'only_globalout';
          this.trigger('mouseout', event);
        }
      }
    };
    /**
     * @param {HandlerProxy} instance
     * @param {DOMHandlerScope} scope
     */

    function mountLocalDOMEventListeners(instance, scope) {
      var domHandlers = scope.domHandlers;

      if (env_1.pointerEventsSupported) {
        // Only IE11+/Edge
        // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
        // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
        // at the same time.
        // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
        // screen, which do not occurs in pointer event.
        // So we use pointer event to both detect touch gesture and mouse behavior.
        util.each(localNativeListenerNames.pointer, function (nativeEventName) {
          mountSingleDOMEventListener(scope, nativeEventName, function (event) {
            // markTriggeredFromLocal(event);
            domHandlers[nativeEventName].call(instance, event);
          });
        }); // FIXME
        // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
        // which does not prevent defuault behavior occasionally (which may cause view port
        // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
        // So we have to not to use MSGesture and not to support touchmove and pinch on MS
        // touch screen. And we only support click behavior on MS touch screen now.
        // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
        // We dont support touch on IE on win7.
        // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
        // if (typeof MSGesture === 'function') {
        //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
        //     dom.addEventListener('MSGestureChange', onMSGestureChange);
        // }
      } else {
        if (env_1.touchEventsSupported) {
          util.each(localNativeListenerNames.touch, function (nativeEventName) {
            mountSingleDOMEventListener(scope, nativeEventName, function (event) {
              // markTriggeredFromLocal(event);
              domHandlers[nativeEventName].call(instance, event);
              setTouchTimer(scope);
            });
          }); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
          // addEventListener(root, 'mouseout', this._mouseoutHandler);
        } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
        // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
        // mouse event can not be handle in those devices.
        // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
        // mouseevent after touch event triggered, see `setTouchTimer`.


        util.each(localNativeListenerNames.mouse, function (nativeEventName) {
          mountSingleDOMEventListener(scope, nativeEventName, function (event) {
            event = getNativeEvent$1(event);

            if (!scope.touching) {
              // markTriggeredFromLocal(event);
              domHandlers[nativeEventName].call(instance, event);
            }
          });
        });
      }
    }
    /**
     * @param {HandlerProxy} instance
     * @param {DOMHandlerScope} scope
     */


    function mountGlobalDOMEventListeners(instance, scope) {
      // Only IE11+/Edge. See the comment in `mountLocalDOMEventListeners`.
      if (env_1.pointerEventsSupported) {
        util.each(globalNativeListenerNames.pointer, mount);
      } // Touch event has implemented "drag outside" so we do not mount global listener for touch event.
      // (see https://www.w3.org/TR/touch-events/#the-touchmove-event)
      // We do not consider "both-support-touch-and-mouse device" for this feature (see the comment of
      // `mountLocalDOMEventListeners`) to avoid bugs util some requirements come.
      else if (!env_1.touchEventsSupported) {
          util.each(globalNativeListenerNames.mouse, mount);
        }

      function mount(nativeEventName) {
        function nativeEventListener(event) {
          event = getNativeEvent$1(event); // See the reason in [Drag outside] in `Handler.js`
          // This checking supports both `useCapture` or not.
          // PENDING: if there is performance issue in some devices,
          // we probably can not use `useCapture` and change a easier
          // to judes whether local (mark).

          if (!isLocalEl(instance, event.target)) {
            event = normalizeGlobalEvent(instance, event);
            scope.domHandlers[nativeEventName].call(instance, event);
          }
        }

        mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {
          capture: true
        } // See [Drag Outside] in `Handler.js`
        );
      }
    }

    function mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {
      scope.mounted[nativeEventName] = listener;
      scope.listenerOpts[nativeEventName] = opt;
      addEventListener$1(scope.domTarget, eventNameFix(nativeEventName), listener, opt);
    }

    function unmountDOMEventListeners(scope) {
      var mounted = scope.mounted;

      for (var nativeEventName in mounted) {
        if (mounted.hasOwnProperty(nativeEventName)) {
          removeEventListener$1(scope.domTarget, eventNameFix(nativeEventName), mounted[nativeEventName], scope.listenerOpts[nativeEventName]);
        }
      }

      scope.mounted = {};
    }
    /**
     * See [Drag Outside] in `Handler.js`.
     * @implement
     * @param {boolean} isPointerCapturing Should never be `null`/`undefined`.
     *        `true`: start to capture pointer if it is not capturing.
     *        `false`: end the capture if it is capturing.
     */


    function togglePointerCapture(instance, isPointerCapturing) {
      instance._mayPointerCapture = null;

      if (globalEventSupported && instance._pointerCapturing ^ isPointerCapturing) {
        instance._pointerCapturing = isPointerCapturing;
        var globalHandlerScope = instance._globalHandlerScope;
        isPointerCapturing ? mountGlobalDOMEventListeners(instance, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);
      }
    }
    /**
     * @inner
     * @class
     */


    function DOMHandlerScope(domTarget, domHandlers) {
      this.domTarget = domTarget;
      this.domHandlers = domHandlers; // Key: eventName, value: mounted handler funcitons.
      // Used for unmount.

      this.mounted = {};
      this.listenerOpts = {};
      this.touchTimer = null;
      this.touching = false;
    }
    /**
     * @public
     * @class
     */


    function HandlerDomProxy(dom, painterRoot) {
      Eventful_1.call(this);
      this.dom = dom;
      this.painterRoot = painterRoot;
      this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);

      if (globalEventSupported) {
        this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);
      }
      /**
       * @type {boolean}
       */


      this._pointerCapturing = false;
      /**
       * @type {Array.<number>} [x, y] or null.
       */

      this._mayPointerCapture = null;
      mountLocalDOMEventListeners(this, this._localHandlerScope);
    }

    var handlerDomProxyProto = HandlerDomProxy.prototype;

    handlerDomProxyProto.dispose = function () {
      unmountDOMEventListeners(this._localHandlerScope);

      if (globalEventSupported) {
        unmountDOMEventListeners(this._globalHandlerScope);
      }
    };

    handlerDomProxyProto.setCursor = function (cursorStyle) {
      this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');
    };

    util.mixin(HandlerDomProxy, Eventful_1);
    var _default$r = HandlerDomProxy;
    var HandlerProxy = _default$r;

    /*!
    * ZRender, a high performance 2d drawing library.
    *
    * Copyright (c) 2013, Baidu Inc.
    * All rights reserved.
    *
    * LICENSE
    * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
    */
    var useVML = !env_1.canvasSupported;
    var painterCtors = {
      canvas: Painter_1
    };
    var instances = {}; // ZRender实例map索引

    /**
     * @type {string}
     */

    var version = '4.2.0';
    /**
     * Initializing a zrender instance
     * @param {HTMLElement} dom
     * @param {Object} [opts]
     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
     * @param {number} [opts.devicePixelRatio]
     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
     * @return {module:zrender/ZRender}
     */

    function init(dom, opts) {
      var zr = new ZRender(guid(), dom, opts);
      instances[zr.id] = zr;
      return zr;
    }
    /**
     * Dispose zrender instance
     * @param {module:zrender/ZRender} zr
     */


    function dispose(zr) {
      if (zr) {
        zr.dispose();
      } else {
        for (var key in instances) {
          if (instances.hasOwnProperty(key)) {
            instances[key].dispose();
          }
        }

        instances = {};
      }

      return this;
    }
    /**
     * Get zrender instance by id
     * @param {string} id zrender instance id
     * @return {module:zrender/ZRender}
     */


    function getInstance(id) {
      return instances[id];
    }

    function registerPainter(name, Ctor) {
      painterCtors[name] = Ctor;
    }

    function delInstance(id) {
      delete instances[id];
    }
    /**
     * @module zrender/ZRender
     */

    /**
     * @constructor
     * @alias module:zrender/ZRender
     * @param {string} id
     * @param {HTMLElement} dom
     * @param {Object} opts
     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
     * @param {number} [opts.devicePixelRatio]
     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
     */


    var ZRender = function (id, dom, opts) {
      opts = opts || {};
      /**
       * @type {HTMLDomElement}
       */

      this.dom = dom;
      /**
       * @type {string}
       */

      this.id = id;
      var self = this;
      var storage = new Storage_1();
      var rendererType = opts.renderer; // TODO WebGL

      if (useVML) {
        if (!painterCtors.vml) {
          throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
        }

        rendererType = 'vml';
      } else if (!rendererType || !painterCtors[rendererType]) {
        rendererType = 'canvas';
      }

      var painter = new painterCtors[rendererType](dom, storage, opts, id);
      this.storage = storage;
      this.painter = painter;
      var handerProxy = !env_1.node && !env_1.worker ? new HandlerProxy(painter.getViewportRoot(), painter.root) : null;
      this.handler = new Handler_1(storage, painter, handerProxy, painter.root);
      /**
       * @type {module:zrender/animation/Animation}
       */

      this.animation = new Animation_1({
        stage: {
          update: util.bind(this.flush, this)
        }
      });
      this.animation.start();
      /**
       * @type {boolean}
       * @private
       */

      this._needsRefresh; // 修改 storage.delFromStorage, 每次删除元素之前删除动画
      // FIXME 有点ugly

      var oldDelFromStorage = storage.delFromStorage;
      var oldAddToStorage = storage.addToStorage;

      storage.delFromStorage = function (el) {
        oldDelFromStorage.call(storage, el);
        el && el.removeSelfFromZr(self);
      };

      storage.addToStorage = function (el) {
        oldAddToStorage.call(storage, el);
        el.addSelfToZr(self);
      };
    };

    ZRender.prototype = {
      constructor: ZRender,

      /**
       * 获取实例唯一标识
       * @return {string}
       */
      getId: function () {
        return this.id;
      },

      /**
       * 添加元素
       * @param  {module:zrender/Element} el
       */
      add: function (el) {
        this.storage.addRoot(el);
        this._needsRefresh = true;
      },

      /**
       * 删除元素
       * @param  {module:zrender/Element} el
       */
      remove: function (el) {
        this.storage.delRoot(el);
        this._needsRefresh = true;
      },

      /**
       * Change configuration of layer
       * @param {string} zLevel
       * @param {Object} config
       * @param {string} [config.clearColor=0] Clear color
       * @param {string} [config.motionBlur=false] If enable motion blur
       * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
      */
      configLayer: function (zLevel, config) {
        if (this.painter.configLayer) {
          this.painter.configLayer(zLevel, config);
        }

        this._needsRefresh = true;
      },

      /**
       * Set background color
       * @param {string} backgroundColor
       */
      setBackgroundColor: function (backgroundColor) {
        if (this.painter.setBackgroundColor) {
          this.painter.setBackgroundColor(backgroundColor);
        }

        this._needsRefresh = true;
      },

      /**
       * Repaint the canvas immediately
       */
      refreshImmediately: function () {
        // var start = new Date();
        // Clear needsRefresh ahead to avoid something wrong happens in refresh
        // Or it will cause zrender refreshes again and again.
        this._needsRefresh = this._needsRefreshHover = false;
        this.painter.refresh(); // Avoid trigger zr.refresh in Element#beforeUpdate hook

        this._needsRefresh = this._needsRefreshHover = false; // var end = new Date();
        // var log = document.getElementById('log');
        // if (log) {
        //     log.innerHTML = log.innerHTML + '<br>' + (end - start);
        // }
      },

      /**
       * Mark and repaint the canvas in the next frame of browser
       */
      refresh: function () {
        this._needsRefresh = true;
      },

      /**
       * Perform all refresh
       */
      flush: function () {
        var triggerRendered;

        if (this._needsRefresh) {
          triggerRendered = true;
          this.refreshImmediately();
        }

        if (this._needsRefreshHover) {
          triggerRendered = true;
          this.refreshHoverImmediately();
        }

        triggerRendered && this.trigger('rendered');
      },

      /**
       * Add element to hover layer
       * @param  {module:zrender/Element} el
       * @param {Object} style
       */
      addHover: function (el, style) {
        if (this.painter.addHover) {
          var elMirror = this.painter.addHover(el, style);
          this.refreshHover();
          return elMirror;
        }
      },

      /**
       * Add element from hover layer
       * @param  {module:zrender/Element} el
       */
      removeHover: function (el) {
        if (this.painter.removeHover) {
          this.painter.removeHover(el);
          this.refreshHover();
        }
      },

      /**
       * Clear all hover elements in hover layer
       * @param  {module:zrender/Element} el
       */
      clearHover: function () {
        if (this.painter.clearHover) {
          this.painter.clearHover();
          this.refreshHover();
        }
      },

      /**
       * Refresh hover in next frame
       */
      refreshHover: function () {
        this._needsRefreshHover = true;
      },

      /**
       * Refresh hover immediately
       */
      refreshHoverImmediately: function () {
        this._needsRefreshHover = false;
        this.painter.refreshHover && this.painter.refreshHover();
      },

      /**
       * Resize the canvas.
       * Should be invoked when container size is changed
       * @param {Object} [opts]
       * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
       * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
       */
      resize: function (opts) {
        opts = opts || {};
        this.painter.resize(opts.width, opts.height);
        this.handler.resize();
      },

      /**
       * Stop and clear all animation immediately
       */
      clearAnimation: function () {
        this.animation.clear();
      },

      /**
       * Get container width
       */
      getWidth: function () {
        return this.painter.getWidth();
      },

      /**
       * Get container height
       */
      getHeight: function () {
        return this.painter.getHeight();
      },

      /**
       * Export the canvas as Base64 URL
       * @param {string} type
       * @param {string} [backgroundColor='#fff']
       * @return {string} Base64 URL
       */
      // toDataURL: function(type, backgroundColor) {
      //     return this.painter.getRenderedCanvas({
      //         backgroundColor: backgroundColor
      //     }).toDataURL(type);
      // },

      /**
       * Converting a path to image.
       * It has much better performance of drawing image rather than drawing a vector path.
       * @param {module:zrender/graphic/Path} e
       * @param {number} width
       * @param {number} height
       */
      pathToImage: function (e, dpr) {
        return this.painter.pathToImage(e, dpr);
      },

      /**
       * Set default cursor
       * @param {string} [cursorStyle='default'] 例如 crosshair
       */
      setCursorStyle: function (cursorStyle) {
        this.handler.setCursorStyle(cursorStyle);
      },

      /**
       * Find hovered element
       * @param {number} x
       * @param {number} y
       * @return {Object} {target, topTarget}
       */
      findHover: function (x, y) {
        return this.handler.findHover(x, y);
      },

      /**
       * Bind event
       *
       * @param {string} eventName Event name
       * @param {Function} eventHandler Handler function
       * @param {Object} [context] Context object
       */
      on: function (eventName, eventHandler, context) {
        this.handler.on(eventName, eventHandler, context);
      },

      /**
       * Unbind event
       * @param {string} eventName Event name
       * @param {Function} [eventHandler] Handler function
       */
      off: function (eventName, eventHandler) {
        this.handler.off(eventName, eventHandler);
      },

      /**
       * Trigger event manually
       *
       * @param {string} eventName Event name
       * @param {event=} event Event object
       */
      trigger: function (eventName, event) {
        this.handler.trigger(eventName, event);
      },

      /**
       * Clear all objects and the canvas.
       */
      clear: function () {
        this.storage.delRoot();
        this.painter.clear();
      },

      /**
       * Dispose self.
       */
      dispose: function () {
        this.animation.stop();
        this.clear();
        this.storage.dispose();
        this.painter.dispose();
        this.handler.dispose();
        this.animation = this.storage = this.painter = this.handler = null;
        delInstance(this.id);
      }
    };
    var version_1 = version;
    var init_1 = init;
    var dispose_1 = dispose;
    var getInstance_1 = getInstance;
    var registerPainter_1 = registerPainter;

    var zrender = {
    	version: version_1,
    	init: init_1,
    	dispose: dispose_1,
    	getInstance: getInstance_1,
    	registerPainter: registerPainter_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$2 = util.each;
    var isObject$3 = util.isObject;
    var isArray$1 = util.isArray;
    /**
     * Make the name displayable. But we should
     * make sure it is not duplicated with user
     * specified name, so use '\0';
     */

    var DUMMY_COMPONENT_NAME_PREFIX = 'series\0';
    /**
     * If value is not array, then translate it to array.
     * @param  {*} value
     * @return {Array} [value] or value
     */

    function normalizeToArray(value) {
      return value instanceof Array ? value : value == null ? [] : [value];
    }
    /**
     * Sync default option between normal and emphasis like `position` and `show`
     * In case some one will write code like
     *     label: {
     *          show: false,
     *          position: 'outside',
     *          fontSize: 18
     *     },
     *     emphasis: {
     *          label: { show: true }
     *     }
     * @param {Object} opt
     * @param {string} key
     * @param {Array.<string>} subOpts
     */


    function defaultEmphasis(opt, key, subOpts) {
      // Caution: performance sensitive.
      if (opt) {
        opt[key] = opt[key] || {};
        opt.emphasis = opt.emphasis || {};
        opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal

        for (var i = 0, len = subOpts.length; i < len; i++) {
          var subOptName = subOpts[i];

          if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {
            opt.emphasis[key][subOptName] = opt[key][subOptName];
          }
        }
      }
    }

    var TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([
    //     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',
    //     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',
    //     // FIXME: deprecated, check and remove it.
    //     'textStyle'
    // ]);

    /**
     * The method do not ensure performance.
     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
     * This helper method retieves value from data.
     * @param {string|number|Date|Array|Object} dataItem
     * @return {number|string|Date|Array.<number|string|Date>}
     */

    function getDataItemValue(dataItem) {
      return isObject$3(dataItem) && !isArray$1(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;
    }
    /**
     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
     * This helper method determine if dataItem has extra option besides value
     * @param {string|number|Date|Array|Object} dataItem
     */


    function isDataItemOption(dataItem) {
      return isObject$3(dataItem) && !(dataItem instanceof Array); // // markLine data can be array
      // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
    }
    /**
     * Mapping to exists for merge.
     *
     * @public
     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
     * @param {Object|Array.<Object>} newCptOptions
     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
     *                          index of which is the same as exists.
     */


    function mappingToExists(exists, newCptOptions) {
      // Mapping by the order by original option (but not order of
      // new option) in merge mode. Because we should ensure
      // some specified index (like xAxisIndex) is consistent with
      // original option, which is easy to understand, espatially in
      // media query. And in most case, merge option is used to
      // update partial option but not be expected to change order.
      newCptOptions = (newCptOptions || []).slice();
      var result = util.map(exists || [], function (obj, index) {
        return {
          exist: obj
        };
      }); // Mapping by id or name if specified.

      each$2(newCptOptions, function (cptOption, index) {
        if (!isObject$3(cptOption)) {
          return;
        } // id has highest priority.


        for (var i = 0; i < result.length; i++) {
          if (!result[i].option // Consider name: two map to one.
          && cptOption.id != null && result[i].exist.id === cptOption.id + '') {
            result[i].option = cptOption;
            newCptOptions[index] = null;
            return;
          }
        }

        for (var i = 0; i < result.length; i++) {
          var exist = result[i].exist;

          if (!result[i].option // Consider name: two map to one.
          // Can not match when both ids exist but different.
          && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {
            result[i].option = cptOption;
            newCptOptions[index] = null;
            return;
          }
        }
      }); // Otherwise mapping by index.

      each$2(newCptOptions, function (cptOption, index) {
        if (!isObject$3(cptOption)) {
          return;
        }

        var i = 0;

        for (; i < result.length; i++) {
          var exist = result[i].exist;

          if (!result[i].option // Existing model that already has id should be able to
          // mapped to (because after mapping performed model may
          // be assigned with a id, whish should not affect next
          // mapping), except those has inner id.
          && !isIdInner(exist) // Caution:
          // Do not overwrite id. But name can be overwritten,
          // because axis use name as 'show label text'.
          // 'exist' always has id and name and we dont
          // need to check it.
          && cptOption.id == null) {
            result[i].option = cptOption;
            break;
          }
        }

        if (i >= result.length) {
          result.push({
            option: cptOption
          });
        }
      });
      return result;
    }
    /**
     * Make id and name for mapping result (result of mappingToExists)
     * into `keyInfo` field.
     *
     * @public
     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
     *                          which order is the same as exists.
     * @return {Array.<Object>} The input.
     */


    function makeIdAndName(mapResult) {
      // We use this id to hash component models and view instances
      // in echarts. id can be specified by user, or auto generated.
      // The id generation rule ensures new view instance are able
      // to mapped to old instance when setOption are called in
      // no-merge mode. So we generate model id by name and plus
      // type in view id.
      // name can be duplicated among components, which is convenient
      // to specify multi components (like series) by one name.
      // Ensure that each id is distinct.
      var idMap = util.createHashMap();
      each$2(mapResult, function (item, index) {
        var existCpt = item.exist;
        existCpt && idMap.set(existCpt.id, item);
      });
      each$2(mapResult, function (item, index) {
        var opt = item.option;
        util.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));
        opt && opt.id != null && idMap.set(opt.id, item);
        !item.keyInfo && (item.keyInfo = {});
      }); // Make name and id.

      each$2(mapResult, function (item, index) {
        var existCpt = item.exist;
        var opt = item.option;
        var keyInfo = item.keyInfo;

        if (!isObject$3(opt)) {
          return;
        } // name can be overwitten. Consider case: axis.name = '20km'.
        // But id generated by name will not be changed, which affect
        // only in that case: setOption with 'not merge mode' and view
        // instance will be recreated, which can be accepted.


        keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,
        // because name may be used like in color pallet.
        : DUMMY_COMPONENT_NAME_PREFIX + index;

        if (existCpt) {
          keyInfo.id = existCpt.id;
        } else if (opt.id != null) {
          keyInfo.id = opt.id + '';
        } else {
          // Consider this situatoin:
          //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
          //  optionB [{..}, {name: 'a'}, {name: 'a'}]
          // Series with the same name between optionA and optionB
          // should be mapped.
          var idNum = 0;

          do {
            keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
          } while (idMap.get(keyInfo.id));
        }

        idMap.set(keyInfo.id, item);
      });
    }

    function isNameSpecified(componentModel) {
      var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.

      return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));
    }
    /**
     * @public
     * @param {Object} cptOption
     * @return {boolean}
     */


    function isIdInner(cptOption) {
      return isObject$3(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
    }
    /**
     * A helper for removing duplicate items between batchA and batchB,
     * and in themselves, and categorize by series.
     *
     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
     */


    function compressBatches(batchA, batchB) {
      var mapA = {};
      var mapB = {};
      makeMap(batchA || [], mapA);
      makeMap(batchB || [], mapB, mapA);
      return [mapToArray(mapA), mapToArray(mapB)];

      function makeMap(sourceBatch, map, otherMap) {
        for (var i = 0, len = sourceBatch.length; i < len; i++) {
          var seriesId = sourceBatch[i].seriesId;
          var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);
          var otherDataIndices = otherMap && otherMap[seriesId];

          for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
            var dataIndex = dataIndices[j];

            if (otherDataIndices && otherDataIndices[dataIndex]) {
              otherDataIndices[dataIndex] = null;
            } else {
              (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
            }
          }
        }
      }

      function mapToArray(map, isData) {
        var result = [];

        for (var i in map) {
          if (map.hasOwnProperty(i) && map[i] != null) {
            if (isData) {
              result.push(+i);
            } else {
              var dataIndices = mapToArray(map[i], true);
              dataIndices.length && result.push({
                seriesId: i,
                dataIndex: dataIndices
              });
            }
          }
        }

        return result;
      }
    }
    /**
     * @param {module:echarts/data/List} data
     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
     *                         each of which can be Array or primary type.
     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
     */


    function queryDataIndex(data, payload) {
      if (payload.dataIndexInside != null) {
        return payload.dataIndexInside;
      } else if (payload.dataIndex != null) {
        return util.isArray(payload.dataIndex) ? util.map(payload.dataIndex, function (value) {
          return data.indexOfRawIndex(value);
        }) : data.indexOfRawIndex(payload.dataIndex);
      } else if (payload.name != null) {
        return util.isArray(payload.name) ? util.map(payload.name, function (value) {
          return data.indexOfName(value);
        }) : data.indexOfName(payload.name);
      }
    }
    /**
     * Enable property storage to any host object.
     * Notice: Serialization is not supported.
     *
     * For example:
     * var inner = zrUitl.makeInner();
     *
     * function some1(hostObj) {
     *      inner(hostObj).someProperty = 1212;
     *      ...
     * }
     * function some2() {
     *      var fields = inner(this);
     *      fields.someProperty1 = 1212;
     *      fields.someProperty2 = 'xx';
     *      ...
     * }
     *
     * @return {Function}
     */


    function makeInner() {
      // Consider different scope by es module import.
      var key = '__\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);
      return function (hostObj) {
        return hostObj[key] || (hostObj[key] = {});
      };
    }

    var innerUniqueIndex = 0;
    /**
     * @param {module:echarts/model/Global} ecModel
     * @param {string|Object} finder
     *        If string, e.g., 'geo', means {geoIndex: 0}.
     *        If Object, could contain some of these properties below:
     *        {
     *            seriesIndex, seriesId, seriesName,
     *            geoIndex, geoId, geoName,
     *            bmapIndex, bmapId, bmapName,
     *            xAxisIndex, xAxisId, xAxisName,
     *            yAxisIndex, yAxisId, yAxisName,
     *            gridIndex, gridId, gridName,
     *            ... (can be extended)
     *        }
     *        Each properties can be number|string|Array.<number>|Array.<string>
     *        For example, a finder could be
     *        {
     *            seriesIndex: 3,
     *            geoId: ['aa', 'cc'],
     *            gridName: ['xx', 'rr']
     *        }
     *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)
     *        If nothing or null/undefined specified, return nothing.
     * @param {Object} [opt]
     * @param {string} [opt.defaultMainType]
     * @param {Array.<string>} [opt.includeMainTypes]
     * @return {Object} result like:
     *        {
     *            seriesModels: [seriesModel1, seriesModel2],
     *            seriesModel: seriesModel1, // The first model
     *            geoModels: [geoModel1, geoModel2],
     *            geoModel: geoModel1, // The first model
     *            ...
     *        }
     */

    function parseFinder(ecModel, finder, opt) {
      if (util.isString(finder)) {
        var obj = {};
        obj[finder + 'Index'] = 0;
        finder = obj;
      }

      var defaultMainType = opt && opt.defaultMainType;

      if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {
        finder[defaultMainType + 'Index'] = 0;
      }

      var result = {};
      each$2(finder, function (value, key) {
        var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.

        if (key === 'dataIndex' || key === 'dataIndexInside') {
          result[key] = value;
          return;
        }

        var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
        var mainType = parsedKey[1];
        var queryType = (parsedKey[2] || '').toLowerCase();

        if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && util.indexOf(opt.includeMainTypes, mainType) < 0) {
          return;
        }

        var queryParam = {
          mainType: mainType
        };

        if (queryType !== 'index' || value !== 'all') {
          queryParam[queryType] = value;
        }

        var models = ecModel.queryComponents(queryParam);
        result[mainType + 'Models'] = models;
        result[mainType + 'Model'] = models[0];
      });
      return result;
    }

    function has(obj, prop) {
      return obj && obj.hasOwnProperty(prop);
    }

    function setAttribute(dom, key, value) {
      dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;
    }

    function getAttribute(dom, key) {
      return dom.getAttribute ? dom.getAttribute(key) : dom[key];
    }

    function getTooltipRenderMode(renderModeOption) {
      if (renderModeOption === 'auto') {
        // Using html when `document` exists, use richText otherwise
        return env_1.domSupported ? 'html' : 'richText';
      } else {
        return renderModeOption || 'html';
      }
    }
    /**
     * Group a list by key.
     *
     * @param {Array} array
     * @param {Function} getKey
     *        param {*} Array item
     *        return {string} key
     * @return {Object} Result
     *        {Array}: keys,
     *        {module:zrender/core/util/HashMap} buckets: {key -> Array}
     */


    function groupData(array, getKey) {
      var buckets = util.createHashMap();
      var keys = [];
      util.each(array, function (item) {
        var key = getKey(item);
        (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);
      });
      return {
        keys: keys,
        buckets: buckets
      };
    }

    var normalizeToArray_1 = normalizeToArray;
    var defaultEmphasis_1 = defaultEmphasis;
    var TEXT_STYLE_OPTIONS_1 = TEXT_STYLE_OPTIONS;
    var getDataItemValue_1 = getDataItemValue;
    var isDataItemOption_1 = isDataItemOption;
    var mappingToExists_1 = mappingToExists;
    var makeIdAndName_1 = makeIdAndName;
    var isNameSpecified_1 = isNameSpecified;
    var isIdInner_1 = isIdInner;
    var compressBatches_1 = compressBatches;
    var queryDataIndex_1 = queryDataIndex;
    var makeInner_1 = makeInner;
    var parseFinder_1 = parseFinder;
    var setAttribute_1 = setAttribute;
    var getAttribute_1 = getAttribute;
    var getTooltipRenderMode_1 = getTooltipRenderMode;
    var groupData_1 = groupData;

    var model = {
    	normalizeToArray: normalizeToArray_1,
    	defaultEmphasis: defaultEmphasis_1,
    	TEXT_STYLE_OPTIONS: TEXT_STYLE_OPTIONS_1,
    	getDataItemValue: getDataItemValue_1,
    	isDataItemOption: isDataItemOption_1,
    	mappingToExists: mappingToExists_1,
    	makeIdAndName: makeIdAndName_1,
    	isNameSpecified: isNameSpecified_1,
    	isIdInner: isIdInner_1,
    	compressBatches: compressBatches_1,
    	queryDataIndex: queryDataIndex_1,
    	makeInner: makeInner_1,
    	parseFinder: parseFinder_1,
    	setAttribute: setAttribute_1,
    	getAttribute: getAttribute_1,
    	getTooltipRenderMode: getTooltipRenderMode_1,
    	groupData: groupData_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var TYPE_DELIMITER = '.';
    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
    /**
     * Notice, parseClassType('') should returns {main: '', sub: ''}
     * @public
     */

    function parseClassType(componentType) {
      var ret = {
        main: '',
        sub: ''
      };

      if (componentType) {
        componentType = componentType.split(TYPE_DELIMITER);
        ret.main = componentType[0] || '';
        ret.sub = componentType[1] || '';
      }

      return ret;
    }
    /**
     * @public
     */


    function checkClassType(componentType) {
      util.assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
    }
    /**
     * @public
     */


    function enableClassExtend(RootClass, mandatoryMethods) {
      RootClass.$constructor = RootClass;

      RootClass.extend = function (proto) {
        var superClass = this;

        var ExtendedClass = function () {
          if (!proto.$constructor) {
            superClass.apply(this, arguments);
          } else {
            proto.$constructor.apply(this, arguments);
          }
        };

        util.extend(ExtendedClass.prototype, proto);
        ExtendedClass.extend = this.extend;
        ExtendedClass.superCall = superCall;
        ExtendedClass.superApply = superApply;
        util.inherits(ExtendedClass, this);
        ExtendedClass.superClass = superClass;
        return ExtendedClass;
      };
    }

    var classBase = 0;
    /**
     * Can not use instanceof, consider different scope by
     * cross domain or es module import in ec extensions.
     * Mount a method "isInstance()" to Clz.
     */

    function enableClassCheck(Clz) {
      var classAttr = ['__\0is_clz', classBase++, Math.random().toFixed(3)].join('_');
      Clz.prototype[classAttr] = true;

      Clz.isInstance = function (obj) {
        return !!(obj && obj[classAttr]);
      };
    } // superCall should have class info, which can not be fetch from 'this'.
    // Consider this case:
    // class A has method f,
    // class B inherits class A, overrides method f, f call superApply('f'),
    // class C inherits class B, do not overrides method f,
    // then when method of class C is called, dead loop occured.


    function superCall(context, methodName) {
      var args = util.slice(arguments, 2);
      return this.superClass.prototype[methodName].apply(context, args);
    }

    function superApply(context, methodName, args) {
      return this.superClass.prototype[methodName].apply(context, args);
    }
    /**
     * @param {Object} entity
     * @param {Object} options
     * @param {boolean} [options.registerWhenExtend]
     * @public
     */


    function enableClassManagement(entity, options) {
      options = options || {};
      /**
       * Component model classes
       * key: componentType,
       * value:
       *     componentClass, when componentType is 'xxx'
       *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
       * @type {Object}
       */

      var storage = {};

      entity.registerClass = function (Clazz, componentType) {
        if (componentType) {
          checkClassType(componentType);
          componentType = parseClassType(componentType);

          if (!componentType.sub) {
            storage[componentType.main] = Clazz;
          } else if (componentType.sub !== IS_CONTAINER) {
            var container = makeContainer(componentType);
            container[componentType.sub] = Clazz;
          }
        }

        return Clazz;
      };

      entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
        var Clazz = storage[componentMainType];

        if (Clazz && Clazz[IS_CONTAINER]) {
          Clazz = subType ? Clazz[subType] : null;
        }

        if (throwWhenNotFound && !Clazz) {
          throw new Error(!subType ? componentMainType + '.' + 'type should be specified.' : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.');
        }

        return Clazz;
      };

      entity.getClassesByMainType = function (componentType) {
        componentType = parseClassType(componentType);
        var result = [];
        var obj = storage[componentType.main];

        if (obj && obj[IS_CONTAINER]) {
          util.each(obj, function (o, type) {
            type !== IS_CONTAINER && result.push(o);
          });
        } else {
          result.push(obj);
        }

        return result;
      };

      entity.hasClass = function (componentType) {
        // Just consider componentType.main.
        componentType = parseClassType(componentType);
        return !!storage[componentType.main];
      };
      /**
       * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
       */


      entity.getAllClassMainTypes = function () {
        var types = [];
        util.each(storage, function (obj, type) {
          types.push(type);
        });
        return types;
      };
      /**
       * If a main type is container and has sub types
       * @param  {string}  mainType
       * @return {boolean}
       */


      entity.hasSubTypes = function (componentType) {
        componentType = parseClassType(componentType);
        var obj = storage[componentType.main];
        return obj && obj[IS_CONTAINER];
      };

      entity.parseClassType = parseClassType;

      function makeContainer(componentType) {
        var container = storage[componentType.main];

        if (!container || !container[IS_CONTAINER]) {
          container = storage[componentType.main] = {};
          container[IS_CONTAINER] = true;
        }

        return container;
      }

      if (options.registerWhenExtend) {
        var originalExtend = entity.extend;

        if (originalExtend) {
          entity.extend = function (proto) {
            var ExtendedClass = originalExtend.call(this, proto);
            return entity.registerClass(ExtendedClass, proto.type);
          };
        }
      }

      return entity;
    }
    /**
     * @param {string|Array.<string>} properties
     */


    function setReadOnly(obj, properties) {// FIXME It seems broken in IE8 simulation of IE11
      // if (!zrUtil.isArray(properties)) {
      //     properties = properties != null ? [properties] : [];
      // }
      // zrUtil.each(properties, function (prop) {
      //     var value = obj[prop];
      //     Object.defineProperty
      //         && Object.defineProperty(obj, prop, {
      //             value: value, writable: false
      //         });
      //     zrUtil.isArray(obj[prop])
      //         && Object.freeze
      //         && Object.freeze(obj[prop]);
      // });
    }

    var parseClassType_1 = parseClassType;
    var enableClassExtend_1 = enableClassExtend;
    var enableClassCheck_1 = enableClassCheck;
    var enableClassManagement_1 = enableClassManagement;
    var setReadOnly_1 = setReadOnly;

    var clazz = {
    	parseClassType: parseClassType_1,
    	enableClassExtend: enableClassExtend_1,
    	enableClassCheck: enableClassCheck_1,
    	enableClassManagement: enableClassManagement_1,
    	setReadOnly: setReadOnly_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // TODO Parse shadow style
    // TODO Only shallow path support
    function _default$s(properties) {
      // Normalize
      for (var i = 0; i < properties.length; i++) {
        if (!properties[i][1]) {
          properties[i][1] = properties[i][0];
        }
      }

      return function (model, excludes, includes) {
        var style = {};

        for (var i = 0; i < properties.length; i++) {
          var propName = properties[i][1];

          if (excludes && util.indexOf(excludes, propName) >= 0 || includes && util.indexOf(includes, propName) < 0) {
            continue;
          }

          var val = model.getShallow(propName);

          if (val != null) {
            style[properties[i][0]] = val;
          }
        }

        return style;
      };
    }

    var makeStyleMapper = _default$s;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var getLineStyle = makeStyleMapper([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
    var _default$t = {
      getLineStyle: function (excludes) {
        var style = getLineStyle(this, excludes); // Always set lineDash whether dashed, otherwise we can not
        // erase the previous style when assigning to el.style.

        style.lineDash = this.getLineDash(style.lineWidth);
        return style;
      },
      getLineDash: function (lineWidth) {
        if (lineWidth == null) {
          lineWidth = 1;
        }

        var lineType = this.get('type');
        var dotSize = Math.max(lineWidth, 2);
        var dashSize = lineWidth * 4;
        return lineType === 'solid' || lineType == null ? // Use `false` but not `null` for the solid line here, because `null` might be
        // ignored when assigning to `el.style`. e.g., when setting `lineStyle.type` as
        // `'dashed'` and `emphasis.lineStyle.type` as `'solid'` in graph series, the
        // `lineDash` gotten form the latter one is not able to erase that from the former
        // one if using `null` here according to the emhpsis strategy in `util/graphic.js`.
        false : lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize];
      }
    };
    var lineStyle = _default$t;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var getAreaStyle = makeStyleMapper([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']]);
    var _default$u = {
      getAreaStyle: function (excludes, includes) {
        return getAreaStyle(this, excludes, includes);
      }
    };
    var areaStyle = _default$u;

    var v2Create = vector.create;
    var v2DistSquare = vector.distSquare;

    /**
     * 曲线辅助模块
     * @module zrender/core/curve
     * @author pissang(https://www.github.com/pissang)
     */
    var mathPow = Math.pow;
    var mathSqrt = Math.sqrt;
    var EPSILON$1 = 1e-8;
    var EPSILON_NUMERIC = 1e-4;
    var THREE_SQRT = mathSqrt(3);
    var ONE_THIRD = 1 / 3; // 临时变量

    var _v0 = v2Create();

    var _v1 = v2Create();

    var _v2 = v2Create();

    function isAroundZero(val) {
      return val > -EPSILON$1 && val < EPSILON$1;
    }

    function isNotAroundZero$1(val) {
      return val > EPSILON$1 || val < -EPSILON$1;
    }
    /**
     * 计算三次贝塞尔值
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} p3
     * @param  {number} t
     * @return {number}
     */


    function cubicAt(p0, p1, p2, p3, t) {
      var onet = 1 - t;
      return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
    }
    /**
     * 计算三次贝塞尔导数值
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} p3
     * @param  {number} t
     * @return {number}
     */


    function cubicDerivativeAt(p0, p1, p2, p3, t) {
      var onet = 1 - t;
      return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
    }
    /**
     * 计算三次贝塞尔方程根，使用盛金公式
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} p3
     * @param  {number} val
     * @param  {Array.<number>} roots
     * @return {number} 有效根数目
     */


    function cubicRootAt(p0, p1, p2, p3, val, roots) {
      // Evaluate roots of cubic functions
      var a = p3 + 3 * (p1 - p2) - p0;
      var b = 3 * (p2 - p1 * 2 + p0);
      var c = 3 * (p1 - p0);
      var d = p0 - val;
      var A = b * b - 3 * a * c;
      var B = b * c - 9 * a * d;
      var C = c * c - 3 * b * d;
      var n = 0;

      if (isAroundZero(A) && isAroundZero(B)) {
        if (isAroundZero(b)) {
          roots[0] = 0;
        } else {
          var t1 = -c / b; //t1, t2, t3, b is not zero

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }
        }
      } else {
        var disc = B * B - 4 * A * C;

        if (isAroundZero(disc)) {
          var K = B / A;
          var t1 = -b / a + K; // t1, a is not zero

          var t2 = -K / 2; // t2, t3

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }

          if (t2 >= 0 && t2 <= 1) {
            roots[n++] = t2;
          }
        } else if (disc > 0) {
          var discSqrt = mathSqrt(disc);
          var Y1 = A * b + 1.5 * a * (-B + discSqrt);
          var Y2 = A * b + 1.5 * a * (-B - discSqrt);

          if (Y1 < 0) {
            Y1 = -mathPow(-Y1, ONE_THIRD);
          } else {
            Y1 = mathPow(Y1, ONE_THIRD);
          }

          if (Y2 < 0) {
            Y2 = -mathPow(-Y2, ONE_THIRD);
          } else {
            Y2 = mathPow(Y2, ONE_THIRD);
          }

          var t1 = (-b - (Y1 + Y2)) / (3 * a);

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }
        } else {
          var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
          var theta = Math.acos(T) / 3;
          var ASqrt = mathSqrt(A);
          var tmp = Math.cos(theta);
          var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
          var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
          var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }

          if (t2 >= 0 && t2 <= 1) {
            roots[n++] = t2;
          }

          if (t3 >= 0 && t3 <= 1) {
            roots[n++] = t3;
          }
        }
      }

      return n;
    }
    /**
     * 计算三次贝塞尔方程极限值的位置
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} p3
     * @param  {Array.<number>} extrema
     * @return {number} 有效数目
     */


    function cubicExtrema(p0, p1, p2, p3, extrema) {
      var b = 6 * p2 - 12 * p1 + 6 * p0;
      var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
      var c = 3 * p1 - 3 * p0;
      var n = 0;

      if (isAroundZero(a)) {
        if (isNotAroundZero$1(b)) {
          var t1 = -c / b;

          if (t1 >= 0 && t1 <= 1) {
            extrema[n++] = t1;
          }
        }
      } else {
        var disc = b * b - 4 * a * c;

        if (isAroundZero(disc)) {
          extrema[0] = -b / (2 * a);
        } else if (disc > 0) {
          var discSqrt = mathSqrt(disc);
          var t1 = (-b + discSqrt) / (2 * a);
          var t2 = (-b - discSqrt) / (2 * a);

          if (t1 >= 0 && t1 <= 1) {
            extrema[n++] = t1;
          }

          if (t2 >= 0 && t2 <= 1) {
            extrema[n++] = t2;
          }
        }
      }

      return n;
    }
    /**
     * 细分三次贝塞尔曲线
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} p3
     * @param  {number} t
     * @param  {Array.<number>} out
     */


    function cubicSubdivide(p0, p1, p2, p3, t, out) {
      var p01 = (p1 - p0) * t + p0;
      var p12 = (p2 - p1) * t + p1;
      var p23 = (p3 - p2) * t + p2;
      var p012 = (p12 - p01) * t + p01;
      var p123 = (p23 - p12) * t + p12;
      var p0123 = (p123 - p012) * t + p012; // Seg0

      out[0] = p0;
      out[1] = p01;
      out[2] = p012;
      out[3] = p0123; // Seg1

      out[4] = p0123;
      out[5] = p123;
      out[6] = p23;
      out[7] = p3;
    }
    /**
     * 投射点到三次贝塞尔曲线上，返回投射距离。
     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number} x3
     * @param {number} y3
     * @param {number} x
     * @param {number} y
     * @param {Array.<number>} [out] 投射点
     * @return {number}
     */


    function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
      // http://pomax.github.io/bezierinfo/#projections
      var t;
      var interval = 0.005;
      var d = Infinity;
      var prev;
      var next;
      var d1;
      var d2;
      _v0[0] = x;
      _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
      // PENDING

      for (var _t = 0; _t < 1; _t += 0.05) {
        _v1[0] = cubicAt(x0, x1, x2, x3, _t);
        _v1[1] = cubicAt(y0, y1, y2, y3, _t);
        d1 = v2DistSquare(_v0, _v1);

        if (d1 < d) {
          t = _t;
          d = d1;
        }
      }

      d = Infinity; // At most 32 iteration

      for (var i = 0; i < 32; i++) {
        if (interval < EPSILON_NUMERIC) {
          break;
        }

        prev = t - interval;
        next = t + interval; // t - interval

        _v1[0] = cubicAt(x0, x1, x2, x3, prev);
        _v1[1] = cubicAt(y0, y1, y2, y3, prev);
        d1 = v2DistSquare(_v1, _v0);

        if (prev >= 0 && d1 < d) {
          t = prev;
          d = d1;
        } else {
          // t + interval
          _v2[0] = cubicAt(x0, x1, x2, x3, next);
          _v2[1] = cubicAt(y0, y1, y2, y3, next);
          d2 = v2DistSquare(_v2, _v0);

          if (next <= 1 && d2 < d) {
            t = next;
            d = d2;
          } else {
            interval *= 0.5;
          }
        }
      } // t


      if (out) {
        out[0] = cubicAt(x0, x1, x2, x3, t);
        out[1] = cubicAt(y0, y1, y2, y3, t);
      } // console.log(interval, i);


      return mathSqrt(d);
    }
    /**
     * 计算二次方贝塞尔值
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} t
     * @return {number}
     */


    function quadraticAt(p0, p1, p2, t) {
      var onet = 1 - t;
      return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
    }
    /**
     * 计算二次方贝塞尔导数值
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} t
     * @return {number}
     */


    function quadraticDerivativeAt(p0, p1, p2, t) {
      return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
    }
    /**
     * 计算二次方贝塞尔方程根
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} t
     * @param  {Array.<number>} roots
     * @return {number} 有效根数目
     */


    function quadraticRootAt(p0, p1, p2, val, roots) {
      var a = p0 - 2 * p1 + p2;
      var b = 2 * (p1 - p0);
      var c = p0 - val;
      var n = 0;

      if (isAroundZero(a)) {
        if (isNotAroundZero$1(b)) {
          var t1 = -c / b;

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }
        }
      } else {
        var disc = b * b - 4 * a * c;

        if (isAroundZero(disc)) {
          var t1 = -b / (2 * a);

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }
        } else if (disc > 0) {
          var discSqrt = mathSqrt(disc);
          var t1 = (-b + discSqrt) / (2 * a);
          var t2 = (-b - discSqrt) / (2 * a);

          if (t1 >= 0 && t1 <= 1) {
            roots[n++] = t1;
          }

          if (t2 >= 0 && t2 <= 1) {
            roots[n++] = t2;
          }
        }
      }

      return n;
    }
    /**
     * 计算二次贝塞尔方程极限值
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @return {number}
     */


    function quadraticExtremum(p0, p1, p2) {
      var divider = p0 + p2 - 2 * p1;

      if (divider === 0) {
        // p1 is center of p0 and p2
        return 0.5;
      } else {
        return (p0 - p1) / divider;
      }
    }
    /**
     * 细分二次贝塞尔曲线
     * @memberOf module:zrender/core/curve
     * @param  {number} p0
     * @param  {number} p1
     * @param  {number} p2
     * @param  {number} t
     * @param  {Array.<number>} out
     */


    function quadraticSubdivide(p0, p1, p2, t, out) {
      var p01 = (p1 - p0) * t + p0;
      var p12 = (p2 - p1) * t + p1;
      var p012 = (p12 - p01) * t + p01; // Seg0

      out[0] = p0;
      out[1] = p01;
      out[2] = p012; // Seg1

      out[3] = p012;
      out[4] = p12;
      out[5] = p2;
    }
    /**
     * 投射点到二次贝塞尔曲线上，返回投射距离。
     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number} x
     * @param {number} y
     * @param {Array.<number>} out 投射点
     * @return {number}
     */


    function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
      // http://pomax.github.io/bezierinfo/#projections
      var t;
      var interval = 0.005;
      var d = Infinity;
      _v0[0] = x;
      _v0[1] = y; // 先粗略估计一下可能的最小距离的 t 值
      // PENDING

      for (var _t = 0; _t < 1; _t += 0.05) {
        _v1[0] = quadraticAt(x0, x1, x2, _t);
        _v1[1] = quadraticAt(y0, y1, y2, _t);
        var d1 = v2DistSquare(_v0, _v1);

        if (d1 < d) {
          t = _t;
          d = d1;
        }
      }

      d = Infinity; // At most 32 iteration

      for (var i = 0; i < 32; i++) {
        if (interval < EPSILON_NUMERIC) {
          break;
        }

        var prev = t - interval;
        var next = t + interval; // t - interval

        _v1[0] = quadraticAt(x0, x1, x2, prev);
        _v1[1] = quadraticAt(y0, y1, y2, prev);
        var d1 = v2DistSquare(_v1, _v0);

        if (prev >= 0 && d1 < d) {
          t = prev;
          d = d1;
        } else {
          // t + interval
          _v2[0] = quadraticAt(x0, x1, x2, next);
          _v2[1] = quadraticAt(y0, y1, y2, next);
          var d2 = v2DistSquare(_v2, _v0);

          if (next <= 1 && d2 < d) {
            t = next;
            d = d2;
          } else {
            interval *= 0.5;
          }
        }
      } // t


      if (out) {
        out[0] = quadraticAt(x0, x1, x2, t);
        out[1] = quadraticAt(y0, y1, y2, t);
      } // console.log(interval, i);


      return mathSqrt(d);
    }

    var cubicAt_1 = cubicAt;
    var cubicDerivativeAt_1 = cubicDerivativeAt;
    var cubicRootAt_1 = cubicRootAt;
    var cubicExtrema_1 = cubicExtrema;
    var cubicSubdivide_1 = cubicSubdivide;
    var cubicProjectPoint_1 = cubicProjectPoint;
    var quadraticAt_1 = quadraticAt;
    var quadraticDerivativeAt_1 = quadraticDerivativeAt;
    var quadraticRootAt_1 = quadraticRootAt;
    var quadraticExtremum_1 = quadraticExtremum;
    var quadraticSubdivide_1 = quadraticSubdivide;
    var quadraticProjectPoint_1 = quadraticProjectPoint;

    var curve = {
    	cubicAt: cubicAt_1,
    	cubicDerivativeAt: cubicDerivativeAt_1,
    	cubicRootAt: cubicRootAt_1,
    	cubicExtrema: cubicExtrema_1,
    	cubicSubdivide: cubicSubdivide_1,
    	cubicProjectPoint: cubicProjectPoint_1,
    	quadraticAt: quadraticAt_1,
    	quadraticDerivativeAt: quadraticDerivativeAt_1,
    	quadraticRootAt: quadraticRootAt_1,
    	quadraticExtremum: quadraticExtremum_1,
    	quadraticSubdivide: quadraticSubdivide_1,
    	quadraticProjectPoint: quadraticProjectPoint_1
    };

    /**
     * @author Yi Shen(https://github.com/pissang)
     */
    var mathMin$1 = Math.min;
    var mathMax$1 = Math.max;
    var mathSin = Math.sin;
    var mathCos = Math.cos;
    var PI2 = Math.PI * 2;
    var start = vector.create();
    var end = vector.create();
    var extremity = vector.create();
    /**
     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
     * @module zrender/core/bbox
     * @param {Array<Object>} points 顶点数组
     * @param {number} min
     * @param {number} max
     */

    function fromPoints(points, min, max) {
      if (points.length === 0) {
        return;
      }

      var p = points[0];
      var left = p[0];
      var right = p[0];
      var top = p[1];
      var bottom = p[1];
      var i;

      for (i = 1; i < points.length; i++) {
        p = points[i];
        left = mathMin$1(left, p[0]);
        right = mathMax$1(right, p[0]);
        top = mathMin$1(top, p[1]);
        bottom = mathMax$1(bottom, p[1]);
      }

      min[0] = left;
      min[1] = top;
      max[0] = right;
      max[1] = bottom;
    }
    /**
     * @memberOf module:zrender/core/bbox
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @param {Array.<number>} min
     * @param {Array.<number>} max
     */


    function fromLine(x0, y0, x1, y1, min, max) {
      min[0] = mathMin$1(x0, x1);
      min[1] = mathMin$1(y0, y1);
      max[0] = mathMax$1(x0, x1);
      max[1] = mathMax$1(y0, y1);
    }

    var xDim = [];
    var yDim = [];
    /**
     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
     * @memberOf module:zrender/core/bbox
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number} x3
     * @param {number} y3
     * @param {Array.<number>} min
     * @param {Array.<number>} max
     */

    function fromCubic(x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
      var cubicExtrema = curve.cubicExtrema;
      var cubicAt = curve.cubicAt;
      var i;
      var n = cubicExtrema(x0, x1, x2, x3, xDim);
      min[0] = Infinity;
      min[1] = Infinity;
      max[0] = -Infinity;
      max[1] = -Infinity;

      for (i = 0; i < n; i++) {
        var x = cubicAt(x0, x1, x2, x3, xDim[i]);
        min[0] = mathMin$1(x, min[0]);
        max[0] = mathMax$1(x, max[0]);
      }

      n = cubicExtrema(y0, y1, y2, y3, yDim);

      for (i = 0; i < n; i++) {
        var y = cubicAt(y0, y1, y2, y3, yDim[i]);
        min[1] = mathMin$1(y, min[1]);
        max[1] = mathMax$1(y, max[1]);
      }

      min[0] = mathMin$1(x0, min[0]);
      max[0] = mathMax$1(x0, max[0]);
      min[0] = mathMin$1(x3, min[0]);
      max[0] = mathMax$1(x3, max[0]);
      min[1] = mathMin$1(y0, min[1]);
      max[1] = mathMax$1(y0, max[1]);
      min[1] = mathMin$1(y3, min[1]);
      max[1] = mathMax$1(y3, max[1]);
    }
    /**
     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
     * @memberOf module:zrender/core/bbox
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {Array.<number>} min
     * @param {Array.<number>} max
     */


    function fromQuadratic(x0, y0, x1, y1, x2, y2, min, max) {
      var quadraticExtremum = curve.quadraticExtremum;
      var quadraticAt = curve.quadraticAt; // Find extremities, where derivative in x dim or y dim is zero

      var tx = mathMax$1(mathMin$1(quadraticExtremum(x0, x1, x2), 1), 0);
      var ty = mathMax$1(mathMin$1(quadraticExtremum(y0, y1, y2), 1), 0);
      var x = quadraticAt(x0, x1, x2, tx);
      var y = quadraticAt(y0, y1, y2, ty);
      min[0] = mathMin$1(x0, x2, x);
      min[1] = mathMin$1(y0, y2, y);
      max[0] = mathMax$1(x0, x2, x);
      max[1] = mathMax$1(y0, y2, y);
    }
    /**
     * 从圆弧中计算出最小包围盒，写入`min`和`max`中
     * @method
     * @memberOf module:zrender/core/bbox
     * @param {number} x
     * @param {number} y
     * @param {number} rx
     * @param {number} ry
     * @param {number} startAngle
     * @param {number} endAngle
     * @param {number} anticlockwise
     * @param {Array.<number>} min
     * @param {Array.<number>} max
     */


    function fromArc(x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
      var vec2Min = vector.min;
      var vec2Max = vector.max;
      var diff = Math.abs(startAngle - endAngle);

      if (diff % PI2 < 1e-4 && diff > 1e-4) {
        // Is a circle
        min[0] = x - rx;
        min[1] = y - ry;
        max[0] = x + rx;
        max[1] = y + ry;
        return;
      }

      start[0] = mathCos(startAngle) * rx + x;
      start[1] = mathSin(startAngle) * ry + y;
      end[0] = mathCos(endAngle) * rx + x;
      end[1] = mathSin(endAngle) * ry + y;
      vec2Min(min, start, end);
      vec2Max(max, start, end); // Thresh to [0, Math.PI * 2]

      startAngle = startAngle % PI2;

      if (startAngle < 0) {
        startAngle = startAngle + PI2;
      }

      endAngle = endAngle % PI2;

      if (endAngle < 0) {
        endAngle = endAngle + PI2;
      }

      if (startAngle > endAngle && !anticlockwise) {
        endAngle += PI2;
      } else if (startAngle < endAngle && anticlockwise) {
        startAngle += PI2;
      }

      if (anticlockwise) {
        var tmp = endAngle;
        endAngle = startAngle;
        startAngle = tmp;
      } // var number = 0;
      // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;


      for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
        if (angle > startAngle) {
          extremity[0] = mathCos(angle) * rx + x;
          extremity[1] = mathSin(angle) * ry + y;
          vec2Min(min, extremity, min);
          vec2Max(max, extremity, max);
        }
      }
    }

    var fromPoints_1 = fromPoints;
    var fromLine_1 = fromLine;
    var fromCubic_1 = fromCubic;
    var fromQuadratic_1 = fromQuadratic;
    var fromArc_1 = fromArc;

    var bbox = {
    	fromPoints: fromPoints_1,
    	fromLine: fromLine_1,
    	fromCubic: fromCubic_1,
    	fromQuadratic: fromQuadratic_1,
    	fromArc: fromArc_1
    };

    var dpr$1 = config.devicePixelRatio;

    /**
     * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
     * 可以用于 isInsidePath 判断以及获取boundingRect
     *
     * @module zrender/core/PathProxy
     * @author Yi Shen (http://www.github.com/pissang)
     */
    // TODO getTotalLength, getPointAtLength

    /* global Float32Array */
    var CMD = {
      M: 1,
      L: 2,
      C: 3,
      Q: 4,
      A: 5,
      Z: 6,
      // Rect
      R: 7
    }; // var CMD_MEM_SIZE = {
    //     M: 3,
    //     L: 3,
    //     C: 7,
    //     Q: 5,
    //     A: 9,
    //     R: 5,
    //     Z: 1
    // };

    var min$1 = [];
    var max$1 = [];
    var min2 = [];
    var max2 = [];
    var mathMin$2 = Math.min;
    var mathMax$2 = Math.max;
    var mathCos$1 = Math.cos;
    var mathSin$1 = Math.sin;
    var mathSqrt$1 = Math.sqrt;
    var mathAbs = Math.abs;
    var hasTypedArray = typeof Float32Array !== 'undefined';
    /**
     * @alias module:zrender/core/PathProxy
     * @constructor
     */

    var PathProxy = function (notSaveData) {
      this._saveData = !(notSaveData || false);

      if (this._saveData) {
        /**
         * Path data. Stored as flat array
         * @type {Array.<Object>}
         */
        this.data = [];
      }

      this._ctx = null;
    };
    /**
     * 快速计算Path包围盒（并不是最小包围盒）
     * @return {Object}
     */


    PathProxy.prototype = {
      constructor: PathProxy,
      _xi: 0,
      _yi: 0,
      _x0: 0,
      _y0: 0,
      // Unit x, Unit y. Provide for avoiding drawing that too short line segment
      _ux: 0,
      _uy: 0,
      _len: 0,
      _lineDash: null,
      _dashOffset: 0,
      _dashIdx: 0,
      _dashSum: 0,

      /**
       * @readOnly
       */
      setScale: function (sx, sy, segmentIgnoreThreshold) {
        // Compat. Previously there is no segmentIgnoreThreshold.
        segmentIgnoreThreshold = segmentIgnoreThreshold || 0;
        this._ux = mathAbs(segmentIgnoreThreshold / dpr$1 / sx) || 0;
        this._uy = mathAbs(segmentIgnoreThreshold / dpr$1 / sy) || 0;
      },
      getContext: function () {
        return this._ctx;
      },

      /**
       * @param  {CanvasRenderingContext2D} ctx
       * @return {module:zrender/core/PathProxy}
       */
      beginPath: function (ctx) {
        this._ctx = ctx;
        ctx && ctx.beginPath();
        ctx && (this.dpr = ctx.dpr); // Reset

        if (this._saveData) {
          this._len = 0;
        }

        if (this._lineDash) {
          this._lineDash = null;
          this._dashOffset = 0;
        }

        return this;
      },

      /**
       * @param  {number} x
       * @param  {number} y
       * @return {module:zrender/core/PathProxy}
       */
      moveTo: function (x, y) {
        this.addData(CMD.M, x, y);
        this._ctx && this._ctx.moveTo(x, y); // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
        // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
        // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
        // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持

        this._x0 = x;
        this._y0 = y;
        this._xi = x;
        this._yi = y;
        return this;
      },

      /**
       * @param  {number} x
       * @param  {number} y
       * @return {module:zrender/core/PathProxy}
       */
      lineTo: function (x, y) {
        var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy // Force draw the first segment
        || this._len < 5;
        this.addData(CMD.L, x, y);

        if (this._ctx && exceedUnit) {
          this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
        }

        if (exceedUnit) {
          this._xi = x;
          this._yi = y;
        }

        return this;
      },

      /**
       * @param  {number} x1
       * @param  {number} y1
       * @param  {number} x2
       * @param  {number} y2
       * @param  {number} x3
       * @param  {number} y3
       * @return {module:zrender/core/PathProxy}
       */
      bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
        this.addData(CMD.C, x1, y1, x2, y2, x3, y3);

        if (this._ctx) {
          this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
        }

        this._xi = x3;
        this._yi = y3;
        return this;
      },

      /**
       * @param  {number} x1
       * @param  {number} y1
       * @param  {number} x2
       * @param  {number} y2
       * @return {module:zrender/core/PathProxy}
       */
      quadraticCurveTo: function (x1, y1, x2, y2) {
        this.addData(CMD.Q, x1, y1, x2, y2);

        if (this._ctx) {
          this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
        }

        this._xi = x2;
        this._yi = y2;
        return this;
      },

      /**
       * @param  {number} cx
       * @param  {number} cy
       * @param  {number} r
       * @param  {number} startAngle
       * @param  {number} endAngle
       * @param  {boolean} anticlockwise
       * @return {module:zrender/core/PathProxy}
       */
      arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
        this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
        this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
        this._xi = mathCos$1(endAngle) * r + cx;
        this._yi = mathSin$1(endAngle) * r + cy;
        return this;
      },
      // TODO
      arcTo: function (x1, y1, x2, y2, radius) {
        if (this._ctx) {
          this._ctx.arcTo(x1, y1, x2, y2, radius);
        }

        return this;
      },
      // TODO
      rect: function (x, y, w, h) {
        this._ctx && this._ctx.rect(x, y, w, h);
        this.addData(CMD.R, x, y, w, h);
        return this;
      },

      /**
       * @return {module:zrender/core/PathProxy}
       */
      closePath: function () {
        this.addData(CMD.Z);
        var ctx = this._ctx;
        var x0 = this._x0;
        var y0 = this._y0;

        if (ctx) {
          this._needsDash() && this._dashedLineTo(x0, y0);
          ctx.closePath();
        }

        this._xi = x0;
        this._yi = y0;
        return this;
      },

      /**
       * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
       * stroke 同样
       * @param {CanvasRenderingContext2D} ctx
       * @return {module:zrender/core/PathProxy}
       */
      fill: function (ctx) {
        ctx && ctx.fill();
        this.toStatic();
      },

      /**
       * @param {CanvasRenderingContext2D} ctx
       * @return {module:zrender/core/PathProxy}
       */
      stroke: function (ctx) {
        ctx && ctx.stroke();
        this.toStatic();
      },

      /**
       * 必须在其它绘制命令前调用
       * Must be invoked before all other path drawing methods
       * @return {module:zrender/core/PathProxy}
       */
      setLineDash: function (lineDash) {
        if (lineDash instanceof Array) {
          this._lineDash = lineDash;
          this._dashIdx = 0;
          var lineDashSum = 0;

          for (var i = 0; i < lineDash.length; i++) {
            lineDashSum += lineDash[i];
          }

          this._dashSum = lineDashSum;
        }

        return this;
      },

      /**
       * 必须在其它绘制命令前调用
       * Must be invoked before all other path drawing methods
       * @return {module:zrender/core/PathProxy}
       */
      setLineDashOffset: function (offset) {
        this._dashOffset = offset;
        return this;
      },

      /**
       *
       * @return {boolean}
       */
      len: function () {
        return this._len;
      },

      /**
       * 直接设置 Path 数据
       */
      setData: function (data) {
        var len = data.length;

        if (!(this.data && this.data.length === len) && hasTypedArray) {
          this.data = new Float32Array(len);
        }

        for (var i = 0; i < len; i++) {
          this.data[i] = data[i];
        }

        this._len = len;
      },

      /**
       * 添加子路径
       * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
       */
      appendPath: function (path) {
        if (!(path instanceof Array)) {
          path = [path];
        }

        var len = path.length;
        var appendSize = 0;
        var offset = this._len;

        for (var i = 0; i < len; i++) {
          appendSize += path[i].len();
        }

        if (hasTypedArray && this.data instanceof Float32Array) {
          this.data = new Float32Array(offset + appendSize);
        }

        for (var i = 0; i < len; i++) {
          var appendPathData = path[i].data;

          for (var k = 0; k < appendPathData.length; k++) {
            this.data[offset++] = appendPathData[k];
          }
        }

        this._len = offset;
      },

      /**
       * 填充 Path 数据。
       * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
       */
      addData: function (cmd) {
        if (!this._saveData) {
          return;
        }

        var data = this.data;

        if (this._len + arguments.length > data.length) {
          // 因为之前的数组已经转换成静态的 Float32Array
          // 所以不够用时需要扩展一个新的动态数组
          this._expandData();

          data = this.data;
        }

        for (var i = 0; i < arguments.length; i++) {
          data[this._len++] = arguments[i];
        }

        this._prevCmd = cmd;
      },
      _expandData: function () {
        // Only if data is Float32Array
        if (!(this.data instanceof Array)) {
          var newData = [];

          for (var i = 0; i < this._len; i++) {
            newData[i] = this.data[i];
          }

          this.data = newData;
        }
      },

      /**
       * If needs js implemented dashed line
       * @return {boolean}
       * @private
       */
      _needsDash: function () {
        return this._lineDash;
      },
      _dashedLineTo: function (x1, y1) {
        var dashSum = this._dashSum;
        var offset = this._dashOffset;
        var lineDash = this._lineDash;
        var ctx = this._ctx;
        var x0 = this._xi;
        var y0 = this._yi;
        var dx = x1 - x0;
        var dy = y1 - y0;
        var dist = mathSqrt$1(dx * dx + dy * dy);
        var x = x0;
        var y = y0;
        var dash;
        var nDash = lineDash.length;
        var idx;
        dx /= dist;
        dy /= dist;

        if (offset < 0) {
          // Convert to positive offset
          offset = dashSum + offset;
        }

        offset %= dashSum;
        x -= offset * dx;
        y -= offset * dy;

        while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx === 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
          idx = this._dashIdx;
          dash = lineDash[idx];
          x += dx * dash;
          y += dy * dash;
          this._dashIdx = (idx + 1) % nDash; // Skip positive offset

          if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
            continue;
          }

          ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin$2(x, x1) : mathMax$2(x, x1), dy >= 0 ? mathMin$2(y, y1) : mathMax$2(y, y1));
        } // Offset for next lineTo


        dx = x - x1;
        dy = y - y1;
        this._dashOffset = -mathSqrt$1(dx * dx + dy * dy);
      },
      // Not accurate dashed line to
      _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
        var dashSum = this._dashSum;
        var offset = this._dashOffset;
        var lineDash = this._lineDash;
        var ctx = this._ctx;
        var x0 = this._xi;
        var y0 = this._yi;
        var t;
        var dx;
        var dy;
        var cubicAt = curve.cubicAt;
        var bezierLen = 0;
        var idx = this._dashIdx;
        var nDash = lineDash.length;
        var x;
        var y;
        var tmpLen = 0;

        if (offset < 0) {
          // Convert to positive offset
          offset = dashSum + offset;
        }

        offset %= dashSum; // Bezier approx length

        for (t = 0; t < 1; t += 0.1) {
          dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
          dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
          bezierLen += mathSqrt$1(dx * dx + dy * dy);
        } // Find idx after add offset


        for (; idx < nDash; idx++) {
          tmpLen += lineDash[idx];

          if (tmpLen > offset) {
            break;
          }
        }

        t = (tmpLen - offset) / bezierLen;

        while (t <= 1) {
          x = cubicAt(x0, x1, x2, x3, t);
          y = cubicAt(y0, y1, y2, y3, t); // Use line to approximate dashed bezier
          // Bad result if dash is long

          idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
          t += lineDash[idx] / bezierLen;
          idx = (idx + 1) % nDash;
        } // Finish the last segment and calculate the new offset


        idx % 2 !== 0 && ctx.lineTo(x3, y3);
        dx = x3 - x;
        dy = y3 - y;
        this._dashOffset = -mathSqrt$1(dx * dx + dy * dy);
      },
      _dashedQuadraticTo: function (x1, y1, x2, y2) {
        // Convert quadratic to cubic using degree elevation
        var x3 = x2;
        var y3 = y2;
        x2 = (x2 + 2 * x1) / 3;
        y2 = (y2 + 2 * y1) / 3;
        x1 = (this._xi + 2 * x1) / 3;
        y1 = (this._yi + 2 * y1) / 3;

        this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
      },

      /**
       * 转成静态的 Float32Array 减少堆内存占用
       * Convert dynamic array to static Float32Array
       */
      toStatic: function () {
        var data = this.data;

        if (data instanceof Array) {
          data.length = this._len;

          if (hasTypedArray) {
            this.data = new Float32Array(data);
          }
        }
      },

      /**
       * @return {module:zrender/core/BoundingRect}
       */
      getBoundingRect: function () {
        min$1[0] = min$1[1] = min2[0] = min2[1] = Number.MAX_VALUE;
        max$1[0] = max$1[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
        var data = this.data;
        var xi = 0;
        var yi = 0;
        var x0 = 0;
        var y0 = 0;

        for (var i = 0; i < data.length;) {
          var cmd = data[i++];

          if (i === 1) {
            // 如果第一个命令是 L, C, Q
            // 则 previous point 同绘制命令的第一个 point
            //
            // 第一个命令为 Arc 的情况下会在后面特殊处理
            xi = data[i];
            yi = data[i + 1];
            x0 = xi;
            y0 = yi;
          }

          switch (cmd) {
            case CMD.M:
              // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
              // 在 closePath 的时候使用
              x0 = data[i++];
              y0 = data[i++];
              xi = x0;
              yi = y0;
              min2[0] = x0;
              min2[1] = y0;
              max2[0] = x0;
              max2[1] = y0;
              break;

            case CMD.L:
              bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
              xi = data[i++];
              yi = data[i++];
              break;

            case CMD.C:
              bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
              xi = data[i++];
              yi = data[i++];
              break;

            case CMD.Q:
              bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
              xi = data[i++];
              yi = data[i++];
              break;

            case CMD.A:
              // TODO Arc 判断的开销比较大
              var cx = data[i++];
              var cy = data[i++];
              var rx = data[i++];
              var ry = data[i++];
              var startAngle = data[i++];
              var endAngle = data[i++] + startAngle; // TODO Arc 旋转

              i += 1;
              var anticlockwise = 1 - data[i++];

              if (i === 1) {
                // 直接使用 arc 命令
                // 第一个命令起点还未定义
                x0 = mathCos$1(startAngle) * rx + cx;
                y0 = mathSin$1(startAngle) * ry + cy;
              }

              bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
              xi = mathCos$1(endAngle) * rx + cx;
              yi = mathSin$1(endAngle) * ry + cy;
              break;

            case CMD.R:
              x0 = xi = data[i++];
              y0 = yi = data[i++];
              var width = data[i++];
              var height = data[i++]; // Use fromLine

              bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
              break;

            case CMD.Z:
              xi = x0;
              yi = y0;
              break;
          } // Union


          vector.min(min$1, min$1, min2);
          vector.max(max$1, max$1, max2);
        } // No data


        if (i === 0) {
          min$1[0] = min$1[1] = max$1[0] = max$1[1] = 0;
        }

        return new BoundingRect_1(min$1[0], min$1[1], max$1[0] - min$1[0], max$1[1] - min$1[1]);
      },

      /**
       * Rebuild path from current data
       * Rebuild path will not consider javascript implemented line dash.
       * @param {CanvasRenderingContext2D} ctx
       */
      rebuildPath: function (ctx) {
        var d = this.data;
        var x0;
        var y0;
        var xi;
        var yi;
        var x;
        var y;
        var ux = this._ux;
        var uy = this._uy;
        var len = this._len;

        for (var i = 0; i < len;) {
          var cmd = d[i++];

          if (i === 1) {
            // 如果第一个命令是 L, C, Q
            // 则 previous point 同绘制命令的第一个 point
            //
            // 第一个命令为 Arc 的情况下会在后面特殊处理
            xi = d[i];
            yi = d[i + 1];
            x0 = xi;
            y0 = yi;
          }

          switch (cmd) {
            case CMD.M:
              x0 = xi = d[i++];
              y0 = yi = d[i++];
              ctx.moveTo(xi, yi);
              break;

            case CMD.L:
              x = d[i++];
              y = d[i++]; // Not draw too small seg between

              if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
                ctx.lineTo(x, y);
                xi = x;
                yi = y;
              }

              break;

            case CMD.C:
              ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
              xi = d[i - 2];
              yi = d[i - 1];
              break;

            case CMD.Q:
              ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
              xi = d[i - 2];
              yi = d[i - 1];
              break;

            case CMD.A:
              var cx = d[i++];
              var cy = d[i++];
              var rx = d[i++];
              var ry = d[i++];
              var theta = d[i++];
              var dTheta = d[i++];
              var psi = d[i++];
              var fs = d[i++];
              var r = rx > ry ? rx : ry;
              var scaleX = rx > ry ? 1 : rx / ry;
              var scaleY = rx > ry ? ry / rx : 1;
              var isEllipse = Math.abs(rx - ry) > 1e-3;
              var endAngle = theta + dTheta;

              if (isEllipse) {
                ctx.translate(cx, cy);
                ctx.rotate(psi);
                ctx.scale(scaleX, scaleY);
                ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
                ctx.scale(1 / scaleX, 1 / scaleY);
                ctx.rotate(-psi);
                ctx.translate(-cx, -cy);
              } else {
                ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
              }

              if (i === 1) {
                // 直接使用 arc 命令
                // 第一个命令起点还未定义
                x0 = mathCos$1(theta) * rx + cx;
                y0 = mathSin$1(theta) * ry + cy;
              }

              xi = mathCos$1(endAngle) * rx + cx;
              yi = mathSin$1(endAngle) * ry + cy;
              break;

            case CMD.R:
              x0 = xi = d[i];
              y0 = yi = d[i + 1];
              ctx.rect(d[i++], d[i++], d[i++], d[i++]);
              break;

            case CMD.Z:
              ctx.closePath();
              xi = x0;
              yi = y0;
          }
        }
      }
    };
    PathProxy.CMD = CMD;
    var _default$v = PathProxy;
    var PathProxy_1 = _default$v;

    /**
     * 线段包含判断
     * @param  {number}  x0
     * @param  {number}  y0
     * @param  {number}  x1
     * @param  {number}  y1
     * @param  {number}  lineWidth
     * @param  {number}  x
     * @param  {number}  y
     * @return {boolean}
     */
    function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
      if (lineWidth === 0) {
        return false;
      }

      var _l = lineWidth;
      var _a = 0;
      var _b = x0; // Quick reject

      if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
        return false;
      }

      if (x0 !== x1) {
        _a = (y0 - y1) / (x0 - x1);
        _b = (x0 * y1 - x1 * y0) / (x0 - x1);
      } else {
        return Math.abs(x - x0) <= _l / 2;
      }

      var tmp = _a * x - y + _b;

      var _s = tmp * tmp / (_a * _a + 1);

      return _s <= _l / 2 * _l / 2;
    }

    var containStroke_1 = containStroke;

    var line = {
    	containStroke: containStroke_1
    };

    /**
     * 三次贝塞尔曲线描边包含判断
     * @param  {number}  x0
     * @param  {number}  y0
     * @param  {number}  x1
     * @param  {number}  y1
     * @param  {number}  x2
     * @param  {number}  y2
     * @param  {number}  x3
     * @param  {number}  y3
     * @param  {number}  lineWidth
     * @param  {number}  x
     * @param  {number}  y
     * @return {boolean}
     */
    function containStroke$1(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
      if (lineWidth === 0) {
        return false;
      }

      var _l = lineWidth; // Quick reject

      if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
        return false;
      }

      var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
      return d <= _l / 2;
    }

    var containStroke_1$1 = containStroke$1;

    var cubic = {
    	containStroke: containStroke_1$1
    };

    var quadraticProjectPoint$1 = curve.quadraticProjectPoint;

    /**
     * 二次贝塞尔曲线描边包含判断
     * @param  {number}  x0
     * @param  {number}  y0
     * @param  {number}  x1
     * @param  {number}  y1
     * @param  {number}  x2
     * @param  {number}  y2
     * @param  {number}  lineWidth
     * @param  {number}  x
     * @param  {number}  y
     * @return {boolean}
     */
    function containStroke$2(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
      if (lineWidth === 0) {
        return false;
      }

      var _l = lineWidth; // Quick reject

      if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
        return false;
      }

      var d = quadraticProjectPoint$1(x0, y0, x1, y1, x2, y2, x, y, null);
      return d <= _l / 2;
    }

    var containStroke_1$2 = containStroke$2;

    var quadratic = {
    	containStroke: containStroke_1$2
    };

    var PI2$1 = Math.PI * 2;

    function normalizeRadian(angle) {
      angle %= PI2$1;

      if (angle < 0) {
        angle += PI2$1;
      }

      return angle;
    }

    var normalizeRadian_1 = normalizeRadian;

    var util$1 = {
    	normalizeRadian: normalizeRadian_1
    };

    var normalizeRadian$1 = util$1.normalizeRadian;
    var PI2$2 = Math.PI * 2;
    /**
     * 圆弧描边包含判断
     * @param  {number}  cx
     * @param  {number}  cy
     * @param  {number}  r
     * @param  {number}  startAngle
     * @param  {number}  endAngle
     * @param  {boolean}  anticlockwise
     * @param  {number} lineWidth
     * @param  {number}  x
     * @param  {number}  y
     * @return {Boolean}
     */

    function containStroke$3(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
      if (lineWidth === 0) {
        return false;
      }

      var _l = lineWidth;
      x -= cx;
      y -= cy;
      var d = Math.sqrt(x * x + y * y);

      if (d - _l > r || d + _l < r) {
        return false;
      }

      if (Math.abs(startAngle - endAngle) % PI2$2 < 1e-4) {
        // Is a circle
        return true;
      }

      if (anticlockwise) {
        var tmp = startAngle;
        startAngle = normalizeRadian$1(endAngle);
        endAngle = normalizeRadian$1(tmp);
      } else {
        startAngle = normalizeRadian$1(startAngle);
        endAngle = normalizeRadian$1(endAngle);
      }

      if (startAngle > endAngle) {
        endAngle += PI2$2;
      }

      var angle = Math.atan2(y, x);

      if (angle < 0) {
        angle += PI2$2;
      }

      return angle >= startAngle && angle <= endAngle || angle + PI2$2 >= startAngle && angle + PI2$2 <= endAngle;
    }

    var containStroke_1$3 = containStroke$3;

    var arc = {
    	containStroke: containStroke_1$3
    };

    function windingLine(x0, y0, x1, y1, x, y) {
      if (y > y0 && y > y1 || y < y0 && y < y1) {
        return 0;
      } // Ignore horizontal line


      if (y1 === y0) {
        return 0;
      }

      var dir = y1 < y0 ? 1 : -1;
      var t = (y - y0) / (y1 - y0); // Avoid winding error when intersection point is the connect point of two line of polygon

      if (t === 1 || t === 0) {
        dir = y1 < y0 ? 0.5 : -0.5;
      }

      var x_ = t * (x1 - x0) + x0; // If (x, y) on the line, considered as "contain".

      return x_ === x ? Infinity : x_ > x ? dir : 0;
    }

    var windingLine_1 = windingLine;

    var normalizeRadian$2 = util$1.normalizeRadian;





    var CMD$1 = PathProxy_1.CMD;
    var PI2$3 = Math.PI * 2;
    var EPSILON$2 = 1e-4;

    function isAroundEqual(a, b) {
      return Math.abs(a - b) < EPSILON$2;
    } // 临时数组


    var roots = [-1, -1, -1];
    var extrema = [-1, -1];

    function swapExtrema() {
      var tmp = extrema[0];
      extrema[0] = extrema[1];
      extrema[1] = tmp;
    }

    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
      // Quick reject
      if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
        return 0;
      }

      var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);

      if (nRoots === 0) {
        return 0;
      } else {
        var w = 0;
        var nExtrema = -1;
        var y0_;
        var y1_;

        for (var i = 0; i < nRoots; i++) {
          var t = roots[i]; // Avoid winding error when intersection point is the connect point of two line of polygon

          var unit = t === 0 || t === 1 ? 0.5 : 1;
          var x_ = curve.cubicAt(x0, x1, x2, x3, t);

          if (x_ < x) {
            // Quick reject
            continue;
          }

          if (nExtrema < 0) {
            nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);

            if (extrema[1] < extrema[0] && nExtrema > 1) {
              swapExtrema();
            }

            y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);

            if (nExtrema > 1) {
              y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
            }
          }

          if (nExtrema === 2) {
            // 分成三段单调函数
            if (t < extrema[0]) {
              w += y0_ < y0 ? unit : -unit;
            } else if (t < extrema[1]) {
              w += y1_ < y0_ ? unit : -unit;
            } else {
              w += y3 < y1_ ? unit : -unit;
            }
          } else {
            // 分成两段单调函数
            if (t < extrema[0]) {
              w += y0_ < y0 ? unit : -unit;
            } else {
              w += y3 < y0_ ? unit : -unit;
            }
          }
        }

        return w;
      }
    }

    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
      // Quick reject
      if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
        return 0;
      }

      var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);

      if (nRoots === 0) {
        return 0;
      } else {
        var t = curve.quadraticExtremum(y0, y1, y2);

        if (t >= 0 && t <= 1) {
          var w = 0;
          var y_ = curve.quadraticAt(y0, y1, y2, t);

          for (var i = 0; i < nRoots; i++) {
            // Remove one endpoint.
            var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
            var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);

            if (x_ < x) {
              // Quick reject
              continue;
            }

            if (roots[i] < t) {
              w += y_ < y0 ? unit : -unit;
            } else {
              w += y2 < y_ ? unit : -unit;
            }
          }

          return w;
        } else {
          // Remove one endpoint.
          var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
          var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);

          if (x_ < x) {
            // Quick reject
            return 0;
          }

          return y2 < y0 ? unit : -unit;
        }
      }
    } // TODO
    // Arc 旋转


    function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
      y -= cy;

      if (y > r || y < -r) {
        return 0;
      }

      var tmp = Math.sqrt(r * r - y * y);
      roots[0] = -tmp;
      roots[1] = tmp;
      var diff = Math.abs(startAngle - endAngle);

      if (diff < 1e-4) {
        return 0;
      }

      if (diff % PI2$3 < 1e-4) {
        // Is a circle
        startAngle = 0;
        endAngle = PI2$3;
        var dir = anticlockwise ? 1 : -1;

        if (x >= roots[0] + cx && x <= roots[1] + cx) {
          return dir;
        } else {
          return 0;
        }
      }

      if (anticlockwise) {
        var tmp = startAngle;
        startAngle = normalizeRadian$2(endAngle);
        endAngle = normalizeRadian$2(tmp);
      } else {
        startAngle = normalizeRadian$2(startAngle);
        endAngle = normalizeRadian$2(endAngle);
      }

      if (startAngle > endAngle) {
        endAngle += PI2$3;
      }

      var w = 0;

      for (var i = 0; i < 2; i++) {
        var x_ = roots[i];

        if (x_ + cx > x) {
          var angle = Math.atan2(y, x_);
          var dir = anticlockwise ? 1 : -1;

          if (angle < 0) {
            angle = PI2$3 + angle;
          }

          if (angle >= startAngle && angle <= endAngle || angle + PI2$3 >= startAngle && angle + PI2$3 <= endAngle) {
            if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
              dir = -dir;
            }

            w += dir;
          }
        }
      }

      return w;
    }

    function containPath(data, lineWidth, isStroke, x, y) {
      var w = 0;
      var xi = 0;
      var yi = 0;
      var x0 = 0;
      var y0 = 0;

      for (var i = 0; i < data.length;) {
        var cmd = data[i++]; // Begin a new subpath

        if (cmd === CMD$1.M && i > 1) {
          // Close previous subpath
          if (!isStroke) {
            w += windingLine_1(xi, yi, x0, y0, x, y);
          } // 如果被任何一个 subpath 包含
          // if (w !== 0) {
          //     return true;
          // }

        }

        if (i === 1) {
          // 如果第一个命令是 L, C, Q
          // 则 previous point 同绘制命令的第一个 point
          //
          // 第一个命令为 Arc 的情况下会在后面特殊处理
          xi = data[i];
          yi = data[i + 1];
          x0 = xi;
          y0 = yi;
        }

        switch (cmd) {
          case CMD$1.M:
            // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
            // 在 closePath 的时候使用
            x0 = data[i++];
            y0 = data[i++];
            xi = x0;
            yi = y0;
            break;

          case CMD$1.L:
            if (isStroke) {
              if (line.containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
                return true;
              }
            } else {
              // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
              w += windingLine_1(xi, yi, data[i], data[i + 1], x, y) || 0;
            }

            xi = data[i++];
            yi = data[i++];
            break;

          case CMD$1.C:
            if (isStroke) {
              if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
                return true;
              }
            } else {
              w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
            }

            xi = data[i++];
            yi = data[i++];
            break;

          case CMD$1.Q:
            if (isStroke) {
              if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
                return true;
              }
            } else {
              w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
            }

            xi = data[i++];
            yi = data[i++];
            break;

          case CMD$1.A:
            // TODO Arc 判断的开销比较大
            var cx = data[i++];
            var cy = data[i++];
            var rx = data[i++];
            var ry = data[i++];
            var theta = data[i++];
            var dTheta = data[i++]; // TODO Arc 旋转

            i += 1;
            var anticlockwise = 1 - data[i++];
            var x1 = Math.cos(theta) * rx + cx;
            var y1 = Math.sin(theta) * ry + cy; // 不是直接使用 arc 命令

            if (i > 1) {
              w += windingLine_1(xi, yi, x1, y1, x, y);
            } else {
              // 第一个命令起点还未定义
              x0 = x1;
              y0 = y1;
            } // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放


            var _x = (x - cx) * ry / rx + cx;

            if (isStroke) {
              if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
                return true;
              }
            } else {
              w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
            }

            xi = Math.cos(theta + dTheta) * rx + cx;
            yi = Math.sin(theta + dTheta) * ry + cy;
            break;

          case CMD$1.R:
            x0 = xi = data[i++];
            y0 = yi = data[i++];
            var width = data[i++];
            var height = data[i++];
            var x1 = x0 + width;
            var y1 = y0 + height;

            if (isStroke) {
              if (line.containStroke(x0, y0, x1, y0, lineWidth, x, y) || line.containStroke(x1, y0, x1, y1, lineWidth, x, y) || line.containStroke(x1, y1, x0, y1, lineWidth, x, y) || line.containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
                return true;
              }
            } else {
              // FIXME Clockwise ?
              w += windingLine_1(x1, y0, x1, y1, x, y);
              w += windingLine_1(x0, y1, x0, y0, x, y);
            }

            break;

          case CMD$1.Z:
            if (isStroke) {
              if (line.containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
                return true;
              }
            } else {
              // Close a subpath
              w += windingLine_1(xi, yi, x0, y0, x, y); // 如果被任何一个 subpath 包含
              // FIXME subpaths may overlap
              // if (w !== 0) {
              //     return true;
              // }
            }

            xi = x0;
            yi = y0;
            break;
        }
      }

      if (!isStroke && !isAroundEqual(yi, y0)) {
        w += windingLine_1(xi, yi, x0, y0, x, y) || 0;
      }

      return w !== 0;
    }

    function contain(pathData, x, y) {
      return containPath(pathData, 0, false, x, y);
    }

    function containStroke$4(pathData, lineWidth, x, y) {
      return containPath(pathData, lineWidth, true, x, y);
    }

    var contain_1 = contain;
    var containStroke_1$4 = containStroke$4;

    var path = {
    	contain: contain_1,
    	containStroke: containStroke_1$4
    };

    var getCanvasPattern = Pattern_1.prototype.getCanvasPattern;
    var abs = Math.abs;
    var pathProxyForDraw = new PathProxy_1(true);
    /**
     * @alias module:zrender/graphic/Path
     * @extends module:zrender/graphic/Displayable
     * @constructor
     * @param {Object} opts
     */

    function Path(opts) {
      Displayable_1.call(this, opts);
      /**
       * @type {module:zrender/core/PathProxy}
       * @readOnly
       */

      this.path = null;
    }

    Path.prototype = {
      constructor: Path,
      type: 'path',
      __dirtyPath: true,
      strokeContainThreshold: 5,
      // This item default to be false. But in map series in echarts,
      // in order to improve performance, it should be set to true,
      // so the shorty segment won't draw.
      segmentIgnoreThreshold: 0,

      /**
       * See `module:zrender/src/graphic/helper/subPixelOptimize`.
       * @type {boolean}
       */
      subPixelOptimize: false,
      brush: function (ctx, prevEl) {
        var style = this.style;
        var path = this.path || pathProxyForDraw;
        var hasStroke = style.hasStroke();
        var hasFill = style.hasFill();
        var fill = style.fill;
        var stroke = style.stroke;
        var hasFillGradient = hasFill && !!fill.colorStops;
        var hasStrokeGradient = hasStroke && !!stroke.colorStops;
        var hasFillPattern = hasFill && !!fill.image;
        var hasStrokePattern = hasStroke && !!stroke.image;
        style.bind(ctx, this, prevEl);
        this.setTransform(ctx);

        if (this.__dirty) {
          var rect; // Update gradient because bounding rect may changed

          if (hasFillGradient) {
            rect = rect || this.getBoundingRect();
            this._fillGradient = style.getGradient(ctx, fill, rect);
          }

          if (hasStrokeGradient) {
            rect = rect || this.getBoundingRect();
            this._strokeGradient = style.getGradient(ctx, stroke, rect);
          }
        } // Use the gradient or pattern


        if (hasFillGradient) {
          // PENDING If may have affect the state
          ctx.fillStyle = this._fillGradient;
        } else if (hasFillPattern) {
          ctx.fillStyle = getCanvasPattern.call(fill, ctx);
        }

        if (hasStrokeGradient) {
          ctx.strokeStyle = this._strokeGradient;
        } else if (hasStrokePattern) {
          ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
        }

        var lineDash = style.lineDash;
        var lineDashOffset = style.lineDashOffset;
        var ctxLineDash = !!ctx.setLineDash; // Update path sx, sy

        var scale = this.getGlobalScale();
        path.setScale(scale[0], scale[1], this.segmentIgnoreThreshold); // Proxy context
        // Rebuild path in following 2 cases
        // 1. Path is dirty
        // 2. Path needs javascript implemented lineDash stroking.
        //    In this case, lineDash information will not be saved in PathProxy

        if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
          path.beginPath(ctx); // Setting line dash before build path

          if (lineDash && !ctxLineDash) {
            path.setLineDash(lineDash);
            path.setLineDashOffset(lineDashOffset);
          }

          this.buildPath(path, this.shape, false); // Clear path dirty flag

          if (this.path) {
            this.__dirtyPath = false;
          }
        } else {
          // Replay path building
          ctx.beginPath();
          this.path.rebuildPath(ctx);
        }

        if (hasFill) {
          if (style.fillOpacity != null) {
            var originalGlobalAlpha = ctx.globalAlpha;
            ctx.globalAlpha = style.fillOpacity * style.opacity;
            path.fill(ctx);
            ctx.globalAlpha = originalGlobalAlpha;
          } else {
            path.fill(ctx);
          }
        }

        if (lineDash && ctxLineDash) {
          ctx.setLineDash(lineDash);
          ctx.lineDashOffset = lineDashOffset;
        }

        if (hasStroke) {
          if (style.strokeOpacity != null) {
            var originalGlobalAlpha = ctx.globalAlpha;
            ctx.globalAlpha = style.strokeOpacity * style.opacity;
            path.stroke(ctx);
            ctx.globalAlpha = originalGlobalAlpha;
          } else {
            path.stroke(ctx);
          }
        }

        if (lineDash && ctxLineDash) {
          // PENDING
          // Remove lineDash
          ctx.setLineDash([]);
        } // Draw rect text


        if (style.text != null) {
          // Only restore transform when needs draw text.
          this.restoreTransform(ctx);
          this.drawRectText(ctx, this.getBoundingRect());
        }
      },
      // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
      // Like in circle
      buildPath: function (ctx, shapeCfg, inBundle) {},
      createPathProxy: function () {
        this.path = new PathProxy_1();
      },
      getBoundingRect: function () {
        var rect = this._rect;
        var style = this.style;
        var needsUpdateRect = !rect;

        if (needsUpdateRect) {
          var path = this.path;

          if (!path) {
            // Create path on demand.
            path = this.path = new PathProxy_1();
          }

          if (this.__dirtyPath) {
            path.beginPath();
            this.buildPath(path, this.shape, false);
          }

          rect = path.getBoundingRect();
        }

        this._rect = rect;

        if (style.hasStroke()) {
          // Needs update rect with stroke lineWidth when
          // 1. Element changes scale or lineWidth
          // 2. Shape is changed
          var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());

          if (this.__dirty || needsUpdateRect) {
            rectWithStroke.copy(rect); // FIXME Must after updateTransform

            var w = style.lineWidth; // PENDING, Min line width is needed when line is horizontal or vertical

            var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Only add extra hover lineWidth when there are no fill

            if (!style.hasFill()) {
              w = Math.max(w, this.strokeContainThreshold || 4);
            } // Consider line width
            // Line scale can't be 0;


            if (lineScale > 1e-10) {
              rectWithStroke.width += w / lineScale;
              rectWithStroke.height += w / lineScale;
              rectWithStroke.x -= w / lineScale / 2;
              rectWithStroke.y -= w / lineScale / 2;
            }
          } // Return rect with stroke


          return rectWithStroke;
        }

        return rect;
      },
      contain: function (x, y) {
        var localPos = this.transformCoordToLocal(x, y);
        var rect = this.getBoundingRect();
        var style = this.style;
        x = localPos[0];
        y = localPos[1];

        if (rect.contain(x, y)) {
          var pathData = this.path.data;

          if (style.hasStroke()) {
            var lineWidth = style.lineWidth;
            var lineScale = style.strokeNoScale ? this.getLineScale() : 1; // Line scale can't be 0;

            if (lineScale > 1e-10) {
              // Only add extra hover lineWidth when there are no fill
              if (!style.hasFill()) {
                lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
              }

              if (path.containStroke(pathData, lineWidth / lineScale, x, y)) {
                return true;
              }
            }
          }

          if (style.hasFill()) {
            return path.contain(pathData, x, y);
          }
        }

        return false;
      },

      /**
       * @param  {boolean} dirtyPath
       */
      dirty: function (dirtyPath) {
        if (dirtyPath == null) {
          dirtyPath = true;
        } // Only mark dirty, not mark clean


        if (dirtyPath) {
          this.__dirtyPath = dirtyPath;
          this._rect = null;
        }

        this.__dirty = this.__dirtyText = true;
        this.__zr && this.__zr.refresh(); // Used as a clipping path

        if (this.__clipTarget) {
          this.__clipTarget.dirty();
        }
      },

      /**
       * Alias for animate('shape')
       * @param {boolean} loop
       */
      animateShape: function (loop) {
        return this.animate('shape', loop);
      },
      // Overwrite attrKV
      attrKV: function (key, value) {
        // FIXME
        if (key === 'shape') {
          this.setShape(value);
          this.__dirtyPath = true;
          this._rect = null;
        } else {
          Displayable_1.prototype.attrKV.call(this, key, value);
        }
      },

      /**
       * @param {Object|string} key
       * @param {*} value
       */
      setShape: function (key, value) {
        var shape = this.shape; // Path from string may not have shape

        if (shape) {
          if (util.isObject(key)) {
            for (var name in key) {
              if (key.hasOwnProperty(name)) {
                shape[name] = key[name];
              }
            }
          } else {
            shape[key] = value;
          }

          this.dirty(true);
        }

        return this;
      },
      getLineScale: function () {
        var m = this.transform; // Get the line scale.
        // Determinant of `m` means how much the area is enlarged by the
        // transformation. So its square root can be used as a scale factor
        // for width.

        return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
      }
    };
    /**
     * 扩展一个 Path element, 比如星形，圆等。
     * Extend a path element
     * @param {Object} props
     * @param {string} props.type Path type
     * @param {Function} props.init Initialize
     * @param {Function} props.buildPath Overwrite buildPath method
     * @param {Object} [props.style] Extended default style config
     * @param {Object} [props.shape] Extended default shape config
     */

    Path.extend = function (defaults) {
      var Sub = function (opts) {
        Path.call(this, opts);

        if (defaults.style) {
          // Extend default style
          this.style.extendFrom(defaults.style, false);
        } // Extend default shape


        var defaultShape = defaults.shape;

        if (defaultShape) {
          this.shape = this.shape || {};
          var thisShape = this.shape;

          for (var name in defaultShape) {
            if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
              thisShape[name] = defaultShape[name];
            }
          }
        }

        defaults.init && defaults.init.call(this, opts);
      };

      util.inherits(Sub, Path); // FIXME 不能 extend position, rotation 等引用对象

      for (var name in defaults) {
        // Extending prototype values and methods
        if (name !== 'style' && name !== 'shape') {
          Sub.prototype[name] = defaults[name];
        }
      }

      return Sub;
    };

    util.inherits(Path, Displayable_1);
    var _default$w = Path;
    var Path_1 = _default$w;

    var v2ApplyTransform$1 = vector.applyTransform;
    var CMD$2 = PathProxy_1.CMD;
    var points = [[], [], []];
    var mathSqrt$2 = Math.sqrt;
    var mathAtan2 = Math.atan2;

    function _default$x(path, m) {
      var data = path.data;
      var cmd;
      var nPoint;
      var i;
      var j;
      var k;
      var p;
      var M = CMD$2.M;
      var C = CMD$2.C;
      var L = CMD$2.L;
      var R = CMD$2.R;
      var A = CMD$2.A;
      var Q = CMD$2.Q;

      for (i = 0, j = 0; i < data.length;) {
        cmd = data[i++];
        j = i;
        nPoint = 0;

        switch (cmd) {
          case M:
            nPoint = 1;
            break;

          case L:
            nPoint = 1;
            break;

          case C:
            nPoint = 3;
            break;

          case Q:
            nPoint = 2;
            break;

          case A:
            var x = m[4];
            var y = m[5];
            var sx = mathSqrt$2(m[0] * m[0] + m[1] * m[1]);
            var sy = mathSqrt$2(m[2] * m[2] + m[3] * m[3]);
            var angle = mathAtan2(-m[1] / sy, m[0] / sx); // cx

            data[i] *= sx;
            data[i++] += x; // cy

            data[i] *= sy;
            data[i++] += y; // Scale rx and ry
            // FIXME Assume psi is 0 here

            data[i++] *= sx;
            data[i++] *= sy; // Start angle

            data[i++] += angle; // end angle

            data[i++] += angle; // FIXME psi

            i += 2;
            j = i;
            break;

          case R:
            // x0, y0
            p[0] = data[i++];
            p[1] = data[i++];
            v2ApplyTransform$1(p, p, m);
            data[j++] = p[0];
            data[j++] = p[1]; // x1, y1

            p[0] += data[i++];
            p[1] += data[i++];
            v2ApplyTransform$1(p, p, m);
            data[j++] = p[0];
            data[j++] = p[1];
        }

        for (k = 0; k < nPoint; k++) {
          var p = points[k];
          p[0] = data[i++];
          p[1] = data[i++];
          v2ApplyTransform$1(p, p, m); // Write back

          data[j++] = p[0];
          data[j++] = p[1];
        }
      }
    }

    var transformPath = _default$x;

    // command chars
    // var cc = [
    //     'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',
    //     'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'
    // ];
    var mathSqrt$3 = Math.sqrt;
    var mathSin$2 = Math.sin;
    var mathCos$2 = Math.cos;
    var PI = Math.PI;

    var vMag = function (v) {
      return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
    };

    var vRatio = function (u, v) {
      return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
    };

    var vAngle = function (u, v) {
      return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
    };

    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
      var psi = psiDeg * (PI / 180.0);
      var xp = mathCos$2(psi) * (x1 - x2) / 2.0 + mathSin$2(psi) * (y1 - y2) / 2.0;
      var yp = -1 * mathSin$2(psi) * (x1 - x2) / 2.0 + mathCos$2(psi) * (y1 - y2) / 2.0;
      var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

      if (lambda > 1) {
        rx *= mathSqrt$3(lambda);
        ry *= mathSqrt$3(lambda);
      }

      var f = (fa === fs ? -1 : 1) * mathSqrt$3((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
      var cxp = f * rx * yp / ry;
      var cyp = f * -ry * xp / rx;
      var cx = (x1 + x2) / 2.0 + mathCos$2(psi) * cxp - mathSin$2(psi) * cyp;
      var cy = (y1 + y2) / 2.0 + mathSin$2(psi) * cxp + mathCos$2(psi) * cyp;
      var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
      var u = [(xp - cxp) / rx, (yp - cyp) / ry];
      var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
      var dTheta = vAngle(u, v);

      if (vRatio(u, v) <= -1) {
        dTheta = PI;
      }

      if (vRatio(u, v) >= 1) {
        dTheta = 0;
      }

      if (fs === 0 && dTheta > 0) {
        dTheta = dTheta - 2 * PI;
      }

      if (fs === 1 && dTheta < 0) {
        dTheta = dTheta + 2 * PI;
      }

      path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
    }

    var commandReg = /([mlvhzcqtsa])([^mlvhzcqtsa]*)/ig; // Consider case:
    // (1) delimiter can be comma or space, where continuous commas
    // or spaces should be seen as one comma.
    // (2) value can be like:
    // '2e-4', 'l.5.9' (ignore 0), 'M-10-10', 'l-2.43e-1,34.9983',
    // 'l-.5E1,54', '121-23-44-11' (no delimiter)

    var numberReg = /-?([0-9]*\.)?[0-9]+([eE]-?[0-9]+)?/g; // var valueSplitReg = /[\s,]+/;

    function createPathProxyFromString(data) {
      if (!data) {
        return new PathProxy_1();
      } // var data = data.replace(/-/g, ' -')
      //     .replace(/  /g, ' ')
      //     .replace(/ /g, ',')
      //     .replace(/,,/g, ',');
      // var n;
      // create pipes so that we can split the data
      // for (n = 0; n < cc.length; n++) {
      //     cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
      // }
      // data = data.replace(/-/g, ',-');
      // create array
      // var arr = cs.split('|');
      // init context point


      var cpx = 0;
      var cpy = 0;
      var subpathX = cpx;
      var subpathY = cpy;
      var prevCmd;
      var path = new PathProxy_1();
      var CMD = PathProxy_1.CMD; // commandReg.lastIndex = 0;
      // var cmdResult;
      // while ((cmdResult = commandReg.exec(data)) != null) {
      //     var cmdStr = cmdResult[1];
      //     var cmdContent = cmdResult[2];

      var cmdList = data.match(commandReg);

      for (var l = 0; l < cmdList.length; l++) {
        var cmdText = cmdList[l];
        var cmdStr = cmdText.charAt(0);
        var cmd; // String#split is faster a little bit than String#replace or RegExp#exec.
        // var p = cmdContent.split(valueSplitReg);
        // var pLen = 0;
        // for (var i = 0; i < p.length; i++) {
        //     // '' and other invalid str => NaN
        //     var val = parseFloat(p[i]);
        //     !isNaN(val) && (p[pLen++] = val);
        // }

        var p = cmdText.match(numberReg) || [];
        var pLen = p.length;

        for (var i = 0; i < pLen; i++) {
          p[i] = parseFloat(p[i]);
        }

        var off = 0;

        while (off < pLen) {
          var ctlPtx;
          var ctlPty;
          var rx;
          var ry;
          var psi;
          var fa;
          var fs;
          var x1 = cpx;
          var y1 = cpy; // convert l, H, h, V, and v to L

          switch (cmdStr) {
            case 'l':
              cpx += p[off++];
              cpy += p[off++];
              cmd = CMD.L;
              path.addData(cmd, cpx, cpy);
              break;

            case 'L':
              cpx = p[off++];
              cpy = p[off++];
              cmd = CMD.L;
              path.addData(cmd, cpx, cpy);
              break;

            case 'm':
              cpx += p[off++];
              cpy += p[off++];
              cmd = CMD.M;
              path.addData(cmd, cpx, cpy);
              subpathX = cpx;
              subpathY = cpy;
              cmdStr = 'l';
              break;

            case 'M':
              cpx = p[off++];
              cpy = p[off++];
              cmd = CMD.M;
              path.addData(cmd, cpx, cpy);
              subpathX = cpx;
              subpathY = cpy;
              cmdStr = 'L';
              break;

            case 'h':
              cpx += p[off++];
              cmd = CMD.L;
              path.addData(cmd, cpx, cpy);
              break;

            case 'H':
              cpx = p[off++];
              cmd = CMD.L;
              path.addData(cmd, cpx, cpy);
              break;

            case 'v':
              cpy += p[off++];
              cmd = CMD.L;
              path.addData(cmd, cpx, cpy);
              break;

            case 'V':
              cpy = p[off++];
              cmd = CMD.L;
              path.addData(cmd, cpx, cpy);
              break;

            case 'C':
              cmd = CMD.C;
              path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
              cpx = p[off - 2];
              cpy = p[off - 1];
              break;

            case 'c':
              cmd = CMD.C;
              path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
              cpx += p[off - 2];
              cpy += p[off - 1];
              break;

            case 'S':
              ctlPtx = cpx;
              ctlPty = cpy;
              var len = path.len();
              var pathData = path.data;

              if (prevCmd === CMD.C) {
                ctlPtx += cpx - pathData[len - 4];
                ctlPty += cpy - pathData[len - 3];
              }

              cmd = CMD.C;
              x1 = p[off++];
              y1 = p[off++];
              cpx = p[off++];
              cpy = p[off++];
              path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
              break;

            case 's':
              ctlPtx = cpx;
              ctlPty = cpy;
              var len = path.len();
              var pathData = path.data;

              if (prevCmd === CMD.C) {
                ctlPtx += cpx - pathData[len - 4];
                ctlPty += cpy - pathData[len - 3];
              }

              cmd = CMD.C;
              x1 = cpx + p[off++];
              y1 = cpy + p[off++];
              cpx += p[off++];
              cpy += p[off++];
              path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
              break;

            case 'Q':
              x1 = p[off++];
              y1 = p[off++];
              cpx = p[off++];
              cpy = p[off++];
              cmd = CMD.Q;
              path.addData(cmd, x1, y1, cpx, cpy);
              break;

            case 'q':
              x1 = p[off++] + cpx;
              y1 = p[off++] + cpy;
              cpx += p[off++];
              cpy += p[off++];
              cmd = CMD.Q;
              path.addData(cmd, x1, y1, cpx, cpy);
              break;

            case 'T':
              ctlPtx = cpx;
              ctlPty = cpy;
              var len = path.len();
              var pathData = path.data;

              if (prevCmd === CMD.Q) {
                ctlPtx += cpx - pathData[len - 4];
                ctlPty += cpy - pathData[len - 3];
              }

              cpx = p[off++];
              cpy = p[off++];
              cmd = CMD.Q;
              path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
              break;

            case 't':
              ctlPtx = cpx;
              ctlPty = cpy;
              var len = path.len();
              var pathData = path.data;

              if (prevCmd === CMD.Q) {
                ctlPtx += cpx - pathData[len - 4];
                ctlPty += cpy - pathData[len - 3];
              }

              cpx += p[off++];
              cpy += p[off++];
              cmd = CMD.Q;
              path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
              break;

            case 'A':
              rx = p[off++];
              ry = p[off++];
              psi = p[off++];
              fa = p[off++];
              fs = p[off++];
              x1 = cpx, y1 = cpy;
              cpx = p[off++];
              cpy = p[off++];
              cmd = CMD.A;
              processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
              break;

            case 'a':
              rx = p[off++];
              ry = p[off++];
              psi = p[off++];
              fa = p[off++];
              fs = p[off++];
              x1 = cpx, y1 = cpy;
              cpx += p[off++];
              cpy += p[off++];
              cmd = CMD.A;
              processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
              break;
          }
        }

        if (cmdStr === 'z' || cmdStr === 'Z') {
          cmd = CMD.Z;
          path.addData(cmd); // z may be in the middle of the path.

          cpx = subpathX;
          cpy = subpathY;
        }

        prevCmd = cmd;
      }

      path.toStatic();
      return path;
    } // TODO Optimize double memory cost problem


    function createPathOptions(str, opts) {
      var pathProxy = createPathProxyFromString(str);
      opts = opts || {};

      opts.buildPath = function (path) {
        if (path.setData) {
          path.setData(pathProxy.data); // Svg and vml renderer don't have context

          var ctx = path.getContext();

          if (ctx) {
            path.rebuildPath(ctx);
          }
        } else {
          var ctx = path;
          pathProxy.rebuildPath(ctx);
        }
      };

      opts.applyTransform = function (m) {
        transformPath(pathProxy, m);
        this.dirty(true);
      };

      return opts;
    }
    /**
     * Create a Path object from path string data
     * http://www.w3.org/TR/SVG/paths.html#PathData
     * @param  {Object} opts Other options
     */


    function createFromString(str, opts) {
      return new Path_1(createPathOptions(str, opts));
    }
    /**
     * Create a Path class from path string data
     * @param  {string} str
     * @param  {Object} opts Other options
     */


    function extendFromString(str, opts) {
      return Path_1.extend(createPathOptions(str, opts));
    }
    /**
     * Merge multiple paths
     */
    // TODO Apply transform
    // TODO stroke dash
    // TODO Optimize double memory cost problem


    function mergePath(pathEls, opts) {
      var pathList = [];
      var len = pathEls.length;

      for (var i = 0; i < len; i++) {
        var pathEl = pathEls[i];

        if (!pathEl.path) {
          pathEl.createPathProxy();
        }

        if (pathEl.__dirtyPath) {
          pathEl.buildPath(pathEl.path, pathEl.shape, true);
        }

        pathList.push(pathEl.path);
      }

      var pathBundle = new Path_1(opts); // Need path proxy.

      pathBundle.createPathProxy();

      pathBundle.buildPath = function (path) {
        path.appendPath(pathList); // Svg and vml renderer don't have context

        var ctx = path.getContext();

        if (ctx) {
          path.rebuildPath(ctx);
        }
      };

      return pathBundle;
    }

    var createFromString_1 = createFromString;
    var extendFromString_1 = extendFromString;
    var mergePath_1 = mergePath;

    var path$1 = {
    	createFromString: createFromString_1,
    	extendFromString: extendFromString_1,
    	mergePath: mergePath_1
    };

    var ContextCachedBy$3 = constant.ContextCachedBy;

    /**
     * @alias zrender/graphic/Text
     * @extends module:zrender/graphic/Displayable
     * @constructor
     * @param {Object} opts
     */
    var Text = function (opts) {
      // jshint ignore:line
      Displayable_1.call(this, opts);
    };

    Text.prototype = {
      constructor: Text,
      type: 'text',
      brush: function (ctx, prevEl) {
        var style = this.style; // Optimize, avoid normalize every time.

        this.__dirty && text$1.normalizeTextStyle(style, true); // Use props with prefix 'text'.

        style.fill = style.stroke = style.shadowBlur = style.shadowColor = style.shadowOffsetX = style.shadowOffsetY = null;
        var text = style.text; // Convert to string

        text != null && (text += ''); // Do not apply style.bind in Text node. Because the real bind job
        // is in textHelper.renderText, and performance of text render should
        // be considered.
        // style.bind(ctx, this, prevEl);

        if (!text$1.needDrawText(text, style)) {
          // The current el.style is not applied
          // and should not be used as cache.
          ctx.__attrCachedBy = ContextCachedBy$3.NONE;
          return;
        }

        this.setTransform(ctx);
        text$1.renderText(this, ctx, text, style, null, prevEl);
        this.restoreTransform(ctx);
      },
      getBoundingRect: function () {
        var style = this.style; // Optimize, avoid normalize every time.

        this.__dirty && text$1.normalizeTextStyle(style, true);

        if (!this._rect) {
          var text$2 = style.text;
          text$2 != null ? text$2 += '' : text$2 = '';
          var rect = text.getBoundingRect(style.text + '', style.font, style.textAlign, style.textVerticalAlign, style.textPadding, style.textLineHeight, style.rich);
          rect.x += style.x || 0;
          rect.y += style.y || 0;

          if (text$1.getStroke(style.textStroke, style.textStrokeWidth)) {
            var w = style.textStrokeWidth;
            rect.x -= w / 2;
            rect.y -= w / 2;
            rect.width += w;
            rect.height += w;
          }

          this._rect = rect;
        }

        return this._rect;
      }
    };
    util.inherits(Text, Displayable_1);
    var _default$y = Text;
    var Text_1 = _default$y;

    /**
     * 圆形
     * @module zrender/shape/Circle
     */
    var _default$z = Path_1.extend({
      type: 'circle',
      shape: {
        cx: 0,
        cy: 0,
        r: 0
      },
      buildPath: function (ctx, shape, inBundle) {
        // Better stroking in ShapeBundle
        // Always do it may have performence issue ( fill may be 2x more cost)
        if (inBundle) {
          ctx.moveTo(shape.cx + shape.r, shape.cy);
        } // else {
        //     if (ctx.allocate && !ctx.data.length) {
        //         ctx.allocate(ctx.CMD_MEM_SIZE.A);
        //     }
        // }
        // Better stroking in ShapeBundle
        // ctx.moveTo(shape.cx + shape.r, shape.cy);


        ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
      }
    });

    var Circle = _default$z;

    // Fix weird bug in some version of IE11 (like 11.0.9600.178**),
    // where exception "unexpected call to method or property access"
    // might be thrown when calling ctx.fill or ctx.stroke after a path
    // whose area size is zero is drawn and ctx.clip() is called and
    // shadowBlur is set. See #4572, #3112, #5777.
    // (e.g.,
    //  ctx.moveTo(10, 10);
    //  ctx.lineTo(20, 10);
    //  ctx.closePath();
    //  ctx.clip();
    //  ctx.shadowBlur = 10;
    //  ...
    //  ctx.fill();
    // )
    var shadowTemp = [['shadowBlur', 0], ['shadowColor', '#000'], ['shadowOffsetX', 0], ['shadowOffsetY', 0]];

    function _default$A(orignalBrush) {
      // version string can be: '11.0'
      return env_1.browser.ie && env_1.browser.version >= 11 ? function () {
        var clipPaths = this.__clipPaths;
        var style = this.style;
        var modified;

        if (clipPaths) {
          for (var i = 0; i < clipPaths.length; i++) {
            var clipPath = clipPaths[i];
            var shape = clipPath && clipPath.shape;
            var type = clipPath && clipPath.type;

            if (shape && (type === 'sector' && shape.startAngle === shape.endAngle || type === 'rect' && (!shape.width || !shape.height))) {
              for (var j = 0; j < shadowTemp.length; j++) {
                // It is save to put shadowTemp static, because shadowTemp
                // will be all modified each item brush called.
                shadowTemp[j][2] = style[shadowTemp[j][0]];
                style[shadowTemp[j][0]] = shadowTemp[j][1];
              }

              modified = true;
              break;
            }
          }
        }

        orignalBrush.apply(this, arguments);

        if (modified) {
          for (var j = 0; j < shadowTemp.length; j++) {
            style[shadowTemp[j][0]] = shadowTemp[j][2];
          }
        }
      } : orignalBrush;
    }

    var fixClipWithShadow = _default$A;

    /**
     * 扇形
     * @module zrender/graphic/shape/Sector
     */
    var _default$B = Path_1.extend({
      type: 'sector',
      shape: {
        cx: 0,
        cy: 0,
        r0: 0,
        r: 0,
        startAngle: 0,
        endAngle: Math.PI * 2,
        clockwise: true
      },
      brush: fixClipWithShadow(Path_1.prototype.brush),
      buildPath: function (ctx, shape) {
        var x = shape.cx;
        var y = shape.cy;
        var r0 = Math.max(shape.r0 || 0, 0);
        var r = Math.max(shape.r, 0);
        var startAngle = shape.startAngle;
        var endAngle = shape.endAngle;
        var clockwise = shape.clockwise;
        var unitX = Math.cos(startAngle);
        var unitY = Math.sin(startAngle);
        ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
        ctx.lineTo(unitX * r + x, unitY * r + y);
        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
        ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);

        if (r0 !== 0) {
          ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
        }

        ctx.closePath();
      }
    });

    var Sector = _default$B;

    /**
     * 圆环
     * @module zrender/graphic/shape/Ring
     */
    var _default$C = Path_1.extend({
      type: 'ring',
      shape: {
        cx: 0,
        cy: 0,
        r: 0,
        r0: 0
      },
      buildPath: function (ctx, shape) {
        var x = shape.cx;
        var y = shape.cy;
        var PI2 = Math.PI * 2;
        ctx.moveTo(x + shape.r, y);
        ctx.arc(x, y, shape.r, 0, PI2, false);
        ctx.moveTo(x + shape.r0, y);
        ctx.arc(x, y, shape.r0, 0, PI2, true);
      }
    });

    var Ring = _default$C;

    var v2Distance = vector.distance;

    /**
     * Catmull-Rom spline 插值折线
     * @module zrender/shape/util/smoothSpline
     * @author pissang (https://www.github.com/pissang)
     *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
     *         errorrik (errorrik@gmail.com)
     */

    /**
     * @inner
     */
    function interpolate(p0, p1, p2, p3, t, t2, t3) {
      var v0 = (p2 - p0) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
    }
    /**
     * @alias module:zrender/shape/util/smoothSpline
     * @param {Array} points 线段顶点数组
     * @param {boolean} isLoop
     * @return {Array}
     */


    function _default$D(points, isLoop) {
      var len = points.length;
      var ret = [];
      var distance = 0;

      for (var i = 1; i < len; i++) {
        distance += v2Distance(points[i - 1], points[i]);
      }

      var segs = distance / 2;
      segs = segs < len ? len : segs;

      for (var i = 0; i < segs; i++) {
        var pos = i / (segs - 1) * (isLoop ? len : len - 1);
        var idx = Math.floor(pos);
        var w = pos - idx;
        var p0;
        var p1 = points[idx % len];
        var p2;
        var p3;

        if (!isLoop) {
          p0 = points[idx === 0 ? idx : idx - 1];
          p2 = points[idx > len - 2 ? len - 1 : idx + 1];
          p3 = points[idx > len - 3 ? len - 1 : idx + 2];
        } else {
          p0 = points[(idx - 1 + len) % len];
          p2 = points[(idx + 1) % len];
          p3 = points[(idx + 2) % len];
        }

        var w2 = w * w;
        var w3 = w * w2;
        ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
      }

      return ret;
    }

    var smoothSpline = _default$D;

    var v2Min = vector.min;
    var v2Max = vector.max;
    var v2Scale = vector.scale;
    var v2Distance$1 = vector.distance;
    var v2Add = vector.add;
    var v2Clone = vector.clone;
    var v2Sub = vector.sub;

    /**
     * 贝塞尔平滑曲线
     * @module zrender/shape/util/smoothBezier
     * @author pissang (https://www.github.com/pissang)
     *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
     *         errorrik (errorrik@gmail.com)
     */

    /**
     * 贝塞尔平滑曲线
     * @alias module:zrender/shape/util/smoothBezier
     * @param {Array} points 线段顶点数组
     * @param {number} smooth 平滑等级, 0-1
     * @param {boolean} isLoop
     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
     *                           整个折线的包围盒做一个并集用来约束控制点。
     * @param {Array} 计算出来的控制点数组
     */
    function _default$E(points, smooth, isLoop, constraint) {
      var cps = [];
      var v = [];
      var v1 = [];
      var v2 = [];
      var prevPoint;
      var nextPoint;
      var min;
      var max;

      if (constraint) {
        min = [Infinity, Infinity];
        max = [-Infinity, -Infinity];

        for (var i = 0, len = points.length; i < len; i++) {
          v2Min(min, min, points[i]);
          v2Max(max, max, points[i]);
        } // 与指定的包围盒做并集


        v2Min(min, min, constraint[0]);
        v2Max(max, max, constraint[1]);
      }

      for (var i = 0, len = points.length; i < len; i++) {
        var point = points[i];

        if (isLoop) {
          prevPoint = points[i ? i - 1 : len - 1];
          nextPoint = points[(i + 1) % len];
        } else {
          if (i === 0 || i === len - 1) {
            cps.push(v2Clone(points[i]));
            continue;
          } else {
            prevPoint = points[i - 1];
            nextPoint = points[i + 1];
          }
        }

        v2Sub(v, nextPoint, prevPoint); // use degree to scale the handle length

        v2Scale(v, v, smooth);
        var d0 = v2Distance$1(point, prevPoint);
        var d1 = v2Distance$1(point, nextPoint);
        var sum = d0 + d1;

        if (sum !== 0) {
          d0 /= sum;
          d1 /= sum;
        }

        v2Scale(v1, v, -d0);
        v2Scale(v2, v, d1);
        var cp0 = v2Add([], point, v1);
        var cp1 = v2Add([], point, v2);

        if (constraint) {
          v2Max(cp0, cp0, min);
          v2Min(cp0, cp0, max);
          v2Max(cp1, cp1, min);
          v2Min(cp1, cp1, max);
        }

        cps.push(cp0);
        cps.push(cp1);
      }

      if (isLoop) {
        cps.push(cps.shift());
      }

      return cps;
    }

    var smoothBezier = _default$E;

    function buildPath$1(ctx, shape, closePath) {
      var points = shape.points;
      var smooth = shape.smooth;

      if (points && points.length >= 2) {
        if (smooth && smooth !== 'spline') {
          var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
          ctx.moveTo(points[0][0], points[0][1]);
          var len = points.length;

          for (var i = 0; i < (closePath ? len : len - 1); i++) {
            var cp1 = controlPoints[i * 2];
            var cp2 = controlPoints[i * 2 + 1];
            var p = points[(i + 1) % len];
            ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
          }
        } else {
          if (smooth === 'spline') {
            points = smoothSpline(points, closePath);
          }

          ctx.moveTo(points[0][0], points[0][1]);

          for (var i = 1, l = points.length; i < l; i++) {
            ctx.lineTo(points[i][0], points[i][1]);
          }
        }

        closePath && ctx.closePath();
      }
    }

    var buildPath_1$1 = buildPath$1;

    var poly = {
    	buildPath: buildPath_1$1
    };

    /**
     * 多边形
     * @module zrender/shape/Polygon
     */
    var _default$F = Path_1.extend({
      type: 'polygon',
      shape: {
        points: null,
        smooth: false,
        smoothConstraint: null
      },
      buildPath: function (ctx, shape) {
        poly.buildPath(ctx, shape, true);
      }
    });

    var Polygon = _default$F;

    /**
     * @module zrender/graphic/shape/Polyline
     */
    var _default$G = Path_1.extend({
      type: 'polyline',
      shape: {
        points: null,
        smooth: false,
        smoothConstraint: null
      },
      style: {
        stroke: '#000',
        fill: null
      },
      buildPath: function (ctx, shape) {
        poly.buildPath(ctx, shape, false);
      }
    });

    var Polyline = _default$G;

    /**
     * Sub-pixel optimize for canvas rendering, prevent from blur
     * when rendering a thin vertical/horizontal line.
     */
    var round = Math.round;
    /**
     * Sub pixel optimize line for canvas
     *
     * @param {Object} outputShape The modification will be performed on `outputShape`.
     *                 `outputShape` and `inputShape` can be the same object.
     *                 `outputShape` object can be used repeatly, because all of
     *                 the `x1`, `x2`, `y1`, `y2` will be assigned in this method.
     * @param {Object} [inputShape]
     * @param {number} [inputShape.x1]
     * @param {number} [inputShape.y1]
     * @param {number} [inputShape.x2]
     * @param {number} [inputShape.y2]
     * @param {Object} [style]
     * @param {number} [style.lineWidth]
     */

    function subPixelOptimizeLine(outputShape, inputShape, style) {
      var lineWidth = style && style.lineWidth;

      if (!inputShape || !lineWidth) {
        return;
      }

      var x1 = inputShape.x1;
      var x2 = inputShape.x2;
      var y1 = inputShape.y1;
      var y2 = inputShape.y2;

      if (round(x1 * 2) === round(x2 * 2)) {
        outputShape.x1 = outputShape.x2 = subPixelOptimize(x1, lineWidth, true);
      } else {
        outputShape.x1 = x1;
        outputShape.x2 = x2;
      }

      if (round(y1 * 2) === round(y2 * 2)) {
        outputShape.y1 = outputShape.y2 = subPixelOptimize(y1, lineWidth, true);
      } else {
        outputShape.y1 = y1;
        outputShape.y2 = y2;
      }
    }
    /**
     * Sub pixel optimize rect for canvas
     *
     * @param {Object} outputShape The modification will be performed on `outputShape`.
     *                 `outputShape` and `inputShape` can be the same object.
     *                 `outputShape` object can be used repeatly, because all of
     *                 the `x`, `y`, `width`, `height` will be assigned in this method.
     * @param {Object} [inputShape]
     * @param {number} [inputShape.x]
     * @param {number} [inputShape.y]
     * @param {number} [inputShape.width]
     * @param {number} [inputShape.height]
     * @param {Object} [style]
     * @param {number} [style.lineWidth]
     */


    function subPixelOptimizeRect(outputShape, inputShape, style) {
      var lineWidth = style && style.lineWidth;

      if (!inputShape || !lineWidth) {
        return;
      }

      var originX = inputShape.x;
      var originY = inputShape.y;
      var originWidth = inputShape.width;
      var originHeight = inputShape.height;
      outputShape.x = subPixelOptimize(originX, lineWidth, true);
      outputShape.y = subPixelOptimize(originY, lineWidth, true);
      outputShape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);
      outputShape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);
    }
    /**
     * Sub pixel optimize for canvas
     *
     * @param {number} position Coordinate, such as x, y
     * @param {number} lineWidth Should be nonnegative integer.
     * @param {boolean=} positiveOrNegative Default false (negative).
     * @return {number} Optimized position.
     */


    function subPixelOptimize(position, lineWidth, positiveOrNegative) {
      // Assure that (position + lineWidth / 2) is near integer edge,
      // otherwise line will be fuzzy in canvas.
      var doubledPosition = round(position * 2);
      return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
    }

    var subPixelOptimizeLine_1 = subPixelOptimizeLine;
    var subPixelOptimizeRect_1 = subPixelOptimizeRect;
    var subPixelOptimize_2 = subPixelOptimize;

    var subPixelOptimize_1 = {
    	subPixelOptimizeLine: subPixelOptimizeLine_1,
    	subPixelOptimizeRect: subPixelOptimizeRect_1,
    	subPixelOptimize: subPixelOptimize_2
    };

    var subPixelOptimizeRect$1 = subPixelOptimize_1.subPixelOptimizeRect;

    /**
     * 矩形
     * @module zrender/graphic/shape/Rect
     */
    // Avoid create repeatly.
    var subPixelOptimizeOutputShape = {};

    var _default$H = Path_1.extend({
      type: 'rect',
      shape: {
        // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
        // r缩写为1         相当于 [1, 1, 1, 1]
        // r缩写为[1]       相当于 [1, 1, 1, 1]
        // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
        // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
        r: 0,
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      buildPath: function (ctx, shape) {
        var x;
        var y;
        var width;
        var height;

        if (this.subPixelOptimize) {
          subPixelOptimizeRect$1(subPixelOptimizeOutputShape, shape, this.style);
          x = subPixelOptimizeOutputShape.x;
          y = subPixelOptimizeOutputShape.y;
          width = subPixelOptimizeOutputShape.width;
          height = subPixelOptimizeOutputShape.height;
          subPixelOptimizeOutputShape.r = shape.r;
          shape = subPixelOptimizeOutputShape;
        } else {
          x = shape.x;
          y = shape.y;
          width = shape.width;
          height = shape.height;
        }

        if (!shape.r) {
          ctx.rect(x, y, width, height);
        } else {
          roundRect.buildPath(ctx, shape);
        }

        ctx.closePath();
        return;
      }
    });

    var Rect = _default$H;

    var subPixelOptimizeLine$1 = subPixelOptimize_1.subPixelOptimizeLine;

    /**
     * 直线
     * @module zrender/graphic/shape/Line
     */
    // Avoid create repeatly.
    var subPixelOptimizeOutputShape$1 = {};

    var _default$I = Path_1.extend({
      type: 'line',
      shape: {
        // Start point
        x1: 0,
        y1: 0,
        // End point
        x2: 0,
        y2: 0,
        percent: 1
      },
      style: {
        stroke: '#000',
        fill: null
      },
      buildPath: function (ctx, shape) {
        var x1;
        var y1;
        var x2;
        var y2;

        if (this.subPixelOptimize) {
          subPixelOptimizeLine$1(subPixelOptimizeOutputShape$1, shape, this.style);
          x1 = subPixelOptimizeOutputShape$1.x1;
          y1 = subPixelOptimizeOutputShape$1.y1;
          x2 = subPixelOptimizeOutputShape$1.x2;
          y2 = subPixelOptimizeOutputShape$1.y2;
        } else {
          x1 = shape.x1;
          y1 = shape.y1;
          x2 = shape.x2;
          y2 = shape.y2;
        }

        var percent = shape.percent;

        if (percent === 0) {
          return;
        }

        ctx.moveTo(x1, y1);

        if (percent < 1) {
          x2 = x1 * (1 - percent) + x2 * percent;
          y2 = y1 * (1 - percent) + y2 * percent;
        }

        ctx.lineTo(x2, y2);
      },

      /**
       * Get point at percent
       * @param  {number} percent
       * @return {Array.<number>}
       */
      pointAt: function (p) {
        var shape = this.shape;
        return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
      }
    });

    var Line = _default$I;

    var quadraticSubdivide$1 = curve.quadraticSubdivide;
    var cubicSubdivide$1 = curve.cubicSubdivide;
    var quadraticAt$1 = curve.quadraticAt;
    var cubicAt$1 = curve.cubicAt;
    var quadraticDerivativeAt$1 = curve.quadraticDerivativeAt;
    var cubicDerivativeAt$1 = curve.cubicDerivativeAt;

    /**
     * 贝塞尔曲线
     * @module zrender/shape/BezierCurve
     */
    var out = [];

    function someVectorAt(shape, t, isTangent) {
      var cpx2 = shape.cpx2;
      var cpy2 = shape.cpy2;

      if (cpx2 === null || cpy2 === null) {
        return [(isTangent ? cubicDerivativeAt$1 : cubicAt$1)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt$1 : cubicAt$1)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
      } else {
        return [(isTangent ? quadraticDerivativeAt$1 : quadraticAt$1)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt$1 : quadraticAt$1)(shape.y1, shape.cpy1, shape.y2, t)];
      }
    }

    var _default$J = Path_1.extend({
      type: 'bezier-curve',
      shape: {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0,
        cpx1: 0,
        cpy1: 0,
        // cpx2: 0,
        // cpy2: 0
        // Curve show percent, for animating
        percent: 1
      },
      style: {
        stroke: '#000',
        fill: null
      },
      buildPath: function (ctx, shape) {
        var x1 = shape.x1;
        var y1 = shape.y1;
        var x2 = shape.x2;
        var y2 = shape.y2;
        var cpx1 = shape.cpx1;
        var cpy1 = shape.cpy1;
        var cpx2 = shape.cpx2;
        var cpy2 = shape.cpy2;
        var percent = shape.percent;

        if (percent === 0) {
          return;
        }

        ctx.moveTo(x1, y1);

        if (cpx2 == null || cpy2 == null) {
          if (percent < 1) {
            quadraticSubdivide$1(x1, cpx1, x2, percent, out);
            cpx1 = out[1];
            x2 = out[2];
            quadraticSubdivide$1(y1, cpy1, y2, percent, out);
            cpy1 = out[1];
            y2 = out[2];
          }

          ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
        } else {
          if (percent < 1) {
            cubicSubdivide$1(x1, cpx1, cpx2, x2, percent, out);
            cpx1 = out[1];
            cpx2 = out[2];
            x2 = out[3];
            cubicSubdivide$1(y1, cpy1, cpy2, y2, percent, out);
            cpy1 = out[1];
            cpy2 = out[2];
            y2 = out[3];
          }

          ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
        }
      },

      /**
       * Get point at percent
       * @param  {number} t
       * @return {Array.<number>}
       */
      pointAt: function (t) {
        return someVectorAt(this.shape, t, false);
      },

      /**
       * Get tangent at percent
       * @param  {number} t
       * @return {Array.<number>}
       */
      tangentAt: function (t) {
        var p = someVectorAt(this.shape, t, true);
        return vector.normalize(p, p);
      }
    });

    var BezierCurve = _default$J;

    /**
     * 圆弧
     * @module zrender/graphic/shape/Arc
     */
    var _default$K = Path_1.extend({
      type: 'arc',
      shape: {
        cx: 0,
        cy: 0,
        r: 0,
        startAngle: 0,
        endAngle: Math.PI * 2,
        clockwise: true
      },
      style: {
        stroke: '#000',
        fill: null
      },
      buildPath: function (ctx, shape) {
        var x = shape.cx;
        var y = shape.cy;
        var r = Math.max(shape.r, 0);
        var startAngle = shape.startAngle;
        var endAngle = shape.endAngle;
        var clockwise = shape.clockwise;
        var unitX = Math.cos(startAngle);
        var unitY = Math.sin(startAngle);
        ctx.moveTo(unitX * r + x, unitY * r + y);
        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
      }
    });

    var Arc = _default$K;

    // CompoundPath to improve performance
    var _default$L = Path_1.extend({
      type: 'compound',
      shape: {
        paths: null
      },
      _updatePathDirty: function () {
        var dirtyPath = this.__dirtyPath;
        var paths = this.shape.paths;

        for (var i = 0; i < paths.length; i++) {
          // Mark as dirty if any subpath is dirty
          dirtyPath = dirtyPath || paths[i].__dirtyPath;
        }

        this.__dirtyPath = dirtyPath;
        this.__dirty = this.__dirty || dirtyPath;
      },
      beforeBrush: function () {
        this._updatePathDirty();

        var paths = this.shape.paths || [];
        var scale = this.getGlobalScale(); // Update path scale

        for (var i = 0; i < paths.length; i++) {
          if (!paths[i].path) {
            paths[i].createPathProxy();
          }

          paths[i].path.setScale(scale[0], scale[1], paths[i].segmentIgnoreThreshold);
        }
      },
      buildPath: function (ctx, shape) {
        var paths = shape.paths || [];

        for (var i = 0; i < paths.length; i++) {
          paths[i].buildPath(ctx, paths[i].shape, true);
        }
      },
      afterBrush: function () {
        var paths = this.shape.paths || [];

        for (var i = 0; i < paths.length; i++) {
          paths[i].__dirtyPath = false;
        }
      },
      getBoundingRect: function () {
        this._updatePathDirty();

        return Path_1.prototype.getBoundingRect.call(this);
      }
    });

    var CompoundPath = _default$L;

    /**
     * @param {Array.<Object>} colorStops
     */
    var Gradient = function (colorStops) {
      this.colorStops = colorStops || [];
    };

    Gradient.prototype = {
      constructor: Gradient,
      addColorStop: function (offset, color) {
        this.colorStops.push({
          offset: offset,
          color: color
        });
      }
    };
    var _default$M = Gradient;
    var Gradient_1 = _default$M;

    /**
     * x, y, x2, y2 are all percent from 0 to 1
     * @param {number} [x=0]
     * @param {number} [y=0]
     * @param {number} [x2=1]
     * @param {number} [y2=0]
     * @param {Array.<Object>} colorStops
     * @param {boolean} [globalCoord=false]
     */
    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
      // Should do nothing more in this constructor. Because gradient can be
      // declard by `color: {type: 'linear', colorStops: ...}`, where
      // this constructor will not be called.
      this.x = x == null ? 0 : x;
      this.y = y == null ? 0 : y;
      this.x2 = x2 == null ? 1 : x2;
      this.y2 = y2 == null ? 0 : y2; // Can be cloned

      this.type = 'linear'; // If use global coord

      this.global = globalCoord || false;
      Gradient_1.call(this, colorStops);
    };

    LinearGradient.prototype = {
      constructor: LinearGradient
    };
    util.inherits(LinearGradient, Gradient_1);
    var _default$N = LinearGradient;
    var LinearGradient_1 = _default$N;

    /**
     * x, y, r are all percent from 0 to 1
     * @param {number} [x=0.5]
     * @param {number} [y=0.5]
     * @param {number} [r=0.5]
     * @param {Array.<Object>} [colorStops]
     * @param {boolean} [globalCoord=false]
     */
    var RadialGradient = function (x, y, r, colorStops, globalCoord) {
      // Should do nothing more in this constructor. Because gradient can be
      // declard by `color: {type: 'radial', colorStops: ...}`, where
      // this constructor will not be called.
      this.x = x == null ? 0.5 : x;
      this.y = y == null ? 0.5 : y;
      this.r = r == null ? 0.5 : r; // Can be cloned

      this.type = 'radial'; // If use global coord

      this.global = globalCoord || false;
      Gradient_1.call(this, colorStops);
    };

    RadialGradient.prototype = {
      constructor: RadialGradient
    };
    util.inherits(RadialGradient, Gradient_1);
    var _default$O = RadialGradient;
    var RadialGradient_1 = _default$O;

    var inherits$1 = util.inherits;





    /**
     * Displayable for incremental rendering. It will be rendered in a separate layer
     * IncrementalDisplay have two main methods. `clearDisplayables` and `addDisplayables`
     * addDisplayables will render the added displayables incremetally.
     *
     * It use a not clearFlag to tell the painter don't clear the layer if it's the first element.
     */
    // TODO Style override ?
    function IncrementalDisplayble(opts) {
      Displayable_1.call(this, opts);
      this._displayables = [];
      this._temporaryDisplayables = [];
      this._cursor = 0;
      this.notClear = true;
    }

    IncrementalDisplayble.prototype.incremental = true;

    IncrementalDisplayble.prototype.clearDisplaybles = function () {
      this._displayables = [];
      this._temporaryDisplayables = [];
      this._cursor = 0;
      this.dirty();
      this.notClear = false;
    };

    IncrementalDisplayble.prototype.addDisplayable = function (displayable, notPersistent) {
      if (notPersistent) {
        this._temporaryDisplayables.push(displayable);
      } else {
        this._displayables.push(displayable);
      }

      this.dirty();
    };

    IncrementalDisplayble.prototype.addDisplayables = function (displayables, notPersistent) {
      notPersistent = notPersistent || false;

      for (var i = 0; i < displayables.length; i++) {
        this.addDisplayable(displayables[i], notPersistent);
      }
    };

    IncrementalDisplayble.prototype.eachPendingDisplayable = function (cb) {
      for (var i = this._cursor; i < this._displayables.length; i++) {
        cb && cb(this._displayables[i]);
      }

      for (var i = 0; i < this._temporaryDisplayables.length; i++) {
        cb && cb(this._temporaryDisplayables[i]);
      }
    };

    IncrementalDisplayble.prototype.update = function () {
      this.updateTransform();

      for (var i = this._cursor; i < this._displayables.length; i++) {
        var displayable = this._displayables[i]; // PENDING

        displayable.parent = this;
        displayable.update();
        displayable.parent = null;
      }

      for (var i = 0; i < this._temporaryDisplayables.length; i++) {
        var displayable = this._temporaryDisplayables[i]; // PENDING

        displayable.parent = this;
        displayable.update();
        displayable.parent = null;
      }
    };

    IncrementalDisplayble.prototype.brush = function (ctx, prevEl) {
      // Render persistant displayables.
      for (var i = this._cursor; i < this._displayables.length; i++) {
        var displayable = this._displayables[i];
        displayable.beforeBrush && displayable.beforeBrush(ctx);
        displayable.brush(ctx, i === this._cursor ? null : this._displayables[i - 1]);
        displayable.afterBrush && displayable.afterBrush(ctx);
      }

      this._cursor = i; // Render temporary displayables.

      for (var i = 0; i < this._temporaryDisplayables.length; i++) {
        var displayable = this._temporaryDisplayables[i];
        displayable.beforeBrush && displayable.beforeBrush(ctx);
        displayable.brush(ctx, i === 0 ? null : this._temporaryDisplayables[i - 1]);
        displayable.afterBrush && displayable.afterBrush(ctx);
      }

      this._temporaryDisplayables = [];
      this.notClear = true;
    };

    var m = [];

    IncrementalDisplayble.prototype.getBoundingRect = function () {
      if (!this._rect) {
        var rect = new BoundingRect_1(Infinity, Infinity, -Infinity, -Infinity);

        for (var i = 0; i < this._displayables.length; i++) {
          var displayable = this._displayables[i];
          var childRect = displayable.getBoundingRect().clone();

          if (displayable.needLocalTransform()) {
            childRect.applyTransform(displayable.getLocalTransform(m));
          }

          rect.union(childRect);
        }

        this._rect = rect;
      }

      return this._rect;
    };

    IncrementalDisplayble.prototype.contain = function (x, y) {
      var localPos = this.transformCoordToLocal(x, y);
      var rect = this.getBoundingRect();

      if (rect.contain(localPos[0], localPos[1])) {
        for (var i = 0; i < this._displayables.length; i++) {
          var displayable = this._displayables[i];

          if (displayable.contain(x, y)) {
            return true;
          }
        }
      }

      return false;
    };

    inherits$1(IncrementalDisplayble, Displayable_1);
    var _default$P = IncrementalDisplayble;
    var IncrementalDisplayable = _default$P;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

















    var Image$2 = Image$1;



    var Group_1$1 = Group_1;



    var Text_1$1 = Text_1;



    var Circle_1 = Circle;



    var Sector_1 = Sector;



    var Ring_1 = Ring;



    var Polygon_1 = Polygon;



    var Polyline_1 = Polyline;



    var Rect_1 = Rect;



    var Line_1 = Line;



    var BezierCurve_1 = BezierCurve;



    var Arc_1 = Arc;



    var CompoundPath_1 = CompoundPath;



    var LinearGradient_1$1 = LinearGradient_1;



    var RadialGradient_1$1 = RadialGradient_1;



    var BoundingRect_1$1 = BoundingRect_1;



    var IncrementalDisplayable_1 = IncrementalDisplayable;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var mathMax$3 = Math.max;
    var mathMin$3 = Math.min;
    var EMPTY_OBJ = {};
    var Z2_EMPHASIS_LIFT = 1; // key: label model property nane, value: style property name.

    var CACHED_LABEL_STYLE_PROPERTIES = {
      color: 'textFill',
      textBorderColor: 'textStroke',
      textBorderWidth: 'textStrokeWidth'
    };
    var EMPHASIS = 'emphasis';
    var NORMAL = 'normal'; // Reserve 0 as default.

    var _highlightNextDigit = 1;
    var _highlightKeyMap = {};
    var _customShapeMap = {};
    /**
     * Extend shape with parameters
     */

    function extendShape(opts) {
      return Path_1.extend(opts);
    }
    /**
     * Extend path
     */


    function extendPath(pathData, opts) {
      return path$1.extendFromString(pathData, opts);
    }
    /**
     * Register a user defined shape.
     * The shape class can be fetched by `getShapeClass`
     * This method will overwrite the registered shapes, including
     * the registered built-in shapes, if using the same `name`.
     * The shape can be used in `custom series` and
     * `graphic component` by declaring `{type: name}`.
     *
     * @param {string} name
     * @param {Object} ShapeClass Can be generated by `extendShape`.
     */


    function registerShape(name, ShapeClass) {
      _customShapeMap[name] = ShapeClass;
    }
    /**
     * Find shape class registered by `registerShape`. Usually used in
     * fetching user defined shape.
     *
     * [Caution]:
     * (1) This method **MUST NOT be used inside echarts !!!**, unless it is prepared
     * to use user registered shapes.
     * Because the built-in shape (see `getBuiltInShape`) will be registered by
     * `registerShape` by default. That enables users to get both built-in
     * shapes as well as the shapes belonging to themsleves. But users can overwrite
     * the built-in shapes by using names like 'circle', 'rect' via calling
     * `registerShape`. So the echarts inner featrues should not fetch shapes from here
     * in case that it is overwritten by users, except that some features, like
     * `custom series`, `graphic component`, do it deliberately.
     *
     * (2) In the features like `custom series`, `graphic component`, the user input
     * `{tpye: 'xxx'}` does not only specify shapes but also specify other graphic
     * elements like `'group'`, `'text'`, `'image'` or event `'path'`. Those names
     * are reserved names, that is, if some user register a shape named `'image'`,
     * the shape will not be used. If we intending to add some more reserved names
     * in feature, that might bring break changes (disable some existing user shape
     * names). But that case probably rearly happen. So we dont make more mechanism
     * to resolve this issue here.
     *
     * @param {string} name
     * @return {Object} The shape class. If not found, return nothing.
     */


    function getShapeClass(name) {
      if (_customShapeMap.hasOwnProperty(name)) {
        return _customShapeMap[name];
      }
    }
    /**
     * Create a path element from path data string
     * @param {string} pathData
     * @param {Object} opts
     * @param {module:zrender/core/BoundingRect} rect
     * @param {string} [layout=cover] 'center' or 'cover'
     */


    function makePath(pathData, opts, rect, layout) {
      var path = path$1.createFromString(pathData, opts);

      if (rect) {
        if (layout === 'center') {
          rect = centerGraphic(rect, path.getBoundingRect());
        }

        resizePath(path, rect);
      }

      return path;
    }
    /**
     * Create a image element from image url
     * @param {string} imageUrl image url
     * @param {Object} opts options
     * @param {module:zrender/core/BoundingRect} rect constrain rect
     * @param {string} [layout=cover] 'center' or 'cover'
     */


    function makeImage(imageUrl, rect, layout) {
      var path = new Image$1({
        style: {
          image: imageUrl,
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        },
        onload: function (img) {
          if (layout === 'center') {
            var boundingRect = {
              width: img.width,
              height: img.height
            };
            path.setStyle(centerGraphic(rect, boundingRect));
          }
        }
      });
      return path;
    }
    /**
     * Get position of centered element in bounding box.
     *
     * @param  {Object} rect         element local bounding box
     * @param  {Object} boundingRect constraint bounding box
     * @return {Object} element position containing x, y, width, and height
     */


    function centerGraphic(rect, boundingRect) {
      // Set rect to center, keep width / height ratio.
      var aspect = boundingRect.width / boundingRect.height;
      var width = rect.height * aspect;
      var height;

      if (width <= rect.width) {
        height = rect.height;
      } else {
        width = rect.width;
        height = width / aspect;
      }

      var cx = rect.x + rect.width / 2;
      var cy = rect.y + rect.height / 2;
      return {
        x: cx - width / 2,
        y: cy - height / 2,
        width: width,
        height: height
      };
    }

    var mergePath$1 = path$1.mergePath;
    /**
     * Resize a path to fit the rect
     * @param {module:zrender/graphic/Path} path
     * @param {Object} rect
     */

    function resizePath(path, rect) {
      if (!path.applyTransform) {
        return;
      }

      var pathRect = path.getBoundingRect();
      var m = pathRect.calculateTransform(rect);
      path.applyTransform(m);
    }
    /**
     * Sub pixel optimize line for canvas
     *
     * @param {Object} param
     * @param {Object} [param.shape]
     * @param {number} [param.shape.x1]
     * @param {number} [param.shape.y1]
     * @param {number} [param.shape.x2]
     * @param {number} [param.shape.y2]
     * @param {Object} [param.style]
     * @param {number} [param.style.lineWidth]
     * @return {Object} Modified param
     */


    function subPixelOptimizeLine$2(param) {
      subPixelOptimize_1.subPixelOptimizeLine(param.shape, param.shape, param.style);
      return param;
    }
    /**
     * Sub pixel optimize rect for canvas
     *
     * @param {Object} param
     * @param {Object} [param.shape]
     * @param {number} [param.shape.x]
     * @param {number} [param.shape.y]
     * @param {number} [param.shape.width]
     * @param {number} [param.shape.height]
     * @param {Object} [param.style]
     * @param {number} [param.style.lineWidth]
     * @return {Object} Modified param
     */


    function subPixelOptimizeRect$2(param) {
      subPixelOptimize_1.subPixelOptimizeRect(param.shape, param.shape, param.style);
      return param;
    }
    /**
     * Sub pixel optimize for canvas
     *
     * @param {number} position Coordinate, such as x, y
     * @param {number} lineWidth Should be nonnegative integer.
     * @param {boolean=} positiveOrNegative Default false (negative).
     * @return {number} Optimized position.
     */


    var subPixelOptimize$1 = subPixelOptimize_1.subPixelOptimize;

    function hasFillOrStroke(fillOrStroke) {
      return fillOrStroke != null && fillOrStroke !== 'none';
    } // Most lifted color are duplicated.


    var liftedColorMap = util.createHashMap();
    var liftedColorCount = 0;

    function liftColor(color$1) {
      if (typeof color$1 !== 'string') {
        return color$1;
      }

      var liftedColor = liftedColorMap.get(color$1);

      if (!liftedColor) {
        liftedColor = color.lift(color$1, -0.1);

        if (liftedColorCount < 10000) {
          liftedColorMap.set(color$1, liftedColor);
          liftedColorCount++;
        }
      }

      return liftedColor;
    }

    function cacheElementStl(el) {
      if (!el.__hoverStlDirty) {
        return;
      }

      el.__hoverStlDirty = false;
      var hoverStyle = el.__hoverStl;

      if (!hoverStyle) {
        el.__cachedNormalStl = el.__cachedNormalZ2 = null;
        return;
      }

      var normalStyle = el.__cachedNormalStl = {};
      el.__cachedNormalZ2 = el.z2;
      var elStyle = el.style;

      for (var name in hoverStyle) {
        // See comment in `singleEnterEmphasis`.
        if (hoverStyle[name] != null) {
          normalStyle[name] = elStyle[name];
        }
      } // Always cache fill and stroke to normalStyle for lifting color.


      normalStyle.fill = elStyle.fill;
      normalStyle.stroke = elStyle.stroke;
    }

    function singleEnterEmphasis(el) {
      var hoverStl = el.__hoverStl;

      if (!hoverStl || el.__highlighted) {
        return;
      }

      var zr = el.__zr;
      var useHoverLayer = el.useHoverLayer && zr && zr.painter.type === 'canvas';
      el.__highlighted = useHoverLayer ? 'layer' : 'plain';

      if (el.isGroup || !zr && el.useHoverLayer) {
        return;
      }

      var elTarget = el;
      var targetStyle = el.style;

      if (useHoverLayer) {
        elTarget = zr.addHover(el);
        targetStyle = elTarget.style;
      }

      rollbackDefaultTextStyle(targetStyle);

      if (!useHoverLayer) {
        cacheElementStl(elTarget);
      } // styles can be:
      // {
      //    label: {
      //        show: false,
      //        position: 'outside',
      //        fontSize: 18
      //    },
      //    emphasis: {
      //        label: {
      //            show: true
      //        }
      //    }
      // },
      // where properties of `emphasis` may not appear in `normal`. We previously use
      // module:echarts/util/model#defaultEmphasis to merge `normal` to `emphasis`.
      // But consider rich text and setOption in merge mode, it is impossible to cover
      // all properties in merge. So we use merge mode when setting style here.
      // But we choose the merge strategy that only properties that is not `null/undefined`.
      // Because when making a textStyle (espacially rich text), it is not easy to distinguish
      // `hasOwnProperty` and `null/undefined` in code, so we trade them as the same for simplicity.
      // But this strategy brings a trouble that `null/undefined` can not be used to remove
      // style any more in `emphasis`. Users can both set properties directly on normal and
      // emphasis to avoid this issue, or we might support `'none'` for this case if required.


      targetStyle.extendFrom(hoverStl);
      setDefaultHoverFillStroke(targetStyle, hoverStl, 'fill');
      setDefaultHoverFillStroke(targetStyle, hoverStl, 'stroke');
      applyDefaultTextStyle(targetStyle);

      if (!useHoverLayer) {
        el.dirty(false);
        el.z2 += Z2_EMPHASIS_LIFT;
      }
    }

    function setDefaultHoverFillStroke(targetStyle, hoverStyle, prop) {
      if (!hasFillOrStroke(hoverStyle[prop]) && hasFillOrStroke(targetStyle[prop])) {
        targetStyle[prop] = liftColor(targetStyle[prop]);
      }
    }

    function singleEnterNormal(el) {
      var highlighted = el.__highlighted;

      if (!highlighted) {
        return;
      }

      el.__highlighted = false;

      if (el.isGroup) {
        return;
      }

      if (highlighted === 'layer') {
        el.__zr && el.__zr.removeHover(el);
      } else {
        var style = el.style;
        var normalStl = el.__cachedNormalStl;

        if (normalStl) {
          rollbackDefaultTextStyle(style);
          el.setStyle(normalStl);
          applyDefaultTextStyle(style);
        } // `__cachedNormalZ2` will not be reset if calling `setElementHoverStyle`
        // when `el` is on emphasis state. So here by comparing with 1, we try
        // hard to make the bug case rare.


        var normalZ2 = el.__cachedNormalZ2;

        if (normalZ2 != null && el.z2 - normalZ2 === Z2_EMPHASIS_LIFT) {
          el.z2 = normalZ2;
        }
      }
    }

    function traverseUpdate(el, updater, commonParam) {
      // If root is group, also enter updater for `highDownOnUpdate`.
      var fromState = NORMAL;
      var toState = NORMAL;
      var trigger; // See the rule of `highDownOnUpdate` on `graphic.setAsHighDownDispatcher`.

      el.__highlighted && (fromState = EMPHASIS, trigger = true);
      updater(el, commonParam);
      el.__highlighted && (toState = EMPHASIS, trigger = true);
      el.isGroup && el.traverse(function (child) {
        !child.isGroup && updater(child, commonParam);
      });
      trigger && el.__highDownOnUpdate && el.__highDownOnUpdate(fromState, toState);
    }
    /**
     * Set hover style (namely "emphasis style") of element, based on the current
     * style of the given `el`.
     * This method should be called after all of the normal styles have been adopted
     * to the `el`. See the reason on `setHoverStyle`.
     *
     * @param {module:zrender/Element} el Should not be `zrender/container/Group`.
     * @param {Object} [el.hoverStyle] Can be set on el or its descendants,
     *        e.g., `el.hoverStyle = ...; graphic.setHoverStyle(el); `.
     *        Often used when item group has a label element and it's hoverStyle is different.
     * @param {Object|boolean} [hoverStl] The specified hover style.
     *        If set as `false`, disable the hover style.
     *        Similarly, The `el.hoverStyle` can alse be set
     *        as `false` to disable the hover style.
     *        Otherwise, use the default hover style if not provided.
     */


    function setElementHoverStyle(el, hoverStl) {
      // For performance consideration, it might be better to make the "hover style" only the
      // difference properties from the "normal style", but not a entire copy of all styles.
      hoverStl = el.__hoverStl = hoverStl !== false && (el.hoverStyle || hoverStl || {});
      el.__hoverStlDirty = true; // FIXME
      // It is not completely right to save "normal"/"emphasis" flag on elements.
      // It probably should be saved on `data` of series. Consider the cases:
      // (1) A highlighted elements are moved out of the view port and re-enter
      // again by dataZoom.
      // (2) call `setOption` and replace elements totally when they are highlighted.

      if (el.__highlighted) {
        // Consider the case:
        // The styles of a highlighted `el` is being updated. The new "emphasis style"
        // should be adapted to the `el`. Notice here new "normal styles" should have
        // been set outside and the cached "normal style" is out of date.
        el.__cachedNormalStl = null; // Do not clear `__cachedNormalZ2` here, because setting `z2` is not a constraint
        // of this method. In most cases, `z2` is not set and hover style should be able
        // to rollback. Of course, that would bring bug, but only in a rare case, see
        // `doSingleLeaveHover` for details.

        singleEnterNormal(el);
        singleEnterEmphasis(el);
      }
    }

    function onElementMouseOver(e) {
      !shouldSilent(this, e) // "emphasis" event highlight has higher priority than mouse highlight.
      && !this.__highByOuter && traverseUpdate(this, singleEnterEmphasis);
    }

    function onElementMouseOut(e) {
      !shouldSilent(this, e) // "emphasis" event highlight has higher priority than mouse highlight.
      && !this.__highByOuter && traverseUpdate(this, singleEnterNormal);
    }

    function onElementEmphasisEvent(highlightDigit) {
      this.__highByOuter |= 1 << (highlightDigit || 0);
      traverseUpdate(this, singleEnterEmphasis);
    }

    function onElementNormalEvent(highlightDigit) {
      !(this.__highByOuter &= ~(1 << (highlightDigit || 0))) && traverseUpdate(this, singleEnterNormal);
    }

    function shouldSilent(el, e) {
      return el.__highDownSilentOnTouch && e.zrByTouch;
    }
    /**
     * Set hover style (namely "emphasis style") of element,
     * based on the current style of the given `el`.
     *
     * (1)
     * **CONSTRAINTS** for this method:
     * <A> This method MUST be called after all of the normal styles having been adopted
     * to the `el`.
     * <B> The input `hoverStyle` (that is, "emphasis style") MUST be the subset of the
     * "normal style" having been set to the el.
     * <C> `color` MUST be one of the "normal styles" (because color might be lifted as
     * a default hover style).
     *
     * The reason: this method treat the current style of the `el` as the "normal style"
     * and cache them when enter/update the "emphasis style". Consider the case: the `el`
     * is in "emphasis" state and `setOption`/`dispatchAction` trigger the style updating
     * logic, where the el should shift from the original emphasis style to the new
     * "emphasis style" and should be able to "downplay" back to the new "normal style".
     *
     * Indeed, it is error-prone to make a interface has so many constraints, but I have
     * not found a better solution yet to fit the backward compatibility, performance and
     * the current programming style.
     *
     * (2)
     * Call the method for a "root" element once. Do not call it for each descendants.
     * If the descendants elemenets of a group has itself hover style different from the
     * root group, we can simply mount the style on `el.hoverStyle` for them, but should
     * not call this method for them.
     *
     * (3) These input parameters can be set directly on `el`:
     *
     * @param {module:zrender/Element} el
     * @param {Object} [el.hoverStyle] See `graphic.setElementHoverStyle`.
     * @param {boolean} [el.highDownSilentOnTouch=false] See `graphic.setAsHighDownDispatcher`.
     * @param {Function} [el.highDownOnUpdate] See `graphic.setAsHighDownDispatcher`.
     * @param {Object|boolean} [hoverStyle] See `graphic.setElementHoverStyle`.
     */


    function setHoverStyle(el, hoverStyle) {
      setAsHighDownDispatcher(el, true);
      traverseUpdate(el, setElementHoverStyle, hoverStyle);
    }
    /**
     * @param {module:zrender/Element} el
     * @param {Function} [el.highDownOnUpdate] Called when state updated.
     *        Since `setHoverStyle` has the constraint that it must be called after
     *        all of the normal style updated, `highDownOnUpdate` is not needed to
     *        trigger if both `fromState` and `toState` is 'normal', and needed to
     *        trigger if both `fromState` and `toState` is 'emphasis', which enables
     *        to sync outside style settings to "emphasis" state.
     *        @this {string} This dispatcher `el`.
     *        @param {string} fromState Can be "normal" or "emphasis".
     *               `fromState` might equal to `toState`,
     *               for example, when this method is called when `el` is
     *               on "emphasis" state.
     *        @param {string} toState Can be "normal" or "emphasis".
     *
     *        FIXME
     *        CAUTION: Do not expose `highDownOnUpdate` outside echarts.
     *        Because it is not a complete solution. The update
     *        listener should not have been mount in element,
     *        and the normal/emphasis state should not have
     *        mantained on elements.
     *
     * @param {boolean} [el.highDownSilentOnTouch=false]
     *        In touch device, mouseover event will be trigger on touchstart event
     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
     *        conveniently use hoverStyle when tap on touch screen without additional
     *        code for compatibility.
     *        But if the chart/component has select feature, which usually also use
     *        hoverStyle, there might be conflict between 'select-highlight' and
     *        'hover-highlight' especially when roam is enabled (see geo for example).
     *        In this case, `highDownSilentOnTouch` should be used to disable
     *        hover-highlight on touch device.
     * @param {boolean} [asDispatcher=true] If `false`, do not set as "highDownDispatcher".
     */


    function setAsHighDownDispatcher(el, asDispatcher) {
      var disable = asDispatcher === false; // Make `highDownSilentOnTouch` and `highDownOnUpdate` only work after
      // `setAsHighDownDispatcher` called. Avoid it is modified by user unexpectedly.

      el.__highDownSilentOnTouch = el.highDownSilentOnTouch;
      el.__highDownOnUpdate = el.highDownOnUpdate; // Simple optimize, since this method might be
      // called for each elements of a group in some cases.

      if (!disable || el.__highDownDispatcher) {
        var method = disable ? 'off' : 'on'; // Duplicated function will be auto-ignored, see Eventful.js.

        el[method]('mouseover', onElementMouseOver)[method]('mouseout', onElementMouseOut); // Emphasis, normal can be triggered manually by API or other components like hover link.

        el[method]('emphasis', onElementEmphasisEvent)[method]('normal', onElementNormalEvent); // Also keep previous record.

        el.__highByOuter = el.__highByOuter || 0;
        el.__highDownDispatcher = !disable;
      }
    }
    /**
     * @param {module:zrender/src/Element} el
     * @return {boolean}
     */


    function isHighDownDispatcher(el) {
      return !!(el && el.__highDownDispatcher);
    }
    /**
     * Support hightlight/downplay record on each elements.
     * For the case: hover highlight/downplay (legend, visualMap, ...) and
     * user triggerred hightlight/downplay should not conflict.
     * Only all of the highlightDigit cleared, return to normal.
     * @param {string} highlightKey
     * @return {number} highlightDigit
     */


    function getHighlightDigit(highlightKey) {
      var highlightDigit = _highlightKeyMap[highlightKey];

      if (highlightDigit == null && _highlightNextDigit <= 32) {
        highlightDigit = _highlightKeyMap[highlightKey] = _highlightNextDigit++;
      }

      return highlightDigit;
    }
    /**
     * See more info in `setTextStyleCommon`.
     * @param {Object|module:zrender/graphic/Style} normalStyle
     * @param {Object} emphasisStyle
     * @param {module:echarts/model/Model} normalModel
     * @param {module:echarts/model/Model} emphasisModel
     * @param {Object} opt Check `opt` of `setTextStyleCommon` to find other props.
     * @param {string|Function} [opt.defaultText]
     * @param {module:echarts/model/Model} [opt.labelFetcher] Fetch text by
     *      `opt.labelFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
     * @param {module:echarts/model/Model} [opt.labelDataIndex] Fetch text by
     *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
     * @param {module:echarts/model/Model} [opt.labelDimIndex] Fetch text by
     *      `opt.textFetcher.getFormattedLabel(opt.labelDataIndex, 'normal'/'emphasis', null, opt.labelDimIndex)`
     * @param {Object} [normalSpecified]
     * @param {Object} [emphasisSpecified]
     */


    function setLabelStyle(normalStyle, emphasisStyle, normalModel, emphasisModel, opt, normalSpecified, emphasisSpecified) {
      opt = opt || EMPTY_OBJ;
      var labelFetcher = opt.labelFetcher;
      var labelDataIndex = opt.labelDataIndex;
      var labelDimIndex = opt.labelDimIndex; // This scenario, `label.normal.show = true; label.emphasis.show = false`,
      // is not supported util someone requests.

      var showNormal = normalModel.getShallow('show');
      var showEmphasis = emphasisModel.getShallow('show'); // Consider performance, only fetch label when necessary.
      // If `normal.show` is `false` and `emphasis.show` is `true` and `emphasis.formatter` is not set,
      // label should be displayed, where text is fetched by `normal.formatter` or `opt.defaultText`.

      var baseText;

      if (showNormal || showEmphasis) {
        if (labelFetcher) {
          baseText = labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex);
        }

        if (baseText == null) {
          baseText = util.isFunction(opt.defaultText) ? opt.defaultText(labelDataIndex, opt) : opt.defaultText;
        }
      }

      var normalStyleText = showNormal ? baseText : null;
      var emphasisStyleText = showEmphasis ? util.retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, 'emphasis', null, labelDimIndex) : null, baseText) : null; // Optimize: If style.text is null, text will not be drawn.

      if (normalStyleText != null || emphasisStyleText != null) {
        // Always set `textStyle` even if `normalStyle.text` is null, because default
        // values have to be set on `normalStyle`.
        // If we set default values on `emphasisStyle`, consider case:
        // Firstly, `setOption(... label: {normal: {text: null}, emphasis: {show: true}} ...);`
        // Secondly, `setOption(... label: {noraml: {show: true, text: 'abc', color: 'red'} ...);`
        // Then the 'red' will not work on emphasis.
        setTextStyle(normalStyle, normalModel, normalSpecified, opt);
        setTextStyle(emphasisStyle, emphasisModel, emphasisSpecified, opt, true);
      }

      normalStyle.text = normalStyleText;
      emphasisStyle.text = emphasisStyleText;
    }
    /**
     * Modify label style manually.
     * Only works after `setLabelStyle` and `setElementHoverStyle` called.
     *
     * @param {module:zrender/src/Element} el
     * @param {Object} [normalStyleProps] optional
     * @param {Object} [emphasisStyleProps] optional
     */


    function modifyLabelStyle(el, normalStyleProps, emphasisStyleProps) {
      var elStyle = el.style;

      if (normalStyleProps) {
        rollbackDefaultTextStyle(elStyle);
        el.setStyle(normalStyleProps);
        applyDefaultTextStyle(elStyle);
      }

      elStyle = el.__hoverStl;

      if (emphasisStyleProps && elStyle) {
        rollbackDefaultTextStyle(elStyle);
        util.extend(elStyle, emphasisStyleProps);
        applyDefaultTextStyle(elStyle);
      }
    }
    /**
     * Set basic textStyle properties.
     * See more info in `setTextStyleCommon`.
     * @param {Object|module:zrender/graphic/Style} textStyle
     * @param {module:echarts/model/Model} model
     * @param {Object} [specifiedTextStyle] Can be overrided by settings in model.
     * @param {Object} [opt] See `opt` of `setTextStyleCommon`.
     * @param {boolean} [isEmphasis]
     */


    function setTextStyle(textStyle, textStyleModel, specifiedTextStyle, opt, isEmphasis) {
      setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis);
      specifiedTextStyle && util.extend(textStyle, specifiedTextStyle); // textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);

      return textStyle;
    }
    /**
     * Set text option in the style.
     * See more info in `setTextStyleCommon`.
     * @deprecated
     * @param {Object} textStyle
     * @param {module:echarts/model/Model} labelModel
     * @param {string|boolean} defaultColor Default text color.
     *        If set as false, it will be processed as a emphasis style.
     */


    function setText(textStyle, labelModel, defaultColor) {
      var opt = {
        isRectText: true
      };
      var isEmphasis;

      if (defaultColor === false) {
        isEmphasis = true;
      } else {
        // Support setting color as 'auto' to get visual color.
        opt.autoColor = defaultColor;
      }

      setTextStyleCommon(textStyle, labelModel, opt, isEmphasis); // textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
    }
    /**
     * The uniform entry of set text style, that is, retrieve style definitions
     * from `model` and set to `textStyle` object.
     *
     * Never in merge mode, but in overwrite mode, that is, all of the text style
     * properties will be set. (Consider the states of normal and emphasis and
     * default value can be adopted, merge would make the logic too complicated
     * to manage.)
     *
     * The `textStyle` object can either be a plain object or an instance of
     * `zrender/src/graphic/Style`, and either be the style of normal or emphasis.
     * After this mothod called, the `textStyle` object can then be used in
     * `el.setStyle(textStyle)` or `el.hoverStyle = textStyle`.
     *
     * Default value will be adopted and `insideRollbackOpt` will be created.
     * See `applyDefaultTextStyle` `rollbackDefaultTextStyle` for more details.
     *
     * opt: {
     *      disableBox: boolean, Whether diable drawing box of block (outer most).
     *      isRectText: boolean,
     *      autoColor: string, specify a color when color is 'auto',
     *              for textFill, textStroke, textBackgroundColor, and textBorderColor.
     *              If autoColor specified, it is used as default textFill.
     *      useInsideStyle:
     *              `true`: Use inside style (textFill, textStroke, textStrokeWidth)
     *                  if `textFill` is not specified.
     *              `false`: Do not use inside style.
     *              `null/undefined`: use inside style if `isRectText` is true and
     *                  `textFill` is not specified and textPosition contains `'inside'`.
     *      forceRich: boolean
     * }
     */


    function setTextStyleCommon(textStyle, textStyleModel, opt, isEmphasis) {
      // Consider there will be abnormal when merge hover style to normal style if given default value.
      opt = opt || EMPTY_OBJ;

      if (opt.isRectText) {
        var textPosition;

        if (opt.getTextPosition) {
          textPosition = opt.getTextPosition(textStyleModel, isEmphasis);
        } else {
          textPosition = textStyleModel.getShallow('position') || (isEmphasis ? null : 'inside'); // 'outside' is not a valid zr textPostion value, but used
          // in bar series, and magric type should be considered.

          textPosition === 'outside' && (textPosition = 'top');
        }

        textStyle.textPosition = textPosition;
        textStyle.textOffset = textStyleModel.getShallow('offset');
        var labelRotate = textStyleModel.getShallow('rotate');
        labelRotate != null && (labelRotate *= Math.PI / 180);
        textStyle.textRotation = labelRotate;
        textStyle.textDistance = util.retrieve2(textStyleModel.getShallow('distance'), isEmphasis ? null : 5);
      }

      var ecModel = textStyleModel.ecModel;
      var globalTextStyle = ecModel && ecModel.option.textStyle; // Consider case:
      // {
      //     data: [{
      //         value: 12,
      //         label: {
      //             rich: {
      //                 // no 'a' here but using parent 'a'.
      //             }
      //         }
      //     }],
      //     rich: {
      //         a: { ... }
      //     }
      // }

      var richItemNames = getRichItemNames(textStyleModel);
      var richResult;

      if (richItemNames) {
        richResult = {};

        for (var name in richItemNames) {
          if (richItemNames.hasOwnProperty(name)) {
            // Cascade is supported in rich.
            var richTextStyle = textStyleModel.getModel(['rich', name]); // In rich, never `disableBox`.
            // FIXME: consider `label: {formatter: '{a|xx}', color: 'blue', rich: {a: {}}}`,
            // the default color `'blue'` will not be adopted if no color declared in `rich`.
            // That might confuses users. So probably we should put `textStyleModel` as the
            // root ancestor of the `richTextStyle`. But that would be a break change.

            setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isEmphasis);
          }
        }
      }

      textStyle.rich = richResult;
      setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, true);

      if (opt.forceRich && !opt.textStyle) {
        opt.textStyle = {};
      }

      return textStyle;
    } // Consider case:
    // {
    //     data: [{
    //         value: 12,
    //         label: {
    //             rich: {
    //                 // no 'a' here but using parent 'a'.
    //             }
    //         }
    //     }],
    //     rich: {
    //         a: { ... }
    //     }
    // }


    function getRichItemNames(textStyleModel) {
      // Use object to remove duplicated names.
      var richItemNameMap;

      while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {
        var rich = (textStyleModel.option || EMPTY_OBJ).rich;

        if (rich) {
          richItemNameMap = richItemNameMap || {};

          for (var name in rich) {
            if (rich.hasOwnProperty(name)) {
              richItemNameMap[name] = 1;
            }
          }
        }

        textStyleModel = textStyleModel.parentModel;
      }

      return richItemNameMap;
    }

    function setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isEmphasis, isBlock) {
      // In merge mode, default value should not be given.
      globalTextStyle = !isEmphasis && globalTextStyle || EMPTY_OBJ;
      textStyle.textFill = getAutoColor(textStyleModel.getShallow('color'), opt) || globalTextStyle.color;
      textStyle.textStroke = getAutoColor(textStyleModel.getShallow('textBorderColor'), opt) || globalTextStyle.textBorderColor;
      textStyle.textStrokeWidth = util.retrieve2(textStyleModel.getShallow('textBorderWidth'), globalTextStyle.textBorderWidth);

      if (!isEmphasis) {
        if (isBlock) {
          textStyle.insideRollbackOpt = opt;
          applyDefaultTextStyle(textStyle);
        } // Set default finally.


        if (textStyle.textFill == null) {
          textStyle.textFill = opt.autoColor;
        }
      } // Do not use `getFont` here, because merge should be supported, where
      // part of these properties may be changed in emphasis style, and the
      // others should remain their original value got from normal style.


      textStyle.fontStyle = textStyleModel.getShallow('fontStyle') || globalTextStyle.fontStyle;
      textStyle.fontWeight = textStyleModel.getShallow('fontWeight') || globalTextStyle.fontWeight;
      textStyle.fontSize = textStyleModel.getShallow('fontSize') || globalTextStyle.fontSize;
      textStyle.fontFamily = textStyleModel.getShallow('fontFamily') || globalTextStyle.fontFamily;
      textStyle.textAlign = textStyleModel.getShallow('align');
      textStyle.textVerticalAlign = textStyleModel.getShallow('verticalAlign') || textStyleModel.getShallow('baseline');
      textStyle.textLineHeight = textStyleModel.getShallow('lineHeight');
      textStyle.textWidth = textStyleModel.getShallow('width');
      textStyle.textHeight = textStyleModel.getShallow('height');
      textStyle.textTag = textStyleModel.getShallow('tag');

      if (!isBlock || !opt.disableBox) {
        textStyle.textBackgroundColor = getAutoColor(textStyleModel.getShallow('backgroundColor'), opt);
        textStyle.textPadding = textStyleModel.getShallow('padding');
        textStyle.textBorderColor = getAutoColor(textStyleModel.getShallow('borderColor'), opt);
        textStyle.textBorderWidth = textStyleModel.getShallow('borderWidth');
        textStyle.textBorderRadius = textStyleModel.getShallow('borderRadius');
        textStyle.textBoxShadowColor = textStyleModel.getShallow('shadowColor');
        textStyle.textBoxShadowBlur = textStyleModel.getShallow('shadowBlur');
        textStyle.textBoxShadowOffsetX = textStyleModel.getShallow('shadowOffsetX');
        textStyle.textBoxShadowOffsetY = textStyleModel.getShallow('shadowOffsetY');
      }

      textStyle.textShadowColor = textStyleModel.getShallow('textShadowColor') || globalTextStyle.textShadowColor;
      textStyle.textShadowBlur = textStyleModel.getShallow('textShadowBlur') || globalTextStyle.textShadowBlur;
      textStyle.textShadowOffsetX = textStyleModel.getShallow('textShadowOffsetX') || globalTextStyle.textShadowOffsetX;
      textStyle.textShadowOffsetY = textStyleModel.getShallow('textShadowOffsetY') || globalTextStyle.textShadowOffsetY;
    }

    function getAutoColor(color, opt) {
      return color !== 'auto' ? color : opt && opt.autoColor ? opt.autoColor : null;
    }
    /**
     * Give some default value to the input `textStyle` object, based on the current settings
     * in this `textStyle` object.
     *
     * The Scenario:
     * when text position is `inside` and `textFill` is not specified, we show
     * text border by default for better view. But it should be considered that text position
     * might be changed when hovering or being emphasis, where the `insideRollback` is used to
     * restore the style.
     *
     * Usage (& NOTICE):
     * When a style object (eithor plain object or instance of `zrender/src/graphic/Style`) is
     * about to be modified on its text related properties, `rollbackDefaultTextStyle` should
     * be called before the modification and `applyDefaultTextStyle` should be called after that.
     * (For the case that all of the text related properties is reset, like `setTextStyleCommon`
     * does, `rollbackDefaultTextStyle` is not needed to be called).
     */


    function applyDefaultTextStyle(textStyle) {
      var textPosition = textStyle.textPosition;
      var opt = textStyle.insideRollbackOpt;
      var insideRollback;

      if (opt && textStyle.textFill == null) {
        var autoColor = opt.autoColor;
        var isRectText = opt.isRectText;
        var useInsideStyle = opt.useInsideStyle;
        var useInsideStyleCache = useInsideStyle !== false && (useInsideStyle === true || isRectText && textPosition // textPosition can be [10, 30]
        && typeof textPosition === 'string' && textPosition.indexOf('inside') >= 0);
        var useAutoColorCache = !useInsideStyleCache && autoColor != null; // All of the props declared in `CACHED_LABEL_STYLE_PROPERTIES` are to be cached.

        if (useInsideStyleCache || useAutoColorCache) {
          insideRollback = {
            textFill: textStyle.textFill,
            textStroke: textStyle.textStroke,
            textStrokeWidth: textStyle.textStrokeWidth
          };
        }

        if (useInsideStyleCache) {
          textStyle.textFill = '#fff'; // Consider text with #fff overflow its container.

          if (textStyle.textStroke == null) {
            textStyle.textStroke = autoColor;
            textStyle.textStrokeWidth == null && (textStyle.textStrokeWidth = 2);
          }
        }

        if (useAutoColorCache) {
          textStyle.textFill = autoColor;
        }
      } // Always set `insideRollback`, so that the previous one can be cleared.


      textStyle.insideRollback = insideRollback;
    }
    /**
     * Consider the case: in a scatter,
     * label: {
     *     normal: {position: 'inside'},
     *     emphasis: {position: 'top'}
     * }
     * In the normal state, the `textFill` will be set as '#fff' for pretty view (see
     * `applyDefaultTextStyle`), but when switching to emphasis state, the `textFill`
     * should be retured to 'autoColor', but not keep '#fff'.
     */


    function rollbackDefaultTextStyle(style) {
      var insideRollback = style.insideRollback;

      if (insideRollback) {
        // Reset all of the props in `CACHED_LABEL_STYLE_PROPERTIES`.
        style.textFill = insideRollback.textFill;
        style.textStroke = insideRollback.textStroke;
        style.textStrokeWidth = insideRollback.textStrokeWidth;
        style.insideRollback = null;
      }
    }

    function getFont(opt, ecModel) {
      var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
      return util.trim([// FIXME in node-canvas fontWeight is before fontStyle
      opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '', opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '', (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px', opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'].join(' '));
    }

    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
      if (typeof dataIndex === 'function') {
        cb = dataIndex;
        dataIndex = null;
      } // Do not check 'animation' property directly here. Consider this case:
      // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
      // but its parent model (`seriesModel`) does.


      var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();

      if (animationEnabled) {
        var postfix = isUpdate ? 'Update' : '';
        var duration = animatableModel.getShallow('animationDuration' + postfix);
        var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
        var animationDelay = animatableModel.getShallow('animationDelay' + postfix);

        if (typeof animationDelay === 'function') {
          animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
        }

        if (typeof duration === 'function') {
          duration = duration(dataIndex);
        }

        duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb, !!cb) : (el.stopAnimation(), el.attr(props), cb && cb());
      } else {
        el.stopAnimation();
        el.attr(props);
        cb && cb();
      }
    }
    /**
     * Update graphic element properties with or without animation according to the
     * configuration in series.
     *
     * Caution: this method will stop previous animation.
     * So if do not use this method to one element twice before
     * animation starts, unless you know what you are doing.
     *
     * @param {module:zrender/Element} el
     * @param {Object} props
     * @param {module:echarts/model/Model} [animatableModel]
     * @param {number} [dataIndex]
     * @param {Function} [cb]
     * @example
     *     graphic.updateProps(el, {
     *         position: [100, 100]
     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
     *     // Or
     *     graphic.updateProps(el, {
     *         position: [100, 100]
     *     }, seriesModel, function () { console.log('Animation done!'); });
     */


    function updateProps(el, props, animatableModel, dataIndex, cb) {
      animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
    }
    /**
     * Init graphic element properties with or without animation according to the
     * configuration in series.
     *
     * Caution: this method will stop previous animation.
     * So if do not use this method to one element twice before
     * animation starts, unless you know what you are doing.
     *
     * @param {module:zrender/Element} el
     * @param {Object} props
     * @param {module:echarts/model/Model} [animatableModel]
     * @param {number} [dataIndex]
     * @param {Function} cb
     */


    function initProps(el, props, animatableModel, dataIndex, cb) {
      animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
    }
    /**
     * Get transform matrix of target (param target),
     * in coordinate of its ancestor (param ancestor)
     *
     * @param {module:zrender/mixin/Transformable} target
     * @param {module:zrender/mixin/Transformable} [ancestor]
     */


    function getTransform(target, ancestor) {
      var mat = matrix.identity([]);

      while (target && target !== ancestor) {
        matrix.mul(mat, target.getLocalTransform(), mat);
        target = target.parent;
      }

      return mat;
    }
    /**
     * Apply transform to an vertex.
     * @param {Array.<number>} target [x, y]
     * @param {Array.<number>|TypedArray.<number>|Object} transform Can be:
     *      + Transform matrix: like [1, 0, 0, 1, 0, 0]
     *      + {position, rotation, scale}, the same as `zrender/Transformable`.
     * @param {boolean=} invert Whether use invert matrix.
     * @return {Array.<number>} [x, y]
     */


    function applyTransform$1(target, transform, invert) {
      if (transform && !util.isArrayLike(transform)) {
        transform = Transformable_1.getLocalTransform(transform);
      }

      if (invert) {
        transform = matrix.invert([], transform);
      }

      return vector.applyTransform([], target, transform);
    }
    /**
     * @param {string} direction 'left' 'right' 'top' 'bottom'
     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
     * @param {boolean=} invert Whether use invert matrix.
     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
     */


    function transformDirection(direction, transform, invert) {
      // Pick a base, ensure that transform result will not be (0, 0).
      var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
      var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
      var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];
      vertex = applyTransform$1(vertex, transform, invert);
      return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
    }
    /**
     * Apply group transition animation from g1 to g2.
     * If no animatableModel, no animation.
     */


    function groupTransition(g1, g2, animatableModel, cb) {
      if (!g1 || !g2) {
        return;
      }

      function getElMap(g) {
        var elMap = {};
        g.traverse(function (el) {
          if (!el.isGroup && el.anid) {
            elMap[el.anid] = el;
          }
        });
        return elMap;
      }

      function getAnimatableProps(el) {
        var obj = {
          position: vector.clone(el.position),
          rotation: el.rotation
        };

        if (el.shape) {
          obj.shape = util.extend({}, el.shape);
        }

        return obj;
      }

      var elMap1 = getElMap(g1);
      g2.traverse(function (el) {
        if (!el.isGroup && el.anid) {
          var oldEl = elMap1[el.anid];

          if (oldEl) {
            var newProp = getAnimatableProps(el);
            el.attr(getAnimatableProps(oldEl));
            updateProps(el, newProp, animatableModel, el.dataIndex);
          } // else {
          //     if (el.previousProps) {
          //         graphic.updateProps
          //     }
          // }

        }
      });
    }
    /**
     * @param {Array.<Array.<number>>} points Like: [[23, 44], [53, 66], ...]
     * @param {Object} rect {x, y, width, height}
     * @return {Array.<Array.<number>>} A new clipped points.
     */


    function clipPointsByRect(points, rect) {
      // FIXME: this way migth be incorrect when grpahic clipped by a corner.
      // and when element have border.
      return util.map(points, function (point) {
        var x = point[0];
        x = mathMax$3(x, rect.x);
        x = mathMin$3(x, rect.x + rect.width);
        var y = point[1];
        y = mathMax$3(y, rect.y);
        y = mathMin$3(y, rect.y + rect.height);
        return [x, y];
      });
    }
    /**
     * @param {Object} targetRect {x, y, width, height}
     * @param {Object} rect {x, y, width, height}
     * @return {Object} A new clipped rect. If rect size are negative, return undefined.
     */


    function clipRectByRect(targetRect, rect) {
      var x = mathMax$3(targetRect.x, rect.x);
      var x2 = mathMin$3(targetRect.x + targetRect.width, rect.x + rect.width);
      var y = mathMax$3(targetRect.y, rect.y);
      var y2 = mathMin$3(targetRect.y + targetRect.height, rect.y + rect.height); // If the total rect is cliped, nothing, including the border,
      // should be painted. So return undefined.

      if (x2 >= x && y2 >= y) {
        return {
          x: x,
          y: y,
          width: x2 - x,
          height: y2 - y
        };
      }
    }
    /**
     * @param {string} iconStr Support 'image://' or 'path://' or direct svg path.
     * @param {Object} [opt] Properties of `module:zrender/Element`, except `style`.
     * @param {Object} [rect] {x, y, width, height}
     * @return {module:zrender/Element} Icon path or image element.
     */


    function createIcon(iconStr, opt, rect) {
      opt = util.extend({
        rectHover: true
      }, opt);
      var style = opt.style = {
        strokeNoScale: true
      };
      rect = rect || {
        x: -1,
        y: -1,
        width: 2,
        height: 2
      };

      if (iconStr) {
        return iconStr.indexOf('image://') === 0 ? (style.image = iconStr.slice(8), util.defaults(style, rect), new Image$1(opt)) : makePath(iconStr.replace('path://', ''), opt, rect, 'center');
      }
    }
    /**
     * Return `true` if the given line (line `a`) and the given polygon
     * are intersect.
     * Note that we do not count colinear as intersect here because no
     * requirement for that. We could do that if required in future.
     *
     * @param {number} a1x
     * @param {number} a1y
     * @param {number} a2x
     * @param {number} a2y
     * @param {Array.<Array.<number>>} points Points of the polygon.
     * @return {boolean}
     */


    function linePolygonIntersect(a1x, a1y, a2x, a2y, points) {
      for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {
        var p = points[i];

        if (lineLineIntersect(a1x, a1y, a2x, a2y, p[0], p[1], p2[0], p2[1])) {
          return true;
        }

        p2 = p;
      }
    }
    /**
     * Return `true` if the given two lines (line `a` and line `b`)
     * are intersect.
     * Note that we do not count colinear as intersect here because no
     * requirement for that. We could do that if required in future.
     *
     * @param {number} a1x
     * @param {number} a1y
     * @param {number} a2x
     * @param {number} a2y
     * @param {number} b1x
     * @param {number} b1y
     * @param {number} b2x
     * @param {number} b2y
     * @return {boolean}
     */


    function lineLineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
      // let `vec_m` to be `vec_a2 - vec_a1` and `vec_n` to be `vec_b2 - vec_b1`.
      var mx = a2x - a1x;
      var my = a2y - a1y;
      var nx = b2x - b1x;
      var ny = b2y - b1y; // `vec_m` and `vec_n` are parallel iff
      //     exising `k` such that `vec_m = k · vec_n`, equivalent to `vec_m X vec_n = 0`.

      var nmCrossProduct = crossProduct2d(nx, ny, mx, my);

      if (nearZero(nmCrossProduct)) {
        return false;
      } // `vec_m` and `vec_n` are intersect iff
      //     existing `p` and `q` in [0, 1] such that `vec_a1 + p * vec_m = vec_b1 + q * vec_n`,
      //     such that `q = ((vec_a1 - vec_b1) X vec_m) / (vec_n X vec_m)`
      //           and `p = ((vec_a1 - vec_b1) X vec_n) / (vec_n X vec_m)`.


      var b1a1x = a1x - b1x;
      var b1a1y = a1y - b1y;
      var q = crossProduct2d(b1a1x, b1a1y, mx, my) / nmCrossProduct;

      if (q < 0 || q > 1) {
        return false;
      }

      var p = crossProduct2d(b1a1x, b1a1y, nx, ny) / nmCrossProduct;

      if (p < 0 || p > 1) {
        return false;
      }

      return true;
    }
    /**
     * Cross product of 2-dimension vector.
     */


    function crossProduct2d(x1, y1, x2, y2) {
      return x1 * y2 - x2 * y1;
    }

    function nearZero(val) {
      return val <= 1e-6 && val >= -1e-6;
    } // Register built-in shapes. These shapes might be overwirtten
    // by users, although we do not recommend that.


    registerShape('circle', Circle);
    registerShape('sector', Sector);
    registerShape('ring', Ring);
    registerShape('polygon', Polygon);
    registerShape('polyline', Polyline);
    registerShape('rect', Rect);
    registerShape('line', Line);
    registerShape('bezierCurve', BezierCurve);
    registerShape('arc', Arc);
    var Z2_EMPHASIS_LIFT_1 = Z2_EMPHASIS_LIFT;
    var CACHED_LABEL_STYLE_PROPERTIES_1 = CACHED_LABEL_STYLE_PROPERTIES;
    var extendShape_1 = extendShape;
    var extendPath_1 = extendPath;
    var registerShape_1 = registerShape;
    var getShapeClass_1 = getShapeClass;
    var makePath_1 = makePath;
    var makeImage_1 = makeImage;
    var mergePath_1$1 = mergePath$1;
    var resizePath_1 = resizePath;
    var subPixelOptimizeLine_1$1 = subPixelOptimizeLine$2;
    var subPixelOptimizeRect_1$1 = subPixelOptimizeRect$2;
    var subPixelOptimize_1$1 = subPixelOptimize$1;
    var setElementHoverStyle_1 = setElementHoverStyle;
    var setHoverStyle_1 = setHoverStyle;
    var setAsHighDownDispatcher_1 = setAsHighDownDispatcher;
    var isHighDownDispatcher_1 = isHighDownDispatcher;
    var getHighlightDigit_1 = getHighlightDigit;
    var setLabelStyle_1 = setLabelStyle;
    var modifyLabelStyle_1 = modifyLabelStyle;
    var setTextStyle_1 = setTextStyle;
    var setText_1 = setText;
    var getFont_1 = getFont;
    var updateProps_1 = updateProps;
    var initProps_1 = initProps;
    var getTransform_1 = getTransform;
    var applyTransform_1$1 = applyTransform$1;
    var transformDirection_1 = transformDirection;
    var groupTransition_1 = groupTransition;
    var clipPointsByRect_1 = clipPointsByRect;
    var clipRectByRect_1 = clipRectByRect;
    var createIcon_1 = createIcon;
    var linePolygonIntersect_1 = linePolygonIntersect;
    var lineLineIntersect_1 = lineLineIntersect;

    var graphic = {
    	Image: Image$2,
    	Group: Group_1$1,
    	Text: Text_1$1,
    	Circle: Circle_1,
    	Sector: Sector_1,
    	Ring: Ring_1,
    	Polygon: Polygon_1,
    	Polyline: Polyline_1,
    	Rect: Rect_1,
    	Line: Line_1,
    	BezierCurve: BezierCurve_1,
    	Arc: Arc_1,
    	CompoundPath: CompoundPath_1,
    	LinearGradient: LinearGradient_1$1,
    	RadialGradient: RadialGradient_1$1,
    	BoundingRect: BoundingRect_1$1,
    	IncrementalDisplayable: IncrementalDisplayable_1,
    	Z2_EMPHASIS_LIFT: Z2_EMPHASIS_LIFT_1,
    	CACHED_LABEL_STYLE_PROPERTIES: CACHED_LABEL_STYLE_PROPERTIES_1,
    	extendShape: extendShape_1,
    	extendPath: extendPath_1,
    	registerShape: registerShape_1,
    	getShapeClass: getShapeClass_1,
    	makePath: makePath_1,
    	makeImage: makeImage_1,
    	mergePath: mergePath_1$1,
    	resizePath: resizePath_1,
    	subPixelOptimizeLine: subPixelOptimizeLine_1$1,
    	subPixelOptimizeRect: subPixelOptimizeRect_1$1,
    	subPixelOptimize: subPixelOptimize_1$1,
    	setElementHoverStyle: setElementHoverStyle_1,
    	setHoverStyle: setHoverStyle_1,
    	setAsHighDownDispatcher: setAsHighDownDispatcher_1,
    	isHighDownDispatcher: isHighDownDispatcher_1,
    	getHighlightDigit: getHighlightDigit_1,
    	setLabelStyle: setLabelStyle_1,
    	modifyLabelStyle: modifyLabelStyle_1,
    	setTextStyle: setTextStyle_1,
    	setText: setText_1,
    	getFont: getFont_1,
    	updateProps: updateProps_1,
    	initProps: initProps_1,
    	getTransform: getTransform_1,
    	applyTransform: applyTransform_1$1,
    	transformDirection: transformDirection_1,
    	groupTransition: groupTransition_1,
    	clipPointsByRect: clipPointsByRect_1,
    	clipRectByRect: clipRectByRect_1,
    	createIcon: createIcon_1,
    	linePolygonIntersect: linePolygonIntersect_1,
    	lineLineIntersect: lineLineIntersect_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var PATH_COLOR = ['textStyle', 'color'];
    var _default$Q = {
      /**
       * Get color property or get color from option.textStyle.color
       * @param {boolean} [isEmphasis]
       * @return {string}
       */
      getTextColor: function (isEmphasis) {
        var ecModel = this.ecModel;
        return this.getShallow('color') || (!isEmphasis && ecModel ? ecModel.get(PATH_COLOR) : null);
      },

      /**
       * Create font string from fontStyle, fontWeight, fontSize, fontFamily
       * @return {string}
       */
      getFont: function () {
        return graphic.getFont({
          fontStyle: this.getShallow('fontStyle'),
          fontWeight: this.getShallow('fontWeight'),
          fontSize: this.getShallow('fontSize'),
          fontFamily: this.getShallow('fontFamily')
        }, this.ecModel);
      },
      getTextRect: function (text$1) {
        return text.getBoundingRect(text$1, this.getFont(), this.getShallow('align'), this.getShallow('verticalAlign') || this.getShallow('baseline'), this.getShallow('padding'), this.getShallow('lineHeight'), this.getShallow('rich'), this.getShallow('truncateText'));
      }
    };
    var textStyle = _default$Q;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var getItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor'], ['textPosition'], ['textAlign']]);
    var _default$R = {
      getItemStyle: function (excludes, includes) {
        var style = getItemStyle(this, excludes, includes);
        var lineDash = this.getBorderLineDash();
        lineDash && (style.lineDash = lineDash);
        return style;
      },
      getBorderLineDash: function () {
        var lineType = this.get('borderType');
        return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
      }
    };
    var itemStyle = _default$R;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var makeInner$1 = model.makeInner;



    var enableClassExtend$1 = clazz.enableClassExtend;
    var enableClassCheck$1 = clazz.enableClassCheck;









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @module echarts/model/Model
     */
    var mixin$1 = util.mixin;
    var inner = makeInner$1();
    /**
     * @alias module:echarts/model/Model
     * @constructor
     * @param {Object} [option]
     * @param {module:echarts/model/Model} [parentModel]
     * @param {module:echarts/model/Global} [ecModel]
     */

    function Model(option, parentModel, ecModel) {
      /**
       * @type {module:echarts/model/Model}
       * @readOnly
       */
      this.parentModel = parentModel;
      /**
       * @type {module:echarts/model/Global}
       * @readOnly
       */

      this.ecModel = ecModel;
      /**
       * @type {Object}
       * @protected
       */

      this.option = option; // Simple optimization
      // if (this.init) {
      //     if (arguments.length <= 4) {
      //         this.init(option, parentModel, ecModel, extraOpt);
      //     }
      //     else {
      //         this.init.apply(this, arguments);
      //     }
      // }
    }

    Model.prototype = {
      constructor: Model,

      /**
       * Model 的初始化函数
       * @param {Object} option
       */
      init: null,

      /**
       * 从新的 Option merge
       */
      mergeOption: function (option) {
        util.merge(this.option, option, true);
      },

      /**
       * @param {string|Array.<string>} path
       * @param {boolean} [ignoreParent=false]
       * @return {*}
       */
      get: function (path, ignoreParent) {
        if (path == null) {
          return this.option;
        }

        return doGet(this.option, this.parsePath(path), !ignoreParent && getParent(this, path));
      },

      /**
       * @param {string} key
       * @param {boolean} [ignoreParent=false]
       * @return {*}
       */
      getShallow: function (key, ignoreParent) {
        var option = this.option;
        var val = option == null ? option : option[key];
        var parentModel = !ignoreParent && getParent(this, key);

        if (val == null && parentModel) {
          val = parentModel.getShallow(key);
        }

        return val;
      },

      /**
       * @param {string|Array.<string>} [path]
       * @param {module:echarts/model/Model} [parentModel]
       * @return {module:echarts/model/Model}
       */
      getModel: function (path, parentModel) {
        var obj = path == null ? this.option : doGet(this.option, path = this.parsePath(path));
        var thisParentModel;
        parentModel = parentModel || (thisParentModel = getParent(this, path)) && thisParentModel.getModel(path);
        return new Model(obj, parentModel, this.ecModel);
      },

      /**
       * If model has option
       */
      isEmpty: function () {
        return this.option == null;
      },
      restoreData: function () {},
      // Pending
      clone: function () {
        var Ctor = this.constructor;
        return new Ctor(util.clone(this.option));
      },
      setReadOnly: function (properties) {// clazzUtil.setReadOnly(this, properties);
      },
      // If path is null/undefined, return null/undefined.
      parsePath: function (path) {
        if (typeof path === 'string') {
          path = path.split('.');
        }

        return path;
      },

      /**
       * @param {Function} getParentMethod
       *        param {Array.<string>|string} path
       *        return {module:echarts/model/Model}
       */
      customizeGetParent: function (getParentMethod) {
        inner(this).getParent = getParentMethod;
      },
      isAnimationEnabled: function () {
        if (!env_1.node) {
          if (this.option.animation != null) {
            return !!this.option.animation;
          } else if (this.parentModel) {
            return this.parentModel.isAnimationEnabled();
          }
        }
      }
    };

    function doGet(obj, pathArr, parentModel) {
      for (var i = 0; i < pathArr.length; i++) {
        // Ignore empty
        if (!pathArr[i]) {
          continue;
        } // obj could be number/string/... (like 0)


        obj = obj && typeof obj === 'object' ? obj[pathArr[i]] : null;

        if (obj == null) {
          break;
        }
      }

      if (obj == null && parentModel) {
        obj = parentModel.get(pathArr);
      }

      return obj;
    } // `path` can be null/undefined


    function getParent(model, path) {
      var getParentMethod = inner(model).getParent;
      return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
    } // Enable Model.extend.


    enableClassExtend$1(Model);
    enableClassCheck$1(Model);
    mixin$1(Model, lineStyle);
    mixin$1(Model, areaStyle);
    mixin$1(Model, textStyle);
    mixin$1(Model, itemStyle);
    var _default$S = Model;
    var Model_1 = _default$S;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var parseClassType$1 = clazz.parseClassType;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var base = 0;
    /**
     * @public
     * @param {string} type
     * @return {string}
     */

    function getUID(type) {
      // Considering the case of crossing js context,
      // use Math.random to make id as unique as possible.
      return [type || '', base++, Math.random().toFixed(5)].join('_');
    }
    /**
     * @inner
     */


    function enableSubTypeDefaulter(entity) {
      var subTypeDefaulters = {};

      entity.registerSubTypeDefaulter = function (componentType, defaulter) {
        componentType = parseClassType$1(componentType);
        subTypeDefaulters[componentType.main] = defaulter;
      };

      entity.determineSubType = function (componentType, option) {
        var type = option.type;

        if (!type) {
          var componentTypeMain = parseClassType$1(componentType).main;

          if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
            type = subTypeDefaulters[componentTypeMain](option);
          }
        }

        return type;
      };

      return entity;
    }
    /**
     * Topological travel on Activity Network (Activity On Vertices).
     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
     *
     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
     *
     * If there is circle dependencey, Error will be thrown.
     *
     */


    function enableTopologicalTravel(entity, dependencyGetter) {
      /**
       * @public
       * @param {Array.<string>} targetNameList Target Component type list.
       *                                           Can be ['aa', 'bb', 'aa.xx']
       * @param {Array.<string>} fullNameList By which we can build dependency graph.
       * @param {Function} callback Params: componentType, dependencies.
       * @param {Object} context Scope of callback.
       */
      entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
        if (!targetNameList.length) {
          return;
        }

        var result = makeDepndencyGraph(fullNameList);
        var graph = result.graph;
        var stack = result.noEntryList;
        var targetNameSet = {};
        util.each(targetNameList, function (name) {
          targetNameSet[name] = true;
        });

        while (stack.length) {
          var currComponentType = stack.pop();
          var currVertex = graph[currComponentType];
          var isInTargetNameSet = !!targetNameSet[currComponentType];

          if (isInTargetNameSet) {
            callback.call(context, currComponentType, currVertex.originalDeps.slice());
            delete targetNameSet[currComponentType];
          }

          util.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
        }

        util.each(targetNameSet, function () {
          throw new Error('Circle dependency may exists');
        });

        function removeEdge(succComponentType) {
          graph[succComponentType].entryCount--;

          if (graph[succComponentType].entryCount === 0) {
            stack.push(succComponentType);
          }
        } // Consider this case: legend depends on series, and we call
        // chart.setOption({series: [...]}), where only series is in option.
        // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
        // not be called, but only sereis.mergeOption is called. Thus legend
        // have no chance to update its local record about series (like which
        // name of series is available in legend).


        function removeEdgeAndAdd(succComponentType) {
          targetNameSet[succComponentType] = true;
          removeEdge(succComponentType);
        }
      };
      /**
       * DepndencyGraph: {Object}
       * key: conponentType,
       * value: {
       *     successor: [conponentTypes...],
       *     originalDeps: [conponentTypes...],
       *     entryCount: {number}
       * }
       */


      function makeDepndencyGraph(fullNameList) {
        var graph = {};
        var noEntryList = [];
        util.each(fullNameList, function (name) {
          var thisItem = createDependencyGraphItem(graph, name);
          var originalDeps = thisItem.originalDeps = dependencyGetter(name);
          var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
          thisItem.entryCount = availableDeps.length;

          if (thisItem.entryCount === 0) {
            noEntryList.push(name);
          }

          util.each(availableDeps, function (dependentName) {
            if (util.indexOf(thisItem.predecessor, dependentName) < 0) {
              thisItem.predecessor.push(dependentName);
            }

            var thatItem = createDependencyGraphItem(graph, dependentName);

            if (util.indexOf(thatItem.successor, dependentName) < 0) {
              thatItem.successor.push(name);
            }
          });
        });
        return {
          graph: graph,
          noEntryList: noEntryList
        };
      }

      function createDependencyGraphItem(graph, name) {
        if (!graph[name]) {
          graph[name] = {
            predecessor: [],
            successor: []
          };
        }

        return graph[name];
      }

      function getAvailableDependencies(originalDeps, fullNameList) {
        var availableDeps = [];
        util.each(originalDeps, function (dep) {
          util.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
        });
        return availableDeps;
      }
    }

    var getUID_1 = getUID;
    var enableSubTypeDefaulter_1 = enableSubTypeDefaulter;
    var enableTopologicalTravel_1 = enableTopologicalTravel;

    var component = {
    	getUID: getUID_1,
    	enableSubTypeDefaulter: enableSubTypeDefaulter_1,
    	enableTopologicalTravel: enableTopologicalTravel_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * A third-party license is embeded for some of the code in this file:
    * The method "quantile" was copied from "d3.js".
    * (See more details in the comment of the method below.)
    * The use of the source code of this file is also subject to the terms
    * and consitions of the license of "d3.js" (BSD-3Clause, see
    * </licenses/LICENSE-d3>).
    */
    var RADIAN_EPSILON = 1e-4;

    function _trim(str) {
      return str.replace(/^\s+|\s+$/g, '');
    }
    /**
     * Linear mapping a value from domain to range
     * @memberOf module:echarts/util/number
     * @param  {(number|Array.<number>)} val
     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
     * @param  {boolean} clamp
     * @return {(number|Array.<number>}
     */


    function linearMap(val, domain, range, clamp) {
      var subDomain = domain[1] - domain[0];
      var subRange = range[1] - range[0];

      if (subDomain === 0) {
        return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
      } // Avoid accuracy problem in edge, such as
      // 146.39 - 62.83 === 83.55999999999999.
      // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
      // It is a little verbose for efficiency considering this method
      // is a hotspot.


      if (clamp) {
        if (subDomain > 0) {
          if (val <= domain[0]) {
            return range[0];
          } else if (val >= domain[1]) {
            return range[1];
          }
        } else {
          if (val >= domain[0]) {
            return range[0];
          } else if (val <= domain[1]) {
            return range[1];
          }
        }
      } else {
        if (val === domain[0]) {
          return range[0];
        }

        if (val === domain[1]) {
          return range[1];
        }
      }

      return (val - domain[0]) / subDomain * subRange + range[0];
    }
    /**
     * Convert a percent string to absolute number.
     * Returns NaN if percent is not a valid string or number
     * @memberOf module:echarts/util/number
     * @param {string|number} percent
     * @param {number} all
     * @return {number}
     */


    function parsePercent$1(percent, all) {
      switch (percent) {
        case 'center':
        case 'middle':
          percent = '50%';
          break;

        case 'left':
        case 'top':
          percent = '0%';
          break;

        case 'right':
        case 'bottom':
          percent = '100%';
          break;
      }

      if (typeof percent === 'string') {
        if (_trim(percent).match(/%$/)) {
          return parseFloat(percent) / 100 * all;
        }

        return parseFloat(percent);
      }

      return percent == null ? NaN : +percent;
    }
    /**
     * (1) Fix rounding error of float numbers.
     * (2) Support return string to avoid scientific notation like '3.5e-7'.
     *
     * @param {number} x
     * @param {number} [precision]
     * @param {boolean} [returnStr]
     * @return {number|string}
     */


    function round$1(x, precision, returnStr) {
      if (precision == null) {
        precision = 10;
      } // Avoid range error


      precision = Math.min(Math.max(0, precision), 20);
      x = (+x).toFixed(precision);
      return returnStr ? x : +x;
    }
    /**
     * asc sort arr.
     * The input arr will be modified.
     *
     * @param {Array} arr
     * @return {Array} The input arr.
     */


    function asc(arr) {
      arr.sort(function (a, b) {
        return a - b;
      });
      return arr;
    }
    /**
     * Get precision
     * @param {number} val
     */


    function getPrecision(val) {
      val = +val;

      if (isNaN(val)) {
        return 0;
      } // It is much faster than methods converting number to string as follows
      //      var tmp = val.toString();
      //      return tmp.length - 1 - tmp.indexOf('.');
      // especially when precision is low


      var e = 1;
      var count = 0;

      while (Math.round(val * e) / e !== val) {
        e *= 10;
        count++;
      }

      return count;
    }
    /**
     * @param {string|number} val
     * @return {number}
     */


    function getPrecisionSafe(val) {
      var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'

      var eIndex = str.indexOf('e');

      if (eIndex > 0) {
        var precision = +str.slice(eIndex + 1);
        return precision < 0 ? -precision : 0;
      } else {
        var dotIndex = str.indexOf('.');
        return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
      }
    }
    /**
     * Minimal dicernible data precisioin according to a single pixel.
     *
     * @param {Array.<number>} dataExtent
     * @param {Array.<number>} pixelExtent
     * @return {number} precision
     */


    function getPixelPrecision(dataExtent, pixelExtent) {
      var log = Math.log;
      var LN10 = Math.LN10;
      var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
      var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.

      var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
      return !isFinite(precision) ? 20 : precision;
    }
    /**
     * Get a data of given precision, assuring the sum of percentages
     * in valueList is 1.
     * The largest remainer method is used.
     * https://en.wikipedia.org/wiki/Largest_remainder_method
     *
     * @param {Array.<number>} valueList a list of all data
     * @param {number} idx index of the data to be processed in valueList
     * @param {number} precision integer number showing digits of precision
     * @return {number} percent ranging from 0 to 100
     */


    function getPercentWithPrecision(valueList, idx, precision) {
      if (!valueList[idx]) {
        return 0;
      }

      var sum = util.reduce(valueList, function (acc, val) {
        return acc + (isNaN(val) ? 0 : val);
      }, 0);

      if (sum === 0) {
        return 0;
      }

      var digits = Math.pow(10, precision);
      var votesPerQuota = util.map(valueList, function (val) {
        return (isNaN(val) ? 0 : val) / sum * digits * 100;
      });
      var targetSeats = digits * 100;
      var seats = util.map(votesPerQuota, function (votes) {
        // Assign automatic seats.
        return Math.floor(votes);
      });
      var currentSum = util.reduce(seats, function (acc, val) {
        return acc + val;
      }, 0);
      var remainder = util.map(votesPerQuota, function (votes, idx) {
        return votes - seats[idx];
      }); // Has remainding votes.

      while (currentSum < targetSeats) {
        // Find next largest remainder.
        var max = Number.NEGATIVE_INFINITY;
        var maxId = null;

        for (var i = 0, len = remainder.length; i < len; ++i) {
          if (remainder[i] > max) {
            max = remainder[i];
            maxId = i;
          }
        } // Add a vote to max remainder.


        ++seats[maxId];
        remainder[maxId] = 0;
        ++currentSum;
      }

      return seats[idx] / digits;
    } // Number.MAX_SAFE_INTEGER, ie do not support.


    var MAX_SAFE_INTEGER = 9007199254740991;
    /**
     * To 0 - 2 * PI, considering negative radian.
     * @param {number} radian
     * @return {number}
     */

    function remRadian(radian) {
      var pi2 = Math.PI * 2;
      return (radian % pi2 + pi2) % pi2;
    }
    /**
     * @param {type} radian
     * @return {boolean}
     */


    function isRadianAroundZero(val) {
      return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
    }
    /* eslint-disable */


    var TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line

    /* eslint-enable */

    /**
     * @param {string|Date|number} value These values can be accepted:
     *   + An instance of Date, represent a time in its own time zone.
     *   + Or string in a subset of ISO 8601, only including:
     *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',
     *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',
     *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',
     *     all of which will be treated as local time if time zone is not specified
     *     (see <https://momentjs.com/>).
     *   + Or other string format, including (all of which will be treated as loacal time):
     *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',
     *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'
     *   + a timestamp, which represent a time in UTC.
     * @return {Date} date
     */

    function parseDate(value) {
      if (value instanceof Date) {
        return value;
      } else if (typeof value === 'string') {
        // Different browsers parse date in different way, so we parse it manually.
        // Some other issues:
        // new Date('1970-01-01') is UTC,
        // new Date('1970/01/01') and new Date('1970-1-01') is local.
        // See issue #3623
        var match = TIME_REG.exec(value);

        if (!match) {
          // return Invalid Date.
          return new Date(NaN);
        } // Use local time when no timezone offset specifed.


        if (!match[8]) {
          // match[n] can only be string or undefined.
          // But take care of '12' + 1 => '121'.
          return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
        } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,
        // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).
        // For example, system timezone is set as "Time Zone: America/Toronto",
        // then these code will get different result:
        // `new Date(1478411999999).getTimezoneOffset();  // get 240`
        // `new Date(1478412000000).getTimezoneOffset();  // get 300`
        // So we should not use `new Date`, but use `Date.UTC`.
        else {
            var hour = +match[4] || 0;

            if (match[8].toUpperCase() !== 'Z') {
              hour -= match[8].slice(0, 3);
            }

            return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
          }
      } else if (value == null) {
        return new Date(NaN);
      }

      return new Date(Math.round(value));
    }
    /**
     * Quantity of a number. e.g. 0.1, 1, 10, 100
     *
     * @param  {number} val
     * @return {number}
     */


    function quantity(val) {
      return Math.pow(10, quantityExponent(val));
    }
    /**
     * Exponent of the quantity of a number
     * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3
     *
     * @param  {number} val non-negative value
     * @return {number}
     */


    function quantityExponent(val) {
      if (val === 0) {
        return 0;
      }

      var exp = Math.floor(Math.log(val) / Math.LN10);
      /**
       * exp is expected to be the rounded-down result of the base-10 log of val.
       * But due to the precision loss with Math.log(val), we need to restore it
       * using 10^exp to make sure we can get val back from exp. #11249
       */

      if (val / Math.pow(10, exp) >= 10) {
        exp++;
      }

      return exp;
    }
    /**
     * find a “nice” number approximately equal to x. Round the number if round = true,
     * take ceiling if round = false. The primary observation is that the “nicest”
     * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
     *
     * See "Nice Numbers for Graph Labels" of Graphic Gems.
     *
     * @param  {number} val Non-negative value.
     * @param  {boolean} round
     * @return {number}
     */


    function nice(val, round) {
      var exponent = quantityExponent(val);
      var exp10 = Math.pow(10, exponent);
      var f = val / exp10; // 1 <= f < 10

      var nf;

      if (round) {
        if (f < 1.5) {
          nf = 1;
        } else if (f < 2.5) {
          nf = 2;
        } else if (f < 4) {
          nf = 3;
        } else if (f < 7) {
          nf = 5;
        } else {
          nf = 10;
        }
      } else {
        if (f < 1) {
          nf = 1;
        } else if (f < 2) {
          nf = 2;
        } else if (f < 3) {
          nf = 3;
        } else if (f < 5) {
          nf = 5;
        } else {
          nf = 10;
        }
      }

      val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
      // 20 is the uppper bound of toFixed.

      return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
    }
    /**
     * This code was copied from "d3.js"
     * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.
     * See the license statement at the head of this file.
     * @param {Array.<number>} ascArr
     */


    function quantile(ascArr, p) {
      var H = (ascArr.length - 1) * p + 1;
      var h = Math.floor(H);
      var v = +ascArr[h - 1];
      var e = H - h;
      return e ? v + e * (ascArr[h] - v) : v;
    }
    /**
     * Order intervals asc, and split them when overlap.
     * expect(numberUtil.reformIntervals([
     *     {interval: [18, 62], close: [1, 1]},
     *     {interval: [-Infinity, -70], close: [0, 0]},
     *     {interval: [-70, -26], close: [1, 1]},
     *     {interval: [-26, 18], close: [1, 1]},
     *     {interval: [62, 150], close: [1, 1]},
     *     {interval: [106, 150], close: [1, 1]},
     *     {interval: [150, Infinity], close: [0, 0]}
     * ])).toEqual([
     *     {interval: [-Infinity, -70], close: [0, 0]},
     *     {interval: [-70, -26], close: [1, 1]},
     *     {interval: [-26, 18], close: [0, 1]},
     *     {interval: [18, 62], close: [0, 1]},
     *     {interval: [62, 150], close: [0, 1]},
     *     {interval: [150, Infinity], close: [0, 0]}
     * ]);
     * @param {Array.<Object>} list, where `close` mean open or close
     *        of the interval, and Infinity can be used.
     * @return {Array.<Object>} The origin list, which has been reformed.
     */


    function reformIntervals(list) {
      list.sort(function (a, b) {
        return littleThan(a, b, 0) ? -1 : 1;
      });
      var curr = -Infinity;
      var currClose = 1;

      for (var i = 0; i < list.length;) {
        var interval = list[i].interval;
        var close = list[i].close;

        for (var lg = 0; lg < 2; lg++) {
          if (interval[lg] <= curr) {
            interval[lg] = curr;
            close[lg] = !lg ? 1 - currClose : 1;
          }

          curr = interval[lg];
          currClose = close[lg];
        }

        if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
          list.splice(i, 1);
        } else {
          i++;
        }
      }

      return list;

      function littleThan(a, b, lg) {
        return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
      }
    }
    /**
     * parseFloat NaNs numeric-cast false positives (null|true|false|"")
     * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
     * subtraction forces infinities to NaN
     *
     * @param {*} v
     * @return {boolean}
     */


    function isNumeric(v) {
      return v - parseFloat(v) >= 0;
    }

    var linearMap_1 = linearMap;
    var parsePercent_1$1 = parsePercent$1;
    var round_1 = round$1;
    var asc_1 = asc;
    var getPrecision_1 = getPrecision;
    var getPrecisionSafe_1 = getPrecisionSafe;
    var getPixelPrecision_1 = getPixelPrecision;
    var getPercentWithPrecision_1 = getPercentWithPrecision;
    var MAX_SAFE_INTEGER_1 = MAX_SAFE_INTEGER;
    var remRadian_1 = remRadian;
    var isRadianAroundZero_1 = isRadianAroundZero;
    var parseDate_1 = parseDate;
    var quantity_1 = quantity;
    var quantityExponent_1 = quantityExponent;
    var nice_1 = nice;
    var quantile_1 = quantile;
    var reformIntervals_1 = reformIntervals;
    var isNumeric_1 = isNumeric;

    var number = {
    	linearMap: linearMap_1,
    	parsePercent: parsePercent_1$1,
    	round: round_1,
    	asc: asc_1,
    	getPrecision: getPrecision_1,
    	getPrecisionSafe: getPrecisionSafe_1,
    	getPixelPrecision: getPixelPrecision_1,
    	getPercentWithPrecision: getPercentWithPrecision_1,
    	MAX_SAFE_INTEGER: MAX_SAFE_INTEGER_1,
    	remRadian: remRadian_1,
    	isRadianAroundZero: isRadianAroundZero_1,
    	parseDate: parseDate_1,
    	quantity: quantity_1,
    	quantityExponent: quantityExponent_1,
    	nice: nice_1,
    	quantile: quantile_1,
    	reformIntervals: reformIntervals_1,
    	isNumeric: isNumeric_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // import Text from 'zrender/src/graphic/Text';

    /**
     * 每三位默认加,格式化
     * @param {string|number} x
     * @return {string}
     */
    function addCommas(x) {
      if (isNaN(x)) {
        return '-';
      }

      x = (x + '').split('.');
      return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
    }
    /**
     * @param {string} str
     * @param {boolean} [upperCaseFirst=false]
     * @return {string} str
     */


    function toCamelCase(str, upperCaseFirst) {
      str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {
        return group1.toUpperCase();
      });

      if (upperCaseFirst && str) {
        str = str.charAt(0).toUpperCase() + str.slice(1);
      }

      return str;
    }

    var normalizeCssArray$2 = util.normalizeCssArray;
    var replaceReg = /([&<>"'])/g;
    var replaceMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;'
    };

    function encodeHTML(source) {
      return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {
        return replaceMap[c];
      });
    }

    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

    var wrapVar = function (varName, seriesIdx) {
      return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
    };
    /**
     * Template formatter
     * @param {string} tpl
     * @param {Array.<Object>|Object} paramsList
     * @param {boolean} [encode=false]
     * @return {string}
     */


    function formatTpl(tpl, paramsList, encode) {
      if (!util.isArray(paramsList)) {
        paramsList = [paramsList];
      }

      var seriesLen = paramsList.length;

      if (!seriesLen) {
        return '';
      }

      var $vars = paramsList[0].$vars || [];

      for (var i = 0; i < $vars.length; i++) {
        var alias = TPL_VAR_ALIAS[i];
        tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
      }

      for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
        for (var k = 0; k < $vars.length; k++) {
          var val = paramsList[seriesIdx][$vars[k]];
          tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
        }
      }

      return tpl;
    }
    /**
     * simple Template formatter
     *
     * @param {string} tpl
     * @param {Object} param
     * @param {boolean} [encode=false]
     * @return {string}
     */


    function formatTplSimple(tpl, param, encode) {
      util.each(param, function (value, key) {
        tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);
      });
      return tpl;
    }
    /**
     * @param {Object|string} [opt] If string, means color.
     * @param {string} [opt.color]
     * @param {string} [opt.extraCssText]
     * @param {string} [opt.type='item'] 'item' or 'subItem'
     * @param {string} [opt.renderMode='html'] render mode of tooltip, 'html' or 'richText'
     * @param {string} [opt.markerId='X'] id name for marker. If only one marker is in a rich text, this can be omitted.
     * @return {string}
     */


    function getTooltipMarker(opt, extraCssText) {
      opt = util.isString(opt) ? {
        color: opt,
        extraCssText: extraCssText
      } : opt || {};
      var color = opt.color;
      var type = opt.type;
      var extraCssText = opt.extraCssText;
      var renderMode = opt.renderMode || 'html';
      var markerId = opt.markerId || 'X';

      if (!color) {
        return '';
      }

      if (renderMode === 'html') {
        return type === 'subItem' ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>' : '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '"></span>';
      } else {
        // Space for rich element marker
        return {
          renderMode: renderMode,
          content: '{marker' + markerId + '|}  ',
          style: {
            color: color
          }
        };
      }
    }

    function pad(str, len) {
      str += '';
      return '0000'.substr(0, len - str.length) + str;
    }
    /**
     * ISO Date format
     * @param {string} tpl
     * @param {number} value
     * @param {boolean} [isUTC=false] Default in local time.
     *           see `module:echarts/scale/Time`
     *           and `module:echarts/util/number#parseDate`.
     * @inner
     */


    function formatTime(tpl, value, isUTC) {
      if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
        tpl = 'MM-dd\nyyyy';
      }

      var date = number.parseDate(value);
      var utc = isUTC ? 'UTC' : '';
      var y = date['get' + utc + 'FullYear']();
      var M = date['get' + utc + 'Month']() + 1;
      var d = date['get' + utc + 'Date']();
      var h = date['get' + utc + 'Hours']();
      var m = date['get' + utc + 'Minutes']();
      var s = date['get' + utc + 'Seconds']();
      var S = date['get' + utc + 'Milliseconds']();
      tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100).replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));
      return tpl;
    }
    /**
     * Capital first
     * @param {string} str
     * @return {string}
     */


    function capitalFirst(str) {
      return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
    }

    var truncateText$1 = text.truncateText;
    /**
     * @public
     * @param {Object} opt
     * @param {string} opt.text
     * @param {string} opt.font
     * @param {string} [opt.textAlign='left']
     * @param {string} [opt.textVerticalAlign='top']
     * @param {Array.<number>} [opt.textPadding]
     * @param {number} [opt.textLineHeight]
     * @param {Object} [opt.rich]
     * @param {Object} [opt.truncate]
     * @return {Object} {x, y, width, height, lineHeight}
     */

    function getTextBoundingRect(opt) {
      return text.getBoundingRect(opt.text, opt.font, opt.textAlign, opt.textVerticalAlign, opt.textPadding, opt.textLineHeight, opt.rich, opt.truncate);
    }
    /**
     * @deprecated
     * the `textLineHeight` was added later.
     * For backward compatiblility, put it as the last parameter.
     * But deprecated this interface. Please use `getTextBoundingRect` instead.
     */


    function getTextRect(text$1, font, textAlign, textVerticalAlign, textPadding, rich, truncate, textLineHeight) {
      return text.getBoundingRect(text$1, font, textAlign, textVerticalAlign, textPadding, textLineHeight, rich, truncate);
    }

    var addCommas_1 = addCommas;
    var toCamelCase_1 = toCamelCase;
    var normalizeCssArray_1$1 = normalizeCssArray$2;
    var encodeHTML_1 = encodeHTML;
    var formatTpl_1 = formatTpl;
    var formatTplSimple_1 = formatTplSimple;
    var getTooltipMarker_1 = getTooltipMarker;
    var formatTime_1 = formatTime;
    var capitalFirst_1 = capitalFirst;
    var truncateText_1$1 = truncateText$1;
    var getTextBoundingRect_1 = getTextBoundingRect;
    var getTextRect_1 = getTextRect;

    var format = {
    	addCommas: addCommas_1,
    	toCamelCase: toCamelCase_1,
    	normalizeCssArray: normalizeCssArray_1$1,
    	encodeHTML: encodeHTML_1,
    	formatTpl: formatTpl_1,
    	formatTplSimple: formatTplSimple_1,
    	getTooltipMarker: getTooltipMarker_1,
    	formatTime: formatTime_1,
    	capitalFirst: capitalFirst_1,
    	truncateText: truncateText_1$1,
    	getTextBoundingRect: getTextBoundingRect_1,
    	getTextRect: getTextRect_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var parsePercent$2 = number.parsePercent;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Layout helpers for each component positioning
    var each$3 = util.each;
    /**
     * @public
     */

    var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
    /**
     * @public
     */

    var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];

    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
      var x = 0;
      var y = 0;

      if (maxWidth == null) {
        maxWidth = Infinity;
      }

      if (maxHeight == null) {
        maxHeight = Infinity;
      }

      var currentLineMaxSize = 0;
      group.eachChild(function (child, idx) {
        var position = child.position;
        var rect = child.getBoundingRect();
        var nextChild = group.childAt(idx + 1);
        var nextChildRect = nextChild && nextChild.getBoundingRect();
        var nextX;
        var nextY;

        if (orient === 'horizontal') {
          var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
          nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group
          // FIXME compare before adding gap?

          if (nextX > maxWidth || child.newline) {
            x = 0;
            nextX = moveX;
            y += currentLineMaxSize + gap;
            currentLineMaxSize = rect.height;
          } else {
            // FIXME: consider rect.y is not `0`?
            currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
          }
        } else {
          var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
          nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group

          if (nextY > maxHeight || child.newline) {
            x += currentLineMaxSize + gap;
            y = 0;
            nextY = moveY;
            currentLineMaxSize = rect.width;
          } else {
            currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
          }
        }

        if (child.newline) {
          return;
        }

        position[0] = x;
        position[1] = y;
        orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
      });
    }
    /**
     * VBox or HBox layouting
     * @param {string} orient
     * @param {module:zrender/container/Group} group
     * @param {number} gap
     * @param {number} [width=Infinity]
     * @param {number} [height=Infinity]
     */


    var box = boxLayout;
    /**
     * VBox layouting
     * @param {module:zrender/container/Group} group
     * @param {number} gap
     * @param {number} [width=Infinity]
     * @param {number} [height=Infinity]
     */

    var vbox = util.curry(boxLayout, 'vertical');
    /**
     * HBox layouting
     * @param {module:zrender/container/Group} group
     * @param {number} gap
     * @param {number} [width=Infinity]
     * @param {number} [height=Infinity]
     */

    var hbox = util.curry(boxLayout, 'horizontal');
    /**
     * If x or x2 is not specified or 'center' 'left' 'right',
     * the width would be as long as possible.
     * If y or y2 is not specified or 'middle' 'top' 'bottom',
     * the height would be as long as possible.
     *
     * @param {Object} positionInfo
     * @param {number|string} [positionInfo.x]
     * @param {number|string} [positionInfo.y]
     * @param {number|string} [positionInfo.x2]
     * @param {number|string} [positionInfo.y2]
     * @param {Object} containerRect {width, height}
     * @param {string|number} margin
     * @return {Object} {width, height}
     */

    function getAvailableSize(positionInfo, containerRect, margin) {
      var containerWidth = containerRect.width;
      var containerHeight = containerRect.height;
      var x = parsePercent$2(positionInfo.x, containerWidth);
      var y = parsePercent$2(positionInfo.y, containerHeight);
      var x2 = parsePercent$2(positionInfo.x2, containerWidth);
      var y2 = parsePercent$2(positionInfo.y2, containerHeight);
      (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
      (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
      (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
      (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
      margin = format.normalizeCssArray(margin || 0);
      return {
        width: Math.max(x2 - x - margin[1] - margin[3], 0),
        height: Math.max(y2 - y - margin[0] - margin[2], 0)
      };
    }
    /**
     * Parse position info.
     *
     * @param {Object} positionInfo
     * @param {number|string} [positionInfo.left]
     * @param {number|string} [positionInfo.top]
     * @param {number|string} [positionInfo.right]
     * @param {number|string} [positionInfo.bottom]
     * @param {number|string} [positionInfo.width]
     * @param {number|string} [positionInfo.height]
     * @param {number|string} [positionInfo.aspect] Aspect is width / height
     * @param {Object} containerRect
     * @param {string|number} [margin]
     *
     * @return {module:zrender/core/BoundingRect}
     */


    function getLayoutRect(positionInfo, containerRect, margin) {
      margin = format.normalizeCssArray(margin || 0);
      var containerWidth = containerRect.width;
      var containerHeight = containerRect.height;
      var left = parsePercent$2(positionInfo.left, containerWidth);
      var top = parsePercent$2(positionInfo.top, containerHeight);
      var right = parsePercent$2(positionInfo.right, containerWidth);
      var bottom = parsePercent$2(positionInfo.bottom, containerHeight);
      var width = parsePercent$2(positionInfo.width, containerWidth);
      var height = parsePercent$2(positionInfo.height, containerHeight);
      var verticalMargin = margin[2] + margin[0];
      var horizontalMargin = margin[1] + margin[3];
      var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right

      if (isNaN(width)) {
        width = containerWidth - right - horizontalMargin - left;
      }

      if (isNaN(height)) {
        height = containerHeight - bottom - verticalMargin - top;
      }

      if (aspect != null) {
        // If width and height are not given
        // 1. Graph should not exceeds the container
        // 2. Aspect must be keeped
        // 3. Graph should take the space as more as possible
        // FIXME
        // Margin is not considered, because there is no case that both
        // using margin and aspect so far.
        if (isNaN(width) && isNaN(height)) {
          if (aspect > containerWidth / containerHeight) {
            width = containerWidth * 0.8;
          } else {
            height = containerHeight * 0.8;
          }
        } // Calculate width or height with given aspect


        if (isNaN(width)) {
          width = aspect * height;
        }

        if (isNaN(height)) {
          height = width / aspect;
        }
      } // If left is not specified, calculate left from right and width


      if (isNaN(left)) {
        left = containerWidth - right - width - horizontalMargin;
      }

      if (isNaN(top)) {
        top = containerHeight - bottom - height - verticalMargin;
      } // Align left and top


      switch (positionInfo.left || positionInfo.right) {
        case 'center':
          left = containerWidth / 2 - width / 2 - margin[3];
          break;

        case 'right':
          left = containerWidth - width - horizontalMargin;
          break;
      }

      switch (positionInfo.top || positionInfo.bottom) {
        case 'middle':
        case 'center':
          top = containerHeight / 2 - height / 2 - margin[0];
          break;

        case 'bottom':
          top = containerHeight - height - verticalMargin;
          break;
      } // If something is wrong and left, top, width, height are calculated as NaN


      left = left || 0;
      top = top || 0;

      if (isNaN(width)) {
        // Width may be NaN if only one value is given except width
        width = containerWidth - horizontalMargin - left - (right || 0);
      }

      if (isNaN(height)) {
        // Height may be NaN if only one value is given except height
        height = containerHeight - verticalMargin - top - (bottom || 0);
      }

      var rect = new BoundingRect_1(left + margin[3], top + margin[0], width, height);
      rect.margin = margin;
      return rect;
    }
    /**
     * Position a zr element in viewport
     *  Group position is specified by either
     *  {left, top}, {right, bottom}
     *  If all properties exists, right and bottom will be igonred.
     *
     * Logic:
     *     1. Scale (against origin point in parent coord)
     *     2. Rotate (against origin point in parent coord)
     *     3. Traslate (with el.position by this method)
     * So this method only fixes the last step 'Traslate', which does not affect
     * scaling and rotating.
     *
     * If be called repeatly with the same input el, the same result will be gotten.
     *
     * @param {module:zrender/Element} el Should have `getBoundingRect` method.
     * @param {Object} positionInfo
     * @param {number|string} [positionInfo.left]
     * @param {number|string} [positionInfo.top]
     * @param {number|string} [positionInfo.right]
     * @param {number|string} [positionInfo.bottom]
     * @param {number|string} [positionInfo.width] Only for opt.boundingModel: 'raw'
     * @param {number|string} [positionInfo.height] Only for opt.boundingModel: 'raw'
     * @param {Object} containerRect
     * @param {string|number} margin
     * @param {Object} [opt]
     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
     * @param {Array.<number>} [opt.boundingMode='all']
     *        Specify how to calculate boundingRect when locating.
     *        'all': Position the boundingRect that is transformed and uioned
     *               both itself and its descendants.
     *               This mode simplies confine the elements in the bounding
     *               of their container (e.g., using 'right: 0').
     *        'raw': Position the boundingRect that is not transformed and only itself.
     *               This mode is useful when you want a element can overflow its
     *               container. (Consider a rotated circle needs to be located in a corner.)
     *               In this mode positionInfo.width/height can only be number.
     */


    function positionElement(el, positionInfo, containerRect, margin, opt) {
      var h = !opt || !opt.hv || opt.hv[0];
      var v = !opt || !opt.hv || opt.hv[1];
      var boundingMode = opt && opt.boundingMode || 'all';

      if (!h && !v) {
        return;
      }

      var rect;

      if (boundingMode === 'raw') {
        rect = el.type === 'group' ? new BoundingRect_1(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
      } else {
        rect = el.getBoundingRect();

        if (el.needLocalTransform()) {
          var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,
          // which should not be modified.

          rect = rect.clone();
          rect.applyTransform(transform);
        }
      } // The real width and height can not be specified but calculated by the given el.


      positionInfo = getLayoutRect(util.defaults({
        width: rect.width,
        height: rect.height
      }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform
      // (see zrender/core/Transformable#getLocalTransform),
      // we can just only modify el.position to get final result.

      var elPos = el.position;
      var dx = h ? positionInfo.x - rect.x : 0;
      var dy = v ? positionInfo.y - rect.y : 0;
      el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
    }
    /**
     * @param {Object} option Contains some of the properties in HV_NAMES.
     * @param {number} hvIdx 0: horizontal; 1: vertical.
     */


    function sizeCalculable(option, hvIdx) {
      return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
    }
    /**
     * Consider Case:
     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
     * through setOption or media query, using normal zrUtil.merge will cause
     * {right: 0} does not take effect.
     *
     * @example
     * ComponentModel.extend({
     *     init: function () {
     *         ...
     *         var inputPositionParams = layout.getLayoutParams(option);
     *         this.mergeOption(inputPositionParams);
     *     },
     *     mergeOption: function (newOption) {
     *         newOption && zrUtil.merge(thisOption, newOption, true);
     *         layout.mergeLayoutParam(thisOption, newOption);
     *     }
     * });
     *
     * @param {Object} targetOption
     * @param {Object} newOption
     * @param {Object|string} [opt]
     * @param {boolean|Array.<boolean>} [opt.ignoreSize=false] Used for the components
     *  that width (or height) should not be calculated by left and right (or top and bottom).
     */


    function mergeLayoutParam(targetOption, newOption, opt) {
      !util.isObject(opt) && (opt = {});
      var ignoreSize = opt.ignoreSize;
      !util.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
      var hResult = merge(HV_NAMES[0], 0);
      var vResult = merge(HV_NAMES[1], 1);
      copy(HV_NAMES[0], targetOption, hResult);
      copy(HV_NAMES[1], targetOption, vResult);

      function merge(names, hvIdx) {
        var newParams = {};
        var newValueCount = 0;
        var merged = {};
        var mergedValueCount = 0;
        var enoughParamNumber = 2;
        each$3(names, function (name) {
          merged[name] = targetOption[name];
        });
        each$3(names, function (name) {
          // Consider case: newOption.width is null, which is
          // set by user for removing width setting.
          hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
          hasValue(newParams, name) && newValueCount++;
          hasValue(merged, name) && mergedValueCount++;
        });

        if (ignoreSize[hvIdx]) {
          // Only one of left/right is premitted to exist.
          if (hasValue(newOption, names[1])) {
            merged[names[2]] = null;
          } else if (hasValue(newOption, names[2])) {
            merged[names[1]] = null;
          }

          return merged;
        } // Case: newOption: {width: ..., right: ...},
        // or targetOption: {right: ...} and newOption: {width: ...},
        // There is no conflict when merged only has params count
        // little than enoughParamNumber.


        if (mergedValueCount === enoughParamNumber || !newValueCount) {
          return merged;
        } // Case: newOption: {width: ..., right: ...},
        // Than we can make sure user only want those two, and ignore
        // all origin params in targetOption.
        else if (newValueCount >= enoughParamNumber) {
            return newParams;
          } else {
            // Chose another param from targetOption by priority.
            for (var i = 0; i < names.length; i++) {
              var name = names[i];

              if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
                newParams[name] = targetOption[name];
                break;
              }
            }

            return newParams;
          }
      }

      function hasProp(obj, name) {
        return obj.hasOwnProperty(name);
      }

      function hasValue(obj, name) {
        return obj[name] != null && obj[name] !== 'auto';
      }

      function copy(names, target, source) {
        each$3(names, function (name) {
          target[name] = source[name];
        });
      }
    }
    /**
     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
     * @param {Object} source
     * @return {Object} Result contains those props.
     */


    function getLayoutParams(source) {
      return copyLayoutParams({}, source);
    }
    /**
     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
     * @param {Object} source
     * @return {Object} Result contains those props.
     */


    function copyLayoutParams(target, source) {
      source && target && each$3(LOCATION_PARAMS, function (name) {
        source.hasOwnProperty(name) && (target[name] = source[name]);
      });
      return target;
    }

    var LOCATION_PARAMS_1 = LOCATION_PARAMS;
    var HV_NAMES_1 = HV_NAMES;
    var box_1 = box;
    var vbox_1 = vbox;
    var hbox_1 = hbox;
    var getAvailableSize_1 = getAvailableSize;
    var getLayoutRect_1 = getLayoutRect;
    var positionElement_1 = positionElement;
    var sizeCalculable_1 = sizeCalculable;
    var mergeLayoutParam_1 = mergeLayoutParam;
    var getLayoutParams_1 = getLayoutParams;
    var copyLayoutParams_1 = copyLayoutParams;

    var layout = {
    	LOCATION_PARAMS: LOCATION_PARAMS_1,
    	HV_NAMES: HV_NAMES_1,
    	box: box_1,
    	vbox: vbox_1,
    	hbox: hbox_1,
    	getAvailableSize: getAvailableSize_1,
    	getLayoutRect: getLayoutRect_1,
    	positionElement: positionElement_1,
    	sizeCalculable: sizeCalculable_1,
    	mergeLayoutParam: mergeLayoutParam_1,
    	getLayoutParams: getLayoutParams_1,
    	copyLayoutParams: copyLayoutParams_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$T = {
      getBoxLayoutParams: function () {
        return {
          left: this.get('left'),
          top: this.get('top'),
          right: this.get('right'),
          bottom: this.get('bottom'),
          width: this.get('width'),
          height: this.get('height')
        };
      }
    };
    var boxLayout$1 = _default$T;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    var enableClassManagement$1 = clazz.enableClassManagement;
    var parseClassType$2 = clazz.parseClassType;



    var makeInner$2 = model.makeInner;





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Component model
     *
     * @module echarts/model/Component
     */
    var inner$1 = makeInner$2();
    /**
     * @alias module:echarts/model/Component
     * @constructor
     * @param {Object} option
     * @param {module:echarts/model/Model} parentModel
     * @param {module:echarts/model/Model} ecModel
     */

    var ComponentModel = Model_1.extend({
      type: 'component',

      /**
       * @readOnly
       * @type {string}
       */
      id: '',

      /**
       * Because simplified concept is probably better, series.name (or component.name)
       * has been having too many resposibilities:
       * (1) Generating id (which requires name in option should not be modified).
       * (2) As an index to mapping series when merging option or calling API (a name
       * can refer to more then one components, which is convinient is some case).
       * (3) Display.
       * @readOnly
       */
      name: '',

      /**
       * @readOnly
       * @type {string}
       */
      mainType: '',

      /**
       * @readOnly
       * @type {string}
       */
      subType: '',

      /**
       * @readOnly
       * @type {number}
       */
      componentIndex: 0,

      /**
       * @type {Object}
       * @protected
       */
      defaultOption: null,

      /**
       * @type {module:echarts/model/Global}
       * @readOnly
       */
      ecModel: null,

      /**
       * key: componentType
       * value:  Component model list, can not be null.
       * @type {Object.<string, Array.<module:echarts/model/Model>>}
       * @readOnly
       */
      dependentModels: [],

      /**
       * @type {string}
       * @readOnly
       */
      uid: null,

      /**
       * Support merge layout params.
       * Only support 'box' now (left/right/top/bottom/width/height).
       * @type {string|Object} Object can be {ignoreSize: true}
       * @readOnly
       */
      layoutMode: null,
      $constructor: function (option, parentModel, ecModel, extraOpt) {
        Model_1.call(this, option, parentModel, ecModel, extraOpt);
        this.uid = component.getUID('ec_cpt_model');
      },
      init: function (option, parentModel, ecModel, extraOpt) {
        this.mergeDefaultAndTheme(option, ecModel);
      },
      mergeDefaultAndTheme: function (option, ecModel) {
        var layoutMode = this.layoutMode;
        var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
        var themeModel = ecModel.getTheme();
        util.merge(option, themeModel.get(this.mainType));
        util.merge(option, this.getDefaultOption());

        if (layoutMode) {
          layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
        }
      },
      mergeOption: function (option, extraOpt) {
        util.merge(this.option, option, true);
        var layoutMode = this.layoutMode;

        if (layoutMode) {
          layout.mergeLayoutParam(this.option, option, layoutMode);
        }
      },
      // Hooker after init or mergeOption
      optionUpdated: function (newCptOption, isInit) {},
      getDefaultOption: function () {
        var fields = inner$1(this);

        if (!fields.defaultOption) {
          var optList = [];
          var Class = this.constructor;

          while (Class) {
            var opt = Class.prototype.defaultOption;
            opt && optList.push(opt);
            Class = Class.superClass;
          }

          var defaultOption = {};

          for (var i = optList.length - 1; i >= 0; i--) {
            defaultOption = util.merge(defaultOption, optList[i], true);
          }

          fields.defaultOption = defaultOption;
        }

        return fields.defaultOption;
      },
      getReferringComponents: function (mainType) {
        return this.ecModel.queryComponents({
          mainType: mainType,
          index: this.get(mainType + 'Index', true),
          id: this.get(mainType + 'Id', true)
        });
      }
    }); // Reset ComponentModel.extend, add preConstruct.
    // clazzUtil.enableClassExtend(
    //     ComponentModel,
    //     function (option, parentModel, ecModel, extraOpt) {
    //         // Set dependentModels, componentIndex, name, id, mainType, subType.
    //         zrUtil.extend(this, extraOpt);
    //         this.uid = componentUtil.getUID('componentModel');
    //         // this.setReadOnly([
    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
    //         //     'dependentModels', 'componentIndex'
    //         // ]);
    //     }
    // );
    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

    enableClassManagement$1(ComponentModel, {
      registerWhenExtend: true
    });
    component.enableSubTypeDefaulter(ComponentModel); // Add capability of ComponentModel.topologicalTravel.

    component.enableTopologicalTravel(ComponentModel, getDependencies);

    function getDependencies(componentType) {
      var deps = [];
      util.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
        deps = deps.concat(Clazz.prototype.dependencies || []);
      }); // Ensure main type.

      deps = util.map(deps, function (type) {
        return parseClassType$2(type).main;
      }); // Hack dataset for convenience.

      if (componentType !== 'dataset' && util.indexOf(deps, 'dataset') <= 0) {
        deps.unshift('dataset');
      }

      return deps;
    }

    util.mixin(ComponentModel, boxLayout$1);
    var _default$U = ComponentModel;
    var Component = _default$U;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var platform = ''; // Navigator not exists in node

    if (typeof navigator !== 'undefined') {
      platform = navigator.platform || '';
    }

    var _default$V = {
      // backgroundColor: 'rgba(0,0,0,0)',
      // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
      // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
      // Light colors:
      // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
      // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
      // Dark colors:
      color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],
      gradientColor: ['#f6efa6', '#d88273', '#bf444c'],
      // If xAxis and yAxis declared, grid is created by default.
      // grid: {},
      textStyle: {
        // color: '#000',
        // decoration: 'none',
        // PENDING
        fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
        // fontFamily: 'Arial, Verdana, sans-serif',
        fontSize: 12,
        fontStyle: 'normal',
        fontWeight: 'normal'
      },
      // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
      // Default is source-over
      blendMode: null,
      animation: 'auto',
      animationDuration: 1000,
      animationDurationUpdate: 300,
      animationEasing: 'exponentialOut',
      animationEasingUpdate: 'cubicOut',
      animationThreshold: 2000,
      // Configuration for progressive/incremental rendering
      progressiveThreshold: 3000,
      progressive: 400,
      // Threshold of if use single hover layer to optimize.
      // It is recommended that `hoverLayerThreshold` is equivalent to or less than
      // `progressiveThreshold`, otherwise hover will cause restart of progressive,
      // which is unexpected.
      // see example <echarts/test/heatmap-large.html>.
      hoverLayerThreshold: 3000,
      // See: module:echarts/scale/Time
      useUTC: false
    };
    var globalDefault = _default$V;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var makeInner$3 = model.makeInner;
    var normalizeToArray$1 = model.normalizeToArray;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var inner$2 = makeInner$3();

    function getNearestColorPalette(colors, requestColorNum) {
      var paletteNum = colors.length; // TODO colors must be in order

      for (var i = 0; i < paletteNum; i++) {
        if (colors[i].length > requestColorNum) {
          return colors[i];
        }
      }

      return colors[paletteNum - 1];
    }

    var _default$W = {
      clearColorPalette: function () {
        inner$2(this).colorIdx = 0;
        inner$2(this).colorNameMap = {};
      },

      /**
       * @param {string} name MUST NOT be null/undefined. Otherwise call this function
       *                 twise with the same parameters will get different result.
       * @param {Object} [scope=this]
       * @param {Object} [requestColorNum]
       * @return {string} color string.
       */
      getColorFromPalette: function (name, scope, requestColorNum) {
        scope = scope || this;
        var scopeFields = inner$2(scope);
        var colorIdx = scopeFields.colorIdx || 0;
        var colorNameMap = scopeFields.colorNameMap = scopeFields.colorNameMap || {}; // Use `hasOwnProperty` to avoid conflict with Object.prototype.

        if (colorNameMap.hasOwnProperty(name)) {
          return colorNameMap[name];
        }

        var defaultColorPalette = normalizeToArray$1(this.get('color', true));
        var layeredColorPalette = this.get('colorLayer', true);
        var colorPalette = requestColorNum == null || !layeredColorPalette ? defaultColorPalette : getNearestColorPalette(layeredColorPalette, requestColorNum); // In case can't find in layered color palette.

        colorPalette = colorPalette || defaultColorPalette;

        if (!colorPalette || !colorPalette.length) {
          return;
        }

        var color = colorPalette[colorIdx];

        if (name) {
          colorNameMap[name] = color;
        }

        scopeFields.colorIdx = (colorIdx + 1) % colorPalette.length;
        return color;
      }
    };
    var colorPalette = _default$W;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Avoid typo.
    var SOURCE_FORMAT_ORIGINAL = 'original';
    var SOURCE_FORMAT_ARRAY_ROWS = 'arrayRows';
    var SOURCE_FORMAT_OBJECT_ROWS = 'objectRows';
    var SOURCE_FORMAT_KEYED_COLUMNS = 'keyedColumns';
    var SOURCE_FORMAT_UNKNOWN = 'unknown'; // ??? CHANGE A NAME

    var SOURCE_FORMAT_TYPED_ARRAY = 'typedArray';
    var SERIES_LAYOUT_BY_COLUMN = 'column';
    var SERIES_LAYOUT_BY_ROW = 'row';
    var SOURCE_FORMAT_ORIGINAL_1 = SOURCE_FORMAT_ORIGINAL;
    var SOURCE_FORMAT_ARRAY_ROWS_1 = SOURCE_FORMAT_ARRAY_ROWS;
    var SOURCE_FORMAT_OBJECT_ROWS_1 = SOURCE_FORMAT_OBJECT_ROWS;
    var SOURCE_FORMAT_KEYED_COLUMNS_1 = SOURCE_FORMAT_KEYED_COLUMNS;
    var SOURCE_FORMAT_UNKNOWN_1 = SOURCE_FORMAT_UNKNOWN;
    var SOURCE_FORMAT_TYPED_ARRAY_1 = SOURCE_FORMAT_TYPED_ARRAY;
    var SERIES_LAYOUT_BY_COLUMN_1 = SERIES_LAYOUT_BY_COLUMN;
    var SERIES_LAYOUT_BY_ROW_1 = SERIES_LAYOUT_BY_ROW;

    var sourceType = {
    	SOURCE_FORMAT_ORIGINAL: SOURCE_FORMAT_ORIGINAL_1,
    	SOURCE_FORMAT_ARRAY_ROWS: SOURCE_FORMAT_ARRAY_ROWS_1,
    	SOURCE_FORMAT_OBJECT_ROWS: SOURCE_FORMAT_OBJECT_ROWS_1,
    	SOURCE_FORMAT_KEYED_COLUMNS: SOURCE_FORMAT_KEYED_COLUMNS_1,
    	SOURCE_FORMAT_UNKNOWN: SOURCE_FORMAT_UNKNOWN_1,
    	SOURCE_FORMAT_TYPED_ARRAY: SOURCE_FORMAT_TYPED_ARRAY_1,
    	SERIES_LAYOUT_BY_COLUMN: SERIES_LAYOUT_BY_COLUMN_1,
    	SERIES_LAYOUT_BY_ROW: SERIES_LAYOUT_BY_ROW_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var createHashMap$1 = util.createHashMap;
    var isTypedArray$1 = util.isTypedArray;



    var enableClassCheck$2 = clazz.enableClassCheck;



    var SOURCE_FORMAT_ORIGINAL$1 = sourceType.SOURCE_FORMAT_ORIGINAL;
    var SERIES_LAYOUT_BY_COLUMN$1 = sourceType.SERIES_LAYOUT_BY_COLUMN;
    var SOURCE_FORMAT_UNKNOWN$1 = sourceType.SOURCE_FORMAT_UNKNOWN;
    var SOURCE_FORMAT_TYPED_ARRAY$1 = sourceType.SOURCE_FORMAT_TYPED_ARRAY;
    var SOURCE_FORMAT_KEYED_COLUMNS$1 = sourceType.SOURCE_FORMAT_KEYED_COLUMNS;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * [sourceFormat]
     *
     * + "original":
     * This format is only used in series.data, where
     * itemStyle can be specified in data item.
     *
     * + "arrayRows":
     * [
     *     ['product', 'score', 'amount'],
     *     ['Matcha Latte', 89.3, 95.8],
     *     ['Milk Tea', 92.1, 89.4],
     *     ['Cheese Cocoa', 94.4, 91.2],
     *     ['Walnut Brownie', 85.4, 76.9]
     * ]
     *
     * + "objectRows":
     * [
     *     {product: 'Matcha Latte', score: 89.3, amount: 95.8},
     *     {product: 'Milk Tea', score: 92.1, amount: 89.4},
     *     {product: 'Cheese Cocoa', score: 94.4, amount: 91.2},
     *     {product: 'Walnut Brownie', score: 85.4, amount: 76.9}
     * ]
     *
     * + "keyedColumns":
     * {
     *     'product': ['Matcha Latte', 'Milk Tea', 'Cheese Cocoa', 'Walnut Brownie'],
     *     'count': [823, 235, 1042, 988],
     *     'score': [95.8, 81.4, 91.2, 76.9]
     * }
     *
     * + "typedArray"
     *
     * + "unknown"
     */

    /**
     * @constructor
     * @param {Object} fields
     * @param {string} fields.sourceFormat
     * @param {Array|Object} fields.fromDataset
     * @param {Array|Object} [fields.data]
     * @param {string} [seriesLayoutBy='column']
     * @param {Array.<Object|string>} [dimensionsDefine]
     * @param {Objet|HashMap} [encodeDefine]
     * @param {number} [startIndex=0]
     * @param {number} [dimensionsDetectCount]
     */
    function Source(fields) {
      /**
       * @type {boolean}
       */
      this.fromDataset = fields.fromDataset;
      /**
       * Not null/undefined.
       * @type {Array|Object}
       */

      this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$1 ? {} : []);
      /**
       * See also "detectSourceFormat".
       * Not null/undefined.
       * @type {string}
       */

      this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN$1;
      /**
       * 'row' or 'column'
       * Not null/undefined.
       * @type {string} seriesLayoutBy
       */

      this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN$1;
      /**
       * dimensions definition in option.
       * can be null/undefined.
       * @type {Array.<Object|string>}
       */

      this.dimensionsDefine = fields.dimensionsDefine;
      /**
       * encode definition in option.
       * can be null/undefined.
       * @type {Objet|HashMap}
       */

      this.encodeDefine = fields.encodeDefine && createHashMap$1(fields.encodeDefine);
      /**
       * Not null/undefined, uint.
       * @type {number}
       */

      this.startIndex = fields.startIndex || 0;
      /**
       * Can be null/undefined (when unknown), uint.
       * @type {number}
       */

      this.dimensionsDetectCount = fields.dimensionsDetectCount;
    }
    /**
     * Wrap original series data for some compatibility cases.
     */


    Source.seriesDataToSource = function (data) {
      return new Source({
        data: data,
        sourceFormat: isTypedArray$1(data) ? SOURCE_FORMAT_TYPED_ARRAY$1 : SOURCE_FORMAT_ORIGINAL$1,
        fromDataset: false
      });
    };

    enableClassCheck$2(Source);
    var _default$X = Source;
    var Source_1 = _default$X;

    var makeInner$4 = model.makeInner;
    var getDataItemValue$1 = model.getDataItemValue;



    var createHashMap$2 = util.createHashMap;
    var each$4 = util.each;
    var map$1 = util.map;
    var isArray$2 = util.isArray;
    var isString$3 = util.isString;
    var isObject$4 = util.isObject;
    var isTypedArray$2 = util.isTypedArray;
    var isArrayLike$3 = util.isArrayLike;
    var extend$2 = util.extend;





    var SOURCE_FORMAT_ORIGINAL$2 = sourceType.SOURCE_FORMAT_ORIGINAL;
    var SOURCE_FORMAT_ARRAY_ROWS$1 = sourceType.SOURCE_FORMAT_ARRAY_ROWS;
    var SOURCE_FORMAT_OBJECT_ROWS$1 = sourceType.SOURCE_FORMAT_OBJECT_ROWS;
    var SOURCE_FORMAT_KEYED_COLUMNS$2 = sourceType.SOURCE_FORMAT_KEYED_COLUMNS;
    var SOURCE_FORMAT_UNKNOWN$2 = sourceType.SOURCE_FORMAT_UNKNOWN;
    var SOURCE_FORMAT_TYPED_ARRAY$2 = sourceType.SOURCE_FORMAT_TYPED_ARRAY;
    var SERIES_LAYOUT_BY_ROW$1 = sourceType.SERIES_LAYOUT_BY_ROW;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // The result of `guessOrdinal`.
    var BE_ORDINAL = {
      Must: 1,
      // Encounter string but not '-' and not number-like.
      Might: 2,
      // Encounter string but number-like.
      Not: 3 // Other cases

    };
    var inner$3 = makeInner$4();
    /**
     * @see {module:echarts/data/Source}
     * @param {module:echarts/component/dataset/DatasetModel} datasetModel
     * @return {string} sourceFormat
     */

    function detectSourceFormat(datasetModel) {
      var data = datasetModel.option.source;
      var sourceFormat = SOURCE_FORMAT_UNKNOWN$2;

      if (isTypedArray$2(data)) {
        sourceFormat = SOURCE_FORMAT_TYPED_ARRAY$2;
      } else if (isArray$2(data)) {
        // FIXME Whether tolerate null in top level array?
        if (data.length === 0) {
          sourceFormat = SOURCE_FORMAT_ARRAY_ROWS$1;
        }

        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];

          if (item == null) {
            continue;
          } else if (isArray$2(item)) {
            sourceFormat = SOURCE_FORMAT_ARRAY_ROWS$1;
            break;
          } else if (isObject$4(item)) {
            sourceFormat = SOURCE_FORMAT_OBJECT_ROWS$1;
            break;
          }
        }
      } else if (isObject$4(data)) {
        for (var key in data) {
          if (data.hasOwnProperty(key) && isArrayLike$3(data[key])) {
            sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS$2;
            break;
          }
        }
      } else if (data != null) {
        throw new Error('Invalid data');
      }

      inner$3(datasetModel).sourceFormat = sourceFormat;
    }
    /**
     * [Scenarios]:
     * (1) Provide source data directly:
     *     series: {
     *         encode: {...},
     *         dimensions: [...]
     *         seriesLayoutBy: 'row',
     *         data: [[...]]
     *     }
     * (2) Refer to datasetModel.
     *     series: [{
     *         encode: {...}
     *         // Ignore datasetIndex means `datasetIndex: 0`
     *         // and the dimensions defination in dataset is used
     *     }, {
     *         encode: {...},
     *         seriesLayoutBy: 'column',
     *         datasetIndex: 1
     *     }]
     *
     * Get data from series itself or datset.
     * @return {module:echarts/data/Source} source
     */


    function getSource(seriesModel) {
      return inner$3(seriesModel).source;
    }
    /**
     * MUST be called before mergeOption of all series.
     * @param {module:echarts/model/Global} ecModel
     */


    function resetSourceDefaulter(ecModel) {
      // `datasetMap` is used to make default encode.
      inner$3(ecModel).datasetMap = createHashMap$2();
    }
    /**
     * [Caution]:
     * MUST be called after series option merged and
     * before "series.getInitailData()" called.
     *
     * [The rule of making default encode]:
     * Category axis (if exists) alway map to the first dimension.
     * Each other axis occupies a subsequent dimension.
     *
     * [Why make default encode]:
     * Simplify the typing of encode in option, avoiding the case like that:
     * series: [{encode: {x: 0, y: 1}}, {encode: {x: 0, y: 2}}, {encode: {x: 0, y: 3}}],
     * where the "y" have to be manually typed as "1, 2, 3, ...".
     *
     * @param {module:echarts/model/Series} seriesModel
     */


    function prepareSource(seriesModel) {
      var seriesOption = seriesModel.option;
      var data = seriesOption.data;
      var sourceFormat = isTypedArray$2(data) ? SOURCE_FORMAT_TYPED_ARRAY$2 : SOURCE_FORMAT_ORIGINAL$2;
      var fromDataset = false;
      var seriesLayoutBy = seriesOption.seriesLayoutBy;
      var sourceHeader = seriesOption.sourceHeader;
      var dimensionsDefine = seriesOption.dimensions;
      var datasetModel = getDatasetModel(seriesModel);

      if (datasetModel) {
        var datasetOption = datasetModel.option;
        data = datasetOption.source;
        sourceFormat = inner$3(datasetModel).sourceFormat;
        fromDataset = true; // These settings from series has higher priority.

        seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;
        sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);
        dimensionsDefine = dimensionsDefine || datasetOption.dimensions;
      }

      var completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine);
      inner$3(seriesModel).source = new Source_1({
        data: data,
        fromDataset: fromDataset,
        seriesLayoutBy: seriesLayoutBy,
        sourceFormat: sourceFormat,
        dimensionsDefine: completeResult.dimensionsDefine,
        startIndex: completeResult.startIndex,
        dimensionsDetectCount: completeResult.dimensionsDetectCount,
        // Note: dataset option does not have `encode`.
        encodeDefine: seriesOption.encode
      });
    } // return {startIndex, dimensionsDefine, dimensionsCount}


    function completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {
      if (!data) {
        return {
          dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)
        };
      }

      var dimensionsDetectCount;
      var startIndex;

      if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS$1) {
        // Rule: Most of the first line are string: it is header.
        // Caution: consider a line with 5 string and 1 number,
        // it still can not be sure it is a head, because the
        // 5 string may be 5 values of category columns.
        if (sourceHeader === 'auto' || sourceHeader == null) {
          arrayRowsTravelFirst(function (val) {
            // '-' is regarded as null/undefined.
            if (val != null && val !== '-') {
              if (isString$3(val)) {
                startIndex == null && (startIndex = 1);
              } else {
                startIndex = 0;
              }
            } // 10 is an experience number, avoid long loop.

          }, seriesLayoutBy, data, 10);
        } else {
          startIndex = sourceHeader ? 1 : 0;
        }

        if (!dimensionsDefine && startIndex === 1) {
          dimensionsDefine = [];
          arrayRowsTravelFirst(function (val, index) {
            dimensionsDefine[index] = val != null ? val : '';
          }, seriesLayoutBy, data);
        }

        dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW$1 ? data.length : data[0] ? data[0].length : null;
      } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS$1) {
        if (!dimensionsDefine) {
          dimensionsDefine = objectRowsCollectDimensions(data);
        }
      } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$2) {
        if (!dimensionsDefine) {
          dimensionsDefine = [];
          each$4(data, function (colArr, key) {
            dimensionsDefine.push(key);
          });
        }
      } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL$2) {
        var value0 = getDataItemValue$1(data[0]);
        dimensionsDetectCount = isArray$2(value0) && value0.length || 1;
      }

      return {
        startIndex: startIndex,
        dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),
        dimensionsDetectCount: dimensionsDetectCount
      };
    } // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],
    // which is reasonable. But dimension name is duplicated.
    // Returns undefined or an array contains only object without null/undefiend or string.


    function normalizeDimensionsDefine(dimensionsDefine) {
      if (!dimensionsDefine) {
        // The meaning of null/undefined is different from empty array.
        return;
      }

      var nameMap = createHashMap$2();
      return map$1(dimensionsDefine, function (item, index) {
        item = extend$2({}, isObject$4(item) ? item : {
          name: item
        }); // User can set null in dimensions.
        // We dont auto specify name, othewise a given name may
        // cause it be refered unexpectedly.

        if (item.name == null) {
          return item;
        } // Also consider number form like 2012.


        item.name += ''; // User may also specify displayName.
        // displayName will always exists except user not
        // specified or dim name is not specified or detected.
        // (A auto generated dim name will not be used as
        // displayName).

        if (item.displayName == null) {
          item.displayName = item.name;
        }

        var exist = nameMap.get(item.name);

        if (!exist) {
          nameMap.set(item.name, {
            count: 1
          });
        } else {
          item.name += '-' + exist.count++;
        }

        return item;
      });
    }

    function arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {
      maxLoop == null && (maxLoop = Infinity);

      if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW$1) {
        for (var i = 0; i < data.length && i < maxLoop; i++) {
          cb(data[i] ? data[i][0] : null, i);
        }
      } else {
        var value0 = data[0] || [];

        for (var i = 0; i < value0.length && i < maxLoop; i++) {
          cb(value0[i], i);
        }
      }
    }

    function objectRowsCollectDimensions(data) {
      var firstIndex = 0;
      var obj;

      while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line


      if (obj) {
        var dimensions = [];
        each$4(obj, function (value, key) {
          dimensions.push(key);
        });
        return dimensions;
      }
    }
    /**
     * [The strategy of the arrengment of data dimensions for dataset]:
     * "value way": all axes are non-category axes. So series one by one take
     *     several (the number is coordSysDims.length) dimensions from dataset.
     *     The result of data arrengment of data dimensions like:
     *     | ser0_x | ser0_y | ser1_x | ser1_y | ser2_x | ser2_y |
     * "category way": at least one axis is category axis. So the the first data
     *     dimension is always mapped to the first category axis and shared by
     *     all of the series. The other data dimensions are taken by series like
     *     "value way" does.
     *     The result of data arrengment of data dimensions like:
     *     | ser_shared_x | ser0_y | ser1_y | ser2_y |
     *
     * @param {Array.<Object|string>} coordDimensions [{name: <string>, type: <string>, dimsDef: <Array>}, ...]
     * @param {module:model/Series} seriesModel
     * @param {module:data/Source} source
     * @return {Object} encode Never be `null/undefined`.
     */


    function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {
      var encode = {};
      var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.

      if (!datasetModel || !coordDimensions) {
        return encode;
      }

      var encodeItemName = [];
      var encodeSeriesName = [];
      var ecModel = seriesModel.ecModel;
      var datasetMap = inner$3(ecModel).datasetMap;
      var key = datasetModel.uid + '_' + source.seriesLayoutBy;
      var baseCategoryDimIndex;
      var categoryWayValueDimStart;
      coordDimensions = coordDimensions.slice();
      each$4(coordDimensions, function (coordDimInfo, coordDimIdx) {
        !isObject$4(coordDimInfo) && (coordDimensions[coordDimIdx] = {
          name: coordDimInfo
        });

        if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {
          baseCategoryDimIndex = coordDimIdx;
          categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimensions[coordDimIdx]);
        }

        encode[coordDimInfo.name] = [];
      });
      var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {
        categoryWayDim: categoryWayValueDimStart,
        valueWayDim: 0
      }); // TODO
      // Auto detect first time axis and do arrangement.

      each$4(coordDimensions, function (coordDimInfo, coordDimIdx) {
        var coordDimName = coordDimInfo.name;
        var count = getDataDimCountOnCoordDim(coordDimInfo); // In value way.

        if (baseCategoryDimIndex == null) {
          var start = datasetRecord.valueWayDim;
          pushDim(encode[coordDimName], start, count);
          pushDim(encodeSeriesName, start, count);
          datasetRecord.valueWayDim += count; // ??? TODO give a better default series name rule?
          // especially when encode x y specified.
          // consider: when mutiple series share one dimension
          // category axis, series name should better use
          // the other dimsion name. On the other hand, use
          // both dimensions name.
        } // In category way, the first category axis.
        else if (baseCategoryDimIndex === coordDimIdx) {
            pushDim(encode[coordDimName], 0, count);
            pushDim(encodeItemName, 0, count);
          } // In category way, the other axis.
          else {
              var start = datasetRecord.categoryWayDim;
              pushDim(encode[coordDimName], start, count);
              pushDim(encodeSeriesName, start, count);
              datasetRecord.categoryWayDim += count;
            }
      });

      function pushDim(dimIdxArr, idxFrom, idxCount) {
        for (var i = 0; i < idxCount; i++) {
          dimIdxArr.push(idxFrom + i);
        }
      }

      function getDataDimCountOnCoordDim(coordDimInfo) {
        var dimsDef = coordDimInfo.dimsDef;
        return dimsDef ? dimsDef.length : 1;
      }

      encodeItemName.length && (encode.itemName = encodeItemName);
      encodeSeriesName.length && (encode.seriesName = encodeSeriesName);
      return encode;
    }
    /**
     * Work for data like [{name: ..., value: ...}, ...].
     *
     * @param {module:model/Series} seriesModel
     * @param {module:data/Source} source
     * @return {Object} encode Never be `null/undefined`.
     */


    function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {
      var encode = {};
      var datasetModel = getDatasetModel(seriesModel); // Currently only make default when using dataset, util more reqirements occur.

      if (!datasetModel) {
        return encode;
      }

      var sourceFormat = source.sourceFormat;
      var dimensionsDefine = source.dimensionsDefine;
      var potentialNameDimIndex;

      if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS$1 || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$2) {
        each$4(dimensionsDefine, function (dim, idx) {
          if ((isObject$4(dim) ? dim.name : dim) === 'name') {
            potentialNameDimIndex = idx;
          }
        });
      } // idxResult: {v, n}.


      var idxResult = function () {
        var idxRes0 = {};
        var idxRes1 = {};
        var guessRecords = []; // 5 is an experience value.

        for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {
          var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);
          guessRecords.push(guessResult);
          var isPureNumber = guessResult === BE_ORDINAL.Not; // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,
          // and then find a name dim with the priority:
          // "BE_ORDINAL.Might|BE_ORDINAL.Must" > "other dim" > "the value dim itself".

          if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {
            idxRes0.v = i;
          }

          if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {
            idxRes0.n = i;
          }

          if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {
            return idxRes0;
          } // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),
          // find the first BE_ORDINAL.Might as the value dim,
          // and then find a name dim with the priority:
          // "other dim" > "the value dim itself".
          // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be
          // treated as number.


          if (!isPureNumber) {
            if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {
              idxRes1.v = i;
            }

            if (idxRes1.n == null || idxRes1.n === idxRes1.v) {
              idxRes1.n = i;
            }
          }
        }

        function fulfilled(idxResult) {
          return idxResult.v != null && idxResult.n != null;
        }

        return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;
      }();

      if (idxResult) {
        encode.value = idxResult.v; // `potentialNameDimIndex` has highest priority.

        var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n; // By default, label use itemName in charts.
        // So we dont set encodeLabel here.

        encode.itemName = [nameDimIndex];
        encode.seriesName = [nameDimIndex];
      }

      return encode;
    }
    /**
     * If return null/undefined, indicate that should not use datasetModel.
     */


    function getDatasetModel(seriesModel) {
      var option = seriesModel.option; // Caution: consider the scenario:
      // A dataset is declared and a series is not expected to use the dataset,
      // and at the beginning `setOption({series: { noData })` (just prepare other
      // option but no data), then `setOption({series: {data: [...]}); In this case,
      // the user should set an empty array to avoid that dataset is used by default.

      var thisData = option.data;

      if (!thisData) {
        return seriesModel.ecModel.getComponent('dataset', option.datasetIndex || 0);
      }
    }
    /**
     * The rule should not be complex, otherwise user might not
     * be able to known where the data is wrong.
     * The code is ugly, but how to make it neat?
     *
     * @param {module:echars/data/Source} source
     * @param {number} dimIndex
     * @return {BE_ORDINAL} guess result.
     */


    function guessOrdinal(source, dimIndex) {
      return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);
    } // dimIndex may be overflow source data.
    // return {BE_ORDINAL}


    function doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {
      var result; // Experience value.

      var maxLoop = 5;

      if (isTypedArray$2(data)) {
        return BE_ORDINAL.Not;
      } // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine
      // always exists in source.


      var dimName;
      var dimType;

      if (dimensionsDefine) {
        var dimDefItem = dimensionsDefine[dimIndex];

        if (isObject$4(dimDefItem)) {
          dimName = dimDefItem.name;
          dimType = dimDefItem.type;
        } else if (isString$3(dimDefItem)) {
          dimName = dimDefItem;
        }
      }

      if (dimType != null) {
        return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;
      }

      if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS$1) {
        if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW$1) {
          var sample = data[dimIndex];

          for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {
            if ((result = detectValue(sample[startIndex + i])) != null) {
              return result;
            }
          }
        } else {
          for (var i = 0; i < data.length && i < maxLoop; i++) {
            var row = data[startIndex + i];

            if (row && (result = detectValue(row[dimIndex])) != null) {
              return result;
            }
          }
        }
      } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS$1) {
        if (!dimName) {
          return BE_ORDINAL.Not;
        }

        for (var i = 0; i < data.length && i < maxLoop; i++) {
          var item = data[i];

          if (item && (result = detectValue(item[dimName])) != null) {
            return result;
          }
        }
      } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS$2) {
        if (!dimName) {
          return BE_ORDINAL.Not;
        }

        var sample = data[dimName];

        if (!sample || isTypedArray$2(sample)) {
          return BE_ORDINAL.Not;
        }

        for (var i = 0; i < sample.length && i < maxLoop; i++) {
          if ((result = detectValue(sample[i])) != null) {
            return result;
          }
        }
      } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL$2) {
        for (var i = 0; i < data.length && i < maxLoop; i++) {
          var item = data[i];
          var val = getDataItemValue$1(item);

          if (!isArray$2(val)) {
            return BE_ORDINAL.Not;
          }

          if ((result = detectValue(val[dimIndex])) != null) {
            return result;
          }
        }
      }

      function detectValue(val) {
        var beStr = isString$3(val); // Consider usage convenience, '1', '2' will be treated as "number".
        // `isFinit('')` get `true`.

        if (val != null && isFinite(val) && val !== '') {
          return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;
        } else if (beStr && val !== '-') {
          return BE_ORDINAL.Must;
        }
      }

      return BE_ORDINAL.Not;
    }

    var BE_ORDINAL_1 = BE_ORDINAL;
    var detectSourceFormat_1 = detectSourceFormat;
    var getSource_1 = getSource;
    var resetSourceDefaulter_1 = resetSourceDefaulter;
    var prepareSource_1 = prepareSource;
    var makeSeriesEncodeForAxisCoordSys_1 = makeSeriesEncodeForAxisCoordSys;
    var makeSeriesEncodeForNameBased_1 = makeSeriesEncodeForNameBased;
    var guessOrdinal_1 = guessOrdinal;

    var sourceHelper = {
    	BE_ORDINAL: BE_ORDINAL_1,
    	detectSourceFormat: detectSourceFormat_1,
    	getSource: getSource_1,
    	resetSourceDefaulter: resetSourceDefaulter_1,
    	prepareSource: prepareSource_1,
    	makeSeriesEncodeForAxisCoordSys: makeSeriesEncodeForAxisCoordSys_1,
    	makeSeriesEncodeForNameBased: makeSeriesEncodeForNameBased_1,
    	guessOrdinal: guessOrdinal_1
    };

    var each$5 = util.each;
    var filter$1 = util.filter;
    var map$2 = util.map;
    var isArray$3 = util.isArray;
    var indexOf$2 = util.indexOf;
    var isObject$5 = util.isObject;
    var isString$4 = util.isString;
    var createHashMap$3 = util.createHashMap;
    var assert$1 = util.assert;
    var clone$3 = util.clone;
    var merge$1 = util.merge;
    var extend$3 = util.extend;
    var mixin$2 = util.mixin;













    var resetSourceDefaulter$1 = sourceHelper.resetSourceDefaulter;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * ECharts global model
     *
     * @module {echarts/model/Global}
     */

    /**
     * Caution: If the mechanism should be changed some day, these cases
     * should be considered:
     *
     * (1) In `merge option` mode, if using the same option to call `setOption`
     * many times, the result should be the same (try our best to ensure that).
     * (2) In `merge option` mode, if a component has no id/name specified, it
     * will be merged by index, and the result sequence of the components is
     * consistent to the original sequence.
     * (3) `reset` feature (in toolbox). Find detailed info in comments about
     * `mergeOption` in module:echarts/model/OptionManager.
     */
    var OPTION_INNER_KEY = '\0_ec_inner';
    /**
     * @alias module:echarts/model/Global
     *
     * @param {Object} option
     * @param {module:echarts/model/Model} parentModel
     * @param {Object} theme
     */

    var GlobalModel = Model_1.extend({
      init: function (option, parentModel, theme, optionManager) {
        theme = theme || {};
        this.option = null; // Mark as not initialized.

        /**
         * @type {module:echarts/model/Model}
         * @private
         */

        this._theme = new Model_1(theme);
        /**
         * @type {module:echarts/model/OptionManager}
         */

        this._optionManager = optionManager;
      },
      setOption: function (option, optionPreprocessorFuncs) {
        assert$1(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');

        this._optionManager.setOption(option, optionPreprocessorFuncs);

        this.resetOption(null);
      },

      /**
       * @param {string} type null/undefined: reset all.
       *                      'recreate': force recreate all.
       *                      'timeline': only reset timeline option
       *                      'media': only reset media query option
       * @return {boolean} Whether option changed.
       */
      resetOption: function (type) {
        var optionChanged = false;
        var optionManager = this._optionManager;

        if (!type || type === 'recreate') {
          var baseOption = optionManager.mountOption(type === 'recreate');

          if (!this.option || type === 'recreate') {
            initBase.call(this, baseOption);
          } else {
            this.restoreData();
            this.mergeOption(baseOption);
          }

          optionChanged = true;
        }

        if (type === 'timeline' || type === 'media') {
          this.restoreData();
        }

        if (!type || type === 'recreate' || type === 'timeline') {
          var timelineOption = optionManager.getTimelineOption(this);
          timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
        }

        if (!type || type === 'recreate' || type === 'media') {
          var mediaOptions = optionManager.getMediaOption(this, this._api);

          if (mediaOptions.length) {
            each$5(mediaOptions, function (mediaOption) {
              this.mergeOption(mediaOption, optionChanged = true);
            }, this);
          }
        }

        return optionChanged;
      },

      /**
       * @protected
       */
      mergeOption: function (newOption) {
        var option = this.option;
        var componentsMap = this._componentsMap;
        var newCptTypes = [];
        resetSourceDefaulter$1(this); // If no component class, merge directly.
        // For example: color, animaiton options, etc.

        each$5(newOption, function (componentOption, mainType) {
          if (componentOption == null) {
            return;
          }

          if (!Component.hasClass(mainType)) {
            // globalSettingTask.dirty();
            option[mainType] = option[mainType] == null ? clone$3(componentOption) : merge$1(option[mainType], componentOption, true);
          } else if (mainType) {
            newCptTypes.push(mainType);
          }
        });
        Component.topologicalTravel(newCptTypes, Component.getAllClassMainTypes(), visitComponent, this);

        function visitComponent(mainType, dependencies) {
          var newCptOptionList = model.normalizeToArray(newOption[mainType]);
          var mapResult = model.mappingToExists(componentsMap.get(mainType), newCptOptionList);
          model.makeIdAndName(mapResult); // Set mainType and complete subType.

          each$5(mapResult, function (item, index) {
            var opt = item.option;

            if (isObject$5(opt)) {
              item.keyInfo.mainType = mainType;
              item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
            }
          });
          var dependentModels = getComponentsByTypes(componentsMap, dependencies);
          option[mainType] = [];
          componentsMap.set(mainType, []);
          each$5(mapResult, function (resultItem, index) {
            var componentModel = resultItem.exist;
            var newCptOption = resultItem.option;
            assert$1(isObject$5(newCptOption) || componentModel, 'Empty component definition'); // Consider where is no new option and should be merged using {},
            // see removeEdgeAndAdd in topologicalTravel and
            // ComponentModel.getAllClassMainTypes.

            if (!newCptOption) {
              componentModel.mergeOption({}, this);
              componentModel.optionUpdated({}, false);
            } else {
              var ComponentModelClass = Component.getClass(mainType, resultItem.keyInfo.subType, true);

              if (componentModel && componentModel.constructor === ComponentModelClass) {
                componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();

                componentModel.mergeOption(newCptOption, this);
                componentModel.optionUpdated(newCptOption, false);
              } else {
                // PENDING Global as parent ?
                var extraOpt = extend$3({
                  dependentModels: dependentModels,
                  componentIndex: index
                }, resultItem.keyInfo);
                componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
                extend$3(componentModel, extraOpt);
                componentModel.init(newCptOption, this, this, extraOpt); // Call optionUpdated after init.
                // newCptOption has been used as componentModel.option
                // and may be merged with theme and default, so pass null
                // to avoid confusion.

                componentModel.optionUpdated(null, true);
              }
            }

            componentsMap.get(mainType)[index] = componentModel;
            option[mainType][index] = componentModel.option;
          }, this); // Backup series for filtering.

          if (mainType === 'series') {
            createSeriesIndices(this, componentsMap.get('series'));
          }
        }

        this._seriesIndicesMap = createHashMap$3(this._seriesIndices = this._seriesIndices || []);
      },

      /**
       * Get option for output (cloned option and inner info removed)
       * @public
       * @return {Object}
       */
      getOption: function () {
        var option = clone$3(this.option);
        each$5(option, function (opts, mainType) {
          if (Component.hasClass(mainType)) {
            var opts = model.normalizeToArray(opts);

            for (var i = opts.length - 1; i >= 0; i--) {
              // Remove options with inner id.
              if (model.isIdInner(opts[i])) {
                opts.splice(i, 1);
              }
            }

            option[mainType] = opts;
          }
        });
        delete option[OPTION_INNER_KEY];
        return option;
      },

      /**
       * @return {module:echarts/model/Model}
       */
      getTheme: function () {
        return this._theme;
      },

      /**
       * @param {string} mainType
       * @param {number} [idx=0]
       * @return {module:echarts/model/Component}
       */
      getComponent: function (mainType, idx) {
        var list = this._componentsMap.get(mainType);

        if (list) {
          return list[idx || 0];
        }
      },

      /**
       * If none of index and id and name used, return all components with mainType.
       * @param {Object} condition
       * @param {string} condition.mainType
       * @param {string} [condition.subType] If ignore, only query by mainType
       * @param {number|Array.<number>} [condition.index] Either input index or id or name.
       * @param {string|Array.<string>} [condition.id] Either input index or id or name.
       * @param {string|Array.<string>} [condition.name] Either input index or id or name.
       * @return {Array.<module:echarts/model/Component>}
       */
      queryComponents: function (condition) {
        var mainType = condition.mainType;

        if (!mainType) {
          return [];
        }

        var index = condition.index;
        var id = condition.id;
        var name = condition.name;

        var cpts = this._componentsMap.get(mainType);

        if (!cpts || !cpts.length) {
          return [];
        }

        var result;

        if (index != null) {
          if (!isArray$3(index)) {
            index = [index];
          }

          result = filter$1(map$2(index, function (idx) {
            return cpts[idx];
          }), function (val) {
            return !!val;
          });
        } else if (id != null) {
          var isIdArray = isArray$3(id);
          result = filter$1(cpts, function (cpt) {
            return isIdArray && indexOf$2(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
          });
        } else if (name != null) {
          var isNameArray = isArray$3(name);
          result = filter$1(cpts, function (cpt) {
            return isNameArray && indexOf$2(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
          });
        } else {
          // Return all components with mainType
          result = cpts.slice();
        }

        return filterBySubType(result, condition);
      },

      /**
       * The interface is different from queryComponents,
       * which is convenient for inner usage.
       *
       * @usage
       * var result = findComponents(
       *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
       * );
       * var result = findComponents(
       *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
       * );
       * var result = findComponents(
       *     {mainType: 'series',
       *     filter: function (model, index) {...}}
       * );
       * // result like [component0, componnet1, ...]
       *
       * @param {Object} condition
       * @param {string} condition.mainType Mandatory.
       * @param {string} [condition.subType] Optional.
       * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
       *        where xxx is mainType.
       *        If query attribute is null/undefined or has no index/id/name,
       *        do not filtering by query conditions, which is convenient for
       *        no-payload situations or when target of action is global.
       * @param {Function} [condition.filter] parameter: component, return boolean.
       * @return {Array.<module:echarts/model/Component>}
       */
      findComponents: function (condition) {
        var query = condition.query;
        var mainType = condition.mainType;
        var queryCond = getQueryCond(query);
        var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap.get(mainType);
        return doFilter(filterBySubType(result, condition));

        function getQueryCond(q) {
          var indexAttr = mainType + 'Index';
          var idAttr = mainType + 'Id';
          var nameAttr = mainType + 'Name';
          return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
            mainType: mainType,
            // subType will be filtered finally.
            index: q[indexAttr],
            id: q[idAttr],
            name: q[nameAttr]
          } : null;
        }

        function doFilter(res) {
          return condition.filter ? filter$1(res, condition.filter) : res;
        }
      },

      /**
       * @usage
       * eachComponent('legend', function (legendModel, index) {
       *     ...
       * });
       * eachComponent(function (componentType, model, index) {
       *     // componentType does not include subType
       *     // (componentType is 'xxx' but not 'xxx.aa')
       * });
       * eachComponent(
       *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
       *     function (model, index) {...}
       * );
       * eachComponent(
       *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
       *     function (model, index) {...}
       * );
       *
       * @param {string|Object=} mainType When mainType is object, the definition
       *                                  is the same as the method 'findComponents'.
       * @param {Function} cb
       * @param {*} context
       */
      eachComponent: function (mainType, cb, context) {
        var componentsMap = this._componentsMap;

        if (typeof mainType === 'function') {
          context = cb;
          cb = mainType;
          componentsMap.each(function (components, componentType) {
            each$5(components, function (component, index) {
              cb.call(context, componentType, component, index);
            });
          });
        } else if (isString$4(mainType)) {
          each$5(componentsMap.get(mainType), cb, context);
        } else if (isObject$5(mainType)) {
          var queryResult = this.findComponents(mainType);
          each$5(queryResult, cb, context);
        }
      },

      /**
       * @param {string} name
       * @return {Array.<module:echarts/model/Series>}
       */
      getSeriesByName: function (name) {
        var series = this._componentsMap.get('series');

        return filter$1(series, function (oneSeries) {
          return oneSeries.name === name;
        });
      },

      /**
       * @param {number} seriesIndex
       * @return {module:echarts/model/Series}
       */
      getSeriesByIndex: function (seriesIndex) {
        return this._componentsMap.get('series')[seriesIndex];
      },

      /**
       * Get series list before filtered by type.
       * FIXME: rename to getRawSeriesByType?
       *
       * @param {string} subType
       * @return {Array.<module:echarts/model/Series>}
       */
      getSeriesByType: function (subType) {
        var series = this._componentsMap.get('series');

        return filter$1(series, function (oneSeries) {
          return oneSeries.subType === subType;
        });
      },

      /**
       * @return {Array.<module:echarts/model/Series>}
       */
      getSeries: function () {
        return this._componentsMap.get('series').slice();
      },

      /**
       * @return {number}
       */
      getSeriesCount: function () {
        return this._componentsMap.get('series').length;
      },

      /**
       * After filtering, series may be different
       * frome raw series.
       *
       * @param {Function} cb
       * @param {*} context
       */
      eachSeries: function (cb, context) {
        each$5(this._seriesIndices, function (rawSeriesIndex) {
          var series = this._componentsMap.get('series')[rawSeriesIndex];

          cb.call(context, series, rawSeriesIndex);
        }, this);
      },

      /**
       * Iterate raw series before filtered.
       *
       * @param {Function} cb
       * @param {*} context
       */
      eachRawSeries: function (cb, context) {
        each$5(this._componentsMap.get('series'), cb, context);
      },

      /**
       * After filtering, series may be different.
       * frome raw series.
       *
       * @param {string} subType.
       * @param {Function} cb
       * @param {*} context
       */
      eachSeriesByType: function (subType, cb, context) {
        each$5(this._seriesIndices, function (rawSeriesIndex) {
          var series = this._componentsMap.get('series')[rawSeriesIndex];

          if (series.subType === subType) {
            cb.call(context, series, rawSeriesIndex);
          }
        }, this);
      },

      /**
       * Iterate raw series before filtered of given type.
       *
       * @parma {string} subType
       * @param {Function} cb
       * @param {*} context
       */
      eachRawSeriesByType: function (subType, cb, context) {
        return each$5(this.getSeriesByType(subType), cb, context);
      },

      /**
       * @param {module:echarts/model/Series} seriesModel
       */
      isSeriesFiltered: function (seriesModel) {
        return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;
      },

      /**
       * @return {Array.<number>}
       */
      getCurrentSeriesIndices: function () {
        return (this._seriesIndices || []).slice();
      },

      /**
       * @param {Function} cb
       * @param {*} context
       */
      filterSeries: function (cb, context) {
        var filteredSeries = filter$1(this._componentsMap.get('series'), cb, context);
        createSeriesIndices(this, filteredSeries);
      },
      restoreData: function (payload) {
        var componentsMap = this._componentsMap;
        createSeriesIndices(this, componentsMap.get('series'));
        var componentTypes = [];
        componentsMap.each(function (components, componentType) {
          componentTypes.push(componentType);
        });
        Component.topologicalTravel(componentTypes, Component.getAllClassMainTypes(), function (componentType, dependencies) {
          each$5(componentsMap.get(componentType), function (component) {
            (componentType !== 'series' || !isNotTargetSeries(component, payload)) && component.restoreData();
          });
        });
      }
    });

    function isNotTargetSeries(seriesModel, payload) {
      if (payload) {
        var index = payload.seiresIndex;
        var id = payload.seriesId;
        var name = payload.seriesName;
        return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name != null && seriesModel.name !== name;
      }
    }
    /**
     * @inner
     */


    function mergeTheme(option, theme) {
      // PENDING
      // NOT use `colorLayer` in theme if option has `color`
      var notMergeColorLayer = option.color && !option.colorLayer;
      each$5(theme, function (themeItem, name) {
        if (name === 'colorLayer' && notMergeColorLayer) {
          return;
        } // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理


        if (!Component.hasClass(name)) {
          if (typeof themeItem === 'object') {
            option[name] = !option[name] ? clone$3(themeItem) : merge$1(option[name], themeItem, false);
          } else {
            if (option[name] == null) {
              option[name] = themeItem;
            }
          }
        }
      });
    }

    function initBase(baseOption) {
      baseOption = baseOption; // Using OPTION_INNER_KEY to mark that this option can not be used outside,
      // i.e. `chart.setOption(chart.getModel().option);` is forbiden.

      this.option = {};
      this.option[OPTION_INNER_KEY] = 1;
      /**
       * Init with series: [], in case of calling findSeries method
       * before series initialized.
       * @type {Object.<string, Array.<module:echarts/model/Model>>}
       * @private
       */

      this._componentsMap = createHashMap$3({
        series: []
      });
      /**
       * Mapping between filtered series list and raw series list.
       * key: filtered series indices, value: raw series indices.
       * @type {Array.<nubmer>}
       * @private
       */

      this._seriesIndices;
      this._seriesIndicesMap;
      mergeTheme(baseOption, this._theme.option); // TODO Needs clone when merging to the unexisted property

      merge$1(baseOption, globalDefault, false);
      this.mergeOption(baseOption);
    }
    /**
     * @inner
     * @param {Array.<string>|string} types model types
     * @return {Object} key: {string} type, value: {Array.<Object>} models
     */


    function getComponentsByTypes(componentsMap, types) {
      if (!isArray$3(types)) {
        types = types ? [types] : [];
      }

      var ret = {};
      each$5(types, function (type) {
        ret[type] = (componentsMap.get(type) || []).slice();
      });
      return ret;
    }
    /**
     * @inner
     */


    function determineSubType(mainType, newCptOption, existComponent) {
      var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType // Use determineSubType only when there is no existComponent.
      : Component.determineSubType(mainType, newCptOption); // tooltip, markline, markpoint may always has no subType

      return subType;
    }
    /**
     * @inner
     */


    function createSeriesIndices(ecModel, seriesModels) {
      ecModel._seriesIndicesMap = createHashMap$3(ecModel._seriesIndices = map$2(seriesModels, function (series) {
        return series.componentIndex;
      }) || []);
    }
    /**
     * @inner
     */


    function filterBySubType(components, condition) {
      // Using hasOwnProperty for restrict. Consider
      // subType is undefined in user payload.
      return condition.hasOwnProperty('subType') ? filter$1(components, function (cpt) {
        return cpt.subType === condition.subType;
      }) : components;
    }

    mixin$2(GlobalModel, colorPalette);
    var _default$Y = GlobalModel;
    var Global = _default$Y;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'getDevicePixelRatio', 'dispatchAction', 'isDisposed', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption', 'getViewOfComponentModel', 'getViewOfSeriesModel']; // And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js

    function ExtensionAPI(chartInstance) {
      util.each(echartsAPIList, function (name) {
        this[name] = util.bind(chartInstance[name], chartInstance);
      }, this);
    }

    var _default$Z = ExtensionAPI;
    var ExtensionAPI_1 = _default$Z;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var coordinateSystemCreators = {};

    function CoordinateSystemManager() {
      this._coordinateSystems = [];
    }

    CoordinateSystemManager.prototype = {
      constructor: CoordinateSystemManager,
      create: function (ecModel, api) {
        var coordinateSystems = [];
        util.each(coordinateSystemCreators, function (creater, type) {
          var list = creater.create(ecModel, api);
          coordinateSystems = coordinateSystems.concat(list || []);
        });
        this._coordinateSystems = coordinateSystems;
      },
      update: function (ecModel, api) {
        util.each(this._coordinateSystems, function (coordSys) {
          coordSys.update && coordSys.update(ecModel, api);
        });
      },
      getCoordinateSystems: function () {
        return this._coordinateSystems.slice();
      }
    };

    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
      coordinateSystemCreators[type] = coordinateSystemCreator;
    };

    CoordinateSystemManager.get = function (type) {
      return coordinateSystemCreators[type];
    };

    var _default$_ = CoordinateSystemManager;
    var CoordinateSystem = _default$_;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * ECharts option manager
     *
     * @module {echarts/model/OptionManager}
     */
    var each$6 = util.each;
    var clone$4 = util.clone;
    var map$3 = util.map;
    var merge$2 = util.merge;
    var QUERY_REG = /^(min|max)?(.+)$/;
    /**
     * TERM EXPLANATIONS:
     *
     * [option]:
     *
     *     An object that contains definitions of components. For example:
     *     var option = {
     *         title: {...},
     *         legend: {...},
     *         visualMap: {...},
     *         series: [
     *             {data: [...]},
     *             {data: [...]},
     *             ...
     *         ]
     *     };
     *
     * [rawOption]:
     *
     *     An object input to echarts.setOption. 'rawOption' may be an
     *     'option', or may be an object contains multi-options. For example:
     *     var option = {
     *         baseOption: {
     *             title: {...},
     *             legend: {...},
     *             series: [
     *                 {data: [...]},
     *                 {data: [...]},
     *                 ...
     *             ]
     *         },
     *         timeline: {...},
     *         options: [
     *             {title: {...}, series: {data: [...]}},
     *             {title: {...}, series: {data: [...]}},
     *             ...
     *         ],
     *         media: [
     *             {
     *                 query: {maxWidth: 320},
     *                 option: {series: {x: 20}, visualMap: {show: false}}
     *             },
     *             {
     *                 query: {minWidth: 320, maxWidth: 720},
     *                 option: {series: {x: 500}, visualMap: {show: true}}
     *             },
     *             {
     *                 option: {series: {x: 1200}, visualMap: {show: true}}
     *             }
     *         ]
     *     };
     *
     * @alias module:echarts/model/OptionManager
     * @param {module:echarts/ExtensionAPI} api
     */

    function OptionManager(api) {
      /**
       * @private
       * @type {module:echarts/ExtensionAPI}
       */
      this._api = api;
      /**
       * @private
       * @type {Array.<number>}
       */

      this._timelineOptions = [];
      /**
       * @private
       * @type {Array.<Object>}
       */

      this._mediaList = [];
      /**
       * @private
       * @type {Object}
       */

      this._mediaDefault;
      /**
       * -1, means default.
       * empty means no media.
       * @private
       * @type {Array.<number>}
       */

      this._currentMediaIndices = [];
      /**
       * @private
       * @type {Object}
       */

      this._optionBackup;
      /**
       * @private
       * @type {Object}
       */

      this._newBaseOption;
    } // timeline.notMerge is not supported in ec3. Firstly there is rearly
    // case that notMerge is needed. Secondly supporting 'notMerge' requires
    // rawOption cloned and backuped when timeline changed, which does no
    // good to performance. What's more, that both timeline and setOption
    // method supply 'notMerge' brings complex and some problems.
    // Consider this case:
    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);


    OptionManager.prototype = {
      constructor: OptionManager,

      /**
       * @public
       * @param {Object} rawOption Raw option.
       * @param {module:echarts/model/Global} ecModel
       * @param {Array.<Function>} optionPreprocessorFuncs
       * @return {Object} Init option
       */
      setOption: function (rawOption, optionPreprocessorFuncs) {
        if (rawOption) {
          // That set dat primitive is dangerous if user reuse the data when setOption again.
          util.each(model.normalizeToArray(rawOption.series), function (series) {
            series && series.data && util.isTypedArray(series.data) && util.setAsPrimitive(series.data);
          });
        } // Caution: some series modify option data, if do not clone,
        // it should ensure that the repeat modify correctly
        // (create a new object when modify itself).


        rawOption = clone$4(rawOption); // FIXME
        // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

        var oldOptionBackup = this._optionBackup;
        var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
        this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);

        if (oldOptionBackup) {
          // Only baseOption can be merged.
          mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,
          // that is, if you `setOption` twice and both has timeline options, the latter
          // timeline opitons will not be merged to the formers, but just substitude them.

          if (newParsedOption.timelineOptions.length) {
            oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
          }

          if (newParsedOption.mediaList.length) {
            oldOptionBackup.mediaList = newParsedOption.mediaList;
          }

          if (newParsedOption.mediaDefault) {
            oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
          }
        } else {
          this._optionBackup = newParsedOption;
        }
      },

      /**
       * @param {boolean} isRecreate
       * @return {Object}
       */
      mountOption: function (isRecreate) {
        var optionBackup = this._optionBackup; // TODO
        // 如果没有reset功能则不clone。

        this._timelineOptions = map$3(optionBackup.timelineOptions, clone$4);
        this._mediaList = map$3(optionBackup.mediaList, clone$4);
        this._mediaDefault = clone$4(optionBackup.mediaDefault);
        this._currentMediaIndices = [];
        return clone$4(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`
        // called, and is merged into every new option by inner method `mergeOption`
        // each time `setOption` called, can be only used in `isRecreate`, because
        // its reliability is under suspicion. In other cases option merge is
        // performed by `model.mergeOption`.
        ? optionBackup.baseOption : this._newBaseOption);
      },

      /**
       * @param {module:echarts/model/Global} ecModel
       * @return {Object}
       */
      getTimelineOption: function (ecModel) {
        var option;
        var timelineOptions = this._timelineOptions;

        if (timelineOptions.length) {
          // getTimelineOption can only be called after ecModel inited,
          // so we can get currentIndex from timelineModel.
          var timelineModel = ecModel.getComponent('timeline');

          if (timelineModel) {
            option = clone$4(timelineOptions[timelineModel.getCurrentIndex()], true);
          }
        }

        return option;
      },

      /**
       * @param {module:echarts/model/Global} ecModel
       * @return {Array.<Object>}
       */
      getMediaOption: function (ecModel) {
        var ecWidth = this._api.getWidth();

        var ecHeight = this._api.getHeight();

        var mediaList = this._mediaList;
        var mediaDefault = this._mediaDefault;
        var indices = [];
        var result = []; // No media defined.

        if (!mediaList.length && !mediaDefault) {
          return result;
        } // Multi media may be applied, the latter defined media has higher priority.


        for (var i = 0, len = mediaList.length; i < len; i++) {
          if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
            indices.push(i);
          }
        } // FIXME
        // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。


        if (!indices.length && mediaDefault) {
          indices = [-1];
        }

        if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
          result = map$3(indices, function (index) {
            return clone$4(index === -1 ? mediaDefault.option : mediaList[index].option);
          });
        } // Otherwise return nothing.


        this._currentMediaIndices = indices;
        return result;
      }
    };

    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
      var timelineOptions = [];
      var mediaList = [];
      var mediaDefault;
      var baseOption; // Compatible with ec2.

      var timelineOpt = rawOption.timeline;

      if (rawOption.baseOption) {
        baseOption = rawOption.baseOption;
      } // For timeline


      if (timelineOpt || rawOption.options) {
        baseOption = baseOption || {};
        timelineOptions = (rawOption.options || []).slice();
      } // For media query


      if (rawOption.media) {
        baseOption = baseOption || {};
        var media = rawOption.media;
        each$6(media, function (singleMedia) {
          if (singleMedia && singleMedia.option) {
            if (singleMedia.query) {
              mediaList.push(singleMedia);
            } else if (!mediaDefault) {
              // Use the first media default.
              mediaDefault = singleMedia;
            }
          }
        });
      } // For normal option


      if (!baseOption) {
        baseOption = rawOption;
      } // Set timelineOpt to baseOption in ec3,
      // which is convenient for merge option.


      if (!baseOption.timeline) {
        baseOption.timeline = timelineOpt;
      } // Preprocess.


      each$6([baseOption].concat(timelineOptions).concat(util.map(mediaList, function (media) {
        return media.option;
      })), function (option) {
        each$6(optionPreprocessorFuncs, function (preProcess) {
          preProcess(option, isNew);
        });
      });
      return {
        baseOption: baseOption,
        timelineOptions: timelineOptions,
        mediaDefault: mediaDefault,
        mediaList: mediaList
      };
    }
    /**
     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
     * Support: width, height, aspectRatio
     * Can use max or min as prefix.
     */


    function applyMediaQuery(query, ecWidth, ecHeight) {
      var realMap = {
        width: ecWidth,
        height: ecHeight,
        aspectratio: ecWidth / ecHeight // lowser case for convenientce.

      };
      var applicatable = true;
      util.each(query, function (value, attr) {
        var matched = attr.match(QUERY_REG);

        if (!matched || !matched[1] || !matched[2]) {
          return;
        }

        var operator = matched[1];
        var realAttr = matched[2].toLowerCase();

        if (!compare(realMap[realAttr], value, operator)) {
          applicatable = false;
        }
      });
      return applicatable;
    }

    function compare(real, expect, operator) {
      if (operator === 'min') {
        return real >= expect;
      } else if (operator === 'max') {
        return real <= expect;
      } else {
        // Equals
        return real === expect;
      }
    }

    function indicesEquals(indices1, indices2) {
      // indices is always order by asc and has only finite number.
      return indices1.join(',') === indices2.join(',');
    }
    /**
     * Consider case:
     * `chart.setOption(opt1);`
     * Then user do some interaction like dataZoom, dataView changing.
     * `chart.setOption(opt2);`
     * Then user press 'reset button' in toolbox.
     *
     * After doing that all of the interaction effects should be reset, the
     * chart should be the same as the result of invoke
     * `chart.setOption(opt1); chart.setOption(opt2);`.
     *
     * Although it is not able ensure that
     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
     * `chart.setOption(merge(opt1, opt2));` exactly,
     * this might be the only simple way to implement that feature.
     *
     * MEMO: We've considered some other approaches:
     * 1. Each model handle its self restoration but not uniform treatment.
     *     (Too complex in logic and error-prone)
     * 2. Use a shadow ecModel. (Performace expensive)
     */


    function mergeOption(oldOption, newOption) {
      newOption = newOption || {};
      each$6(newOption, function (newCptOpt, mainType) {
        if (newCptOpt == null) {
          return;
        }

        var oldCptOpt = oldOption[mainType];

        if (!Component.hasClass(mainType)) {
          oldOption[mainType] = merge$2(oldCptOpt, newCptOpt, true);
        } else {
          newCptOpt = model.normalizeToArray(newCptOpt);
          oldCptOpt = model.normalizeToArray(oldCptOpt);
          var mapResult = model.mappingToExists(oldCptOpt, newCptOpt);
          oldOption[mainType] = map$3(mapResult, function (item) {
            return item.option && item.exist ? merge$2(item.exist, item.option, true) : item.exist || item.option;
          });
        }
      });
    }

    var _default$$ = OptionManager;
    var OptionManager_1 = _default$$;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$7 = util.each;
    var isObject$6 = util.isObject;
    var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];

    function compatEC2ItemStyle(opt) {
      var itemStyleOpt = opt && opt.itemStyle;

      if (!itemStyleOpt) {
        return;
      }

      for (var i = 0, len = POSSIBLE_STYLES.length; i < len; i++) {
        var styleName = POSSIBLE_STYLES[i];
        var normalItemStyleOpt = itemStyleOpt.normal;
        var emphasisItemStyleOpt = itemStyleOpt.emphasis;

        if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
          opt[styleName] = opt[styleName] || {};

          if (!opt[styleName].normal) {
            opt[styleName].normal = normalItemStyleOpt[styleName];
          } else {
            util.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
          }

          normalItemStyleOpt[styleName] = null;
        }

        if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
          opt[styleName] = opt[styleName] || {};

          if (!opt[styleName].emphasis) {
            opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
          } else {
            util.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
          }

          emphasisItemStyleOpt[styleName] = null;
        }
      }
    }

    function convertNormalEmphasis(opt, optType, useExtend) {
      if (opt && opt[optType] && (opt[optType].normal || opt[optType].emphasis)) {
        var normalOpt = opt[optType].normal;
        var emphasisOpt = opt[optType].emphasis;

        if (normalOpt) {
          // Timeline controlStyle has other properties besides normal and emphasis
          if (useExtend) {
            opt[optType].normal = opt[optType].emphasis = null;
            util.defaults(opt[optType], normalOpt);
          } else {
            opt[optType] = normalOpt;
          }
        }

        if (emphasisOpt) {
          opt.emphasis = opt.emphasis || {};
          opt.emphasis[optType] = emphasisOpt;
        }
      }
    }

    function removeEC3NormalStatus(opt) {
      convertNormalEmphasis(opt, 'itemStyle');
      convertNormalEmphasis(opt, 'lineStyle');
      convertNormalEmphasis(opt, 'areaStyle');
      convertNormalEmphasis(opt, 'label');
      convertNormalEmphasis(opt, 'labelLine'); // treemap

      convertNormalEmphasis(opt, 'upperLabel'); // graph

      convertNormalEmphasis(opt, 'edgeLabel');
    }

    function compatTextStyle(opt, propName) {
      // Check whether is not object (string\null\undefined ...)
      var labelOptSingle = isObject$6(opt) && opt[propName];
      var textStyle = isObject$6(labelOptSingle) && labelOptSingle.textStyle;

      if (textStyle) {
        for (var i = 0, len = model.TEXT_STYLE_OPTIONS.length; i < len; i++) {
          var propName = model.TEXT_STYLE_OPTIONS[i];

          if (textStyle.hasOwnProperty(propName)) {
            labelOptSingle[propName] = textStyle[propName];
          }
        }
      }
    }

    function compatEC3CommonStyles(opt) {
      if (opt) {
        removeEC3NormalStatus(opt);
        compatTextStyle(opt, 'label');
        opt.emphasis && compatTextStyle(opt.emphasis, 'label');
      }
    }

    function processSeries(seriesOpt) {
      if (!isObject$6(seriesOpt)) {
        return;
      }

      compatEC2ItemStyle(seriesOpt);
      removeEC3NormalStatus(seriesOpt);
      compatTextStyle(seriesOpt, 'label'); // treemap

      compatTextStyle(seriesOpt, 'upperLabel'); // graph

      compatTextStyle(seriesOpt, 'edgeLabel');

      if (seriesOpt.emphasis) {
        compatTextStyle(seriesOpt.emphasis, 'label'); // treemap

        compatTextStyle(seriesOpt.emphasis, 'upperLabel'); // graph

        compatTextStyle(seriesOpt.emphasis, 'edgeLabel');
      }

      var markPoint = seriesOpt.markPoint;

      if (markPoint) {
        compatEC2ItemStyle(markPoint);
        compatEC3CommonStyles(markPoint);
      }

      var markLine = seriesOpt.markLine;

      if (markLine) {
        compatEC2ItemStyle(markLine);
        compatEC3CommonStyles(markLine);
      }

      var markArea = seriesOpt.markArea;

      if (markArea) {
        compatEC3CommonStyles(markArea);
      }

      var data = seriesOpt.data; // Break with ec3: if `setOption` again, there may be no `type` in option,
      // then the backward compat based on option type will not be performed.

      if (seriesOpt.type === 'graph') {
        data = data || seriesOpt.nodes;
        var edgeData = seriesOpt.links || seriesOpt.edges;

        if (edgeData && !util.isTypedArray(edgeData)) {
          for (var i = 0; i < edgeData.length; i++) {
            compatEC3CommonStyles(edgeData[i]);
          }
        }

        util.each(seriesOpt.categories, function (opt) {
          removeEC3NormalStatus(opt);
        });
      }

      if (data && !util.isTypedArray(data)) {
        for (var i = 0; i < data.length; i++) {
          compatEC3CommonStyles(data[i]);
        }
      } // mark point data


      var markPoint = seriesOpt.markPoint;

      if (markPoint && markPoint.data) {
        var mpData = markPoint.data;

        for (var i = 0; i < mpData.length; i++) {
          compatEC3CommonStyles(mpData[i]);
        }
      } // mark line data


      var markLine = seriesOpt.markLine;

      if (markLine && markLine.data) {
        var mlData = markLine.data;

        for (var i = 0; i < mlData.length; i++) {
          if (util.isArray(mlData[i])) {
            compatEC3CommonStyles(mlData[i][0]);
            compatEC3CommonStyles(mlData[i][1]);
          } else {
            compatEC3CommonStyles(mlData[i]);
          }
        }
      } // Series


      if (seriesOpt.type === 'gauge') {
        compatTextStyle(seriesOpt, 'axisLabel');
        compatTextStyle(seriesOpt, 'title');
        compatTextStyle(seriesOpt, 'detail');
      } else if (seriesOpt.type === 'treemap') {
        convertNormalEmphasis(seriesOpt.breadcrumb, 'itemStyle');
        util.each(seriesOpt.levels, function (opt) {
          removeEC3NormalStatus(opt);
        });
      } else if (seriesOpt.type === 'tree') {
        removeEC3NormalStatus(seriesOpt.leaves);
      } // sunburst starts from ec4, so it does not need to compat levels.

    }

    function toArr(o) {
      return util.isArray(o) ? o : o ? [o] : [];
    }

    function toObj(o) {
      return (util.isArray(o) ? o[0] : o) || {};
    }

    function _default$10(option, isTheme) {
      each$7(toArr(option.series), function (seriesOpt) {
        isObject$6(seriesOpt) && processSeries(seriesOpt);
      });
      var axes = ['xAxis', 'yAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'parallelAxis', 'radar'];
      isTheme && axes.push('valueAxis', 'categoryAxis', 'logAxis', 'timeAxis');
      each$7(axes, function (axisName) {
        each$7(toArr(option[axisName]), function (axisOpt) {
          if (axisOpt) {
            compatTextStyle(axisOpt, 'axisLabel');
            compatTextStyle(axisOpt.axisPointer, 'label');
          }
        });
      });
      each$7(toArr(option.parallel), function (parallelOpt) {
        var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
        compatTextStyle(parallelAxisDefault, 'axisLabel');
        compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, 'label');
      });
      each$7(toArr(option.calendar), function (calendarOpt) {
        convertNormalEmphasis(calendarOpt, 'itemStyle');
        compatTextStyle(calendarOpt, 'dayLabel');
        compatTextStyle(calendarOpt, 'monthLabel');
        compatTextStyle(calendarOpt, 'yearLabel');
      }); // radar.name.textStyle

      each$7(toArr(option.radar), function (radarOpt) {
        compatTextStyle(radarOpt, 'name');
      });
      each$7(toArr(option.geo), function (geoOpt) {
        if (isObject$6(geoOpt)) {
          compatEC3CommonStyles(geoOpt);
          each$7(toArr(geoOpt.regions), function (regionObj) {
            compatEC3CommonStyles(regionObj);
          });
        }
      });
      each$7(toArr(option.timeline), function (timelineOpt) {
        compatEC3CommonStyles(timelineOpt);
        convertNormalEmphasis(timelineOpt, 'label');
        convertNormalEmphasis(timelineOpt, 'itemStyle');
        convertNormalEmphasis(timelineOpt, 'controlStyle', true);
        var data = timelineOpt.data;
        util.isArray(data) && util.each(data, function (item) {
          if (util.isObject(item)) {
            convertNormalEmphasis(item, 'label');
            convertNormalEmphasis(item, 'itemStyle');
          }
        });
      });
      each$7(toArr(option.toolbox), function (toolboxOpt) {
        convertNormalEmphasis(toolboxOpt, 'iconStyle');
        each$7(toolboxOpt.feature, function (featureOpt) {
          convertNormalEmphasis(featureOpt, 'iconStyle');
        });
      });
      compatTextStyle(toObj(option.axisPointer), 'label');
      compatTextStyle(toObj(option.tooltip).axisPointer, 'label');
    }

    var compatStyle = _default$10;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var each$8 = util.each;
    var isArray$4 = util.isArray;
    var isObject$7 = util.isObject;





    var normalizeToArray$2 = model.normalizeToArray;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Compatitable with 2.0
    function get(opt, path) {
      path = path.split(',');
      var obj = opt;

      for (var i = 0; i < path.length; i++) {
        obj = obj && obj[path[i]];

        if (obj == null) {
          break;
        }
      }

      return obj;
    }

    function set$1(opt, path, val, overwrite) {
      path = path.split(',');
      var obj = opt;
      var key;

      for (var i = 0; i < path.length - 1; i++) {
        key = path[i];

        if (obj[key] == null) {
          obj[key] = {};
        }

        obj = obj[key];
      }

      if (overwrite || obj[path[i]] == null) {
        obj[path[i]] = val;
      }
    }

    function compatLayoutProperties(option) {
      each$8(LAYOUT_PROPERTIES, function (prop) {
        if (prop[0] in option && !(prop[1] in option)) {
          option[prop[1]] = option[prop[0]];
        }
      });
    }

    var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];
    var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];

    function _default$11(option, isTheme) {
      compatStyle(option, isTheme); // Make sure series array for model initialization.

      option.series = normalizeToArray$2(option.series);
      each$8(option.series, function (seriesOpt) {
        if (!isObject$7(seriesOpt)) {
          return;
        }

        var seriesType = seriesOpt.type;

        if (seriesType === 'line') {
          if (seriesOpt.clipOverflow != null) {
            seriesOpt.clip = seriesOpt.clipOverflow;
          }
        } else if (seriesType === 'pie' || seriesType === 'gauge') {
          if (seriesOpt.clockWise != null) {
            seriesOpt.clockwise = seriesOpt.clockWise;
          }
        } else if (seriesType === 'gauge') {
          var pointerColor = get(seriesOpt, 'pointer.color');
          pointerColor != null && set$1(seriesOpt, 'itemStyle.color', pointerColor);
        }

        compatLayoutProperties(seriesOpt);
      }); // dataRange has changed to visualMap

      if (option.dataRange) {
        option.visualMap = option.dataRange;
      }

      each$8(COMPATITABLE_COMPONENTS, function (componentName) {
        var options = option[componentName];

        if (options) {
          if (!isArray$4(options)) {
            options = [options];
          }

          each$8(options, function (option) {
            compatLayoutProperties(option);
          });
        }
      });
    }

    var backwardCompat = _default$11;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var createHashMap$4 = util.createHashMap;
    var each$9 = util.each;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // (1) [Caution]: the logic is correct based on the premises:
    //     data processing stage is blocked in stream.
    //     See <module:echarts/stream/Scheduler#performDataProcessorTasks>
    // (2) Only register once when import repeatly.
    //     Should be executed after series filtered and before stack calculation.
    function _default$12(ecModel) {
      var stackInfoMap = createHashMap$4();
      ecModel.eachSeries(function (seriesModel) {
        var stack = seriesModel.get('stack'); // Compatibal: when `stack` is set as '', do not stack.

        if (stack) {
          var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);
          var data = seriesModel.getData();
          var stackInfo = {
            // Used for calculate axis extent automatically.
            stackResultDimension: data.getCalculationInfo('stackResultDimension'),
            stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),
            stackedDimension: data.getCalculationInfo('stackedDimension'),
            stackedByDimension: data.getCalculationInfo('stackedByDimension'),
            isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),
            data: data,
            seriesModel: seriesModel
          }; // If stacked on axis that do not support data stack.

          if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {
            return;
          }

          stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);
          stackInfoList.push(stackInfo);
        }
      });
      stackInfoMap.each(calculateStack);
    }

    function calculateStack(stackInfoList) {
      each$9(stackInfoList, function (targetStackInfo, idxInStack) {
        var resultVal = [];
        var resultNaN = [NaN, NaN];
        var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];
        var targetData = targetStackInfo.data;
        var isStackedByIndex = targetStackInfo.isStackedByIndex; // Should not write on raw data, because stack series model list changes
        // depending on legend selection.

        var newData = targetData.map(dims, function (v0, v1, dataIndex) {
          var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver
          // should also be NaN, to draw a appropriate belt area.

          if (isNaN(sum)) {
            return resultNaN;
          }

          var byValue;
          var stackedDataRawIndex;

          if (isStackedByIndex) {
            stackedDataRawIndex = targetData.getRawIndex(dataIndex);
          } else {
            byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);
          } // If stackOver is NaN, chart view will render point on value start.


          var stackedOver = NaN;

          for (var j = idxInStack - 1; j >= 0; j--) {
            var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.

            if (!isStackedByIndex) {
              stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);
            }

            if (stackedDataRawIndex >= 0) {
              var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data

              if (sum >= 0 && val > 0 || // Positive stack
              sum <= 0 && val < 0 // Negative stack
              ) {
                  sum += val;
                  stackedOver = val;
                  break;
                }
            }
          }

          resultVal[0] = sum;
          resultVal[1] = stackedOver;
          return resultVal;
        });
        targetData.hostModel.setData(newData); // Update for consequent calculation

        targetStackInfo.data = newData;
      });
    }

    var dataStack = _default$12;

    var extend$4 = util.extend;
    var each$a = util.each;
    var isObject$8 = util.isObject;



    var getDataItemValue$2 = model.getDataItemValue;
    var isDataItemOption$1 = model.isDataItemOption;



    var parseDate$1 = number.parseDate;





    var SOURCE_FORMAT_TYPED_ARRAY$3 = sourceType.SOURCE_FORMAT_TYPED_ARRAY;
    var SOURCE_FORMAT_ARRAY_ROWS$2 = sourceType.SOURCE_FORMAT_ARRAY_ROWS;
    var SOURCE_FORMAT_ORIGINAL$3 = sourceType.SOURCE_FORMAT_ORIGINAL;
    var SOURCE_FORMAT_OBJECT_ROWS$2 = sourceType.SOURCE_FORMAT_OBJECT_ROWS;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // TODO
    // ??? refactor? check the outer usage of data provider.
    // merge with defaultDimValueGetter?

    /**
     * If normal array used, mutable chunk size is supported.
     * If typed array used, chunk size must be fixed.
     */
    function DefaultDataProvider(source, dimSize) {
      if (!Source_1.isInstance(source)) {
        source = Source_1.seriesDataToSource(source);
      }

      this._source = source;
      var data = this._data = source.data;
      var sourceFormat = source.sourceFormat; // Typed array. TODO IE10+?

      if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY$3) {
        this._offset = 0;
        this._dimSize = dimSize;
        this._data = data;
      }

      var methods = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS$2 ? sourceFormat + '_' + source.seriesLayoutBy : sourceFormat];
      extend$4(this, methods);
    }

    var providerProto = DefaultDataProvider.prototype; // If data is pure without style configuration

    providerProto.pure = false; // If data is persistent and will not be released after use.

    providerProto.persistent = true; // ???! FIXME legacy data provider do not has method getSource

    providerProto.getSource = function () {
      return this._source;
    };

    var providerMethods = {
      'arrayRows_column': {
        pure: true,
        count: function () {
          return Math.max(0, this._data.length - this._source.startIndex);
        },
        getItem: function (idx) {
          return this._data[idx + this._source.startIndex];
        },
        appendData: appendDataSimply
      },
      'arrayRows_row': {
        pure: true,
        count: function () {
          var row = this._data[0];
          return row ? Math.max(0, row.length - this._source.startIndex) : 0;
        },
        getItem: function (idx) {
          idx += this._source.startIndex;
          var item = [];
          var data = this._data;

          for (var i = 0; i < data.length; i++) {
            var row = data[i];
            item.push(row ? row[idx] : null);
          }

          return item;
        },
        appendData: function () {
          throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
        }
      },
      'objectRows': {
        pure: true,
        count: countSimply,
        getItem: getItemSimply,
        appendData: appendDataSimply
      },
      'keyedColumns': {
        pure: true,
        count: function () {
          var dimName = this._source.dimensionsDefine[0].name;
          var col = this._data[dimName];
          return col ? col.length : 0;
        },
        getItem: function (idx) {
          var item = [];
          var dims = this._source.dimensionsDefine;

          for (var i = 0; i < dims.length; i++) {
            var col = this._data[dims[i].name];
            item.push(col ? col[idx] : null);
          }

          return item;
        },
        appendData: function (newData) {
          var data = this._data;
          each$a(newData, function (newCol, key) {
            var oldCol = data[key] || (data[key] = []);

            for (var i = 0; i < (newCol || []).length; i++) {
              oldCol.push(newCol[i]);
            }
          });
        }
      },
      'original': {
        count: countSimply,
        getItem: getItemSimply,
        appendData: appendDataSimply
      },
      'typedArray': {
        persistent: false,
        pure: true,
        count: function () {
          return this._data ? this._data.length / this._dimSize : 0;
        },
        getItem: function (idx, out) {
          idx = idx - this._offset;
          out = out || [];
          var offset = this._dimSize * idx;

          for (var i = 0; i < this._dimSize; i++) {
            out[i] = this._data[offset + i];
          }

          return out;
        },
        appendData: function (newData) {
          this._data = newData;
        },
        // Clean self if data is already used.
        clean: function () {
          // PENDING
          this._offset += this.count();
          this._data = null;
        }
      }
    };

    function countSimply() {
      return this._data.length;
    }

    function getItemSimply(idx) {
      return this._data[idx];
    }

    function appendDataSimply(newData) {
      for (var i = 0; i < newData.length; i++) {
        this._data.push(newData[i]);
      }
    }

    var rawValueGetters = {
      arrayRows: getRawValueSimply,
      objectRows: function (dataItem, dataIndex, dimIndex, dimName) {
        return dimIndex != null ? dataItem[dimName] : dataItem;
      },
      keyedColumns: getRawValueSimply,
      original: function (dataItem, dataIndex, dimIndex, dimName) {
        // FIXME
        // In some case (markpoint in geo (geo-map.html)), dataItem
        // is {coord: [...]}
        var value = getDataItemValue$2(dataItem);
        return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];
      },
      typedArray: getRawValueSimply
    };

    function getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {
      return dimIndex != null ? dataItem[dimIndex] : dataItem;
    }

    var defaultDimValueGetters = {
      arrayRows: getDimValueSimply,
      objectRows: function (dataItem, dimName, dataIndex, dimIndex) {
        return converDataValue(dataItem[dimName], this._dimensionInfos[dimName]);
      },
      keyedColumns: getDimValueSimply,
      original: function (dataItem, dimName, dataIndex, dimIndex) {
        // Performance sensitive, do not use modelUtil.getDataItemValue.
        // If dataItem is an plain object with no value field, the var `value`
        // will be assigned with the object, but it will be tread correctly
        // in the `convertDataValue`.
        var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }

        if (!this._rawData.pure && isDataItemOption$1(dataItem)) {
          this.hasItemOption = true;
        }

        return converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.
        : value, this._dimensionInfos[dimName]);
      },
      typedArray: function (dataItem, dimName, dataIndex, dimIndex) {
        return dataItem[dimIndex];
      }
    };

    function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {
      return converDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);
    }
    /**
     * This helper method convert value in data.
     * @param {string|number|Date} value
     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
     *        If "dimInfo.ordinalParseAndSave", ordinal value can be parsed.
     */


    function converDataValue(value, dimInfo) {
      // Performance sensitive.
      var dimType = dimInfo && dimInfo.type;

      if (dimType === 'ordinal') {
        // If given value is a category string
        var ordinalMeta = dimInfo && dimInfo.ordinalMeta;
        return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;
      }

      if (dimType === 'time' // spead up when using timestamp
      && typeof value !== 'number' && value != null && value !== '-') {
        value = +parseDate$1(value);
      } // dimType defaults 'number'.
      // If dimType is not ordinal and value is null or undefined or NaN or '-',
      // parse to NaN.


      return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN
      // If object, also parse to NaN
      : +value;
    } // ??? FIXME can these logic be more neat: getRawValue, getRawDataItem,
    // Consider persistent.
    // Caution: why use raw value to display on label or tooltip?
    // A reason is to avoid format. For example time value we do not know
    // how to format is expected. More over, if stack is used, calculated
    // value may be 0.91000000001, which have brings trouble to display.
    // TODO: consider how to treat null/undefined/NaN when display?

    /**
     * @param {module:echarts/data/List} data
     * @param {number} dataIndex
     * @param {string|number} [dim] dimName or dimIndex
     * @return {Array.<number>|string|number} can be null/undefined.
     */


    function retrieveRawValue(data, dataIndex, dim) {
      if (!data) {
        return;
      } // Consider data may be not persistent.


      var dataItem = data.getRawDataItem(dataIndex);

      if (dataItem == null) {
        return;
      }

      var sourceFormat = data.getProvider().getSource().sourceFormat;
      var dimName;
      var dimIndex;
      var dimInfo = data.getDimensionInfo(dim);

      if (dimInfo) {
        dimName = dimInfo.name;
        dimIndex = dimInfo.index;
      }

      return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);
    }
    /**
     * Compatible with some cases (in pie, map) like:
     * data: [{name: 'xx', value: 5, selected: true}, ...]
     * where only sourceFormat is 'original' and 'objectRows' supported.
     *
     * ??? TODO
     * Supported detail options in data item when using 'arrayRows'.
     *
     * @param {module:echarts/data/List} data
     * @param {number} dataIndex
     * @param {string} attr like 'selected'
     */


    function retrieveRawAttr(data, dataIndex, attr) {
      if (!data) {
        return;
      }

      var sourceFormat = data.getProvider().getSource().sourceFormat;

      if (sourceFormat !== SOURCE_FORMAT_ORIGINAL$3 && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS$2) {
        return;
      }

      var dataItem = data.getRawDataItem(dataIndex);

      if (sourceFormat === SOURCE_FORMAT_ORIGINAL$3 && !isObject$8(dataItem)) {
        dataItem = null;
      }

      if (dataItem) {
        return dataItem[attr];
      }
    }

    var DefaultDataProvider_1 = DefaultDataProvider;
    var defaultDimValueGetters_1 = defaultDimValueGetters;
    var retrieveRawValue_1 = retrieveRawValue;
    var retrieveRawAttr_1 = retrieveRawAttr;

    var dataProvider = {
    	DefaultDataProvider: DefaultDataProvider_1,
    	defaultDimValueGetters: defaultDimValueGetters_1,
    	retrieveRawValue: retrieveRawValue_1,
    	retrieveRawAttr: retrieveRawAttr_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var retrieveRawValue$1 = dataProvider.retrieveRawValue;



    var getTooltipMarker$1 = format.getTooltipMarker;
    var formatTpl$1 = format.formatTpl;



    var getTooltipRenderMode$1 = model.getTooltipRenderMode;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var DIMENSION_LABEL_REG = /\{@(.+?)\}/g; // PENDING A little ugly

    var _default$13 = {
      /**
       * Get params for formatter
       * @param {number} dataIndex
       * @param {string} [dataType]
       * @return {Object}
       */
      getDataParams: function (dataIndex, dataType) {
        var data = this.getData(dataType);
        var rawValue = this.getRawValue(dataIndex, dataType);
        var rawDataIndex = data.getRawIndex(dataIndex);
        var name = data.getName(dataIndex);
        var itemOpt = data.getRawDataItem(dataIndex);
        var color = data.getItemVisual(dataIndex, 'color');
        var borderColor = data.getItemVisual(dataIndex, 'borderColor');
        var tooltipModel = this.ecModel.getComponent('tooltip');
        var renderModeOption = tooltipModel && tooltipModel.get('renderMode');
        var renderMode = getTooltipRenderMode$1(renderModeOption);
        var mainType = this.mainType;
        var isSeries = mainType === 'series';
        var userOutput = data.userOutput;
        return {
          componentType: mainType,
          componentSubType: this.subType,
          componentIndex: this.componentIndex,
          seriesType: isSeries ? this.subType : null,
          seriesIndex: this.seriesIndex,
          seriesId: isSeries ? this.id : null,
          seriesName: isSeries ? this.name : null,
          name: name,
          dataIndex: rawDataIndex,
          data: itemOpt,
          dataType: dataType,
          value: rawValue,
          color: color,
          borderColor: borderColor,
          dimensionNames: userOutput ? userOutput.dimensionNames : null,
          encode: userOutput ? userOutput.encode : null,
          marker: getTooltipMarker$1({
            color: color,
            renderMode: renderMode
          }),
          // Param name list for mapping `a`, `b`, `c`, `d`, `e`
          $vars: ['seriesName', 'name', 'value']
        };
      },

      /**
       * Format label
       * @param {number} dataIndex
       * @param {string} [status='normal'] 'normal' or 'emphasis'
       * @param {string} [dataType]
       * @param {number} [dimIndex] Only used in some chart that
       *        use formatter in different dimensions, like radar.
       * @param {string} [labelProp='label']
       * @return {string} If not formatter, return null/undefined
       */
      getFormattedLabel: function (dataIndex, status, dataType, dimIndex, labelProp) {
        status = status || 'normal';
        var data = this.getData(dataType);
        var itemModel = data.getItemModel(dataIndex);
        var params = this.getDataParams(dataIndex, dataType);

        if (dimIndex != null && params.value instanceof Array) {
          params.value = params.value[dimIndex];
        }

        var formatter = itemModel.get(status === 'normal' ? [labelProp || 'label', 'formatter'] : [status, labelProp || 'label', 'formatter']);

        if (typeof formatter === 'function') {
          params.status = status;
          params.dimensionIndex = dimIndex;
          return formatter(params);
        } else if (typeof formatter === 'string') {
          var str = formatTpl$1(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.
          // Do not support '}' in dim name util have to.

          return str.replace(DIMENSION_LABEL_REG, function (origin, dim) {
            var len = dim.length;

            if (dim.charAt(0) === '[' && dim.charAt(len - 1) === ']') {
              dim = +dim.slice(1, len - 1); // Also: '[]' => 0
            }

            return retrieveRawValue$1(data, dataIndex, dim);
          });
        }
      },

      /**
       * Get raw value in option
       * @param {number} idx
       * @param {string} [dataType]
       * @return {Array|number|string}
       */
      getRawValue: function (idx, dataType) {
        return retrieveRawValue$1(this.getData(dataType), idx);
      },

      /**
       * Should be implemented.
       * @param {number} dataIndex
       * @param {boolean} [multipleSeries=false]
       * @param {number} [dataType]
       * @return {string} tooltip string
       */
      formatTooltip: function () {// Empty function
      }
    };
    var dataFormat = _default$13;

    var isArray$5 = util.isArray;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @param {Object} define
     * @return See the return of `createTask`.
     */
    function createTask(define) {
      return new Task(define);
    }
    /**
     * @constructor
     * @param {Object} define
     * @param {Function} define.reset Custom reset
     * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.
     * @param {Function} [define.count] count is used to determin data task.
     * @param {Function} [define.onDirty] count is used to determin data task.
     */


    function Task(define) {
      define = define || {};
      this._reset = define.reset;
      this._plan = define.plan;
      this._count = define.count;
      this._onDirty = define.onDirty;
      this._dirty = true; // Context must be specified implicitly, to
      // avoid miss update context when model changed.

      this.context;
    }

    var taskProto = Task.prototype;
    /**
     * @param {Object} performArgs
     * @param {number} [performArgs.step] Specified step.
     * @param {number} [performArgs.skip] Skip customer perform call.
     * @param {number} [performArgs.modBy] Sampling window size.
     * @param {number} [performArgs.modDataCount] Sampling count.
     */

    taskProto.perform = function (performArgs) {
      var upTask = this._upstream;
      var skip = performArgs && performArgs.skip; // TODO some refactor.
      // Pull data. Must pull data each time, because context.data
      // may be updated by Series.setData.

      if (this._dirty && upTask) {
        var context = this.context;
        context.data = context.outputData = upTask.context.outputData;
      }

      if (this.__pipeline) {
        this.__pipeline.currentTask = this;
      }

      var planResult;

      if (this._plan && !skip) {
        planResult = this._plan(this.context);
      } // Support sharding by mod, which changes the render sequence and makes the rendered graphic
      // elements uniformed distributed when progress, especially when moving or zooming.


      var lastModBy = normalizeModBy(this._modBy);
      var lastModDataCount = this._modDataCount || 0;
      var modBy = normalizeModBy(performArgs && performArgs.modBy);
      var modDataCount = performArgs && performArgs.modDataCount || 0;

      if (lastModBy !== modBy || lastModDataCount !== modDataCount) {
        planResult = 'reset';
      }

      function normalizeModBy(val) {
        !(val >= 1) && (val = 1); // jshint ignore:line

        return val;
      }

      var forceFirstProgress;

      if (this._dirty || planResult === 'reset') {
        this._dirty = false;
        forceFirstProgress = reset(this, skip);
      }

      this._modBy = modBy;
      this._modDataCount = modDataCount;
      var step = performArgs && performArgs.step;

      if (upTask) {
        this._dueEnd = upTask._outputDueEnd;
      } // DataTask or overallTask
      else {
          this._dueEnd = this._count ? this._count(this.context) : Infinity;
        } // Note: Stubs, that its host overall task let it has progress, has progress.
      // If no progress, pass index from upstream to downstream each time plan called.


      if (this._progress) {
        var start = this._dueIndex;
        var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);

        if (!skip && (forceFirstProgress || start < end)) {
          var progress = this._progress;

          if (isArray$5(progress)) {
            for (var i = 0; i < progress.length; i++) {
              doProgress(this, progress[i], start, end, modBy, modDataCount);
            }
          } else {
            doProgress(this, progress, start, end, modBy, modDataCount);
          }
        }

        this._dueIndex = end; // If no `outputDueEnd`, assume that output data and
        // input data is the same, so use `dueIndex` as `outputDueEnd`.

        var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;
        this._outputDueEnd = outputDueEnd;
      } else {
        // (1) Some overall task has no progress.
        // (2) Stubs, that its host overall task do not let it has progress, has no progress.
        // This should always be performed so it can be passed to downstream.
        this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;
      }

      return this.unfinished();
    };

    var iterator = function () {
      var end;
      var current;
      var modBy;
      var modDataCount;
      var winCount;
      var it = {
        reset: function (s, e, sStep, sCount) {
          current = s;
          end = e;
          modBy = sStep;
          modDataCount = sCount;
          winCount = Math.ceil(modDataCount / modBy);
          it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;
        }
      };
      return it;

      function sequentialNext() {
        return current < end ? current++ : null;
      }

      function modNext() {
        var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);
        var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),
        // Use normal linear rendering mode.
        : current;
        current++;
        return result;
      }
    }();

    taskProto.dirty = function () {
      this._dirty = true;
      this._onDirty && this._onDirty(this.context);
    };

    function doProgress(taskIns, progress, start, end, modBy, modDataCount) {
      iterator.reset(start, end, modBy, modDataCount);
      taskIns._callingProgress = progress;

      taskIns._callingProgress({
        start: start,
        end: end,
        count: end - start,
        next: iterator.next
      }, taskIns.context);
    }

    function reset(taskIns, skip) {
      taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;
      taskIns._settedOutputEnd = null;
      var progress;
      var forceFirstProgress;

      if (!skip && taskIns._reset) {
        progress = taskIns._reset(taskIns.context);

        if (progress && progress.progress) {
          forceFirstProgress = progress.forceFirstProgress;
          progress = progress.progress;
        } // To simplify no progress checking, array must has item.


        if (isArray$5(progress) && !progress.length) {
          progress = null;
        }
      }

      taskIns._progress = progress;
      taskIns._modBy = taskIns._modDataCount = null;
      var downstream = taskIns._downstream;
      downstream && downstream.dirty();
      return forceFirstProgress;
    }
    /**
     * @return {boolean}
     */


    taskProto.unfinished = function () {
      return this._progress && this._dueIndex < this._dueEnd;
    };
    /**
     * @param {Object} downTask The downstream task.
     * @return {Object} The downstream task.
     */


    taskProto.pipe = function (downTask) {
      // If already downstream, do not dirty downTask.
      if (this._downstream !== downTask || this._dirty) {
        this._downstream = downTask;
        downTask._upstream = this;
        downTask.dirty();
      }
    };

    taskProto.dispose = function () {
      if (this._disposed) {
        return;
      }

      this._upstream && (this._upstream._downstream = null);
      this._downstream && (this._downstream._upstream = null);
      this._dirty = false;
      this._disposed = true;
    };

    taskProto.getUpstream = function () {
      return this._upstream;
    };

    taskProto.getDownstream = function () {
      return this._downstream;
    };

    taskProto.setOutputEnd = function (end) {
      // This only happend in dataTask, dataZoom, map, currently.
      // where dataZoom do not set end each time, but only set
      // when reset. So we should record the setted end, in case
      // that the stub of dataZoom perform again and earse the
      // setted end by upstream.
      this._outputDueEnd = this._settedOutputEnd = end;
    }; ///////////////////////////////////////////////////////////
    // For stream debug (Should be commented out after used!)
    // Usage: printTask(this, 'begin');
    // Usage: printTask(this, null, {someExtraProp});
    // function printTask(task, prefix, extra) {
    //     window.ecTaskUID == null && (window.ecTaskUID = 0);
    //     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);
    //     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);
    //     var props = [];
    //     if (task.__pipeline) {
    //         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;
    //         props.push({text: 'idx', value: val});
    //     } else {
    //         var stubCount = 0;
    //         task.agentStubMap.each(() => stubCount++);
    //         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});
    //     }
    //     props.push({text: 'uid', value: task.uidDebug});
    //     if (task.__pipeline) {
    //         props.push({text: 'pid', value: task.__pipeline.id});
    //         task.agent && props.push(
    //             {text: 'stubFor', value: task.agent.uidDebug}
    //         );
    //     }
    //     props.push(
    //         {text: 'dirty', value: task._dirty},
    //         {text: 'dueIndex', value: task._dueIndex},
    //         {text: 'dueEnd', value: task._dueEnd},
    //         {text: 'outputDueEnd', value: task._outputDueEnd}
    //     );
    //     if (extra) {
    //         Object.keys(extra).forEach(key => {
    //             props.push({text: key, value: extra[key]});
    //         });
    //     }
    //     var args = ['color: blue'];
    //     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (
    //         args.push('color: black', 'color: red'),
    //         `${item.text}: %c${item.value}`
    //     )).join('%c, ');
    //     console.log.apply(console, [msg].concat(args));
    //     // console.log(this);
    // }


    var createTask_1 = createTask;

    var task = {
    	createTask: createTask_1
    };

    var formatTime$1 = format.formatTime;
    var encodeHTML$1 = format.encodeHTML;
    var addCommas$1 = format.addCommas;
    var getTooltipMarker$2 = format.getTooltipMarker;











    var getLayoutParams$1 = layout.getLayoutParams;
    var mergeLayoutParam$1 = layout.mergeLayoutParam;



    var createTask$1 = task.createTask;



    var prepareSource$1 = sourceHelper.prepareSource;
    var getSource$1 = sourceHelper.getSource;



    var retrieveRawValue$2 = dataProvider.retrieveRawValue;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var inner$4 = model.makeInner();
    var SeriesModel = Component.extend({
      type: 'series.__base__',

      /**
       * @readOnly
       */
      seriesIndex: 0,
      // coodinateSystem will be injected in the echarts/CoordinateSystem
      coordinateSystem: null,

      /**
       * @type {Object}
       * @protected
       */
      defaultOption: null,

      /**
       * legend visual provider to the legend component
       * @type {Object}
       */
      // PENDING
      legendVisualProvider: null,

      /**
       * Access path of color for visual
       */
      visualColorAccessPath: 'itemStyle.color',

      /**
       * Access path of borderColor for visual
       */
      visualBorderColorAccessPath: 'itemStyle.borderColor',

      /**
       * Support merge layout params.
       * Only support 'box' now (left/right/top/bottom/width/height).
       * @type {string|Object} Object can be {ignoreSize: true}
       * @readOnly
       */
      layoutMode: null,
      init: function (option, parentModel, ecModel, extraOpt) {
        /**
         * @type {number}
         * @readOnly
         */
        this.seriesIndex = this.componentIndex;
        this.dataTask = createTask$1({
          count: dataTaskCount,
          reset: dataTaskReset
        });
        this.dataTask.context = {
          model: this
        };
        this.mergeDefaultAndTheme(option, ecModel);
        prepareSource$1(this);
        var data = this.getInitialData(option, ecModel);
        wrapData(data, this);
        this.dataTask.context.data = data;

        /**
         * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
         * @private
         */
        inner$4(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make
        // dataBeforeProcessed by cloneShallow), cloneShallow will
        // cause data.graph.data !== data when using
        // module:echarts/data/Graph or module:echarts/data/Tree.
        // See module:echarts/data/helper/linkList
        // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model
        // init or merge stage, because the data can be restored. So we do not `restoreData`
        // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.
        // Call `seriesModel.getRawData()` instead.
        // this.restoreData();

        autoSeriesName(this);
      },

      /**
       * Util for merge default and theme to option
       * @param  {Object} option
       * @param  {module:echarts/model/Global} ecModel
       */
      mergeDefaultAndTheme: function (option, ecModel) {
        var layoutMode = this.layoutMode;
        var inputPositionParams = layoutMode ? getLayoutParams$1(option) : {}; // Backward compat: using subType on theme.
        // But if name duplicate between series subType
        // (for example: parallel) add component mainType,
        // add suffix 'Series'.

        var themeSubType = this.subType;

        if (Component.hasClass(themeSubType)) {
          themeSubType += 'Series';
        }

        util.merge(option, ecModel.getTheme().get(this.subType));
        util.merge(option, this.getDefaultOption()); // Default label emphasis `show`

        model.defaultEmphasis(option, 'label', ['show']);
        this.fillDataTextStyle(option.data);

        if (layoutMode) {
          mergeLayoutParam$1(option, inputPositionParams, layoutMode);
        }
      },
      mergeOption: function (newSeriesOption, ecModel) {
        // this.settingTask.dirty();
        newSeriesOption = util.merge(this.option, newSeriesOption, true);
        this.fillDataTextStyle(newSeriesOption.data);
        var layoutMode = this.layoutMode;

        if (layoutMode) {
          mergeLayoutParam$1(this.option, newSeriesOption, layoutMode);
        }

        prepareSource$1(this);
        var data = this.getInitialData(newSeriesOption, ecModel);
        wrapData(data, this);
        this.dataTask.dirty();
        this.dataTask.context.data = data;
        inner$4(this).dataBeforeProcessed = data;
        autoSeriesName(this);
      },
      fillDataTextStyle: function (data) {
        // Default data label emphasis `show`
        // FIXME Tree structure data ?
        // FIXME Performance ?
        if (data && !util.isTypedArray(data)) {
          var props = ['show'];

          for (var i = 0; i < data.length; i++) {
            if (data[i] && data[i].label) {
              model.defaultEmphasis(data[i], 'label', props);
            }
          }
        }
      },

      /**
       * Init a data structure from data related option in series
       * Must be overwritten
       */
      getInitialData: function () {},

      /**
       * Append data to list
       * @param {Object} params
       * @param {Array|TypedArray} params.data
       */
      appendData: function (params) {
        // FIXME ???
        // (1) If data from dataset, forbidden append.
        // (2) support append data of dataset.
        var data = this.getRawData();
        data.appendData(params.data);
      },

      /**
       * Consider some method like `filter`, `map` need make new data,
       * We should make sure that `seriesModel.getData()` get correct
       * data in the stream procedure. So we fetch data from upstream
       * each time `task.perform` called.
       * @param {string} [dataType]
       * @return {module:echarts/data/List}
       */
      getData: function (dataType) {
        var task = getCurrentTask(this);

        if (task) {
          var data = task.context.data;
          return dataType == null ? data : data.getLinkedData(dataType);
        } else {
          // When series is not alive (that may happen when click toolbox
          // restore or setOption with not merge mode), series data may
          // be still need to judge animation or something when graphic
          // elements want to know whether fade out.
          return inner$4(this).data;
        }
      },

      /**
       * @param {module:echarts/data/List} data
       */
      setData: function (data) {
        var task = getCurrentTask(this);

        if (task) {
          var context = task.context; // Consider case: filter, data sample.

          if (context.data !== data && task.modifyOutputEnd) {
            task.setOutputEnd(data.count());
          }

          context.outputData = data; // Caution: setData should update context.data,
          // Because getData may be called multiply in a
          // single stage and expect to get the data just
          // set. (For example, AxisProxy, x y both call
          // getData and setDate sequentially).
          // So the context.data should be fetched from
          // upstream each time when a stage starts to be
          // performed.

          if (task !== this.dataTask) {
            context.data = data;
          }
        }

        inner$4(this).data = data;
      },

      /**
       * @see {module:echarts/data/helper/sourceHelper#getSource}
       * @return {module:echarts/data/Source} source
       */
      getSource: function () {
        return getSource$1(this);
      },

      /**
       * Get data before processed
       * @return {module:echarts/data/List}
       */
      getRawData: function () {
        return inner$4(this).dataBeforeProcessed;
      },

      /**
       * Get base axis if has coordinate system and has axis.
       * By default use coordSys.getBaseAxis();
       * Can be overrided for some chart.
       * @return {type} description
       */
      getBaseAxis: function () {
        var coordSys = this.coordinateSystem;
        return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
      },
      // FIXME

      /**
       * Default tooltip formatter
       *
       * @param {number} dataIndex
       * @param {boolean} [multipleSeries=false]
       * @param {number} [dataType]
       * @param {string} [renderMode='html'] valid values: 'html' and 'richText'.
       *                                     'html' is used for rendering tooltip in extra DOM form, and the result
       *                                     string is used as DOM HTML content.
       *                                     'richText' is used for rendering tooltip in rich text form, for those where
       *                                     DOM operation is not supported.
       * @return {Object} formatted tooltip with `html` and `markers`
       */
      formatTooltip: function (dataIndex, multipleSeries, dataType, renderMode) {
        var series = this;
        renderMode = renderMode || 'html';
        var newLine = renderMode === 'html' ? '<br/>' : '\n';
        var isRichText = renderMode === 'richText';
        var markers = {};
        var markerId = 0;

        function formatArrayValue(value) {
          // ??? TODO refactor these logic.
          // check: category-no-encode-has-axis-data in dataset.html
          var vertially = util.reduce(value, function (vertially, val, idx) {
            var dimItem = data.getDimensionInfo(idx);
            return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;
          }, 0);
          var result = [];
          tooltipDims.length ? util.each(tooltipDims, function (dim) {
            setEachItem(retrieveRawValue$2(data, dataIndex, dim), dim);
          }) // By default, all dims is used on tooltip.
          : util.each(value, setEachItem);

          function setEachItem(val, dim) {
            var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.

            if (!dimInfo || dimInfo.otherDims.tooltip === false) {
              return;
            }

            var dimType = dimInfo.type;
            var markName = 'sub' + series.seriesIndex + 'at' + markerId;
            var dimHead = getTooltipMarker$2({
              color: color,
              type: 'subItem',
              renderMode: renderMode,
              markerId: markName
            });
            var dimHeadStr = typeof dimHead === 'string' ? dimHead : dimHead.content;
            var valStr = (vertially ? dimHeadStr + encodeHTML$1(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?
            encodeHTML$1(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime$1('yyyy/MM/dd hh:mm:ss', val) : addCommas$1(val));
            valStr && result.push(valStr);

            if (isRichText) {
              markers[markName] = color;
              ++markerId;
            }
          }

          var newLine = vertially ? isRichText ? '\n' : '<br/>' : '';
          var content = newLine + result.join(newLine || ', ');
          return {
            renderMode: renderMode,
            content: content,
            style: markers
          };
        }

        function formatSingleValue(val) {
          // return encodeHTML(addCommas(val));
          return {
            renderMode: renderMode,
            content: encodeHTML$1(addCommas$1(val)),
            style: markers
          };
        }

        var data = this.getData();
        var tooltipDims = data.mapDimension('defaultedTooltip', true);
        var tooltipDimLen = tooltipDims.length;
        var value = this.getRawValue(dataIndex);
        var isValueArr = util.isArray(value);
        var color = data.getItemVisual(dataIndex, 'color');

        if (util.isObject(color) && color.colorStops) {
          color = (color.colorStops[0] || {}).color;
        }

        color = color || 'transparent'; // Complicated rule for pretty tooltip.

        var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue$2(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);
        var content = formattedValue.content;
        var markName = series.seriesIndex + 'at' + markerId;
        var colorEl = getTooltipMarker$2({
          color: color,
          type: 'item',
          renderMode: renderMode,
          markerId: markName
        });
        markers[markName] = color;
        ++markerId;
        var name = data.getName(dataIndex);
        var seriesName = this.name;

        if (!model.isNameSpecified(this)) {
          seriesName = '';
        }

        seriesName = seriesName ? encodeHTML$1(seriesName) + (!multipleSeries ? newLine : ': ') : '';
        var colorStr = typeof colorEl === 'string' ? colorEl : colorEl.content;
        var html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML$1(name) + ': ' + content : content) : colorStr + seriesName + content;
        return {
          html: html,
          markers: markers
        };
      },

      /**
       * @return {boolean}
       */
      isAnimationEnabled: function () {
        if (env_1.node) {
          return false;
        }

        var animationEnabled = this.getShallow('animation');

        if (animationEnabled) {
          if (this.getData().count() > this.getShallow('animationThreshold')) {
            animationEnabled = false;
          }
        }

        return animationEnabled;
      },
      restoreData: function () {
        this.dataTask.dirty();
      },
      getColorFromPalette: function (name, scope, requestColorNum) {
        var ecModel = this.ecModel; // PENDING

        var color = colorPalette.getColorFromPalette.call(this, name, scope, requestColorNum);

        if (!color) {
          color = ecModel.getColorFromPalette(name, scope, requestColorNum);
        }

        return color;
      },

      /**
       * Use `data.mapDimension(coordDim, true)` instead.
       * @deprecated
       */
      coordDimToDataDim: function (coordDim) {
        return this.getRawData().mapDimension(coordDim, true);
      },

      /**
       * Get progressive rendering count each step
       * @return {number}
       */
      getProgressive: function () {
        return this.get('progressive');
      },

      /**
       * Get progressive rendering count each step
       * @return {number}
       */
      getProgressiveThreshold: function () {
        return this.get('progressiveThreshold');
      },

      /**
       * Get data indices for show tooltip content. See tooltip.
       * @abstract
       * @param {Array.<string>|string} dim
       * @param {Array.<number>} value
       * @param {module:echarts/coord/single/SingleAxis} baseAxis
       * @return {Object} {dataIndices, nestestValue}.
       */
      getAxisTooltipData: null,

      /**
       * See tooltip.
       * @abstract
       * @param {number} dataIndex
       * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
       */
      getTooltipPosition: null,

      /**
       * @see {module:echarts/stream/Scheduler}
       */
      pipeTask: null,

      /**
       * Convinient for override in extended class.
       * @protected
       * @type {Function}
       */
      preventIncremental: null,

      /**
       * @public
       * @readOnly
       * @type {Object}
       */
      pipelineContext: null
    });
    util.mixin(SeriesModel, dataFormat);
    util.mixin(SeriesModel, colorPalette);
    /**
     * MUST be called after `prepareSource` called
     * Here we need to make auto series, especially for auto legend. But we
     * do not modify series.name in option to avoid side effects.
     */

    function autoSeriesName(seriesModel) {
      // User specified name has higher priority, otherwise it may cause
      // series can not be queried unexpectedly.
      var name = seriesModel.name;

      if (!model.isNameSpecified(seriesModel)) {
        seriesModel.name = getSeriesAutoName(seriesModel) || name;
      }
    }

    function getSeriesAutoName(seriesModel) {
      var data = seriesModel.getRawData();
      var dataDims = data.mapDimension('seriesName', true);
      var nameArr = [];
      util.each(dataDims, function (dataDim) {
        var dimInfo = data.getDimensionInfo(dataDim);
        dimInfo.displayName && nameArr.push(dimInfo.displayName);
      });
      return nameArr.join(' ');
    }

    function dataTaskCount(context) {
      return context.model.getRawData().count();
    }

    function dataTaskReset(context) {
      var seriesModel = context.model;
      seriesModel.setData(seriesModel.getRawData().cloneShallow());
      return dataTaskProgress;
    }

    function dataTaskProgress(param, context) {
      // Avoid repead cloneShallow when data just created in reset.
      if (param.end > context.outputData.count()) {
        context.model.getRawData().cloneShallow(context.outputData);
      }
    } // TODO refactor


    function wrapData(data, seriesModel) {
      util.each(data.CHANGABLE_METHODS, function (methodName) {
        data.wrapMethod(methodName, util.curry(onDataSelfChange, seriesModel));
      });
    }

    function onDataSelfChange(seriesModel) {
      var task = getCurrentTask(seriesModel);

      if (task) {
        // Consider case: filter, selectRange
        task.setOutputEnd(this.count());
      }
    }

    function getCurrentTask(seriesModel) {
      var scheduler = (seriesModel.ecModel || {}).scheduler;
      var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);

      if (pipeline) {
        // When pipline finished, the currrentTask keep the last
        // task (renderTask).
        var task = pipeline.currentTask;

        if (task) {
          var agentStubMap = task.agentStubMap;

          if (agentStubMap) {
            task = agentStubMap.get(seriesModel.uid);
          }
        }

        return task;
      }
    }

    var _default$14 = SeriesModel;
    var Series = _default$14;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var Component$1 = function () {
      /**
       * @type {module:zrender/container/Group}
       * @readOnly
       */
      this.group = new Group_1();
      /**
       * @type {string}
       * @readOnly
       */

      this.uid = component.getUID('viewComponent');
    };

    Component$1.prototype = {
      constructor: Component$1,
      init: function (ecModel, api) {},
      render: function (componentModel, ecModel, api, payload) {},
      dispose: function () {},

      /**
       * @param {string} eventType
       * @param {Object} query
       * @param {module:zrender/Element} targetEl
       * @param {Object} packedEvent
       * @return {boolen} Pass only when return `true`.
       */
      filterForExposedEvent: null
    };
    var componentProto = Component$1.prototype;

    componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {// Do nothing;
    }; // Enable Component.extend.


    clazz.enableClassExtend(Component$1); // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

    clazz.enableClassManagement(Component$1, {
      registerWhenExtend: true
    });
    var _default$15 = Component$1;
    var Component_1 = _default$15;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var makeInner$5 = model.makeInner;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @return {string} If large mode changed, return string 'reset';
     */
    function _default$16() {
      var inner = makeInner$5();
      return function (seriesModel) {
        var fields = inner(seriesModel);
        var pipelineContext = seriesModel.pipelineContext;
        var originalLarge = fields.large;
        var originalProgressive = fields.progressiveRender;
        var large = fields.large = pipelineContext.large;
        var progressive = fields.progressiveRender = pipelineContext.progressiveRender;
        return !!(originalLarge ^ large || originalProgressive ^ progressive) && 'reset';
      };
    }

    var createRenderPlanner = _default$16;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var each$b = util.each;













    var createTask$2 = task.createTask;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var inner$5 = model.makeInner();
    var renderPlanner = createRenderPlanner();

    function Chart() {
      /**
       * @type {module:zrender/container/Group}
       * @readOnly
       */
      this.group = new Group_1();
      /**
       * @type {string}
       * @readOnly
       */

      this.uid = component.getUID('viewChart');
      this.renderTask = createTask$2({
        plan: renderTaskPlan,
        reset: renderTaskReset
      });
      this.renderTask.context = {
        view: this
      };
    }

    Chart.prototype = {
      type: 'chart',

      /**
       * Init the chart.
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       */
      init: function (ecModel, api) {},

      /**
       * Render the chart.
       * @param  {module:echarts/model/Series} seriesModel
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       * @param  {Object} payload
       */
      render: function (seriesModel, ecModel, api, payload) {},

      /**
       * Highlight series or specified data item.
       * @param  {module:echarts/model/Series} seriesModel
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       * @param  {Object} payload
       */
      highlight: function (seriesModel, ecModel, api, payload) {
        toggleHighlight(seriesModel.getData(), payload, 'emphasis');
      },

      /**
       * Downplay series or specified data item.
       * @param  {module:echarts/model/Series} seriesModel
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       * @param  {Object} payload
       */
      downplay: function (seriesModel, ecModel, api, payload) {
        toggleHighlight(seriesModel.getData(), payload, 'normal');
      },

      /**
       * Remove self.
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       */
      remove: function (ecModel, api) {
        this.group.removeAll();
      },

      /**
       * Dispose self.
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       */
      dispose: function () {},

      /**
       * Rendering preparation in progressive mode.
       * @param  {module:echarts/model/Series} seriesModel
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       * @param  {Object} payload
       */
      incrementalPrepareRender: null,

      /**
       * Render in progressive mode.
       * @param  {Object} params See taskParams in `stream/task.js`
       * @param  {module:echarts/model/Series} seriesModel
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       * @param  {Object} payload
       */
      incrementalRender: null,

      /**
       * Update transform directly.
       * @param  {module:echarts/model/Series} seriesModel
       * @param  {module:echarts/model/Global} ecModel
       * @param  {module:echarts/ExtensionAPI} api
       * @param  {Object} payload
       * @return {Object} {update: true}
       */
      updateTransform: null,

      /**
       * The view contains the given point.
       * @interface
       * @param {Array.<number>} point
       * @return {boolean}
       */
      // containPoint: function () {}

      /**
       * @param {string} eventType
       * @param {Object} query
       * @param {module:zrender/Element} targetEl
       * @param {Object} packedEvent
       * @return {boolen} Pass only when return `true`.
       */
      filterForExposedEvent: null
    };
    var chartProto = Chart.prototype;

    chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
      this.render(seriesModel, ecModel, api, payload);
    };
    /**
     * Set state of single element
     * @param {module:zrender/Element} el
     * @param {string} state 'normal'|'emphasis'
     * @param {number} highlightDigit
     */


    function elSetState(el, state, highlightDigit) {
      if (el) {
        el.trigger(state, highlightDigit);

        if (el.isGroup // Simple optimize.
        && !graphic.isHighDownDispatcher(el)) {
          for (var i = 0, len = el.childCount(); i < len; i++) {
            elSetState(el.childAt(i), state, highlightDigit);
          }
        }
      }
    }
    /**
     * @param {module:echarts/data/List} data
     * @param {Object} payload
     * @param {string} state 'normal'|'emphasis'
     */


    function toggleHighlight(data, payload, state) {
      var dataIndex = model.queryDataIndex(data, payload);
      var highlightDigit = payload && payload.highlightKey != null ? graphic.getHighlightDigit(payload.highlightKey) : null;

      if (dataIndex != null) {
        each$b(model.normalizeToArray(dataIndex), function (dataIdx) {
          elSetState(data.getItemGraphicEl(dataIdx), state, highlightDigit);
        });
      } else {
        data.eachItemGraphicEl(function (el) {
          elSetState(el, state, highlightDigit);
        });
      }
    } // Enable Chart.extend.


    clazz.enableClassExtend(Chart, ['dispose']); // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.

    clazz.enableClassManagement(Chart, {
      registerWhenExtend: true
    });

    Chart.markUpdateMethod = function (payload, methodName) {
      inner$5(payload).updateMethod = methodName;
    };

    function renderTaskPlan(context) {
      return renderPlanner(context.model);
    }

    function renderTaskReset(context) {
      var seriesModel = context.model;
      var ecModel = context.ecModel;
      var api = context.api;
      var payload = context.payload; // ???! remove updateView updateVisual

      var progressiveRender = seriesModel.pipelineContext.progressiveRender;
      var view = context.view;
      var updateMethod = payload && inner$5(payload).updateMethod;
      var methodName = progressiveRender ? 'incrementalPrepareRender' : updateMethod && view[updateMethod] ? updateMethod // `appendData` is also supported when data amount
      // is less than progressive threshold.
      : 'render';

      if (methodName !== 'render') {
        view[methodName](seriesModel, ecModel, api, payload);
      }

      return progressMethodMap[methodName];
    }

    var progressMethodMap = {
      incrementalPrepareRender: {
        progress: function (params, context) {
          context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);
        }
      },
      render: {
        // Put view.render in `progress` to support appendData. But in this case
        // view.render should not be called in reset, otherwise it will be called
        // twise. Use `forceFirstProgress` to make sure that view.render is called
        // in any cases.
        forceFirstProgress: true,
        progress: function (params, context) {
          context.view.render(context.model, context.ecModel, context.api, context.payload);
        }
      }
    };
    var _default$17 = Chart;
    var Chart_1 = _default$17;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var ORIGIN_METHOD = '\0__throttleOriginMethod';
    var RATE = '\0__throttleRate';
    var THROTTLE_TYPE = '\0__throttleType';
    /**
     * @public
     * @param {(Function)} fn
     * @param {number} [delay=0] Unit: ms.
     * @param {boolean} [debounce=false]
     *        true: If call interval less than `delay`, only the last call works.
     *        false: If call interval less than `delay, call works on fixed rate.
     * @return {(Function)} throttled fn.
     */

    function throttle(fn, delay, debounce) {
      var currCall;
      var lastCall = 0;
      var lastExec = 0;
      var timer = null;
      var diff;
      var scope;
      var args;
      var debounceNextCall;
      delay = delay || 0;

      function exec() {
        lastExec = new Date().getTime();
        timer = null;
        fn.apply(scope, args || []);
      }

      var cb = function () {
        currCall = new Date().getTime();
        scope = this;
        args = arguments;
        var thisDelay = debounceNextCall || delay;
        var thisDebounce = debounceNextCall || debounce;
        debounceNextCall = null;
        diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
        clearTimeout(timer); // Here we should make sure that: the `exec` SHOULD NOT be called later
        // than a new call of `cb`, that is, preserving the command order. Consider
        // calculating "scale rate" when roaming as an example. When a call of `cb`
        // happens, either the `exec` is called dierectly, or the call is delayed.
        // But the delayed call should never be later than next call of `cb`. Under
        // this assurance, we can simply update view state each time `dispatchAction`
        // triggered by user roaming, but not need to add extra code to avoid the
        // state being "rolled-back".

        if (thisDebounce) {
          timer = setTimeout(exec, thisDelay);
        } else {
          if (diff >= 0) {
            exec();
          } else {
            timer = setTimeout(exec, -diff);
          }
        }

        lastCall = currCall;
      };
      /**
       * Clear throttle.
       * @public
       */


      cb.clear = function () {
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
      };
      /**
       * Enable debounce once.
       */


      cb.debounceNextCall = function (debounceDelay) {
        debounceNextCall = debounceDelay;
      };

      return cb;
    }
    /**
     * Create throttle method or update throttle rate.
     *
     * @example
     * ComponentView.prototype.render = function () {
     *     ...
     *     throttle.createOrUpdate(
     *         this,
     *         '_dispatchAction',
     *         this.model.get('throttle'),
     *         'fixRate'
     *     );
     * };
     * ComponentView.prototype.remove = function () {
     *     throttle.clear(this, '_dispatchAction');
     * };
     * ComponentView.prototype.dispose = function () {
     *     throttle.clear(this, '_dispatchAction');
     * };
     *
     * @public
     * @param {Object} obj
     * @param {string} fnAttr
     * @param {number} [rate]
     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
     * @return {Function} throttled function.
     */


    function createOrUpdate(obj, fnAttr, rate, throttleType) {
      var fn = obj[fnAttr];

      if (!fn) {
        return;
      }

      var originFn = fn[ORIGIN_METHOD] || fn;
      var lastThrottleType = fn[THROTTLE_TYPE];
      var lastRate = fn[RATE];

      if (lastRate !== rate || lastThrottleType !== throttleType) {
        if (rate == null || !throttleType) {
          return obj[fnAttr] = originFn;
        }

        fn = obj[fnAttr] = throttle(originFn, rate, throttleType === 'debounce');
        fn[ORIGIN_METHOD] = originFn;
        fn[THROTTLE_TYPE] = throttleType;
        fn[RATE] = rate;
      }

      return fn;
    }
    /**
     * Clear throttle. Example see throttle.createOrUpdate.
     *
     * @public
     * @param {Object} obj
     * @param {string} fnAttr
     */


    function clear(obj, fnAttr) {
      var fn = obj[fnAttr];

      if (fn && fn[ORIGIN_METHOD]) {
        obj[fnAttr] = fn[ORIGIN_METHOD];
      }
    }

    var throttle_2 = throttle;
    var createOrUpdate_1 = createOrUpdate;
    var clear_1 = clear;

    var throttle_1 = {
    	throttle: throttle_2,
    	createOrUpdate: createOrUpdate_1,
    	clear: clear_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var isFunction$2 = util.isFunction;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$18 = {
      createOnAllSeries: true,
      performRawSeries: true,
      reset: function (seriesModel, ecModel) {
        var data = seriesModel.getData();
        var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.color').split('.'); // Set in itemStyle

        var color = seriesModel.get(colorAccessPath);
        var colorCallback = isFunction$2(color) && !(color instanceof Gradient_1) ? color : null; // Default color

        if (!color || colorCallback) {
          color = seriesModel.getColorFromPalette( // TODO series count changed.
          seriesModel.name, null, ecModel.getSeriesCount());
        }

        data.setVisual('color', color);
        var borderColorAccessPath = (seriesModel.visualBorderColorAccessPath || 'itemStyle.borderColor').split('.');
        var borderColor = seriesModel.get(borderColorAccessPath);
        data.setVisual('borderColor', borderColor); // Only visible series has each data be visual encoded

        if (!ecModel.isSeriesFiltered(seriesModel)) {
          if (colorCallback) {
            data.each(function (idx) {
              data.setItemVisual(idx, 'color', colorCallback(seriesModel.getDataParams(idx)));
            });
          } // itemStyle in each data item


          var dataEach = function (data, idx) {
            var itemModel = data.getItemModel(idx);
            var color = itemModel.get(colorAccessPath, true);
            var borderColor = itemModel.get(borderColorAccessPath, true);

            if (color != null) {
              data.setItemVisual(idx, 'color', color);
            }

            if (borderColor != null) {
              data.setItemVisual(idx, 'borderColor', borderColor);
            }
          };

          return {
            dataEach: data.hasItemOption ? dataEach : null
          };
        }
      }
    };
    var seriesColor = _default$18;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Language: (Simplified) Chinese.
     */
    var _default$19 = {
      legend: {
        selector: {
          all: '全选',
          inverse: '反选'
        }
      },
      toolbox: {
        brush: {
          title: {
            rect: '矩形选择',
            polygon: '圈选',
            lineX: '横向选择',
            lineY: '纵向选择',
            keep: '保持选择',
            clear: '清除选择'
          }
        },
        dataView: {
          title: '数据视图',
          lang: ['数据视图', '关闭', '刷新']
        },
        dataZoom: {
          title: {
            zoom: '区域缩放',
            back: '区域缩放还原'
          }
        },
        magicType: {
          title: {
            line: '切换为折线图',
            bar: '切换为柱状图',
            stack: '切换为堆叠',
            tiled: '切换为平铺'
          }
        },
        restore: {
          title: '还原'
        },
        saveAsImage: {
          title: '保存为图片',
          lang: ['右键另存为图片']
        }
      },
      series: {
        typeNames: {
          pie: '饼图',
          bar: '柱状图',
          line: '折线图',
          scatter: '散点图',
          effectScatter: '涟漪散点图',
          radar: '雷达图',
          tree: '树图',
          treemap: '矩形树图',
          boxplot: '箱型图',
          candlestick: 'K线图',
          k: 'K线图',
          heatmap: '热力图',
          map: '地图',
          parallel: '平行坐标图',
          lines: '线图',
          graph: '关系图',
          sankey: '桑基图',
          funnel: '漏斗图',
          gauge: '仪表盘图',
          pictorialBar: '象形柱图',
          themeRiver: '主题河流图',
          sunburst: '旭日图'
        }
      },
      aria: {
        general: {
          withTitle: '这是一个关于“{title}”的图表。',
          withoutTitle: '这是一个图表，'
        },
        series: {
          single: {
            prefix: '',
            withName: '图表类型是{seriesType}，表示{seriesName}。',
            withoutName: '图表类型是{seriesType}。'
          },
          multiple: {
            prefix: '它由{seriesCount}个图表系列组成。',
            withName: '第{seriesId}个系列是一个表示{seriesName}的{seriesType}，',
            withoutName: '第{seriesId}个系列是一个{seriesType}，',
            separator: {
              middle: '；',
              end: '。'
            }
          }
        },
        data: {
          allData: '其数据是——',
          partialData: '其中，前{displayCnt}项是——',
          withName: '{name}的数据是{value}',
          withoutName: '{value}',
          separator: {
            middle: '，',
            end: ''
          }
        }
      }
    };
    var lang = _default$19;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var retrieveRawValue$3 = dataProvider.retrieveRawValue;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    function _default$1a(dom, ecModel) {
      var ariaModel = ecModel.getModel('aria');

      if (!ariaModel.get('show')) {
        return;
      } else if (ariaModel.get('description')) {
        dom.setAttribute('aria-label', ariaModel.get('description'));
        return;
      }

      var seriesCnt = 0;
      ecModel.eachSeries(function (seriesModel, idx) {
        ++seriesCnt;
      }, this);
      var maxDataCnt = ariaModel.get('data.maxCount') || 10;
      var maxSeriesCnt = ariaModel.get('series.maxCount') || 10;
      var displaySeriesCnt = Math.min(seriesCnt, maxSeriesCnt);
      var ariaLabel;

      if (seriesCnt < 1) {
        // No series, no aria label
        return;
      } else {
        var title = getTitle();

        if (title) {
          ariaLabel = replace(getConfig('general.withTitle'), {
            title: title
          });
        } else {
          ariaLabel = getConfig('general.withoutTitle');
        }

        var seriesLabels = [];
        var prefix = seriesCnt > 1 ? 'series.multiple.prefix' : 'series.single.prefix';
        ariaLabel += replace(getConfig(prefix), {
          seriesCount: seriesCnt
        });
        ecModel.eachSeries(function (seriesModel, idx) {
          if (idx < displaySeriesCnt) {
            var seriesLabel;
            var seriesName = seriesModel.get('name');
            var seriesTpl = 'series.' + (seriesCnt > 1 ? 'multiple' : 'single') + '.';
            seriesLabel = getConfig(seriesName ? seriesTpl + 'withName' : seriesTpl + 'withoutName');
            seriesLabel = replace(seriesLabel, {
              seriesId: seriesModel.seriesIndex,
              seriesName: seriesModel.get('name'),
              seriesType: getSeriesTypeName(seriesModel.subType)
            });
            var data = seriesModel.getData();
            window.data = data;

            if (data.count() > maxDataCnt) {
              // Show part of data
              seriesLabel += replace(getConfig('data.partialData'), {
                displayCnt: maxDataCnt
              });
            } else {
              seriesLabel += getConfig('data.allData');
            }

            var dataLabels = [];

            for (var i = 0; i < data.count(); i++) {
              if (i < maxDataCnt) {
                var name = data.getName(i);
                var value = retrieveRawValue$3(data, i);
                dataLabels.push(replace(name ? getConfig('data.withName') : getConfig('data.withoutName'), {
                  name: name,
                  value: value
                }));
              }
            }

            seriesLabel += dataLabels.join(getConfig('data.separator.middle')) + getConfig('data.separator.end');
            seriesLabels.push(seriesLabel);
          }
        });
        ariaLabel += seriesLabels.join(getConfig('series.multiple.separator.middle')) + getConfig('series.multiple.separator.end');
        dom.setAttribute('aria-label', ariaLabel);
      }

      function replace(str, keyValues) {
        if (typeof str !== 'string') {
          return str;
        }

        var result = str;
        util.each(keyValues, function (value, key) {
          result = result.replace(new RegExp('\\{\\s*' + key + '\\s*\\}', 'g'), value);
        });
        return result;
      }

      function getConfig(path) {
        var userConfig = ariaModel.get(path);

        if (userConfig == null) {
          var pathArr = path.split('.');
          var result = lang.aria;

          for (var i = 0; i < pathArr.length; ++i) {
            result = result[pathArr[i]];
          }

          return result;
        } else {
          return userConfig;
        }
      }

      function getTitle() {
        var title = ecModel.getModel('title').option;

        if (title && title.length) {
          title = title[0];
        }

        return title && title.text;
      }

      function getSeriesTypeName(type) {
        return lang.series.typeNames[type] || '自定义图';
      }
    }

    var aria = _default$1a;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var PI$1 = Math.PI;
    /**
     * @param {module:echarts/ExtensionAPI} api
     * @param {Object} [opts]
     * @param {string} [opts.text]
     * @param {string} [opts.color]
     * @param {string} [opts.textColor]
     * @return {module:zrender/Element}
     */

    function _default$1b(api, opts) {
      opts = opts || {};
      util.defaults(opts, {
        text: 'loading',
        color: '#c23531',
        textColor: '#000',
        maskColor: 'rgba(255, 255, 255, 0.8)',
        zlevel: 0
      });
      var mask = new graphic.Rect({
        style: {
          fill: opts.maskColor
        },
        zlevel: opts.zlevel,
        z: 10000
      });
      var arc = new graphic.Arc({
        shape: {
          startAngle: -PI$1 / 2,
          endAngle: -PI$1 / 2 + 0.1,
          r: 10
        },
        style: {
          stroke: opts.color,
          lineCap: 'round',
          lineWidth: 5
        },
        zlevel: opts.zlevel,
        z: 10001
      });
      var labelRect = new graphic.Rect({
        style: {
          fill: 'none',
          text: opts.text,
          textPosition: 'right',
          textDistance: 10,
          textFill: opts.textColor
        },
        zlevel: opts.zlevel,
        z: 10001
      });
      arc.animateShape(true).when(1000, {
        endAngle: PI$1 * 3 / 2
      }).start('circularInOut');
      arc.animateShape(true).when(1000, {
        startAngle: PI$1 * 3 / 2
      }).delay(300).start('circularInOut');
      var group = new graphic.Group();
      group.add(arc);
      group.add(labelRect);
      group.add(mask); // Inject resize

      group.resize = function () {
        var cx = api.getWidth() / 2;
        var cy = api.getHeight() / 2;
        arc.setShape({
          cx: cx,
          cy: cy
        });
        var r = arc.shape.r;
        labelRect.setShape({
          x: cx - r,
          y: cy - r,
          width: r * 2,
          height: r * 2
        });
        mask.setShape({
          x: 0,
          y: 0,
          width: api.getWidth(),
          height: api.getHeight()
        });
      };

      group.resize();
      return group;
    }

    var _default_1 = _default$1b;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var each$c = util.each;
    var map$4 = util.map;
    var isFunction$3 = util.isFunction;
    var createHashMap$5 = util.createHashMap;
    var noop$1 = util.noop;



    var createTask$3 = task.createTask;



    var getUID$1 = component.getUID;







    var normalizeToArray$3 = model.normalizeToArray;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @module echarts/stream/Scheduler
     */

    /**
     * @constructor
     */
    function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {
      this.ecInstance = ecInstance;
      this.api = api;
      this.unfinished; // Fix current processors in case that in some rear cases that
      // processors might be registered after echarts instance created.
      // Register processors incrementally for a echarts instance is
      // not supported by this stream architecture.

      var dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();
      var visualHandlers = this._visualHandlers = visualHandlers.slice();
      this._allHandlers = dataProcessorHandlers.concat(visualHandlers);
      /**
       * @private
       * @type {
       *     [handlerUID: string]: {
       *         seriesTaskMap?: {
       *             [seriesUID: string]: Task
       *         },
       *         overallTask?: Task
       *     }
       * }
       */

      this._stageTaskMap = createHashMap$5();
    }

    var proto = Scheduler.prototype;
    /**
     * @param {module:echarts/model/Global} ecModel
     * @param {Object} payload
     */

    proto.restoreData = function (ecModel, payload) {
      // TODO: Only restroe needed series and components, but not all components.
      // Currently `restoreData` of all of the series and component will be called.
      // But some independent components like `title`, `legend`, `graphic`, `toolbox`,
      // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,
      // and some components like coordinate system, axes, dataZoom, visualMap only
      // need their target series refresh.
      // (1) If we are implementing this feature some day, we should consider these cases:
      // if a data processor depends on a component (e.g., dataZoomProcessor depends
      // on the settings of `dataZoom`), it should be re-performed if the component
      // is modified by `setOption`.
      // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,
      // it should be re-performed when the result array of `getTargetSeries` changed.
      // We use `dependencies` to cover these issues.
      // (3) How to update target series when coordinate system related components modified.
      // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,
      // and this case all of the tasks will be set as dirty.
      ecModel.restoreData(payload); // Theoretically an overall task not only depends on each of its target series, but also
      // depends on all of the series.
      // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks
      // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure
      // that the overall task is set as dirty and to be performed, otherwise it probably cause
      // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it
      // probably cause state chaos (consider `dataZoomProcessor`).

      this._stageTaskMap.each(function (taskRecord) {
        var overallTask = taskRecord.overallTask;
        overallTask && overallTask.dirty();
      });
    }; // If seriesModel provided, incremental threshold is check by series data.


    proto.getPerformArgs = function (task, isBlock) {
      // For overall task
      if (!task.__pipeline) {
        return;
      }

      var pipeline = this._pipelineMap.get(task.__pipeline.id);

      var pCtx = pipeline.context;
      var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;
      var step = incremental ? pipeline.step : null;
      var modDataCount = pCtx && pCtx.modDataCount;
      var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;
      return {
        step: step,
        modBy: modBy,
        modDataCount: modDataCount
      };
    };

    proto.getPipeline = function (pipelineId) {
      return this._pipelineMap.get(pipelineId);
    };
    /**
     * Current, progressive rendering starts from visual and layout.
     * Always detect render mode in the same stage, avoiding that incorrect
     * detection caused by data filtering.
     * Caution:
     * `updateStreamModes` use `seriesModel.getData()`.
     */


    proto.updateStreamModes = function (seriesModel, view) {
      var pipeline = this._pipelineMap.get(seriesModel.uid);

      var data = seriesModel.getData();
      var dataLen = data.count(); // `progressiveRender` means that can render progressively in each
      // animation frame. Note that some types of series do not provide
      // `view.incrementalPrepareRender` but support `chart.appendData`. We
      // use the term `incremental` but not `progressive` to describe the
      // case that `chart.appendData`.

      var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;
      var large = seriesModel.get('large') && dataLen >= seriesModel.get('largeThreshold'); // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.
      // see `test/candlestick-large3.html`

      var modDataCount = seriesModel.get('progressiveChunkMode') === 'mod' ? dataLen : null;
      seriesModel.pipelineContext = pipeline.context = {
        progressiveRender: progressiveRender,
        modDataCount: modDataCount,
        large: large
      };
    };

    proto.restorePipelines = function (ecModel) {
      var scheduler = this;
      var pipelineMap = scheduler._pipelineMap = createHashMap$5();
      ecModel.eachSeries(function (seriesModel) {
        var progressive = seriesModel.getProgressive();
        var pipelineId = seriesModel.uid;
        pipelineMap.set(pipelineId, {
          id: pipelineId,
          head: null,
          tail: null,
          threshold: seriesModel.getProgressiveThreshold(),
          progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),
          blockIndex: -1,
          step: Math.round(progressive || 700),
          count: 0
        });
        pipe(scheduler, seriesModel, seriesModel.dataTask);
      });
    };

    proto.prepareStageTasks = function () {
      var stageTaskMap = this._stageTaskMap;
      var ecModel = this.ecInstance.getModel();
      var api = this.api;
      each$c(this._allHandlers, function (handler) {
        var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, []);
        handler.reset && createSeriesStageTask(this, handler, record, ecModel, api);
        handler.overallReset && createOverallStageTask(this, handler, record, ecModel, api);
      }, this);
    };

    proto.prepareView = function (view, model, ecModel, api) {
      var renderTask = view.renderTask;
      var context = renderTask.context;
      context.model = model;
      context.ecModel = ecModel;
      context.api = api;
      renderTask.__block = !view.incrementalPrepareRender;
      pipe(this, model, renderTask);
    };

    proto.performDataProcessorTasks = function (ecModel, payload) {
      // If we do not use `block` here, it should be considered when to update modes.
      performStageTasks(this, this._dataProcessorHandlers, ecModel, payload, {
        block: true
      });
    }; // opt
    // opt.visualType: 'visual' or 'layout'
    // opt.setDirty


    proto.performVisualTasks = function (ecModel, payload, opt) {
      performStageTasks(this, this._visualHandlers, ecModel, payload, opt);
    };

    function performStageTasks(scheduler, stageHandlers, ecModel, payload, opt) {
      opt = opt || {};
      var unfinished;
      each$c(stageHandlers, function (stageHandler, idx) {
        if (opt.visualType && opt.visualType !== stageHandler.visualType) {
          return;
        }

        var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);

        var seriesTaskMap = stageHandlerRecord.seriesTaskMap;
        var overallTask = stageHandlerRecord.overallTask;

        if (overallTask) {
          var overallNeedDirty;
          var agentStubMap = overallTask.agentStubMap;
          agentStubMap.each(function (stub) {
            if (needSetDirty(opt, stub)) {
              stub.dirty();
              overallNeedDirty = true;
            }
          });
          overallNeedDirty && overallTask.dirty();
          updatePayload(overallTask, payload);
          var performArgs = scheduler.getPerformArgs(overallTask, opt.block); // Execute stubs firstly, which may set the overall task dirty,
          // then execute the overall task. And stub will call seriesModel.setData,
          // which ensures that in the overallTask seriesModel.getData() will not
          // return incorrect data.

          agentStubMap.each(function (stub) {
            stub.perform(performArgs);
          });
          unfinished |= overallTask.perform(performArgs);
        } else if (seriesTaskMap) {
          seriesTaskMap.each(function (task, pipelineId) {
            if (needSetDirty(opt, task)) {
              task.dirty();
            }

            var performArgs = scheduler.getPerformArgs(task, opt.block);
            performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);
            updatePayload(task, payload);
            unfinished |= task.perform(performArgs);
          });
        }
      });

      function needSetDirty(opt, task) {
        return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));
      }

      scheduler.unfinished |= unfinished;
    }

    proto.performSeriesTasks = function (ecModel) {
      var unfinished;
      ecModel.eachSeries(function (seriesModel) {
        // Progress to the end for dataInit and dataRestore.
        unfinished |= seriesModel.dataTask.perform();
      });
      this.unfinished |= unfinished;
    };

    proto.plan = function () {
      // Travel pipelines, check block.
      this._pipelineMap.each(function (pipeline) {
        var task = pipeline.tail;

        do {
          if (task.__block) {
            pipeline.blockIndex = task.__idxInPipeline;
            break;
          }

          task = task.getUpstream();
        } while (task);
      });
    };

    var updatePayload = proto.updatePayload = function (task, payload) {
      payload !== 'remain' && (task.context.payload = payload);
    };

    function createSeriesStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
      var seriesTaskMap = stageHandlerRecord.seriesTaskMap || (stageHandlerRecord.seriesTaskMap = createHashMap$5());
      var seriesType = stageHandler.seriesType;
      var getTargetSeries = stageHandler.getTargetSeries; // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,
      // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,
      // it works but it may cause other irrelevant charts blocked.

      if (stageHandler.createOnAllSeries) {
        ecModel.eachRawSeries(create);
      } else if (seriesType) {
        ecModel.eachRawSeriesByType(seriesType, create);
      } else if (getTargetSeries) {
        getTargetSeries(ecModel, api).each(create);
      }

      function create(seriesModel) {
        var pipelineId = seriesModel.uid; // Init tasks for each seriesModel only once.
        // Reuse original task instance.

        var task = seriesTaskMap.get(pipelineId) || seriesTaskMap.set(pipelineId, createTask$3({
          plan: seriesTaskPlan,
          reset: seriesTaskReset,
          count: seriesTaskCount
        }));
        task.context = {
          model: seriesModel,
          ecModel: ecModel,
          api: api,
          useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,
          plan: stageHandler.plan,
          reset: stageHandler.reset,
          scheduler: scheduler
        };
        pipe(scheduler, seriesModel, task);
      } // Clear unused series tasks.


      var pipelineMap = scheduler._pipelineMap;
      seriesTaskMap.each(function (task, pipelineId) {
        if (!pipelineMap.get(pipelineId)) {
          task.dispose();
          seriesTaskMap.removeKey(pipelineId);
        }
      });
    }

    function createOverallStageTask(scheduler, stageHandler, stageHandlerRecord, ecModel, api) {
      var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask // For overall task, the function only be called on reset stage.
      || createTask$3({
        reset: overallTaskReset
      });
      overallTask.context = {
        ecModel: ecModel,
        api: api,
        overallReset: stageHandler.overallReset,
        scheduler: scheduler
      }; // Reuse orignal stubs.

      var agentStubMap = overallTask.agentStubMap = overallTask.agentStubMap || createHashMap$5();
      var seriesType = stageHandler.seriesType;
      var getTargetSeries = stageHandler.getTargetSeries;
      var overallProgress = true;
      var modifyOutputEnd = stageHandler.modifyOutputEnd; // An overall task with seriesType detected or has `getTargetSeries`, we add
      // stub in each pipelines, it will set the overall task dirty when the pipeline
      // progress. Moreover, to avoid call the overall task each frame (too frequent),
      // we set the pipeline block.

      if (seriesType) {
        ecModel.eachRawSeriesByType(seriesType, createStub);
      } else if (getTargetSeries) {
        getTargetSeries(ecModel, api).each(createStub);
      } // Otherwise, (usually it is legancy case), the overall task will only be
      // executed when upstream dirty. Otherwise the progressive rendering of all
      // pipelines will be disabled unexpectedly. But it still needs stubs to receive
      // dirty info from upsteam.
      else {
          overallProgress = false;
          each$c(ecModel.getSeries(), createStub);
        }

      function createStub(seriesModel) {
        var pipelineId = seriesModel.uid;
        var stub = agentStubMap.get(pipelineId);

        if (!stub) {
          stub = agentStubMap.set(pipelineId, createTask$3({
            reset: stubReset,
            onDirty: stubOnDirty
          })); // When the result of `getTargetSeries` changed, the overallTask
          // should be set as dirty and re-performed.

          overallTask.dirty();
        }

        stub.context = {
          model: seriesModel,
          overallProgress: overallProgress,
          modifyOutputEnd: modifyOutputEnd
        };
        stub.agent = overallTask;
        stub.__block = overallProgress;
        pipe(scheduler, seriesModel, stub);
      } // Clear unused stubs.


      var pipelineMap = scheduler._pipelineMap;
      agentStubMap.each(function (stub, pipelineId) {
        if (!pipelineMap.get(pipelineId)) {
          stub.dispose(); // When the result of `getTargetSeries` changed, the overallTask
          // should be set as dirty and re-performed.

          overallTask.dirty();
          agentStubMap.removeKey(pipelineId);
        }
      });
    }

    function overallTaskReset(context) {
      context.overallReset(context.ecModel, context.api, context.payload);
    }

    function stubReset(context, upstreamContext) {
      return context.overallProgress && stubProgress;
    }

    function stubProgress() {
      this.agent.dirty();
      this.getDownstream().dirty();
    }

    function stubOnDirty() {
      this.agent && this.agent.dirty();
    }

    function seriesTaskPlan(context) {
      return context.plan && context.plan(context.model, context.ecModel, context.api, context.payload);
    }

    function seriesTaskReset(context) {
      if (context.useClearVisual) {
        context.data.clearAllVisual();
      }

      var resetDefines = context.resetDefines = normalizeToArray$3(context.reset(context.model, context.ecModel, context.api, context.payload));
      return resetDefines.length > 1 ? map$4(resetDefines, function (v, idx) {
        return makeSeriesTaskProgress(idx);
      }) : singleSeriesTaskProgress;
    }

    var singleSeriesTaskProgress = makeSeriesTaskProgress(0);

    function makeSeriesTaskProgress(resetDefineIdx) {
      return function (params, context) {
        var data = context.data;
        var resetDefine = context.resetDefines[resetDefineIdx];

        if (resetDefine && resetDefine.dataEach) {
          for (var i = params.start; i < params.end; i++) {
            resetDefine.dataEach(data, i);
          }
        } else if (resetDefine && resetDefine.progress) {
          resetDefine.progress(params, data);
        }
      };
    }

    function seriesTaskCount(context) {
      return context.data.count();
    }

    function pipe(scheduler, seriesModel, task) {
      var pipelineId = seriesModel.uid;

      var pipeline = scheduler._pipelineMap.get(pipelineId);

      !pipeline.head && (pipeline.head = task);
      pipeline.tail && pipeline.tail.pipe(task);
      pipeline.tail = task;
      task.__idxInPipeline = pipeline.count++;
      task.__pipeline = pipeline;
    }

    Scheduler.wrapStageHandler = function (stageHandler, visualType) {
      if (isFunction$3(stageHandler)) {
        stageHandler = {
          overallReset: stageHandler,
          seriesType: detectSeriseType(stageHandler)
        };
      }

      stageHandler.uid = getUID$1('stageHandler');
      visualType && (stageHandler.visualType = visualType);
      return stageHandler;
    };
    /**
     * Only some legacy stage handlers (usually in echarts extensions) are pure function.
     * To ensure that they can work normally, they should work in block mode, that is,
     * they should not be started util the previous tasks finished. So they cause the
     * progressive rendering disabled. We try to detect the series type, to narrow down
     * the block range to only the series type they concern, but not all series.
     */


    function detectSeriseType(legacyFunc) {
      seriesType = null;

      try {
        // Assume there is no async when calling `eachSeriesByType`.
        legacyFunc(ecModelMock, apiMock);
      } catch (e) {}

      return seriesType;
    }

    var ecModelMock = {};
    var apiMock = {};
    var seriesType;
    mockMethods(ecModelMock, Global);
    mockMethods(apiMock, ExtensionAPI_1);

    ecModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function (type) {
      seriesType = type;
    };

    ecModelMock.eachComponent = function (cond) {
      if (cond.mainType === 'series' && cond.subType) {
        seriesType = cond.subType;
      }
    };

    function mockMethods(target, Clz) {
      /* eslint-disable */
      for (var name in Clz.prototype) {
        // Do not use hasOwnProperty
        target[name] = noop$1;
      }
      /* eslint-enable */

    }

    var _default$1c = Scheduler;
    var Scheduler_1 = _default$1c;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var colorAll = ['#37A2DA', '#32C5E9', '#67E0E3', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'];
    var _default$1d = {
      color: colorAll,
      colorLayer: [['#37A2DA', '#ffd85c', '#fd7b5f'], ['#37A2DA', '#67E0E3', '#FFDB5C', '#ff9f7f', '#E062AE', '#9d96f5'], ['#37A2DA', '#32C5E9', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#e7bcf3', '#8378EA', '#96BFFF'], colorAll]
    };
    var light = _default$1d;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var contrastColor = '#eee';

    var axisCommon = function () {
      return {
        axisLine: {
          lineStyle: {
            color: contrastColor
          }
        },
        axisTick: {
          lineStyle: {
            color: contrastColor
          }
        },
        axisLabel: {
          textStyle: {
            color: contrastColor
          }
        },
        splitLine: {
          lineStyle: {
            type: 'dashed',
            color: '#aaa'
          }
        },
        splitArea: {
          areaStyle: {
            color: contrastColor
          }
        }
      };
    };

    var colorPalette$1 = ['#dd6b66', '#759aa0', '#e69d87', '#8dc1a9', '#ea7e53', '#eedd78', '#73a373', '#73b9bc', '#7289ab', '#91ca8c', '#f49f42'];
    var theme = {
      color: colorPalette$1,
      backgroundColor: '#333',
      tooltip: {
        axisPointer: {
          lineStyle: {
            color: contrastColor
          },
          crossStyle: {
            color: contrastColor
          },
          label: {
            color: '#000'
          }
        }
      },
      legend: {
        textStyle: {
          color: contrastColor
        }
      },
      textStyle: {
        color: contrastColor
      },
      title: {
        textStyle: {
          color: contrastColor
        }
      },
      toolbox: {
        iconStyle: {
          normal: {
            borderColor: contrastColor
          }
        }
      },
      dataZoom: {
        textStyle: {
          color: contrastColor
        }
      },
      visualMap: {
        textStyle: {
          color: contrastColor
        }
      },
      timeline: {
        lineStyle: {
          color: contrastColor
        },
        itemStyle: {
          normal: {
            color: colorPalette$1[1]
          }
        },
        label: {
          normal: {
            textStyle: {
              color: contrastColor
            }
          }
        },
        controlStyle: {
          normal: {
            color: contrastColor,
            borderColor: contrastColor
          }
        }
      },
      timeAxis: axisCommon(),
      logAxis: axisCommon(),
      valueAxis: axisCommon(),
      categoryAxis: axisCommon(),
      line: {
        symbol: 'circle'
      },
      graph: {
        color: colorPalette$1
      },
      gauge: {
        title: {
          textStyle: {
            color: contrastColor
          }
        }
      },
      candlestick: {
        itemStyle: {
          normal: {
            color: '#FD1050',
            color0: '#0CF49B',
            borderColor: '#FD1050',
            borderColor0: '#0CF49B'
          }
        }
      }
    };
    theme.categoryAxis.splitLine.show = false;
    var _default$1e = theme;
    var dark = _default$1e;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var detectSourceFormat$1 = sourceHelper.detectSourceFormat;



    var SERIES_LAYOUT_BY_COLUMN$2 = sourceType.SERIES_LAYOUT_BY_COLUMN;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * This module is imported by echarts directly.
     *
     * Notice:
     * Always keep this file exists for backward compatibility.
     * Because before 4.1.0, dataset is an optional component,
     * some users may import this module manually.
     */
    Component.extend({
      type: 'dataset',

      /**
       * @protected
       */
      defaultOption: {
        // 'row', 'column'
        seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN$2,
        // null/'auto': auto detect header, see "module:echarts/data/helper/sourceHelper"
        sourceHeader: null,
        dimensions: null,
        source: null
      },
      optionUpdated: function () {
        detectSourceFormat$1(this);
      }
    });
    Component_1.extend({
      type: 'dataset'
    });

    /**
     * 椭圆形状
     * @module zrender/graphic/shape/Ellipse
     */
    var _default$1f = Path_1.extend({
      type: 'ellipse',
      shape: {
        cx: 0,
        cy: 0,
        rx: 0,
        ry: 0
      },
      buildPath: function (ctx, shape) {
        var k = 0.5522848;
        var x = shape.cx;
        var y = shape.cy;
        var a = shape.rx;
        var b = shape.ry;
        var ox = a * k; // 水平控制点偏移量

        var oy = b * k; // 垂直控制点偏移量
        // 从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线

        ctx.moveTo(x - a, y);
        ctx.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);
        ctx.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);
        ctx.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);
        ctx.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);
        ctx.closePath();
      }
    });

    var Ellipse = _default$1f;

    var createFromString$1 = path$1.createFromString;



    var isString$5 = util.isString;
    var extend$5 = util.extend;
    var defaults$1 = util.defaults;
    var trim$2 = util.trim;
    var each$d = util.each;
    // import RadialGradient from '../graphic/RadialGradient';
    // import Pattern from '../graphic/Pattern';
    // import * as vector from '../core/vector';
    // Most of the values can be separated by comma and/or white space.
    var DILIMITER_REG = /[\s,]+/;
    /**
     * For big svg string, this method might be time consuming.
     *
     * @param {string} svg xml string
     * @return {Object} xml root.
     */

    function parseXML(svg) {
      if (isString$5(svg)) {
        var parser = new DOMParser();
        svg = parser.parseFromString(svg, 'text/xml');
      } // Document node. If using $.get, doc node may be input.


      if (svg.nodeType === 9) {
        svg = svg.firstChild;
      } // nodeName of <!DOCTYPE svg> is also 'svg'.


      while (svg.nodeName.toLowerCase() !== 'svg' || svg.nodeType !== 1) {
        svg = svg.nextSibling;
      }

      return svg;
    }

    function SVGParser() {
      this._defs = {};
      this._root = null;
      this._isDefine = false;
      this._isText = false;
    }

    SVGParser.prototype.parse = function (xml, opt) {
      opt = opt || {};
      var svg = parseXML(xml);

      if (!svg) {
        throw new Error('Illegal svg');
      }

      var root = new Group_1();
      this._root = root; // parse view port

      var viewBox = svg.getAttribute('viewBox') || ''; // If width/height not specified, means "100%" of `opt.width/height`.
      // TODO: Other percent value not supported yet.

      var width = parseFloat(svg.getAttribute('width') || opt.width);
      var height = parseFloat(svg.getAttribute('height') || opt.height); // If width/height not specified, set as null for output.

      isNaN(width) && (width = null);
      isNaN(height) && (height = null); // Apply inline style on svg element.

      parseAttributes(svg, root, null, true);
      var child = svg.firstChild;

      while (child) {
        this._parseNode(child, root);

        child = child.nextSibling;
      }

      var viewBoxRect;
      var viewBoxTransform;

      if (viewBox) {
        var viewBoxArr = trim$2(viewBox).split(DILIMITER_REG); // Some invalid case like viewBox: 'none'.

        if (viewBoxArr.length >= 4) {
          viewBoxRect = {
            x: parseFloat(viewBoxArr[0] || 0),
            y: parseFloat(viewBoxArr[1] || 0),
            width: parseFloat(viewBoxArr[2]),
            height: parseFloat(viewBoxArr[3])
          };
        }
      }

      if (viewBoxRect && width != null && height != null) {
        viewBoxTransform = makeViewBoxTransform(viewBoxRect, width, height);

        if (!opt.ignoreViewBox) {
          // If set transform on the output group, it probably bring trouble when
          // some users only intend to show the clipped content inside the viewBox,
          // but not intend to transform the output group. So we keep the output
          // group no transform. If the user intend to use the viewBox as a
          // camera, just set `opt.ignoreViewBox` as `true` and set transfrom
          // manually according to the viewBox info in the output of this method.
          var elRoot = root;
          root = new Group_1();
          root.add(elRoot);
          elRoot.scale = viewBoxTransform.scale.slice();
          elRoot.position = viewBoxTransform.position.slice();
        }
      } // Some shapes might be overflow the viewport, which should be
      // clipped despite whether the viewBox is used, as the SVG does.


      if (!opt.ignoreRootClip && width != null && height != null) {
        root.setClipPath(new Rect({
          shape: {
            x: 0,
            y: 0,
            width: width,
            height: height
          }
        }));
      } // Set width/height on group just for output the viewport size.


      return {
        root: root,
        width: width,
        height: height,
        viewBoxRect: viewBoxRect,
        viewBoxTransform: viewBoxTransform
      };
    };

    SVGParser.prototype._parseNode = function (xmlNode, parentGroup) {
      var nodeName = xmlNode.nodeName.toLowerCase(); // TODO
      // support <style>...</style> in svg, where nodeName is 'style',
      // CSS classes is defined globally wherever the style tags are declared.

      if (nodeName === 'defs') {
        // define flag
        this._isDefine = true;
      } else if (nodeName === 'text') {
        this._isText = true;
      }

      var el;

      if (this._isDefine) {
        var parser = defineParsers[nodeName];

        if (parser) {
          var def = parser.call(this, xmlNode);
          var id = xmlNode.getAttribute('id');

          if (id) {
            this._defs[id] = def;
          }
        }
      } else {
        var parser = nodeParsers[nodeName];

        if (parser) {
          el = parser.call(this, xmlNode, parentGroup);
          parentGroup.add(el);
        }
      }

      var child = xmlNode.firstChild;

      while (child) {
        if (child.nodeType === 1) {
          this._parseNode(child, el);
        } // Is text


        if (child.nodeType === 3 && this._isText) {
          this._parseText(child, el);
        }

        child = child.nextSibling;
      } // Quit define


      if (nodeName === 'defs') {
        this._isDefine = false;
      } else if (nodeName === 'text') {
        this._isText = false;
      }
    };

    SVGParser.prototype._parseText = function (xmlNode, parentGroup) {
      if (xmlNode.nodeType === 1) {
        var dx = xmlNode.getAttribute('dx') || 0;
        var dy = xmlNode.getAttribute('dy') || 0;
        this._textX += parseFloat(dx);
        this._textY += parseFloat(dy);
      }

      var text = new Text_1({
        style: {
          text: xmlNode.textContent,
          transformText: true
        },
        position: [this._textX || 0, this._textY || 0]
      });
      inheritStyle(parentGroup, text);
      parseAttributes(xmlNode, text, this._defs);
      var fontSize = text.style.fontSize;

      if (fontSize && fontSize < 9) {
        // PENDING
        text.style.fontSize = 9;
        text.scale = text.scale || [1, 1];
        text.scale[0] *= fontSize / 9;
        text.scale[1] *= fontSize / 9;
      }

      var rect = text.getBoundingRect();
      this._textX += rect.width;
      parentGroup.add(text);
      return text;
    };

    var nodeParsers = {
      'g': function (xmlNode, parentGroup) {
        var g = new Group_1();
        inheritStyle(parentGroup, g);
        parseAttributes(xmlNode, g, this._defs);
        return g;
      },
      'rect': function (xmlNode, parentGroup) {
        var rect = new Rect();
        inheritStyle(parentGroup, rect);
        parseAttributes(xmlNode, rect, this._defs);
        rect.setShape({
          x: parseFloat(xmlNode.getAttribute('x') || 0),
          y: parseFloat(xmlNode.getAttribute('y') || 0),
          width: parseFloat(xmlNode.getAttribute('width') || 0),
          height: parseFloat(xmlNode.getAttribute('height') || 0)
        }); // console.log(xmlNode.getAttribute('transform'));
        // console.log(rect.transform);

        return rect;
      },
      'circle': function (xmlNode, parentGroup) {
        var circle = new Circle();
        inheritStyle(parentGroup, circle);
        parseAttributes(xmlNode, circle, this._defs);
        circle.setShape({
          cx: parseFloat(xmlNode.getAttribute('cx') || 0),
          cy: parseFloat(xmlNode.getAttribute('cy') || 0),
          r: parseFloat(xmlNode.getAttribute('r') || 0)
        });
        return circle;
      },
      'line': function (xmlNode, parentGroup) {
        var line = new Line();
        inheritStyle(parentGroup, line);
        parseAttributes(xmlNode, line, this._defs);
        line.setShape({
          x1: parseFloat(xmlNode.getAttribute('x1') || 0),
          y1: parseFloat(xmlNode.getAttribute('y1') || 0),
          x2: parseFloat(xmlNode.getAttribute('x2') || 0),
          y2: parseFloat(xmlNode.getAttribute('y2') || 0)
        });
        return line;
      },
      'ellipse': function (xmlNode, parentGroup) {
        var ellipse = new Ellipse();
        inheritStyle(parentGroup, ellipse);
        parseAttributes(xmlNode, ellipse, this._defs);
        ellipse.setShape({
          cx: parseFloat(xmlNode.getAttribute('cx') || 0),
          cy: parseFloat(xmlNode.getAttribute('cy') || 0),
          rx: parseFloat(xmlNode.getAttribute('rx') || 0),
          ry: parseFloat(xmlNode.getAttribute('ry') || 0)
        });
        return ellipse;
      },
      'polygon': function (xmlNode, parentGroup) {
        var points = xmlNode.getAttribute('points');

        if (points) {
          points = parsePoints(points);
        }

        var polygon = new Polygon({
          shape: {
            points: points || []
          }
        });
        inheritStyle(parentGroup, polygon);
        parseAttributes(xmlNode, polygon, this._defs);
        return polygon;
      },
      'polyline': function (xmlNode, parentGroup) {
        var path = new Path_1();
        inheritStyle(parentGroup, path);
        parseAttributes(xmlNode, path, this._defs);
        var points = xmlNode.getAttribute('points');

        if (points) {
          points = parsePoints(points);
        }

        var polyline = new Polyline({
          shape: {
            points: points || []
          }
        });
        return polyline;
      },
      'image': function (xmlNode, parentGroup) {
        var img = new Image$1();
        inheritStyle(parentGroup, img);
        parseAttributes(xmlNode, img, this._defs);
        img.setStyle({
          image: xmlNode.getAttribute('xlink:href'),
          x: xmlNode.getAttribute('x'),
          y: xmlNode.getAttribute('y'),
          width: xmlNode.getAttribute('width'),
          height: xmlNode.getAttribute('height')
        });
        return img;
      },
      'text': function (xmlNode, parentGroup) {
        var x = xmlNode.getAttribute('x') || 0;
        var y = xmlNode.getAttribute('y') || 0;
        var dx = xmlNode.getAttribute('dx') || 0;
        var dy = xmlNode.getAttribute('dy') || 0;
        this._textX = parseFloat(x) + parseFloat(dx);
        this._textY = parseFloat(y) + parseFloat(dy);
        var g = new Group_1();
        inheritStyle(parentGroup, g);
        parseAttributes(xmlNode, g, this._defs);
        return g;
      },
      'tspan': function (xmlNode, parentGroup) {
        var x = xmlNode.getAttribute('x');
        var y = xmlNode.getAttribute('y');

        if (x != null) {
          // new offset x
          this._textX = parseFloat(x);
        }

        if (y != null) {
          // new offset y
          this._textY = parseFloat(y);
        }

        var dx = xmlNode.getAttribute('dx') || 0;
        var dy = xmlNode.getAttribute('dy') || 0;
        var g = new Group_1();
        inheritStyle(parentGroup, g);
        parseAttributes(xmlNode, g, this._defs);
        this._textX += dx;
        this._textY += dy;
        return g;
      },
      'path': function (xmlNode, parentGroup) {
        // TODO svg fill rule
        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
        // path.style.globalCompositeOperation = 'xor';
        var d = xmlNode.getAttribute('d') || ''; // Performance sensitive.

        var path = createFromString$1(d);
        inheritStyle(parentGroup, path);
        parseAttributes(xmlNode, path, this._defs);
        return path;
      }
    };
    var defineParsers = {
      'lineargradient': function (xmlNode) {
        var x1 = parseInt(xmlNode.getAttribute('x1') || 0, 10);
        var y1 = parseInt(xmlNode.getAttribute('y1') || 0, 10);
        var x2 = parseInt(xmlNode.getAttribute('x2') || 10, 10);
        var y2 = parseInt(xmlNode.getAttribute('y2') || 0, 10);
        var gradient = new LinearGradient_1(x1, y1, x2, y2);

        _parseGradientColorStops(xmlNode, gradient);

        return gradient;
      },
      'radialgradient': function (xmlNode) {}
    };

    function _parseGradientColorStops(xmlNode, gradient) {
      var stop = xmlNode.firstChild;

      while (stop) {
        if (stop.nodeType === 1) {
          var offset = stop.getAttribute('offset');

          if (offset.indexOf('%') > 0) {
            // percentage
            offset = parseInt(offset, 10) / 100;
          } else if (offset) {
            // number from 0 to 1
            offset = parseFloat(offset);
          } else {
            offset = 0;
          }

          var stopColor = stop.getAttribute('stop-color') || '#000000';
          gradient.addColorStop(offset, stopColor);
        }

        stop = stop.nextSibling;
      }
    }

    function inheritStyle(parent, child) {
      if (parent && parent.__inheritedStyle) {
        if (!child.__inheritedStyle) {
          child.__inheritedStyle = {};
        }

        defaults$1(child.__inheritedStyle, parent.__inheritedStyle);
      }
    }

    function parsePoints(pointsString) {
      var list = trim$2(pointsString).split(DILIMITER_REG);
      var points = [];

      for (var i = 0; i < list.length; i += 2) {
        var x = parseFloat(list[i]);
        var y = parseFloat(list[i + 1]);
        points.push([x, y]);
      }

      return points;
    }

    var attributesMap = {
      'fill': 'fill',
      'stroke': 'stroke',
      'stroke-width': 'lineWidth',
      'opacity': 'opacity',
      'fill-opacity': 'fillOpacity',
      'stroke-opacity': 'strokeOpacity',
      'stroke-dasharray': 'lineDash',
      'stroke-dashoffset': 'lineDashOffset',
      'stroke-linecap': 'lineCap',
      'stroke-linejoin': 'lineJoin',
      'stroke-miterlimit': 'miterLimit',
      'font-family': 'fontFamily',
      'font-size': 'fontSize',
      'font-style': 'fontStyle',
      'font-weight': 'fontWeight',
      'text-align': 'textAlign',
      'alignment-baseline': 'textBaseline'
    };

    function parseAttributes(xmlNode, el, defs, onlyInlineStyle) {
      var zrStyle = el.__inheritedStyle || {};
      var isTextEl = el.type === 'text'; // TODO Shadow

      if (xmlNode.nodeType === 1) {
        parseTransformAttribute(xmlNode, el);
        extend$5(zrStyle, parseStyleAttribute(xmlNode));

        if (!onlyInlineStyle) {
          for (var svgAttrName in attributesMap) {
            if (attributesMap.hasOwnProperty(svgAttrName)) {
              var attrValue = xmlNode.getAttribute(svgAttrName);

              if (attrValue != null) {
                zrStyle[attributesMap[svgAttrName]] = attrValue;
              }
            }
          }
        }
      }

      var elFillProp = isTextEl ? 'textFill' : 'fill';
      var elStrokeProp = isTextEl ? 'textStroke' : 'stroke';
      el.style = el.style || new Style_1();
      var elStyle = el.style;
      zrStyle.fill != null && elStyle.set(elFillProp, getPaint(zrStyle.fill, defs));
      zrStyle.stroke != null && elStyle.set(elStrokeProp, getPaint(zrStyle.stroke, defs));
      each$d(['lineWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'miterLimit', 'fontSize'], function (propName) {
        var elPropName = propName === 'lineWidth' && isTextEl ? 'textStrokeWidth' : propName;
        zrStyle[propName] != null && elStyle.set(elPropName, parseFloat(zrStyle[propName]));
      });

      if (!zrStyle.textBaseline || zrStyle.textBaseline === 'auto') {
        zrStyle.textBaseline = 'alphabetic';
      }

      if (zrStyle.textBaseline === 'alphabetic') {
        zrStyle.textBaseline = 'bottom';
      }

      if (zrStyle.textAlign === 'start') {
        zrStyle.textAlign = 'left';
      }

      if (zrStyle.textAlign === 'end') {
        zrStyle.textAlign = 'right';
      }

      each$d(['lineDashOffset', 'lineCap', 'lineJoin', 'fontWeight', 'fontFamily', 'fontStyle', 'textAlign', 'textBaseline'], function (propName) {
        zrStyle[propName] != null && elStyle.set(propName, zrStyle[propName]);
      });

      if (zrStyle.lineDash) {
        el.style.lineDash = trim$2(zrStyle.lineDash).split(DILIMITER_REG);
      }

      if (elStyle[elStrokeProp] && elStyle[elStrokeProp] !== 'none') {
        // enable stroke
        el[elStrokeProp] = true;
      }

      el.__inheritedStyle = zrStyle;
    }

    var urlRegex = /url\(\s*#(.*?)\)/;

    function getPaint(str, defs) {
      // if (str === 'none') {
      //     return;
      // }
      var urlMatch = defs && str && str.match(urlRegex);

      if (urlMatch) {
        var url = trim$2(urlMatch[1]);
        var def = defs[url];
        return def;
      }

      return str;
    }

    var transformRegex = /(translate|scale|rotate|skewX|skewY|matrix)\(([\-\s0-9\.e,]*)\)/g;

    function parseTransformAttribute(xmlNode, node) {
      var transform = xmlNode.getAttribute('transform');

      if (transform) {
        transform = transform.replace(/,/g, ' ');
        var m = null;
        var transformOps = [];
        transform.replace(transformRegex, function (str, type, value) {
          transformOps.push(type, value);
        });

        for (var i = transformOps.length - 1; i > 0; i -= 2) {
          var value = transformOps[i];
          var type = transformOps[i - 1];
          m = m || matrix.create();

          switch (type) {
            case 'translate':
              value = trim$2(value).split(DILIMITER_REG);
              matrix.translate(m, m, [parseFloat(value[0]), parseFloat(value[1] || 0)]);
              break;

            case 'scale':
              value = trim$2(value).split(DILIMITER_REG);
              matrix.scale(m, m, [parseFloat(value[0]), parseFloat(value[1] || value[0])]);
              break;

            case 'rotate':
              value = trim$2(value).split(DILIMITER_REG);
              matrix.rotate(m, m, parseFloat(value[0]));
              break;

            case 'skew':
              value = trim$2(value).split(DILIMITER_REG);
              console.warn('Skew transform is not supported yet');
              break;

            case 'matrix':
              var value = trim$2(value).split(DILIMITER_REG);
              m[0] = parseFloat(value[0]);
              m[1] = parseFloat(value[1]);
              m[2] = parseFloat(value[2]);
              m[3] = parseFloat(value[3]);
              m[4] = parseFloat(value[4]);
              m[5] = parseFloat(value[5]);
              break;
          }
        }

        node.setLocalTransform(m);
      }
    } // Value may contain space.


    var styleRegex = /([^\s:;]+)\s*:\s*([^:;]+)/g;

    function parseStyleAttribute(xmlNode) {
      var style = xmlNode.getAttribute('style');
      var result = {};

      if (!style) {
        return result;
      }

      var styleList = {};
      styleRegex.lastIndex = 0;
      var styleRegResult;

      while ((styleRegResult = styleRegex.exec(style)) != null) {
        styleList[styleRegResult[1]] = styleRegResult[2];
      }

      for (var svgAttrName in attributesMap) {
        if (attributesMap.hasOwnProperty(svgAttrName) && styleList[svgAttrName] != null) {
          result[attributesMap[svgAttrName]] = styleList[svgAttrName];
        }
      }

      return result;
    }
    /**
     * @param {Array.<number>} viewBoxRect
     * @param {number} width
     * @param {number} height
     * @return {Object} {scale, position}
     */


    function makeViewBoxTransform(viewBoxRect, width, height) {
      var scaleX = width / viewBoxRect.width;
      var scaleY = height / viewBoxRect.height;
      var scale = Math.min(scaleX, scaleY); // preserveAspectRatio 'xMidYMid'

      var viewBoxScale = [scale, scale];
      var viewBoxPosition = [-(viewBoxRect.x + viewBoxRect.width / 2) * scale + width / 2, -(viewBoxRect.y + viewBoxRect.height / 2) * scale + height / 2];
      return {
        scale: viewBoxScale,
        position: viewBoxPosition
      };
    }
    /**
     * @param {string|XMLElement} xml
     * @param {Object} [opt]
     * @param {number} [opt.width] Default width if svg width not specified or is a percent value.
     * @param {number} [opt.height] Default height if svg height not specified or is a percent value.
     * @param {boolean} [opt.ignoreViewBox]
     * @param {boolean} [opt.ignoreRootClip]
     * @return {Object} result:
     * {
     *     root: Group, The root of the the result tree of zrender shapes,
     *     width: number, the viewport width of the SVG,
     *     height: number, the viewport height of the SVG,
     *     viewBoxRect: {x, y, width, height}, the declared viewBox rect of the SVG, if exists,
     *     viewBoxTransform: the {scale, position} calculated by viewBox and viewport, is exists.
     * }
     */


    function parseSVG(xml, opt) {
      var parser = new SVGParser();
      return parser.parse(xml, opt);
    }

    var parseXML_1 = parseXML;
    var makeViewBoxTransform_1 = makeViewBoxTransform;
    var parseSVG_2 = parseSVG;

    var parseSVG_1 = {
    	parseXML: parseXML_1,
    	makeViewBoxTransform: makeViewBoxTransform_1,
    	parseSVG: parseSVG_2
    };

    var createHashMap$6 = util.createHashMap;
    var isString$6 = util.isString;
    var isArray$6 = util.isArray;
    var each$e = util.each;



    var parseXML$1 = parseSVG_1.parseXML;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var storage = createHashMap$6(); // For minimize the code size of common echarts package,
    // do not put too much logic in this module.

    var _default$1g = {
      // The format of record: see `echarts.registerMap`.
      // Compatible with previous `echarts.registerMap`.
      registerMap: function (mapName, rawGeoJson, rawSpecialAreas) {
        var records;

        if (isArray$6(rawGeoJson)) {
          records = rawGeoJson;
        } else if (rawGeoJson.svg) {
          records = [{
            type: 'svg',
            source: rawGeoJson.svg,
            specialAreas: rawGeoJson.specialAreas
          }];
        } else {
          // Backward compatibility.
          if (rawGeoJson.geoJson && !rawGeoJson.features) {
            rawSpecialAreas = rawGeoJson.specialAreas;
            rawGeoJson = rawGeoJson.geoJson;
          }

          records = [{
            type: 'geoJSON',
            source: rawGeoJson,
            specialAreas: rawSpecialAreas
          }];
        }

        each$e(records, function (record) {
          var type = record.type;
          type === 'geoJson' && (type = record.type = 'geoJSON');
          var parse = parsers[type];
          parse(record);
        });
        return storage.set(mapName, records);
      },
      retrieveMap: function (mapName) {
        return storage.get(mapName);
      }
    };
    var parsers = {
      geoJSON: function (record) {
        var source = record.source;
        record.geoJSON = !isString$6(source) ? source : typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(source) : new Function('return (' + source + ');')();
      },
      // Only perform parse to XML object here, which might be time
      // consiming for large SVG.
      // Although convert XML to zrender element is also time consiming,
      // if we do it here, the clone of zrender elements has to be
      // required. So we do it once for each geo instance, util real
      // performance issues call for optimizing it.
      svg: function (record) {
        record.svgXML = parseXML$1(record.source);
      }
    };
    var mapDataStorage = _default$1g;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    function defaultKeyGetter(item) {
      return item;
    }
    /**
     * @param {Array} oldArr
     * @param {Array} newArr
     * @param {Function} oldKeyGetter
     * @param {Function} newKeyGetter
     * @param {Object} [context] Can be visited by this.context in callback.
     */


    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {
      this._old = oldArr;
      this._new = newArr;
      this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
      this._newKeyGetter = newKeyGetter || defaultKeyGetter;
      this.context = context;
    }

    DataDiffer.prototype = {
      constructor: DataDiffer,

      /**
       * Callback function when add a data
       */
      add: function (func) {
        this._add = func;
        return this;
      },

      /**
       * Callback function when update a data
       */
      update: function (func) {
        this._update = func;
        return this;
      },

      /**
       * Callback function when remove a data
       */
      remove: function (func) {
        this._remove = func;
        return this;
      },
      execute: function () {
        var oldArr = this._old;
        var newArr = this._new;
        var oldDataIndexMap = {};
        var newDataIndexMap = {};
        var oldDataKeyArr = [];
        var newDataKeyArr = [];
        var i;
        initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, '_oldKeyGetter', this);
        initIndexMap(newArr, newDataIndexMap, newDataKeyArr, '_newKeyGetter', this);

        for (i = 0; i < oldArr.length; i++) {
          var key = oldDataKeyArr[i];
          var idx = newDataIndexMap[key]; // idx can never be empty array here. see 'set null' logic below.

          if (idx != null) {
            // Consider there is duplicate key (for example, use dataItem.name as key).
            // We should make sure every item in newArr and oldArr can be visited.
            var len = idx.length;

            if (len) {
              len === 1 && (newDataIndexMap[key] = null);
              idx = idx.shift();
            } else {
              newDataIndexMap[key] = null;
            }

            this._update && this._update(idx, i);
          } else {
            this._remove && this._remove(i);
          }
        }

        for (var i = 0; i < newDataKeyArr.length; i++) {
          var key = newDataKeyArr[i];

          if (newDataIndexMap.hasOwnProperty(key)) {
            var idx = newDataIndexMap[key];

            if (idx == null) {
              continue;
            } // idx can never be empty array here. see 'set null' logic above.


            if (!idx.length) {
              this._add && this._add(idx);
            } else {
              for (var j = 0, len = idx.length; j < len; j++) {
                this._add && this._add(idx[j]);
              }
            }
          }
        }
      }
    };

    function initIndexMap(arr, map, keyArr, keyGetterName, dataDiffer) {
      for (var i = 0; i < arr.length; i++) {
        // Add prefix to avoid conflict with Object.prototype.
        var key = '_ec_' + dataDiffer[keyGetterName](arr[i], i);
        var existence = map[key];

        if (existence == null) {
          keyArr.push(key);
          map[key] = i;
        } else {
          if (!existence.length) {
            map[key] = existence = [existence];
          }

          existence.push(i);
        }
      }
    }

    var _default$1h = DataDiffer;
    var DataDiffer_1 = _default$1h;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var each$f = util.each;
    var createHashMap$7 = util.createHashMap;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var OTHER_DIMENSIONS = createHashMap$7(['tooltip', 'label', 'itemName', 'itemId', 'seriesName']);

    function summarizeDimensions(data) {
      var summary = {};
      var encode = summary.encode = {};
      var notExtraCoordDimMap = createHashMap$7();
      var defaultedLabel = [];
      var defaultedTooltip = []; // See the comment of `List.js#userOutput`.

      var userOutput = summary.userOutput = {
        dimensionNames: data.dimensions.slice(),
        encode: {}
      };
      each$f(data.dimensions, function (dimName) {
        var dimItem = data.getDimensionInfo(dimName);
        var coordDim = dimItem.coordDim;

        if (coordDim) {
          var coordDimIndex = dimItem.coordDimIndex;
          getOrCreateEncodeArr(encode, coordDim)[coordDimIndex] = dimName;

          if (!dimItem.isExtraCoord) {
            notExtraCoordDimMap.set(coordDim, 1); // Use the last coord dim (and label friendly) as default label,
            // because when dataset is used, it is hard to guess which dimension
            // can be value dimension. If both show x, y on label is not look good,
            // and conventionally y axis is focused more.

            if (mayLabelDimType(dimItem.type)) {
              defaultedLabel[0] = dimName;
            } // User output encode do not contain generated coords.
            // And it only has index. User can use index to retrieve value from the raw item array.


            getOrCreateEncodeArr(userOutput.encode, coordDim)[coordDimIndex] = dimItem.index;
          }

          if (dimItem.defaultTooltip) {
            defaultedTooltip.push(dimName);
          }
        }

        OTHER_DIMENSIONS.each(function (v, otherDim) {
          var encodeArr = getOrCreateEncodeArr(encode, otherDim);
          var dimIndex = dimItem.otherDims[otherDim];

          if (dimIndex != null && dimIndex !== false) {
            encodeArr[dimIndex] = dimItem.name;
          }
        });
      });
      var dataDimsOnCoord = [];
      var encodeFirstDimNotExtra = {};
      notExtraCoordDimMap.each(function (v, coordDim) {
        var dimArr = encode[coordDim]; // ??? FIXME extra coord should not be set in dataDimsOnCoord.
        // But should fix the case that radar axes: simplify the logic
        // of `completeDimension`, remove `extraPrefix`.

        encodeFirstDimNotExtra[coordDim] = dimArr[0]; // Not necessary to remove duplicate, because a data
        // dim canot on more than one coordDim.

        dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);
      });
      summary.dataDimsOnCoord = dataDimsOnCoord;
      summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;
      var encodeLabel = encode.label; // FIXME `encode.label` is not recommanded, because formatter can not be set
      // in this way. Use label.formatter instead. May be remove this approach someday.

      if (encodeLabel && encodeLabel.length) {
        defaultedLabel = encodeLabel.slice();
      }

      var encodeTooltip = encode.tooltip;

      if (encodeTooltip && encodeTooltip.length) {
        defaultedTooltip = encodeTooltip.slice();
      } else if (!defaultedTooltip.length) {
        defaultedTooltip = defaultedLabel.slice();
      }

      encode.defaultedLabel = defaultedLabel;
      encode.defaultedTooltip = defaultedTooltip;
      return summary;
    }

    function getOrCreateEncodeArr(encode, dim) {
      if (!encode.hasOwnProperty(dim)) {
        encode[dim] = [];
      }

      return encode[dim];
    }

    function getDimensionTypeByAxis(axisType) {
      return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
    }

    function mayLabelDimType(dimType) {
      // In most cases, ordinal and time do not suitable for label.
      // Ordinal info can be displayed on axis. Time is too long.
      return !(dimType === 'ordinal' || dimType === 'time');
    } // function findTheLastDimMayLabel(data) {
    //     // Get last value dim
    //     var dimensions = data.dimensions.slice();
    //     var valueType;
    //     var valueDim;
    //     while (dimensions.length && (
    //         valueDim = dimensions.pop(),
    //         valueType = data.getDimensionInfo(valueDim).type,
    //         valueType === 'ordinal' || valueType === 'time'
    //     )) {} // jshint ignore:line
    //     return valueDim;
    // }


    var OTHER_DIMENSIONS_1 = OTHER_DIMENSIONS;
    var summarizeDimensions_1 = summarizeDimensions;
    var getDimensionTypeByAxis_1 = getDimensionTypeByAxis;

    var dimensionHelper = {
    	OTHER_DIMENSIONS: OTHER_DIMENSIONS_1,
    	summarizeDimensions: summarizeDimensions_1,
    	getDimensionTypeByAxis: getDimensionTypeByAxis_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @class
     * @param {Object|DataDimensionInfo} [opt] All of the fields will be shallow copied.
     */
    function DataDimensionInfo(opt) {
      if (opt != null) {
        util.extend(this, opt);
      }
      /**
       * Dimension name.
       * Mandatory.
       * @type {string}
       */
      // this.name;

      /**
       * The origin name in dimsDef, see source helper.
       * If displayName given, the tooltip will displayed vertically.
       * Optional.
       * @type {string}
       */
      // this.displayName;

      /**
       * Which coordSys dimension this dimension mapped to.
       * A `coordDim` can be a "coordSysDim" that the coordSys required
       * (for example, an item in `coordSysDims` of `model/referHelper#CoordSysInfo`),
       * or an generated "extra coord name" if does not mapped to any "coordSysDim"
       * (That is determined by whether `isExtraCoord` is `true`).
       * Mandatory.
       * @type {string}
       */
      // this.coordDim;

      /**
       * The index of this dimension in `series.encode[coordDim]`.
       * Mandatory.
       * @type {number}
       */
      // this.coordDimIndex;

      /**
       * Dimension type. The enumerable values are the key of
       * `dataCtors` of `data/List`.
       * Optional.
       * @type {string}
       */
      // this.type;

      /**
       * This index of this dimension info in `data/List#_dimensionInfos`.
       * Mandatory after added to `data/List`.
       * @type {number}
       */
      // this.index;

      /**
       * The format of `otherDims` is:
       * ```js
       * {
       *     tooltip: number optional,
       *     label: number optional,
       *     itemName: number optional,
       *     seriesName: number optional,
       * }
       * ```
       *
       * A `series.encode` can specified these fields:
       * ```js
       * encode: {
       *     // "3, 1, 5" is the index of data dimension.
       *     tooltip: [3, 1, 5],
       *     label: [0, 3],
       *     ...
       * }
       * ```
       * `otherDims` is the parse result of the `series.encode` above, like:
       * ```js
       * // Suppose the index of this data dimension is `3`.
       * this.otherDims = {
       *     // `3` is at the index `0` of the `encode.tooltip`
       *     tooltip: 0,
       *     // `3` is at the index `1` of the `encode.tooltip`
       *     label: 1
       * };
       * ```
       *
       * This prop should never be `null`/`undefined` after initialized.
       * @type {Object}
       */


      this.otherDims = {};
      /**
       * Be `true` if this dimension is not mapped to any "coordSysDim" that the
       * "coordSys" required.
       * Mandatory.
       * @type {boolean}
       */
      // this.isExtraCoord;

      /**
       * @type {module:data/OrdinalMeta}
       */
      // this.ordinalMeta;

      /**
       * Whether to create inverted indices.
       * @type {boolean}
       */
      // this.createInvertedIndices;
    }
    var _default$1i = DataDimensionInfo;
    var DataDimensionInfo_1 = _default$1i;

    var defaultDimValueGetters$1 = dataProvider.defaultDimValueGetters;
    var DefaultDataProvider$1 = dataProvider.DefaultDataProvider;



    var summarizeDimensions$1 = dimensionHelper.summarizeDimensions;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /* global Float64Array, Int32Array, Uint32Array, Uint16Array */

    /**
     * List for data storage
     * @module echarts/data/List
     */
    var isObject$9 = util.isObject;
    var UNDEFINED = 'undefined';
    var INDEX_NOT_FOUND = -1; // Use prefix to avoid index to be the same as otherIdList[idx],
    // which will cause weird udpate animation.

    var ID_PREFIX = 'e\0\0';
    var dataCtors = {
      'float': typeof Float64Array === UNDEFINED ? Array : Float64Array,
      'int': typeof Int32Array === UNDEFINED ? Array : Int32Array,
      // Ordinal data type can be string or int
      'ordinal': Array,
      'number': Array,
      'time': Array
    }; // Caution: MUST not use `new CtorUint32Array(arr, 0, len)`, because the Ctor of array is
    // different from the Ctor of typed array.

    var CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;
    var CtorInt32Array = typeof Int32Array === UNDEFINED ? Array : Int32Array;
    var CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;

    function getIndicesCtor(list) {
      // The possible max value in this._indicies is always this._rawCount despite of filtering.
      return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;
    }

    function cloneChunk(originalChunk) {
      var Ctor = originalChunk.constructor; // Only shallow clone is enough when Array.

      return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);
    }

    var TRANSFERABLE_PROPERTIES = ['hasItemOption', '_nameList', '_idList', '_invertedIndicesMap', '_rawData', '_chunkSize', '_chunkCount', '_dimValueGetter', '_count', '_rawCount', '_nameDimIdx', '_idDimIdx'];
    var CLONE_PROPERTIES = ['_extent', '_approximateExtent', '_rawExtent'];

    function transferProperties(target, source) {
      util.each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function (propName) {
        if (source.hasOwnProperty(propName)) {
          target[propName] = source[propName];
        }
      });
      target.__wrappedMethods = source.__wrappedMethods;
      util.each(CLONE_PROPERTIES, function (propName) {
        target[propName] = util.clone(source[propName]);
      });
      target._calculationInfo = util.extend(source._calculationInfo);
    }
    /**
     * @constructor
     * @alias module:echarts/data/List
     *
     * @param {Array.<string|Object|module:data/DataDimensionInfo>} dimensions
     *      For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].
     *      Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
     * @param {module:echarts/model/Model} hostModel
     */


    var List = function (dimensions, hostModel) {
      dimensions = dimensions || ['x', 'y'];
      var dimensionInfos = {};
      var dimensionNames = [];
      var invertedIndicesMap = {};

      for (var i = 0; i < dimensions.length; i++) {
        // Use the original dimensions[i], where other flag props may exists.
        var dimensionInfo = dimensions[i];

        if (util.isString(dimensionInfo)) {
          dimensionInfo = new DataDimensionInfo_1({
            name: dimensionInfo
          });
        } else if (!(dimensionInfo instanceof DataDimensionInfo_1)) {
          dimensionInfo = new DataDimensionInfo_1(dimensionInfo);
        }

        var dimensionName = dimensionInfo.name;
        dimensionInfo.type = dimensionInfo.type || 'float';

        if (!dimensionInfo.coordDim) {
          dimensionInfo.coordDim = dimensionName;
          dimensionInfo.coordDimIndex = 0;
        }

        dimensionInfo.otherDims = dimensionInfo.otherDims || {};
        dimensionNames.push(dimensionName);
        dimensionInfos[dimensionName] = dimensionInfo;
        dimensionInfo.index = i;

        if (dimensionInfo.createInvertedIndices) {
          invertedIndicesMap[dimensionName] = [];
        }
      }
      /**
       * @readOnly
       * @type {Array.<string>}
       */


      this.dimensions = dimensionNames;
      /**
       * Infomation of each data dimension, like data type.
       * @type {Object}
       */

      this._dimensionInfos = dimensionInfos;
      /**
       * @type {module:echarts/model/Model}
       */

      this.hostModel = hostModel;
      /**
       * @type {module:echarts/model/Model}
       */

      this.dataType;
      /**
       * Indices stores the indices of data subset after filtered.
       * This data subset will be used in chart.
       * @type {Array.<number>}
       * @readOnly
       */

      this._indices = null;
      this._count = 0;
      this._rawCount = 0;
      /**
       * Data storage
       * @type {Object.<key, Array.<TypedArray|Array>>}
       * @private
       */

      this._storage = {};
      /**
       * @type {Array.<string>}
       */

      this._nameList = [];
      /**
       * @type {Array.<string>}
       */

      this._idList = [];
      /**
       * Models of data option is stored sparse for optimizing memory cost
       * @type {Array.<module:echarts/model/Model>}
       * @private
       */

      this._optionModels = [];
      /**
       * Global visual properties after visual coding
       * @type {Object}
       * @private
       */

      this._visual = {};
      /**
       * Globel layout properties.
       * @type {Object}
       * @private
       */

      this._layout = {};
      /**
       * Item visual properties after visual coding
       * @type {Array.<Object>}
       * @private
       */

      this._itemVisuals = [];
      /**
       * Key: visual type, Value: boolean
       * @type {Object}
       * @readOnly
       */

      this.hasItemVisual = {};
      /**
       * Item layout properties after layout
       * @type {Array.<Object>}
       * @private
       */

      this._itemLayouts = [];
      /**
       * Graphic elemnents
       * @type {Array.<module:zrender/Element>}
       * @private
       */

      this._graphicEls = [];
      /**
       * Max size of each chunk.
       * @type {number}
       * @private
       */

      this._chunkSize = 1e5;
      /**
       * @type {number}
       * @private
       */

      this._chunkCount = 0;
      /**
       * @type {Array.<Array|Object>}
       * @private
       */

      this._rawData;
      /**
       * Raw extent will not be cloned, but only transfered.
       * It will not be calculated util needed.
       * key: dim,
       * value: {end: number, extent: Array.<number>}
       * @type {Object}
       * @private
       */

      this._rawExtent = {};
      /**
       * @type {Object}
       * @private
       */

      this._extent = {};
      /**
       * key: dim
       * value: extent
       * @type {Object}
       * @private
       */

      this._approximateExtent = {};
      /**
       * Cache summary info for fast visit. See "dimensionHelper".
       * @type {Object}
       * @private
       */

      this._dimensionsSummary = summarizeDimensions$1(this);
      /**
       * @type {Object.<Array|TypedArray>}
       * @private
       */

      this._invertedIndicesMap = invertedIndicesMap;
      /**
       * @type {Object}
       * @private
       */

      this._calculationInfo = {};
      /**
       * User output info of this data.
       * DO NOT use it in other places!
       *
       * When preparing user params for user callbacks, we have
       * to clone these inner data structures to prevent users
       * from modifying them to effect built-in logic. And for
       * performance consideration we make this `userOutput` to
       * avoid clone them too many times.
       *
       * @type {Object}
       * @readOnly
       */

      this.userOutput = this._dimensionsSummary.userOutput;
    };

    var listProto = List.prototype;
    listProto.type = 'list';
    /**
     * If each data item has it's own option
     * @type {boolean}
     */

    listProto.hasItemOption = true;
    /**
     * The meanings of the input parameter `dim`:
     *
     * + If dim is a number (e.g., `1`), it means the index of the dimension.
     *   For example, `getDimension(0)` will return 'x' or 'lng' or 'radius'.
     * + If dim is a number-like string (e.g., `"1"`):
     *     + If there is the same concrete dim name defined in `this.dimensions`, it means that concrete name.
     *     + If not, it will be converted to a number, which means the index of the dimension.
     *        (why? because of the backward compatbility. We have been tolerating number-like string in
     *        dimension setting, although now it seems that it is not a good idea.)
     *     For example, `visualMap[i].dimension: "1"` is the same meaning as `visualMap[i].dimension: 1`,
     *     if no dimension name is defined as `"1"`.
     * + If dim is a not-number-like string, it means the concrete dim name.
     *   For example, it can be be default name `"x"`, `"y"`, `"z"`, `"lng"`, `"lat"`, `"angle"`, `"radius"`,
     *   or customized in `dimensions` property of option like `"age"`.
     *
     * Get dimension name
     * @param {string|number} dim See above.
     * @return {string} Concrete dim name.
     */

    listProto.getDimension = function (dim) {
      if (typeof dim === 'number' // If being a number-like string but not being defined a dimension name.
      || !isNaN(dim) && !this._dimensionInfos.hasOwnProperty(dim)) {
        dim = this.dimensions[dim];
      }

      return dim;
    };
    /**
     * Get type and calculation info of particular dimension
     * @param {string|number} dim
     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
     */


    listProto.getDimensionInfo = function (dim) {
      // Do not clone, because there may be categories in dimInfo.
      return this._dimensionInfos[this.getDimension(dim)];
    };
    /**
     * @return {Array.<string>} concrete dimension name list on coord.
     */


    listProto.getDimensionsOnCoord = function () {
      return this._dimensionsSummary.dataDimsOnCoord.slice();
    };
    /**
     * @param {string} coordDim
     * @param {number} [idx] A coordDim may map to more than one data dim.
     *        If idx is `true`, return a array of all mapped dims.
     *        If idx is not specified, return the first dim not extra.
     * @return {string|Array.<string>} concrete data dim.
     *        If idx is number, and not found, return null/undefined.
     *        If idx is `true`, and not found, return empty array (always return array).
     */


    listProto.mapDimension = function (coordDim, idx) {
      var dimensionsSummary = this._dimensionsSummary;

      if (idx == null) {
        return dimensionsSummary.encodeFirstDimNotExtra[coordDim];
      }

      var dims = dimensionsSummary.encode[coordDim];
      return idx === true // always return array if idx is `true`
      ? (dims || []).slice() : dims && dims[idx];
    };
    /**
     * Initialize from data
     * @param {Array.<Object|number|Array>} data source or data or data provider.
     * @param {Array.<string>} [nameLIst] The name of a datum is used on data diff and
     *        defualt label/tooltip.
     *        A name can be specified in encode.itemName,
     *        or dataItem.name (only for series option data),
     *        or provided in nameList from outside.
     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
     */


    listProto.initData = function (data, nameList, dimValueGetter) {
      var notProvider = Source_1.isInstance(data) || util.isArrayLike(data);

      if (notProvider) {
        data = new DefaultDataProvider$1(data, this.dimensions.length);
      }

      this._rawData = data; // Clear

      this._storage = {};
      this._indices = null;
      this._nameList = nameList || [];
      this._idList = [];
      this._nameRepeatCount = {};

      if (!dimValueGetter) {
        this.hasItemOption = false;
      }
      /**
       * @readOnly
       */


      this.defaultDimValueGetter = defaultDimValueGetters$1[this._rawData.getSource().sourceFormat]; // Default dim value getter

      this._dimValueGetter = dimValueGetter = dimValueGetter || this.defaultDimValueGetter;
      this._dimValueGetterArrayRows = defaultDimValueGetters$1.arrayRows; // Reset raw extent.

      this._rawExtent = {};

      this._initDataFromProvider(0, data.count()); // If data has no item option.


      if (data.pure) {
        this.hasItemOption = false;
      }
    };

    listProto.getProvider = function () {
      return this._rawData;
    };
    /**
     * Caution: Can be only called on raw data (before `this._indices` created).
     */


    listProto.appendData = function (data) {
      var rawData = this._rawData;
      var start = this.count();
      rawData.appendData(data);
      var end = rawData.count();

      if (!rawData.persistent) {
        end += start;
      }

      this._initDataFromProvider(start, end);
    };
    /**
     * Caution: Can be only called on raw data (before `this._indices` created).
     * This method does not modify `rawData` (`dataProvider`), but only
     * add values to storage.
     *
     * The final count will be increased by `Math.max(values.length, names.length)`.
     *
     * @param {Array.<Array.<*>>} values That is the SourceType: 'arrayRows', like
     *        [
     *            [12, 33, 44],
     *            [NaN, 43, 1],
     *            ['-', 'asdf', 0]
     *        ]
     *        Each item is exaclty cooresponding to a dimension.
     * @param {Array.<string>} [names]
     */


    listProto.appendValues = function (values, names) {
      var chunkSize = this._chunkSize;
      var storage = this._storage;
      var dimensions = this.dimensions;
      var dimLen = dimensions.length;
      var rawExtent = this._rawExtent;
      var start = this.count();
      var end = start + Math.max(values.length, names ? names.length : 0);
      var originalChunkCount = this._chunkCount;

      for (var i = 0; i < dimLen; i++) {
        var dim = dimensions[i];

        if (!rawExtent[dim]) {
          rawExtent[dim] = getInitialExtent();
        }

        if (!storage[dim]) {
          storage[dim] = [];
        }

        prepareChunks(storage, this._dimensionInfos[dim], chunkSize, originalChunkCount, end);
        this._chunkCount = storage[dim].length;
      }

      var emptyDataItem = new Array(dimLen);

      for (var idx = start; idx < end; idx++) {
        var sourceIdx = idx - start;
        var chunkIndex = Math.floor(idx / chunkSize);
        var chunkOffset = idx % chunkSize; // Store the data by dimensions

        for (var k = 0; k < dimLen; k++) {
          var dim = dimensions[k];

          var val = this._dimValueGetterArrayRows(values[sourceIdx] || emptyDataItem, dim, sourceIdx, k);

          storage[dim][chunkIndex][chunkOffset] = val;
          var dimRawExtent = rawExtent[dim];
          val < dimRawExtent[0] && (dimRawExtent[0] = val);
          val > dimRawExtent[1] && (dimRawExtent[1] = val);
        }

        if (names) {
          this._nameList[idx] = names[sourceIdx];
        }
      }

      this._rawCount = this._count = end; // Reset data extent

      this._extent = {};
      prepareInvertedIndex(this);
    };

    listProto._initDataFromProvider = function (start, end) {
      // Optimize.
      if (start >= end) {
        return;
      }

      var chunkSize = this._chunkSize;
      var rawData = this._rawData;
      var storage = this._storage;
      var dimensions = this.dimensions;
      var dimLen = dimensions.length;
      var dimensionInfoMap = this._dimensionInfos;
      var nameList = this._nameList;
      var idList = this._idList;
      var rawExtent = this._rawExtent;
      var nameRepeatCount = this._nameRepeatCount = {};
      var nameDimIdx;
      var originalChunkCount = this._chunkCount;

      for (var i = 0; i < dimLen; i++) {
        var dim = dimensions[i];

        if (!rawExtent[dim]) {
          rawExtent[dim] = getInitialExtent();
        }

        var dimInfo = dimensionInfoMap[dim];

        if (dimInfo.otherDims.itemName === 0) {
          nameDimIdx = this._nameDimIdx = i;
        }

        if (dimInfo.otherDims.itemId === 0) {
          this._idDimIdx = i;
        }

        if (!storage[dim]) {
          storage[dim] = [];
        }

        prepareChunks(storage, dimInfo, chunkSize, originalChunkCount, end);
        this._chunkCount = storage[dim].length;
      }

      var dataItem = new Array(dimLen);

      for (var idx = start; idx < end; idx++) {
        // NOTICE: Try not to write things into dataItem
        dataItem = rawData.getItem(idx, dataItem); // Each data item is value
        // [1, 2]
        // 2
        // Bar chart, line chart which uses category axis
        // only gives the 'y' value. 'x' value is the indices of category
        // Use a tempValue to normalize the value to be a (x, y) value

        var chunkIndex = Math.floor(idx / chunkSize);
        var chunkOffset = idx % chunkSize; // Store the data by dimensions

        for (var k = 0; k < dimLen; k++) {
          var dim = dimensions[k];
          var dimStorage = storage[dim][chunkIndex]; // PENDING NULL is empty or zero

          var val = this._dimValueGetter(dataItem, dim, idx, k);

          dimStorage[chunkOffset] = val;
          var dimRawExtent = rawExtent[dim];
          val < dimRawExtent[0] && (dimRawExtent[0] = val);
          val > dimRawExtent[1] && (dimRawExtent[1] = val);
        } // ??? FIXME not check by pure but sourceFormat?
        // TODO refactor these logic.


        if (!rawData.pure) {
          var name = nameList[idx];

          if (dataItem && name == null) {
            // If dataItem is {name: ...}, it has highest priority.
            // That is appropriate for many common cases.
            if (dataItem.name != null) {
              // There is no other place to persistent dataItem.name,
              // so save it to nameList.
              nameList[idx] = name = dataItem.name;
            } else if (nameDimIdx != null) {
              var nameDim = dimensions[nameDimIdx];
              var nameDimChunk = storage[nameDim][chunkIndex];

              if (nameDimChunk) {
                name = nameDimChunk[chunkOffset];
                var ordinalMeta = dimensionInfoMap[nameDim].ordinalMeta;

                if (ordinalMeta && ordinalMeta.categories.length) {
                  name = ordinalMeta.categories[name];
                }
              }
            }
          } // Try using the id in option
          // id or name is used on dynamical data, mapping old and new items.


          var id = dataItem == null ? null : dataItem.id;

          if (id == null && name != null) {
            // Use name as id and add counter to avoid same name
            nameRepeatCount[name] = nameRepeatCount[name] || 0;
            id = name;

            if (nameRepeatCount[name] > 0) {
              id += '__ec__' + nameRepeatCount[name];
            }

            nameRepeatCount[name]++;
          }

          id != null && (idList[idx] = id);
        }
      }

      if (!rawData.persistent && rawData.clean) {
        // Clean unused data if data source is typed array.
        rawData.clean();
      }

      this._rawCount = this._count = end; // Reset data extent

      this._extent = {};
      prepareInvertedIndex(this);
    };

    function prepareChunks(storage, dimInfo, chunkSize, chunkCount, end) {
      var DataCtor = dataCtors[dimInfo.type];
      var lastChunkIndex = chunkCount - 1;
      var dim = dimInfo.name;
      var resizeChunkArray = storage[dim][lastChunkIndex];

      if (resizeChunkArray && resizeChunkArray.length < chunkSize) {
        var newStore = new DataCtor(Math.min(end - lastChunkIndex * chunkSize, chunkSize)); // The cost of the copy is probably inconsiderable
        // within the initial chunkSize.

        for (var j = 0; j < resizeChunkArray.length; j++) {
          newStore[j] = resizeChunkArray[j];
        }

        storage[dim][lastChunkIndex] = newStore;
      } // Create new chunks.


      for (var k = chunkCount * chunkSize; k < end; k += chunkSize) {
        storage[dim].push(new DataCtor(Math.min(end - k, chunkSize)));
      }
    }

    function prepareInvertedIndex(list) {
      var invertedIndicesMap = list._invertedIndicesMap;
      util.each(invertedIndicesMap, function (invertedIndices, dim) {
        var dimInfo = list._dimensionInfos[dim]; // Currently, only dimensions that has ordinalMeta can create inverted indices.

        var ordinalMeta = dimInfo.ordinalMeta;

        if (ordinalMeta) {
          invertedIndices = invertedIndicesMap[dim] = new CtorInt32Array(ordinalMeta.categories.length); // The default value of TypedArray is 0. To avoid miss
          // mapping to 0, we should set it as INDEX_NOT_FOUND.

          for (var i = 0; i < invertedIndices.length; i++) {
            invertedIndices[i] = INDEX_NOT_FOUND;
          }

          for (var i = 0; i < list._count; i++) {
            // Only support the case that all values are distinct.
            invertedIndices[list.get(dim, i)] = i;
          }
        }
      });
    }

    function getRawValueFromStore(list, dimIndex, rawIndex) {
      var val;

      if (dimIndex != null) {
        var chunkSize = list._chunkSize;
        var chunkIndex = Math.floor(rawIndex / chunkSize);
        var chunkOffset = rawIndex % chunkSize;
        var dim = list.dimensions[dimIndex];
        var chunk = list._storage[dim][chunkIndex];

        if (chunk) {
          val = chunk[chunkOffset];
          var ordinalMeta = list._dimensionInfos[dim].ordinalMeta;

          if (ordinalMeta && ordinalMeta.categories.length) {
            val = ordinalMeta.categories[val];
          }
        }
      }

      return val;
    }
    /**
     * @return {number}
     */


    listProto.count = function () {
      return this._count;
    };

    listProto.getIndices = function () {
      var newIndices;
      var indices = this._indices;

      if (indices) {
        var Ctor = indices.constructor;
        var thisCount = this._count; // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.

        if (Ctor === Array) {
          newIndices = new Ctor(thisCount);

          for (var i = 0; i < thisCount; i++) {
            newIndices[i] = indices[i];
          }
        } else {
          newIndices = new Ctor(indices.buffer, 0, thisCount);
        }
      } else {
        var Ctor = getIndicesCtor(this);
        var newIndices = new Ctor(this.count());

        for (var i = 0; i < newIndices.length; i++) {
          newIndices[i] = i;
        }
      }

      return newIndices;
    };
    /**
     * Get value. Return NaN if idx is out of range.
     * @param {string} dim Dim must be concrete name.
     * @param {number} idx
     * @param {boolean} stack
     * @return {number}
     */


    listProto.get = function (dim, idx
    /*, stack */
    ) {
      if (!(idx >= 0 && idx < this._count)) {
        return NaN;
      }

      var storage = this._storage;

      if (!storage[dim]) {
        // TODO Warn ?
        return NaN;
      }

      idx = this.getRawIndex(idx);
      var chunkIndex = Math.floor(idx / this._chunkSize);
      var chunkOffset = idx % this._chunkSize;
      var chunkStore = storage[dim][chunkIndex];
      var value = chunkStore[chunkOffset]; // FIXME ordinal data type is not stackable
      // if (stack) {
      //     var dimensionInfo = this._dimensionInfos[dim];
      //     if (dimensionInfo && dimensionInfo.stackable) {
      //         var stackedOn = this.stackedOn;
      //         while (stackedOn) {
      //             // Get no stacked data of stacked on
      //             var stackedValue = stackedOn.get(dim, idx);
      //             // Considering positive stack, negative stack and empty data
      //             if ((value >= 0 && stackedValue > 0)  // Positive stack
      //                 || (value <= 0 && stackedValue < 0) // Negative stack
      //             ) {
      //                 value += stackedValue;
      //             }
      //             stackedOn = stackedOn.stackedOn;
      //         }
      //     }
      // }

      return value;
    };
    /**
     * @param {string} dim concrete dim
     * @param {number} rawIndex
     * @return {number|string}
     */


    listProto.getByRawIndex = function (dim, rawIdx) {
      if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {
        return NaN;
      }

      var dimStore = this._storage[dim];

      if (!dimStore) {
        // TODO Warn ?
        return NaN;
      }

      var chunkIndex = Math.floor(rawIdx / this._chunkSize);
      var chunkOffset = rawIdx % this._chunkSize;
      var chunkStore = dimStore[chunkIndex];
      return chunkStore[chunkOffset];
    };
    /**
     * FIXME Use `get` on chrome maybe slow(in filterSelf and selectRange).
     * Hack a much simpler _getFast
     * @private
     */


    listProto._getFast = function (dim, rawIdx) {
      var chunkIndex = Math.floor(rawIdx / this._chunkSize);
      var chunkOffset = rawIdx % this._chunkSize;
      var chunkStore = this._storage[dim][chunkIndex];
      return chunkStore[chunkOffset];
    };
    /**
     * Get value for multi dimensions.
     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
     * @param {number} idx
     * @return {number}
     */


    listProto.getValues = function (dimensions, idx
    /*, stack */
    ) {
      var values = [];

      if (!util.isArray(dimensions)) {
        // stack = idx;
        idx = dimensions;
        dimensions = this.dimensions;
      }

      for (var i = 0, len = dimensions.length; i < len; i++) {
        values.push(this.get(dimensions[i], idx
        /*, stack */
        ));
      }

      return values;
    };
    /**
     * If value is NaN. Inlcuding '-'
     * Only check the coord dimensions.
     * @param {string} dim
     * @param {number} idx
     * @return {number}
     */


    listProto.hasValue = function (idx) {
      var dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;

      for (var i = 0, len = dataDimsOnCoord.length; i < len; i++) {
        // Ordinal type originally can be string or number.
        // But when an ordinal type is used on coord, it can
        // not be string but only number. So we can also use isNaN.
        if (isNaN(this.get(dataDimsOnCoord[i], idx))) {
          return false;
        }
      }

      return true;
    };
    /**
     * Get extent of data in one dimension
     * @param {string} dim
     * @param {boolean} stack
     */


    listProto.getDataExtent = function (dim
    /*, stack */
    ) {
      // Make sure use concrete dim as cache name.
      dim = this.getDimension(dim);
      var dimData = this._storage[dim];
      var initialExtent = getInitialExtent(); // stack = !!((stack || false) && this.getCalculationInfo(dim));

      if (!dimData) {
        return initialExtent;
      } // Make more strict checkings to ensure hitting cache.


      var currEnd = this.count(); // var cacheName = [dim, !!stack].join('_');
      // var cacheName = dim;
      // Consider the most cases when using data zoom, `getDataExtent`
      // happened before filtering. We cache raw extent, which is not
      // necessary to be cleared and recalculated when restore data.

      var useRaw = !this._indices; // && !stack;

      var dimExtent;

      if (useRaw) {
        return this._rawExtent[dim].slice();
      }

      dimExtent = this._extent[dim];

      if (dimExtent) {
        return dimExtent.slice();
      }

      dimExtent = initialExtent;
      var min = dimExtent[0];
      var max = dimExtent[1];

      for (var i = 0; i < currEnd; i++) {
        // var value = stack ? this.get(dim, i, true) : this._getFast(dim, this.getRawIndex(i));
        var value = this._getFast(dim, this.getRawIndex(i));

        value < min && (min = value);
        value > max && (max = value);
      }

      dimExtent = [min, max];
      this._extent[dim] = dimExtent;
      return dimExtent;
    };
    /**
     * Optimize for the scenario that data is filtered by a given extent.
     * Consider that if data amount is more than hundreds of thousand,
     * extent calculation will cost more than 10ms and the cache will
     * be erased because of the filtering.
     */


    listProto.getApproximateExtent = function (dim
    /*, stack */
    ) {
      dim = this.getDimension(dim);
      return this._approximateExtent[dim] || this.getDataExtent(dim
      /*, stack */
      );
    };

    listProto.setApproximateExtent = function (extent, dim
    /*, stack */
    ) {
      dim = this.getDimension(dim);
      this._approximateExtent[dim] = extent.slice();
    };
    /**
     * @param {string} key
     * @return {*}
     */


    listProto.getCalculationInfo = function (key) {
      return this._calculationInfo[key];
    };
    /**
     * @param {string|Object} key or k-v object
     * @param {*} [value]
     */


    listProto.setCalculationInfo = function (key, value) {
      isObject$9(key) ? util.extend(this._calculationInfo, key) : this._calculationInfo[key] = value;
    };
    /**
     * Get sum of data in one dimension
     * @param {string} dim
     */


    listProto.getSum = function (dim
    /*, stack */
    ) {
      var dimData = this._storage[dim];
      var sum = 0;

      if (dimData) {
        for (var i = 0, len = this.count(); i < len; i++) {
          var value = this.get(dim, i
          /*, stack */
          );

          if (!isNaN(value)) {
            sum += value;
          }
        }
      }

      return sum;
    };
    /**
     * Get median of data in one dimension
     * @param {string} dim
     */


    listProto.getMedian = function (dim
    /*, stack */
    ) {
      var dimDataArray = []; // map all data of one dimension

      this.each(dim, function (val, idx) {
        if (!isNaN(val)) {
          dimDataArray.push(val);
        }
      }); // TODO
      // Use quick select?
      // immutability & sort

      var sortedDimDataArray = [].concat(dimDataArray).sort(function (a, b) {
        return a - b;
      });
      var len = this.count(); // calculate median

      return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;
    }; // /**
    //  * Retreive the index with given value
    //  * @param {string} dim Concrete dimension.
    //  * @param {number} value
    //  * @return {number}
    //  */
    // Currently incorrect: should return dataIndex but not rawIndex.
    // Do not fix it until this method is to be used somewhere.
    // FIXME Precision of float value
    // listProto.indexOf = function (dim, value) {
    //     var storage = this._storage;
    //     var dimData = storage[dim];
    //     var chunkSize = this._chunkSize;
    //     if (dimData) {
    //         for (var i = 0, len = this.count(); i < len; i++) {
    //             var chunkIndex = Math.floor(i / chunkSize);
    //             var chunkOffset = i % chunkSize;
    //             if (dimData[chunkIndex][chunkOffset] === value) {
    //                 return i;
    //             }
    //         }
    //     }
    //     return -1;
    // };

    /**
     * Only support the dimension which inverted index created.
     * Do not support other cases until required.
     * @param {string} concrete dim
     * @param {number|string} value
     * @return {number} rawIndex
     */


    listProto.rawIndexOf = function (dim, value) {
      var invertedIndices = dim && this._invertedIndicesMap[dim];
      var rawIndex = invertedIndices[value];

      if (rawIndex == null || isNaN(rawIndex)) {
        return INDEX_NOT_FOUND;
      }

      return rawIndex;
    };
    /**
     * Retreive the index with given name
     * @param {number} idx
     * @param {number} name
     * @return {number}
     */


    listProto.indexOfName = function (name) {
      for (var i = 0, len = this.count(); i < len; i++) {
        if (this.getName(i) === name) {
          return i;
        }
      }

      return -1;
    };
    /**
     * Retreive the index with given raw data index
     * @param {number} idx
     * @param {number} name
     * @return {number}
     */


    listProto.indexOfRawIndex = function (rawIndex) {
      if (rawIndex >= this._rawCount || rawIndex < 0) {
        return -1;
      }

      if (!this._indices) {
        return rawIndex;
      } // Indices are ascending


      var indices = this._indices; // If rawIndex === dataIndex

      var rawDataIndex = indices[rawIndex];

      if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {
        return rawIndex;
      }

      var left = 0;
      var right = this._count - 1;

      while (left <= right) {
        var mid = (left + right) / 2 | 0;

        if (indices[mid] < rawIndex) {
          left = mid + 1;
        } else if (indices[mid] > rawIndex) {
          right = mid - 1;
        } else {
          return mid;
        }
      }

      return -1;
    };
    /**
     * Retreive the index of nearest value
     * @param {string} dim
     * @param {number} value
     * @param {number} [maxDistance=Infinity]
     * @return {Array.<number>} If and only if multiple indices has
     *        the same value, they are put to the result.
     */


    listProto.indicesOfNearest = function (dim, value, maxDistance) {
      var storage = this._storage;
      var dimData = storage[dim];
      var nearestIndices = [];

      if (!dimData) {
        return nearestIndices;
      }

      if (maxDistance == null) {
        maxDistance = Infinity;
      }

      var minDist = Infinity;
      var minDiff = -1;
      var nearestIndicesLen = 0; // Check the test case of `test/ut/spec/data/List.js`.

      for (var i = 0, len = this.count(); i < len; i++) {
        var diff = value - this.get(dim, i);
        var dist = Math.abs(diff);

        if (dist <= maxDistance) {
          // When the `value` is at the middle of `this.get(dim, i)` and `this.get(dim, i+1)`,
          // we'd better not push both of them to `nearestIndices`, otherwise it is easy to
          // get more than one item in `nearestIndices` (more specifically, in `tooltip`).
          // So we chose the one that `diff >= 0` in this csae.
          // But if `this.get(dim, i)` and `this.get(dim, j)` get the same value, both of them
          // should be push to `nearestIndices`.
          if (dist < minDist || dist === minDist && diff >= 0 && minDiff < 0) {
            minDist = dist;
            minDiff = diff;
            nearestIndicesLen = 0;
          }

          if (diff === minDiff) {
            nearestIndices[nearestIndicesLen++] = i;
          }
        }
      }

      nearestIndices.length = nearestIndicesLen;
      return nearestIndices;
    };
    /**
     * Get raw data index
     * @param {number} idx
     * @return {number}
     */


    listProto.getRawIndex = getRawIndexWithoutIndices;

    function getRawIndexWithoutIndices(idx) {
      return idx;
    }

    function getRawIndexWithIndices(idx) {
      if (idx < this._count && idx >= 0) {
        return this._indices[idx];
      }

      return -1;
    }
    /**
     * Get raw data item
     * @param {number} idx
     * @return {number}
     */


    listProto.getRawDataItem = function (idx) {
      if (!this._rawData.persistent) {
        var val = [];

        for (var i = 0; i < this.dimensions.length; i++) {
          var dim = this.dimensions[i];
          val.push(this.get(dim, idx));
        }

        return val;
      } else {
        return this._rawData.getItem(this.getRawIndex(idx));
      }
    };
    /**
     * @param {number} idx
     * @param {boolean} [notDefaultIdx=false]
     * @return {string}
     */


    listProto.getName = function (idx) {
      var rawIndex = this.getRawIndex(idx);
      return this._nameList[rawIndex] || getRawValueFromStore(this, this._nameDimIdx, rawIndex) || '';
    };
    /**
     * @param {number} idx
     * @param {boolean} [notDefaultIdx=false]
     * @return {string}
     */


    listProto.getId = function (idx) {
      return getId(this, this.getRawIndex(idx));
    };

    function getId(list, rawIndex) {
      var id = list._idList[rawIndex];

      if (id == null) {
        id = getRawValueFromStore(list, list._idDimIdx, rawIndex);
      }

      if (id == null) {
        // FIXME Check the usage in graph, should not use prefix.
        id = ID_PREFIX + rawIndex;
      }

      return id;
    }

    function normalizeDimensions(dimensions) {
      if (!util.isArray(dimensions)) {
        dimensions = [dimensions];
      }

      return dimensions;
    }
    /**
     * Data iteration
     * @param {string|Array.<string>}
     * @param {Function} cb
     * @param {*} [context=this]
     *
     * @example
     *  list.each('x', function (x, idx) {});
     *  list.each(['x', 'y'], function (x, y, idx) {});
     *  list.each(function (idx) {})
     */


    listProto.each = function (dims, cb, context, contextCompat) {

      if (!this._count) {
        return;
      }

      if (typeof dims === 'function') {
        contextCompat = context;
        context = cb;
        cb = dims;
        dims = [];
      } // contextCompat just for compat echarts3


      context = context || contextCompat || this;
      dims = util.map(normalizeDimensions(dims), this.getDimension, this);
      var dimSize = dims.length;

      for (var i = 0; i < this.count(); i++) {
        // Simple optimization
        switch (dimSize) {
          case 0:
            cb.call(context, i);
            break;

          case 1:
            cb.call(context, this.get(dims[0], i), i);
            break;

          case 2:
            cb.call(context, this.get(dims[0], i), this.get(dims[1], i), i);
            break;

          default:
            var k = 0;
            var value = [];

            for (; k < dimSize; k++) {
              value[k] = this.get(dims[k], i);
            } // Index


            value[k] = i;
            cb.apply(context, value);
        }
      }
    };
    /**
     * Data filter
     * @param {string|Array.<string>}
     * @param {Function} cb
     * @param {*} [context=this]
     */


    listProto.filterSelf = function (dimensions, cb, context, contextCompat) {

      if (!this._count) {
        return;
      }

      if (typeof dimensions === 'function') {
        contextCompat = context;
        context = cb;
        cb = dimensions;
        dimensions = [];
      } // contextCompat just for compat echarts3


      context = context || contextCompat || this;
      dimensions = util.map(normalizeDimensions(dimensions), this.getDimension, this);
      var count = this.count();
      var Ctor = getIndicesCtor(this);
      var newIndices = new Ctor(count);
      var value = [];
      var dimSize = dimensions.length;
      var offset = 0;
      var dim0 = dimensions[0];

      for (var i = 0; i < count; i++) {
        var keep;
        var rawIdx = this.getRawIndex(i); // Simple optimization

        if (dimSize === 0) {
          keep = cb.call(context, i);
        } else if (dimSize === 1) {
          var val = this._getFast(dim0, rawIdx);

          keep = cb.call(context, val, i);
        } else {
          for (var k = 0; k < dimSize; k++) {
            value[k] = this._getFast(dim0, rawIdx);
          }

          value[k] = i;
          keep = cb.apply(context, value);
        }

        if (keep) {
          newIndices[offset++] = rawIdx;
        }
      } // Set indices after filtered.


      if (offset < count) {
        this._indices = newIndices;
      }

      this._count = offset; // Reset data extent

      this._extent = {};
      this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
      return this;
    };
    /**
     * Select data in range. (For optimization of filter)
     * (Manually inline code, support 5 million data filtering in data zoom.)
     */


    listProto.selectRange = function (range) {

      if (!this._count) {
        return;
      }

      var dimensions = [];

      for (var dim in range) {
        if (range.hasOwnProperty(dim)) {
          dimensions.push(dim);
        }
      }

      var dimSize = dimensions.length;

      if (!dimSize) {
        return;
      }

      var originalCount = this.count();
      var Ctor = getIndicesCtor(this);
      var newIndices = new Ctor(originalCount);
      var offset = 0;
      var dim0 = dimensions[0];
      var min = range[dim0][0];
      var max = range[dim0][1];
      var quickFinished = false;

      if (!this._indices) {
        // Extreme optimization for common case. About 2x faster in chrome.
        var idx = 0;

        if (dimSize === 1) {
          var dimStorage = this._storage[dimensions[0]];

          for (var k = 0; k < this._chunkCount; k++) {
            var chunkStorage = dimStorage[k];
            var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);

            for (var i = 0; i < len; i++) {
              var val = chunkStorage[i]; // NaN will not be filtered. Consider the case, in line chart, empty
              // value indicates the line should be broken. But for the case like
              // scatter plot, a data item with empty value will not be rendered,
              // but the axis extent may be effected if some other dim of the data
              // item has value. Fortunately it is not a significant negative effect.

              if (val >= min && val <= max || isNaN(val)) {
                newIndices[offset++] = idx;
              }

              idx++;
            }
          }

          quickFinished = true;
        } else if (dimSize === 2) {
          var dimStorage = this._storage[dim0];
          var dimStorage2 = this._storage[dimensions[1]];
          var min2 = range[dimensions[1]][0];
          var max2 = range[dimensions[1]][1];

          for (var k = 0; k < this._chunkCount; k++) {
            var chunkStorage = dimStorage[k];
            var chunkStorage2 = dimStorage2[k];
            var len = Math.min(this._count - k * this._chunkSize, this._chunkSize);

            for (var i = 0; i < len; i++) {
              var val = chunkStorage[i];
              var val2 = chunkStorage2[i]; // Do not filter NaN, see comment above.

              if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) {
                newIndices[offset++] = idx;
              }

              idx++;
            }
          }

          quickFinished = true;
        }
      }

      if (!quickFinished) {
        if (dimSize === 1) {
          for (var i = 0; i < originalCount; i++) {
            var rawIndex = this.getRawIndex(i);

            var val = this._getFast(dim0, rawIndex); // Do not filter NaN, see comment above.


            if (val >= min && val <= max || isNaN(val)) {
              newIndices[offset++] = rawIndex;
            }
          }
        } else {
          for (var i = 0; i < originalCount; i++) {
            var keep = true;
            var rawIndex = this.getRawIndex(i);

            for (var k = 0; k < dimSize; k++) {
              var dimk = dimensions[k];

              var val = this._getFast(dim, rawIndex); // Do not filter NaN, see comment above.


              if (val < range[dimk][0] || val > range[dimk][1]) {
                keep = false;
              }
            }

            if (keep) {
              newIndices[offset++] = this.getRawIndex(i);
            }
          }
        }
      } // Set indices after filtered.


      if (offset < originalCount) {
        this._indices = newIndices;
      }

      this._count = offset; // Reset data extent

      this._extent = {};
      this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
      return this;
    };
    /**
     * Data mapping to a plain array
     * @param {string|Array.<string>} [dimensions]
     * @param {Function} cb
     * @param {*} [context=this]
     * @return {Array}
     */


    listProto.mapArray = function (dimensions, cb, context, contextCompat) {

      if (typeof dimensions === 'function') {
        contextCompat = context;
        context = cb;
        cb = dimensions;
        dimensions = [];
      } // contextCompat just for compat echarts3


      context = context || contextCompat || this;
      var result = [];
      this.each(dimensions, function () {
        result.push(cb && cb.apply(this, arguments));
      }, context);
      return result;
    }; // Data in excludeDimensions is copied, otherwise transfered.


    function cloneListForMapAndSample(original, excludeDimensions) {
      var allDimensions = original.dimensions;
      var list = new List(util.map(allDimensions, original.getDimensionInfo, original), original.hostModel); // FIXME If needs stackedOn, value may already been stacked

      transferProperties(list, original);
      var storage = list._storage = {};
      var originalStorage = original._storage; // Init storage

      for (var i = 0; i < allDimensions.length; i++) {
        var dim = allDimensions[i];

        if (originalStorage[dim]) {
          // Notice that we do not reset invertedIndicesMap here, becuase
          // there is no scenario of mapping or sampling ordinal dimension.
          if (util.indexOf(excludeDimensions, dim) >= 0) {
            storage[dim] = cloneDimStore(originalStorage[dim]);
            list._rawExtent[dim] = getInitialExtent();
            list._extent[dim] = null;
          } else {
            // Direct reference for other dimensions
            storage[dim] = originalStorage[dim];
          }
        }
      }

      return list;
    }

    function cloneDimStore(originalDimStore) {
      var newDimStore = new Array(originalDimStore.length);

      for (var j = 0; j < originalDimStore.length; j++) {
        newDimStore[j] = cloneChunk(originalDimStore[j]);
      }

      return newDimStore;
    }

    function getInitialExtent() {
      return [Infinity, -Infinity];
    }
    /**
     * Data mapping to a new List with given dimensions
     * @param {string|Array.<string>} dimensions
     * @param {Function} cb
     * @param {*} [context=this]
     * @return {Array}
     */


    listProto.map = function (dimensions, cb, context, contextCompat) {

      context = context || contextCompat || this;
      dimensions = util.map(normalizeDimensions(dimensions), this.getDimension, this);
      var list = cloneListForMapAndSample(this, dimensions); // Following properties are all immutable.
      // So we can reference to the same value

      list._indices = this._indices;
      list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
      var storage = list._storage;
      var tmpRetValue = [];
      var chunkSize = this._chunkSize;
      var dimSize = dimensions.length;
      var dataCount = this.count();
      var values = [];
      var rawExtent = list._rawExtent;

      for (var dataIndex = 0; dataIndex < dataCount; dataIndex++) {
        for (var dimIndex = 0; dimIndex < dimSize; dimIndex++) {
          values[dimIndex] = this.get(dimensions[dimIndex], dataIndex
          /*, stack */
          );
        }

        values[dimSize] = dataIndex;
        var retValue = cb && cb.apply(context, values);

        if (retValue != null) {
          // a number or string (in oridinal dimension)?
          if (typeof retValue !== 'object') {
            tmpRetValue[0] = retValue;
            retValue = tmpRetValue;
          }

          var rawIndex = this.getRawIndex(dataIndex);
          var chunkIndex = Math.floor(rawIndex / chunkSize);
          var chunkOffset = rawIndex % chunkSize;

          for (var i = 0; i < retValue.length; i++) {
            var dim = dimensions[i];
            var val = retValue[i];
            var rawExtentOnDim = rawExtent[dim];
            var dimStore = storage[dim];

            if (dimStore) {
              dimStore[chunkIndex][chunkOffset] = val;
            }

            if (val < rawExtentOnDim[0]) {
              rawExtentOnDim[0] = val;
            }

            if (val > rawExtentOnDim[1]) {
              rawExtentOnDim[1] = val;
            }
          }
        }
      }

      return list;
    };
    /**
     * Large data down sampling on given dimension
     * @param {string} dimension
     * @param {number} rate
     * @param {Function} sampleValue
     * @param {Function} sampleIndex Sample index for name and id
     */


    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
      var list = cloneListForMapAndSample(this, [dimension]);
      var targetStorage = list._storage;
      var frameValues = [];
      var frameSize = Math.floor(1 / rate);
      var dimStore = targetStorage[dimension];
      var len = this.count();
      var chunkSize = this._chunkSize;
      var rawExtentOnDim = list._rawExtent[dimension];
      var newIndices = new (getIndicesCtor(this))(len);
      var offset = 0;

      for (var i = 0; i < len; i += frameSize) {
        // Last frame
        if (frameSize > len - i) {
          frameSize = len - i;
          frameValues.length = frameSize;
        }

        for (var k = 0; k < frameSize; k++) {
          var dataIdx = this.getRawIndex(i + k);
          var originalChunkIndex = Math.floor(dataIdx / chunkSize);
          var originalChunkOffset = dataIdx % chunkSize;
          frameValues[k] = dimStore[originalChunkIndex][originalChunkOffset];
        }

        var value = sampleValue(frameValues);
        var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1));
        var sampleChunkIndex = Math.floor(sampleFrameIdx / chunkSize);
        var sampleChunkOffset = sampleFrameIdx % chunkSize; // Only write value on the filtered data

        dimStore[sampleChunkIndex][sampleChunkOffset] = value;

        if (value < rawExtentOnDim[0]) {
          rawExtentOnDim[0] = value;
        }

        if (value > rawExtentOnDim[1]) {
          rawExtentOnDim[1] = value;
        }

        newIndices[offset++] = sampleFrameIdx;
      }

      list._count = offset;
      list._indices = newIndices;
      list.getRawIndex = getRawIndexWithIndices;
      return list;
    };
    /**
     * Get model of one data item.
     *
     * @param {number} idx
     */
    // FIXME Model proxy ?


    listProto.getItemModel = function (idx) {
      var hostModel = this.hostModel;
      return new Model_1(this.getRawDataItem(idx), hostModel, hostModel && hostModel.ecModel);
    };
    /**
     * Create a data differ
     * @param {module:echarts/data/List} otherList
     * @return {module:echarts/data/DataDiffer}
     */


    listProto.diff = function (otherList) {
      var thisList = this;
      return new DataDiffer_1(otherList ? otherList.getIndices() : [], this.getIndices(), function (idx) {
        return getId(otherList, idx);
      }, function (idx) {
        return getId(thisList, idx);
      });
    };
    /**
     * Get visual property.
     * @param {string} key
     */


    listProto.getVisual = function (key) {
      var visual = this._visual;
      return visual && visual[key];
    };
    /**
     * Set visual property
     * @param {string|Object} key
     * @param {*} [value]
     *
     * @example
     *  setVisual('color', color);
     *  setVisual({
     *      'color': color
     *  });
     */


    listProto.setVisual = function (key, val) {
      if (isObject$9(key)) {
        for (var name in key) {
          if (key.hasOwnProperty(name)) {
            this.setVisual(name, key[name]);
          }
        }

        return;
      }

      this._visual = this._visual || {};
      this._visual[key] = val;
    };
    /**
     * Set layout property.
     * @param {string|Object} key
     * @param {*} [val]
     */


    listProto.setLayout = function (key, val) {
      if (isObject$9(key)) {
        for (var name in key) {
          if (key.hasOwnProperty(name)) {
            this.setLayout(name, key[name]);
          }
        }

        return;
      }

      this._layout[key] = val;
    };
    /**
     * Get layout property.
     * @param  {string} key.
     * @return {*}
     */


    listProto.getLayout = function (key) {
      return this._layout[key];
    };
    /**
     * Get layout of single data item
     * @param {number} idx
     */


    listProto.getItemLayout = function (idx) {
      return this._itemLayouts[idx];
    };
    /**
     * Set layout of single data item
     * @param {number} idx
     * @param {Object} layout
     * @param {boolean=} [merge=false]
     */


    listProto.setItemLayout = function (idx, layout, merge) {
      this._itemLayouts[idx] = merge ? util.extend(this._itemLayouts[idx] || {}, layout) : layout;
    };
    /**
     * Clear all layout of single data item
     */


    listProto.clearItemLayouts = function () {
      this._itemLayouts.length = 0;
    };
    /**
     * Get visual property of single data item
     * @param {number} idx
     * @param {string} key
     * @param {boolean} [ignoreParent=false]
     */


    listProto.getItemVisual = function (idx, key, ignoreParent) {
      var itemVisual = this._itemVisuals[idx];
      var val = itemVisual && itemVisual[key];

      if (val == null && !ignoreParent) {
        // Use global visual property
        return this.getVisual(key);
      }

      return val;
    };
    /**
     * Set visual property of single data item
     *
     * @param {number} idx
     * @param {string|Object} key
     * @param {*} [value]
     *
     * @example
     *  setItemVisual(0, 'color', color);
     *  setItemVisual(0, {
     *      'color': color
     *  });
     */


    listProto.setItemVisual = function (idx, key, value) {
      var itemVisual = this._itemVisuals[idx] || {};
      var hasItemVisual = this.hasItemVisual;
      this._itemVisuals[idx] = itemVisual;

      if (isObject$9(key)) {
        for (var name in key) {
          if (key.hasOwnProperty(name)) {
            itemVisual[name] = key[name];
            hasItemVisual[name] = true;
          }
        }

        return;
      }

      itemVisual[key] = value;
      hasItemVisual[key] = true;
    };
    /**
     * Clear itemVisuals and list visual.
     */


    listProto.clearAllVisual = function () {
      this._visual = {};
      this._itemVisuals = [];
      this.hasItemVisual = {};
    };

    var setItemDataAndSeriesIndex = function (child) {
      child.seriesIndex = this.seriesIndex;
      child.dataIndex = this.dataIndex;
      child.dataType = this.dataType;
    };
    /**
     * Set graphic element relative to data. It can be set as null
     * @param {number} idx
     * @param {module:zrender/Element} [el]
     */


    listProto.setItemGraphicEl = function (idx, el) {
      var hostModel = this.hostModel;

      if (el) {
        // Add data index and series index for indexing the data by element
        // Useful in tooltip
        el.dataIndex = idx;
        el.dataType = this.dataType;
        el.seriesIndex = hostModel && hostModel.seriesIndex;

        if (el.type === 'group') {
          el.traverse(setItemDataAndSeriesIndex, el);
        }
      }

      this._graphicEls[idx] = el;
    };
    /**
     * @param {number} idx
     * @return {module:zrender/Element}
     */


    listProto.getItemGraphicEl = function (idx) {
      return this._graphicEls[idx];
    };
    /**
     * @param {Function} cb
     * @param {*} context
     */


    listProto.eachItemGraphicEl = function (cb, context) {
      util.each(this._graphicEls, function (el, idx) {
        if (el) {
          cb && cb.call(context, el, idx);
        }
      });
    };
    /**
     * Shallow clone a new list except visual and layout properties, and graph elements.
     * New list only change the indices.
     */


    listProto.cloneShallow = function (list) {
      if (!list) {
        var dimensionInfoList = util.map(this.dimensions, this.getDimensionInfo, this);
        list = new List(dimensionInfoList, this.hostModel);
      } // FIXME


      list._storage = this._storage;
      transferProperties(list, this); // Clone will not change the data extent and indices

      if (this._indices) {
        var Ctor = this._indices.constructor;
        list._indices = new Ctor(this._indices);
      } else {
        list._indices = null;
      }

      list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
      return list;
    };
    /**
     * Wrap some method to add more feature
     * @param {string} methodName
     * @param {Function} injectFunction
     */


    listProto.wrapMethod = function (methodName, injectFunction) {
      var originalMethod = this[methodName];

      if (typeof originalMethod !== 'function') {
        return;
      }

      this.__wrappedMethods = this.__wrappedMethods || [];

      this.__wrappedMethods.push(methodName);

      this[methodName] = function () {
        var res = originalMethod.apply(this, arguments);
        return injectFunction.apply(this, [res].concat(util.slice(arguments)));
      };
    }; // Methods that create a new list based on this list should be listed here.
    // Notice that those method should `RETURN` the new list.


    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map']; // Methods that change indices of this list should be listed here.

    listProto.CHANGABLE_METHODS = ['filterSelf', 'selectRange'];
    var _default$1j = List;
    var List_1 = _default$1j;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var createHashMap$8 = util.createHashMap;
    var each$g = util.each;
    var isString$7 = util.isString;
    var defaults$2 = util.defaults;
    var extend$6 = util.extend;
    var isObject$a = util.isObject;
    var clone$5 = util.clone;



    var normalizeToArray$4 = model.normalizeToArray;



    var guessOrdinal$1 = sourceHelper.guessOrdinal;
    var BE_ORDINAL$1 = sourceHelper.BE_ORDINAL;





    var OTHER_DIMENSIONS$1 = dimensionHelper.OTHER_DIMENSIONS;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @deprecated
     * Use `echarts/data/helper/createDimensions` instead.
     */

    /**
     * @see {module:echarts/test/ut/spec/data/completeDimensions}
     *
     * This method builds the relationship between:
     * + "what the coord sys or series requires (see `sysDims`)",
     * + "what the user defines (in `encode` and `dimensions`, see `opt.dimsDef` and `opt.encodeDef`)"
     * + "what the data source provids (see `source`)".
     *
     * Some guess strategy will be adapted if user does not define something.
     * If no 'value' dimension specified, the first no-named dimension will be
     * named as 'value'.
     *
     * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which
     *      provides not only dim template, but also default order.
     *      properties: 'name', 'type', 'displayName'.
     *      `name` of each item provides default coord name.
     *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and
     *                                    provide dims count that the sysDim required.
     *      [{ordinalMeta}] can be specified.
     * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)
     * @param {Object} [opt]
     * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions
     *      For example: ['asdf', {name, type}, ...].
     * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}
     * @param {Function} [opt.encodeDefaulter] Called if no `opt.encodeDef` exists.
     *      If not specified, auto find the next available data dim.
     *      param source {module:data/Source}
     *      param dimCount {number}
     *      return {Object} encode Never be `null/undefined`.
     * @param {string} [opt.generateCoord] Generate coord dim with the given name.
     *      If not specified, extra dim names will be:
     *      'value', 'value0', 'value1', ...
     * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.
     *      If `generateCoordCount` specified, the generated dim names will be:
     *      `generateCoord` + 0, `generateCoord` + 1, ...
     *      can be Infinity, indicate that use all of the remain columns.
     * @param {number} [opt.dimCount] If not specified, guess by the first data item.
     * @return {Array.<module:data/DataDimensionInfo>}
     */
    function completeDimensions(sysDims, source, opt) {
      if (!Source_1.isInstance(source)) {
        source = Source_1.seriesDataToSource(source);
      }

      opt = opt || {};
      sysDims = (sysDims || []).slice();
      var dimsDef = (opt.dimsDef || []).slice();
      var dataDimNameMap = createHashMap$8();
      var coordDimNameMap = createHashMap$8(); // var valueCandidate;

      var result = [];
      var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.

      for (var i = 0; i < dimCount; i++) {
        var dimDefItem = dimsDef[i] = extend$6({}, isObject$a(dimsDef[i]) ? dimsDef[i] : {
          name: dimsDef[i]
        });
        var userDimName = dimDefItem.name;
        var resultItem = result[i] = new DataDimensionInfo_1(); // Name will be applied later for avoiding duplication.

        if (userDimName != null && dataDimNameMap.get(userDimName) == null) {
          // Only if `series.dimensions` is defined in option
          // displayName, will be set, and dimension will be diplayed vertically in
          // tooltip by default.
          resultItem.name = resultItem.displayName = userDimName;
          dataDimNameMap.set(userDimName, i);
        }

        dimDefItem.type != null && (resultItem.type = dimDefItem.type);
        dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);
      }

      var encodeDef = opt.encodeDef;

      if (!encodeDef && opt.encodeDefaulter) {
        encodeDef = opt.encodeDefaulter(source, dimCount);
      }

      encodeDef = createHashMap$8(encodeDef); // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.

      encodeDef.each(function (dataDims, coordDim) {
        dataDims = normalizeToArray$4(dataDims).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is
        // `{encode: {x: -1, y: 1}}`. Should not filter anything in
        // this case.

        if (dataDims.length === 1 && !isString$7(dataDims[0]) && dataDims[0] < 0) {
          encodeDef.set(coordDim, false);
          return;
        }

        var validDataDims = encodeDef.set(coordDim, []);
        each$g(dataDims, function (resultDimIdx, idx) {
          // The input resultDimIdx can be dim name or index.
          isString$7(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));

          if (resultDimIdx != null && resultDimIdx < dimCount) {
            validDataDims[idx] = resultDimIdx;
            applyDim(result[resultDimIdx], coordDim, idx);
          }
        });
      }); // Apply templetes and default order from `sysDims`.

      var availDimIdx = 0;
      each$g(sysDims, function (sysDimItem, sysDimIndex) {
        var coordDim;
        var sysDimItem;
        var sysDimItemDimsDef;
        var sysDimItemOtherDims;

        if (isString$7(sysDimItem)) {
          coordDim = sysDimItem;
          sysDimItem = {};
        } else {
          coordDim = sysDimItem.name;
          var ordinalMeta = sysDimItem.ordinalMeta;
          sysDimItem.ordinalMeta = null;
          sysDimItem = clone$5(sysDimItem);
          sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.

          sysDimItemDimsDef = sysDimItem.dimsDef;
          sysDimItemOtherDims = sysDimItem.otherDims;
          sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
        }

        var dataDims = encodeDef.get(coordDim); // negative resultDimIdx means no need to mapping.

        if (dataDims === false) {
          return;
        }

        var dataDims = normalizeToArray$4(dataDims); // dimensions provides default dim sequences.

        if (!dataDims.length) {
          for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {
            while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {
              availDimIdx++;
            }

            availDimIdx < result.length && dataDims.push(availDimIdx++);
          }
        } // Apply templates.


        each$g(dataDims, function (resultDimIdx, coordDimIndex) {
          var resultItem = result[resultDimIdx];
          applyDim(defaults$2(resultItem, sysDimItem), coordDim, coordDimIndex);

          if (resultItem.name == null && sysDimItemDimsDef) {
            var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];
            !isObject$a(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {
              name: sysDimItemDimsDefItem
            });
            resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;
            resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;
          } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}


          sysDimItemOtherDims && defaults$2(resultItem.otherDims, sysDimItemOtherDims);
        });
      });

      function applyDim(resultItem, coordDim, coordDimIndex) {
        if (OTHER_DIMENSIONS$1.get(coordDim) != null) {
          resultItem.otherDims[coordDim] = coordDimIndex;
        } else {
          resultItem.coordDim = coordDim;
          resultItem.coordDimIndex = coordDimIndex;
          coordDimNameMap.set(coordDim, true);
        }
      } // Make sure the first extra dim is 'value'.


      var generateCoord = opt.generateCoord;
      var generateCoordCount = opt.generateCoordCount;
      var fromZero = generateCoordCount != null;
      generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;
      var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.

      for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {
        var resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo_1();
        var coordDim = resultItem.coordDim;

        if (coordDim == null) {
          resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);
          resultItem.coordDimIndex = 0;

          if (!generateCoord || generateCoordCount <= 0) {
            resultItem.isExtraCoord = true;
          }

          generateCoordCount--;
        }

        resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));

        if (resultItem.type == null && (guessOrdinal$1(source, resultDimIdx, resultItem.name) === BE_ORDINAL$1.Must // Consider the case:
        // {
        //    dataset: {source: [
        //        ['2001', 123],
        //        ['2002', 456],
        //        ...
        //        ['The others', 987],
        //    ]},
        //    series: {type: 'pie'}
        // }
        // The first colum should better be treated as a "ordinal" although it
        // might not able to be detected as an "ordinal" by `guessOrdinal`.
        || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {
          resultItem.type = 'ordinal';
        }
      }

      return result;
    } // ??? TODO
    // Originally detect dimCount by data[0]. Should we
    // optimize it to only by sysDims and dimensions and encode.
    // So only necessary dims will be initialized.
    // But
    // (1) custom series should be considered. where other dims
    // may be visited.
    // (2) sometimes user need to calcualte bubble size or use visualMap
    // on other dimensions besides coordSys needed.
    // So, dims that is not used by system, should be shared in storage?


    function getDimCount(source, sysDims, dimsDef, optDimCount) {
      // Note that the result dimCount should not small than columns count
      // of data, otherwise `dataDimNameMap` checking will be incorrect.
      var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);
      each$g(sysDims, function (sysDimItem) {
        var sysDimItemDimsDef = sysDimItem.dimsDef;
        sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));
      });
      return dimCount;
    }

    function genName(name, map, fromZero) {
      if (fromZero || map.get(name) != null) {
        var i = 0;

        while (map.get(name + i) != null) {
          i++;
        }

        name += i;
      }

      map.set(name, true);
      return name;
    }

    var _default$1k = completeDimensions;
    var completeDimensions_1 = _default$1k;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Substitute `completeDimensions`.
     * `completeDimensions` is to be deprecated.
     */

    /**
     * @param {module:echarts/data/Source|module:echarts/data/List} source or data.
     * @param {Object|Array} [opt]
     * @param {Array.<string|Object>} [opt.coordDimensions=[]]
     * @param {number} [opt.dimensionsCount]
     * @param {string} [opt.generateCoord]
     * @param {string} [opt.generateCoordCount]
     * @param {Array.<string|Object>} [opt.dimensionsDefine=source.dimensionsDefine] Overwrite source define.
     * @param {Object|HashMap} [opt.encodeDefine=source.encodeDefine] Overwrite source define.
     * @param {Function} [opt.encodeDefaulter] Make default encode if user not specified.
     * @return {Array.<Object>} dimensionsInfo
     */
    function _default$1l(source, opt) {
      opt = opt || {};
      return completeDimensions_1(opt.coordDimensions || [], source, {
        dimsDef: opt.dimensionsDefine || source.dimensionsDefine,
        encodeDef: opt.encodeDefine || source.encodeDefine,
        dimCount: opt.dimensionsCount,
        encodeDefaulter: opt.encodeDefaulter,
        generateCoord: opt.generateCoord,
        generateCoordCount: opt.generateCoordCount
      });
    }

    var createDimensions = _default$1l;

    var createHashMap$9 = util.createHashMap;
    var each$h = util.each;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Helper for model references.
     * There are many manners to refer axis/coordSys.
     */
    // TODO
    // merge relevant logic to this file?
    // check: "modelHelper" of tooltip and "BrushTargetManager".

    /**
     * @class
     * For example:
     * {
     *     coordSysName: 'cartesian2d',
     *     coordSysDims: ['x', 'y', ...],
     *     axisMap: HashMap({
     *         x: xAxisModel,
     *         y: yAxisModel
     *     }),
     *     categoryAxisMap: HashMap({
     *         x: xAxisModel,
     *         y: undefined
     *     }),
     *     // The index of the first category axis in `coordSysDims`.
     *     // `null/undefined` means no category axis exists.
     *     firstCategoryDimIndex: 1,
     *     // To replace user specified encode.
     * }
     */
    function CoordSysInfo(coordSysName) {
      /**
       * @type {string}
       */
      this.coordSysName = coordSysName;
      /**
       * @type {Array.<string>}
       */

      this.coordSysDims = [];
      /**
       * @type {module:zrender/core/util#HashMap}
       */

      this.axisMap = createHashMap$9();
      /**
       * @type {module:zrender/core/util#HashMap}
       */

      this.categoryAxisMap = createHashMap$9();
      /**
       * @type {number}
       */

      this.firstCategoryDimIndex = null;
    }
    /**
     * @return {module:model/referHelper#CoordSysInfo}
     */


    function getCoordSysInfoBySeries(seriesModel) {
      var coordSysName = seriesModel.get('coordinateSystem');
      var result = new CoordSysInfo(coordSysName);
      var fetch = fetchers[coordSysName];

      if (fetch) {
        fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);
        return result;
      }
    }

    var fetchers = {
      cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {
        var xAxisModel = seriesModel.getReferringComponents('xAxis')[0];
        var yAxisModel = seriesModel.getReferringComponents('yAxis')[0];
        result.coordSysDims = ['x', 'y'];
        axisMap.set('x', xAxisModel);
        axisMap.set('y', yAxisModel);

        if (isCategory(xAxisModel)) {
          categoryAxisMap.set('x', xAxisModel);
          result.firstCategoryDimIndex = 0;
        }

        if (isCategory(yAxisModel)) {
          categoryAxisMap.set('y', yAxisModel);
          result.firstCategoryDimIndex == null & (result.firstCategoryDimIndex = 1);
        }
      },
      singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {
        var singleAxisModel = seriesModel.getReferringComponents('singleAxis')[0];
        result.coordSysDims = ['single'];
        axisMap.set('single', singleAxisModel);

        if (isCategory(singleAxisModel)) {
          categoryAxisMap.set('single', singleAxisModel);
          result.firstCategoryDimIndex = 0;
        }
      },
      polar: function (seriesModel, result, axisMap, categoryAxisMap) {
        var polarModel = seriesModel.getReferringComponents('polar')[0];
        var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
        var angleAxisModel = polarModel.findAxisModel('angleAxis');
        result.coordSysDims = ['radius', 'angle'];
        axisMap.set('radius', radiusAxisModel);
        axisMap.set('angle', angleAxisModel);

        if (isCategory(radiusAxisModel)) {
          categoryAxisMap.set('radius', radiusAxisModel);
          result.firstCategoryDimIndex = 0;
        }

        if (isCategory(angleAxisModel)) {
          categoryAxisMap.set('angle', angleAxisModel);
          result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);
        }
      },
      geo: function (seriesModel, result, axisMap, categoryAxisMap) {
        result.coordSysDims = ['lng', 'lat'];
      },
      parallel: function (seriesModel, result, axisMap, categoryAxisMap) {
        var ecModel = seriesModel.ecModel;
        var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));
        var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();
        each$h(parallelModel.parallelAxisIndex, function (axisIndex, index) {
          var axisModel = ecModel.getComponent('parallelAxis', axisIndex);
          var axisDim = coordSysDims[index];
          axisMap.set(axisDim, axisModel);

          if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {
            categoryAxisMap.set(axisDim, axisModel);
            result.firstCategoryDimIndex = index;
          }
        });
      }
    };

    function isCategory(axisModel) {
      return axisModel.get('type') === 'category';
    }

    var getCoordSysInfoBySeries_1 = getCoordSysInfoBySeries;

    var referHelper = {
    	getCoordSysInfoBySeries: getCoordSysInfoBySeries_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var each$i = util.each;
    var isString$8 = util.isString;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Note that it is too complicated to support 3d stack by value
     * (have to create two-dimension inverted index), so in 3d case
     * we just support that stacked by index.
     *
     * @param {module:echarts/model/Series} seriesModel
     * @param {Array.<string|Object>} dimensionInfoList The same as the input of <module:echarts/data/List>.
     *        The input dimensionInfoList will be modified.
     * @param {Object} [opt]
     * @param {boolean} [opt.stackedCoordDimension=''] Specify a coord dimension if needed.
     * @param {boolean} [opt.byIndex=false]
     * @return {Object} calculationInfo
     * {
     *     stackedDimension: string
     *     stackedByDimension: string
     *     isStackedByIndex: boolean
     *     stackedOverDimension: string
     *     stackResultDimension: string
     * }
     */
    function enableDataStack(seriesModel, dimensionInfoList, opt) {
      opt = opt || {};
      var byIndex = opt.byIndex;
      var stackedCoordDimension = opt.stackedCoordDimension; // Compatibal: when `stack` is set as '', do not stack.

      var mayStack = !!(seriesModel && seriesModel.get('stack'));
      var stackedByDimInfo;
      var stackedDimInfo;
      var stackResultDimension;
      var stackedOverDimension;
      each$i(dimensionInfoList, function (dimensionInfo, index) {
        if (isString$8(dimensionInfo)) {
          dimensionInfoList[index] = dimensionInfo = {
            name: dimensionInfo
          };
        }

        if (mayStack && !dimensionInfo.isExtraCoord) {
          // Find the first ordinal dimension as the stackedByDimInfo.
          if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {
            stackedByDimInfo = dimensionInfo;
          } // Find the first stackable dimension as the stackedDimInfo.


          if (!stackedDimInfo && dimensionInfo.type !== 'ordinal' && dimensionInfo.type !== 'time' && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {
            stackedDimInfo = dimensionInfo;
          }
        }
      });

      if (stackedDimInfo && !byIndex && !stackedByDimInfo) {
        // Compatible with previous design, value axis (time axis) only stack by index.
        // It may make sense if the user provides elaborately constructed data.
        byIndex = true;
      } // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.
      // That put stack logic in List is for using conveniently in echarts extensions, but it
      // might not be a good way.


      if (stackedDimInfo) {
        // Use a weird name that not duplicated with other names.
        stackResultDimension = '__\0ecstackresult';
        stackedOverDimension = '__\0ecstackedover'; // Create inverted index to fast query index by value.

        if (stackedByDimInfo) {
          stackedByDimInfo.createInvertedIndices = true;
        }

        var stackedDimCoordDim = stackedDimInfo.coordDim;
        var stackedDimType = stackedDimInfo.type;
        var stackedDimCoordIndex = 0;
        each$i(dimensionInfoList, function (dimensionInfo) {
          if (dimensionInfo.coordDim === stackedDimCoordDim) {
            stackedDimCoordIndex++;
          }
        });
        dimensionInfoList.push({
          name: stackResultDimension,
          coordDim: stackedDimCoordDim,
          coordDimIndex: stackedDimCoordIndex,
          type: stackedDimType,
          isExtraCoord: true,
          isCalculationCoord: true
        });
        stackedDimCoordIndex++;
        dimensionInfoList.push({
          name: stackedOverDimension,
          // This dimension contains stack base (generally, 0), so do not set it as
          // `stackedDimCoordDim` to avoid extent calculation, consider log scale.
          coordDim: stackedOverDimension,
          coordDimIndex: stackedDimCoordIndex,
          type: stackedDimType,
          isExtraCoord: true,
          isCalculationCoord: true
        });
      }

      return {
        stackedDimension: stackedDimInfo && stackedDimInfo.name,
        stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,
        isStackedByIndex: byIndex,
        stackedOverDimension: stackedOverDimension,
        stackResultDimension: stackResultDimension
      };
    }
    /**
     * @param {module:echarts/data/List} data
     * @param {string} stackedDim
     */


    function isDimensionStacked(data, stackedDim
    /*, stackedByDim*/
    ) {
      // Each single series only maps to one pair of axis. So we do not need to
      // check stackByDim, whatever stacked by a dimension or stacked by index.
      return !!stackedDim && stackedDim === data.getCalculationInfo('stackedDimension'); // && (
      //     stackedByDim != null
      //         ? stackedByDim === data.getCalculationInfo('stackedByDimension')
      //         : data.getCalculationInfo('isStackedByIndex')
      // );
    }
    /**
     * @param {module:echarts/data/List} data
     * @param {string} targetDim
     * @param {string} [stackedByDim] If not input this parameter, check whether
     *                                stacked by index.
     * @return {string} dimension
     */


    function getStackedDimension(data, targetDim) {
      return isDimensionStacked(data, targetDim) ? data.getCalculationInfo('stackResultDimension') : targetDim;
    }

    var enableDataStack_1 = enableDataStack;
    var isDimensionStacked_1 = isDimensionStacked;
    var getStackedDimension_1 = getStackedDimension;

    var dataStackHelper = {
    	enableDataStack: enableDataStack_1,
    	isDimensionStacked: isDimensionStacked_1,
    	getStackedDimension: getStackedDimension_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    var SOURCE_FORMAT_ORIGINAL$4 = sourceType.SOURCE_FORMAT_ORIGINAL;



    var getDimensionTypeByAxis$1 = dimensionHelper.getDimensionTypeByAxis;



    var getDataItemValue$3 = model.getDataItemValue;





    var getCoordSysInfoBySeries$1 = referHelper.getCoordSysInfoBySeries;





    var enableDataStack$1 = dataStackHelper.enableDataStack;



    var makeSeriesEncodeForAxisCoordSys$1 = sourceHelper.makeSeriesEncodeForAxisCoordSys;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @param {module:echarts/data/Source|Array} source Or raw data.
     * @param {module:echarts/model/Series} seriesModel
     * @param {Object} [opt]
     * @param {string} [opt.generateCoord]
     * @param {boolean} [opt.useEncodeDefaulter]
     */
    function createListFromArray(source, seriesModel, opt) {
      opt = opt || {};

      if (!Source_1.isInstance(source)) {
        source = Source_1.seriesDataToSource(source);
      }

      var coordSysName = seriesModel.get('coordinateSystem');
      var registeredCoordSys = CoordinateSystem.get(coordSysName);
      var coordSysInfo = getCoordSysInfoBySeries$1(seriesModel);
      var coordSysDimDefs;

      if (coordSysInfo) {
        coordSysDimDefs = util.map(coordSysInfo.coordSysDims, function (dim) {
          var dimInfo = {
            name: dim
          };
          var axisModel = coordSysInfo.axisMap.get(dim);

          if (axisModel) {
            var axisType = axisModel.get('type');
            dimInfo.type = getDimensionTypeByAxis$1(axisType); // dimInfo.stackable = isStackable(axisType);
          }

          return dimInfo;
        });
      }

      if (!coordSysDimDefs) {
        // Get dimensions from registered coordinate system
        coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];
      }

      var dimInfoList = createDimensions(source, {
        coordDimensions: coordSysDimDefs,
        generateCoord: opt.generateCoord,
        encodeDefaulter: opt.useEncodeDefaulter ? util.curry(makeSeriesEncodeForAxisCoordSys$1, coordSysDimDefs, seriesModel) : null
      });
      var firstCategoryDimIndex;
      var hasNameEncode;
      coordSysInfo && util.each(dimInfoList, function (dimInfo, dimIndex) {
        var coordDim = dimInfo.coordDim;
        var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);

        if (categoryAxisModel) {
          if (firstCategoryDimIndex == null) {
            firstCategoryDimIndex = dimIndex;
          }

          dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();
        }

        if (dimInfo.otherDims.itemName != null) {
          hasNameEncode = true;
        }
      });

      if (!hasNameEncode && firstCategoryDimIndex != null) {
        dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;
      }

      var stackCalculationInfo = enableDataStack$1(seriesModel, dimInfoList);
      var list = new List_1(dimInfoList, seriesModel);
      list.setCalculationInfo(stackCalculationInfo);
      var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {
        // Use dataIndex as ordinal value in categoryAxis
        return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);
      } : null;
      list.hasItemOption = false;
      list.initData(source, null, dimValueGetter);
      return list;
    }

    function isNeedCompleteOrdinalData(source) {
      if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL$4) {
        var sampleItem = firstDataNotNull(source.data || []);
        return sampleItem != null && !util.isArray(getDataItemValue$3(sampleItem));
      }
    }

    function firstDataNotNull(data) {
      var i = 0;

      while (i < data.length && data[i] == null) {
        i++;
      }

      return data[i];
    }

    var _default$1m = createListFromArray;
    var createListFromArray_1 = _default$1m;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * // Scale class management
     * @module echarts/scale/Scale
     */

    /**
     * @param {Object} [setting]
     */
    function Scale(setting) {
      this._setting = setting || {};
      /**
       * Extent
       * @type {Array.<number>}
       * @protected
       */

      this._extent = [Infinity, -Infinity];
      /**
       * Step is calculated in adjustExtent
       * @type {Array.<number>}
       * @protected
       */

      this._interval = 0;
      this.init && this.init.apply(this, arguments);
    }
    /**
     * Parse input val to valid inner number.
     * @param {*} val
     * @return {number}
     */


    Scale.prototype.parse = function (val) {
      // Notice: This would be a trap here, If the implementation
      // of this method depends on extent, and this method is used
      // before extent set (like in dataZoom), it would be wrong.
      // Nevertheless, parse does not depend on extent generally.
      return val;
    };

    Scale.prototype.getSetting = function (name) {
      return this._setting[name];
    };

    Scale.prototype.contain = function (val) {
      var extent = this._extent;
      return val >= extent[0] && val <= extent[1];
    };
    /**
     * Normalize value to linear [0, 1], return 0.5 if extent span is 0
     * @param {number} val
     * @return {number}
     */


    Scale.prototype.normalize = function (val) {
      var extent = this._extent;

      if (extent[1] === extent[0]) {
        return 0.5;
      }

      return (val - extent[0]) / (extent[1] - extent[0]);
    };
    /**
     * Scale normalized value
     * @param {number} val
     * @return {number}
     */


    Scale.prototype.scale = function (val) {
      var extent = this._extent;
      return val * (extent[1] - extent[0]) + extent[0];
    };
    /**
     * Set extent from data
     * @param {Array.<number>} other
     */


    Scale.prototype.unionExtent = function (other) {
      var extent = this._extent;
      other[0] < extent[0] && (extent[0] = other[0]);
      other[1] > extent[1] && (extent[1] = other[1]); // not setExtent because in log axis it may transformed to power
      // this.setExtent(extent[0], extent[1]);
    };
    /**
     * Set extent from data
     * @param {module:echarts/data/List} data
     * @param {string} dim
     */


    Scale.prototype.unionExtentFromData = function (data, dim) {
      this.unionExtent(data.getApproximateExtent(dim));
    };
    /**
     * Get extent
     * @return {Array.<number>}
     */


    Scale.prototype.getExtent = function () {
      return this._extent.slice();
    };
    /**
     * Set extent
     * @param {number} start
     * @param {number} end
     */


    Scale.prototype.setExtent = function (start, end) {
      var thisExtent = this._extent;

      if (!isNaN(start)) {
        thisExtent[0] = start;
      }

      if (!isNaN(end)) {
        thisExtent[1] = end;
      }
    };
    /**
     * When axis extent depends on data and no data exists,
     * axis ticks should not be drawn, which is named 'blank'.
     */


    Scale.prototype.isBlank = function () {
      return this._isBlank;
    },
    /**
     * When axis extent depends on data and no data exists,
     * axis ticks should not be drawn, which is named 'blank'.
     */
    Scale.prototype.setBlank = function (isBlank) {
      this._isBlank = isBlank;
    };
    /**
     * @abstract
     * @param {*} tick
     * @return {string} label of the tick.
     */

    Scale.prototype.getLabel = null;
    clazz.enableClassExtend(Scale);
    clazz.enableClassManagement(Scale, {
      registerWhenExtend: true
    });
    var _default$1n = Scale;
    var Scale_1 = _default$1n;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var createHashMap$a = util.createHashMap;
    var isObject$b = util.isObject;
    var map$5 = util.map;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @constructor
     * @param {Object} [opt]
     * @param {Object} [opt.categories=[]]
     * @param {Object} [opt.needCollect=false]
     * @param {Object} [opt.deduplication=false]
     */
    function OrdinalMeta(opt) {
      /**
       * @readOnly
       * @type {Array.<string>}
       */
      this.categories = opt.categories || [];
      /**
       * @private
       * @type {boolean}
       */

      this._needCollect = opt.needCollect;
      /**
       * @private
       * @type {boolean}
       */

      this._deduplication = opt.deduplication;
      /**
       * @private
       * @type {boolean}
       */

      this._map;
    }
    /**
     * @param {module:echarts/model/Model} axisModel
     * @return {module:echarts/data/OrdinalMeta}
     */


    OrdinalMeta.createByAxisModel = function (axisModel) {
      var option = axisModel.option;
      var data = option.data;
      var categories = data && map$5(data, getName);
      return new OrdinalMeta({
        categories: categories,
        needCollect: !categories,
        // deduplication is default in axis.
        deduplication: option.dedplication !== false
      });
    };

    var proto$1 = OrdinalMeta.prototype;
    /**
     * @param {string} category
     * @return {number} ordinal
     */

    proto$1.getOrdinal = function (category) {
      return getOrCreateMap(this).get(category);
    };
    /**
     * @param {*} category
     * @return {number} The ordinal. If not found, return NaN.
     */


    proto$1.parseAndCollect = function (category) {
      var index;
      var needCollect = this._needCollect; // The value of category dim can be the index of the given category set.
      // This feature is only supported when !needCollect, because we should
      // consider a common case: a value is 2017, which is a number but is
      // expected to be tread as a category. This case usually happen in dataset,
      // where it happent to be no need of the index feature.

      if (typeof category !== 'string' && !needCollect) {
        return category;
      } // Optimize for the scenario:
      // category is ['2012-01-01', '2012-01-02', ...], where the input
      // data has been ensured not duplicate and is large data.
      // Notice, if a dataset dimension provide categroies, usually echarts
      // should remove duplication except user tell echarts dont do that
      // (set axis.deduplication = false), because echarts do not know whether
      // the values in the category dimension has duplication (consider the
      // parallel-aqi example)


      if (needCollect && !this._deduplication) {
        index = this.categories.length;
        this.categories[index] = category;
        return index;
      }

      var map = getOrCreateMap(this);
      index = map.get(category);

      if (index == null) {
        if (needCollect) {
          index = this.categories.length;
          this.categories[index] = category;
          map.set(category, index);
        } else {
          index = NaN;
        }
      }

      return index;
    }; // Consider big data, do not create map until needed.


    function getOrCreateMap(ordinalMeta) {
      return ordinalMeta._map || (ordinalMeta._map = createHashMap$a(ordinalMeta.categories));
    }

    function getName(obj) {
      if (isObject$b(obj) && obj.value != null) {
        return obj.value;
      } else {
        return obj + '';
      }
    }

    var _default$1o = OrdinalMeta;
    var OrdinalMeta_1 = _default$1o;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Linear continuous scale
     * @module echarts/coord/scale/Ordinal
     *
     * http://en.wikipedia.org/wiki/Level_of_measurement
     */
    // FIXME only one data
    var scaleProto = Scale_1.prototype;
    var OrdinalScale = Scale_1.extend({
      type: 'ordinal',

      /**
       * @param {module:echarts/data/OrdianlMeta|Array.<string>} ordinalMeta
       */
      init: function (ordinalMeta, extent) {
        // Caution: Should not use instanceof, consider ec-extensions using
        // import approach to get OrdinalMeta class.
        if (!ordinalMeta || util.isArray(ordinalMeta)) {
          ordinalMeta = new OrdinalMeta_1({
            categories: ordinalMeta
          });
        }

        this._ordinalMeta = ordinalMeta;
        this._extent = extent || [0, ordinalMeta.categories.length - 1];
      },
      parse: function (val) {
        return typeof val === 'string' ? this._ordinalMeta.getOrdinal(val) // val might be float.
        : Math.round(val);
      },
      contain: function (rank) {
        rank = this.parse(rank);
        return scaleProto.contain.call(this, rank) && this._ordinalMeta.categories[rank] != null;
      },

      /**
       * Normalize given rank or name to linear [0, 1]
       * @param {number|string} [val]
       * @return {number}
       */
      normalize: function (val) {
        return scaleProto.normalize.call(this, this.parse(val));
      },
      scale: function (val) {
        return Math.round(scaleProto.scale.call(this, val));
      },

      /**
       * @return {Array}
       */
      getTicks: function () {
        var ticks = [];
        var extent = this._extent;
        var rank = extent[0];

        while (rank <= extent[1]) {
          ticks.push(rank);
          rank++;
        }

        return ticks;
      },

      /**
       * Get item on rank n
       * @param {number} n
       * @return {string}
       */
      getLabel: function (n) {
        if (!this.isBlank()) {
          // Note that if no data, ordinalMeta.categories is an empty array.
          return this._ordinalMeta.categories[n];
        }
      },

      /**
       * @return {number}
       */
      count: function () {
        return this._extent[1] - this._extent[0] + 1;
      },

      /**
       * @override
       */
      unionExtentFromData: function (data, dim) {
        this.unionExtent(data.getApproximateExtent(dim));
      },
      getOrdinalMeta: function () {
        return this._ordinalMeta;
      },
      niceTicks: util.noop,
      niceExtent: util.noop
    });
    /**
     * @return {module:echarts/scale/Time}
     */

    OrdinalScale.create = function () {
      return new OrdinalScale();
    };

    var _default$1p = OrdinalScale;
    var Ordinal = _default$1p;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * For testable.
     */
    var roundNumber = number.round;
    /**
     * @param {Array.<number>} extent Both extent[0] and extent[1] should be valid number.
     *                                Should be extent[0] < extent[1].
     * @param {number} splitNumber splitNumber should be >= 1.
     * @param {number} [minInterval]
     * @param {number} [maxInterval]
     * @return {Object} {interval, intervalPrecision, niceTickExtent}
     */

    function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {
      var result = {};
      var span = extent[1] - extent[0];
      var interval = result.interval = number.nice(span / splitNumber, true);

      if (minInterval != null && interval < minInterval) {
        interval = result.interval = minInterval;
      }

      if (maxInterval != null && interval > maxInterval) {
        interval = result.interval = maxInterval;
      } // Tow more digital for tick.


      var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent

      var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];
      fixExtent(niceTickExtent, extent);
      return result;
    }
    /**
     * @param {number} interval
     * @return {number} interval precision
     */


    function getIntervalPrecision(interval) {
      // Tow more digital for tick.
      return number.getPrecisionSafe(interval) + 2;
    }

    function clamp(niceTickExtent, idx, extent) {
      niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);
    } // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.


    function fixExtent(niceTickExtent, extent) {
      !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);
      !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);
      clamp(niceTickExtent, 0, extent);
      clamp(niceTickExtent, 1, extent);

      if (niceTickExtent[0] > niceTickExtent[1]) {
        niceTickExtent[0] = niceTickExtent[1];
      }
    }

    var intervalScaleNiceTicks_1 = intervalScaleNiceTicks;
    var getIntervalPrecision_1 = getIntervalPrecision;
    var fixExtent_1 = fixExtent;

    var helper = {
    	intervalScaleNiceTicks: intervalScaleNiceTicks_1,
    	getIntervalPrecision: getIntervalPrecision_1,
    	fixExtent: fixExtent_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Interval scale
     * @module echarts/scale/Interval
     */
    var roundNumber$1 = number.round;
    /**
     * @alias module:echarts/coord/scale/Interval
     * @constructor
     */

    var IntervalScale = Scale_1.extend({
      type: 'interval',
      _interval: 0,
      _intervalPrecision: 2,
      setExtent: function (start, end) {
        var thisExtent = this._extent; //start,end may be a Number like '25',so...

        if (!isNaN(start)) {
          thisExtent[0] = parseFloat(start);
        }

        if (!isNaN(end)) {
          thisExtent[1] = parseFloat(end);
        }
      },
      unionExtent: function (other) {
        var extent = this._extent;
        other[0] < extent[0] && (extent[0] = other[0]);
        other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes

        IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
      },

      /**
       * Get interval
       */
      getInterval: function () {
        return this._interval;
      },

      /**
       * Set interval
       */
      setInterval: function (interval) {
        this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent
        // We assume user wan't to set both interval, min, max to get a better result

        this._niceExtent = this._extent.slice();
        this._intervalPrecision = helper.getIntervalPrecision(interval);
      },

      /**
       * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.
       * @return {Array.<number>}
       */
      getTicks: function (expandToNicedExtent) {
        var interval = this._interval;
        var extent = this._extent;
        var niceTickExtent = this._niceExtent;
        var intervalPrecision = this._intervalPrecision;
        var ticks = []; // If interval is 0, return [];

        if (!interval) {
          return ticks;
        } // Consider this case: using dataZoom toolbox, zoom and zoom.


        var safeLimit = 10000;

        if (extent[0] < niceTickExtent[0]) {
          if (expandToNicedExtent) {
            ticks.push(roundNumber$1(niceTickExtent[0] - interval));
          } else {
            ticks.push(extent[0]);
          }
        }

        var tick = niceTickExtent[0];

        while (tick <= niceTickExtent[1]) {
          ticks.push(tick); // Avoid rounding error

          tick = roundNumber$1(tick + interval, intervalPrecision);

          if (tick === ticks[ticks.length - 1]) {
            // Consider out of safe float point, e.g.,
            // -3711126.9907707 + 2e-10 === -3711126.9907707
            break;
          }

          if (ticks.length > safeLimit) {
            return [];
          }
        } // Consider this case: the last item of ticks is smaller
        // than niceTickExtent[1] and niceTickExtent[1] === extent[1].


        var lastNiceTick = ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1];

        if (extent[1] > lastNiceTick) {
          if (expandToNicedExtent) {
            ticks.push(lastNiceTick + interval);
          } else {
            ticks.push(extent[1]);
          }
        }

        return ticks;
      },

      /**
       * @param {number} [splitNumber=5]
       * @return {Array.<Array.<number>>}
       */
      getMinorTicks: function (splitNumber) {
        var ticks = this.getTicks(true);
        var minorTicks = [];
        var extent = this.getExtent();

        for (var i = 1; i < ticks.length; i++) {
          var nextTick = ticks[i];
          var prevTick = ticks[i - 1];
          var count = 0;
          var minorTicksGroup = [];
          var interval = nextTick - prevTick;
          var minorInterval = interval / splitNumber;

          while (count < splitNumber - 1) {
            var minorTick = number.round(prevTick + (count + 1) * minorInterval); // For the first and last interval. The count may be less than splitNumber.

            if (minorTick > extent[0] && minorTick < extent[1]) {
              minorTicksGroup.push(minorTick);
            }

            count++;
          }

          minorTicks.push(minorTicksGroup);
        }

        return minorTicks;
      },

      /**
       * @param {number} data
       * @param {Object} [opt]
       * @param {number|string} [opt.precision] If 'auto', use nice presision.
       * @param {boolean} [opt.pad] returns 1.50 but not 1.5 if precision is 2.
       * @return {string}
       */
      getLabel: function (data, opt) {
        if (data == null) {
          return '';
        }

        var precision = opt && opt.precision;

        if (precision == null) {
          precision = number.getPrecisionSafe(data) || 0;
        } else if (precision === 'auto') {
          // Should be more precise then tick.
          precision = this._intervalPrecision;
        } // (1) If `precision` is set, 12.005 should be display as '12.00500'.
        // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.


        data = roundNumber$1(data, precision, true);
        return format.addCommas(data);
      },

      /**
       * Update interval and extent of intervals for nice ticks
       *
       * @param {number} [splitNumber = 5] Desired number of ticks
       * @param {number} [minInterval]
       * @param {number} [maxInterval]
       */
      niceTicks: function (splitNumber, minInterval, maxInterval) {
        splitNumber = splitNumber || 5;
        var extent = this._extent;
        var span = extent[1] - extent[0];

        if (!isFinite(span)) {
          return;
        } // User may set axis min 0 and data are all negative
        // FIXME If it needs to reverse ?


        if (span < 0) {
          span = -span;
          extent.reverse();
        }

        var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);
        this._intervalPrecision = result.intervalPrecision;
        this._interval = result.interval;
        this._niceExtent = result.niceTickExtent;
      },

      /**
       * Nice extent.
       * @param {Object} opt
       * @param {number} [opt.splitNumber = 5] Given approx tick number
       * @param {boolean} [opt.fixMin=false]
       * @param {boolean} [opt.fixMax=false]
       * @param {boolean} [opt.minInterval]
       * @param {boolean} [opt.maxInterval]
       */
      niceExtent: function (opt) {
        var extent = this._extent; // If extent start and end are same, expand them

        if (extent[0] === extent[1]) {
          if (extent[0] !== 0) {
            // Expand extent
            var expandSize = extent[0]; // In the fowllowing case
            //      Axis has been fixed max 100
            //      Plus data are all 100 and axis extent are [100, 100].
            // Extend to the both side will cause expanded max is larger than fixed max.
            // So only expand to the smaller side.

            if (!opt.fixMax) {
              extent[1] += expandSize / 2;
              extent[0] -= expandSize / 2;
            } else {
              extent[0] -= expandSize / 2;
            }
          } else {
            extent[1] = 1;
          }
        }

        var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]

        if (!isFinite(span)) {
          extent[0] = 0;
          extent[1] = 1;
        }

        this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

        var interval = this._interval;

        if (!opt.fixMin) {
          extent[0] = roundNumber$1(Math.floor(extent[0] / interval) * interval);
        }

        if (!opt.fixMax) {
          extent[1] = roundNumber$1(Math.ceil(extent[1] / interval) * interval);
        }
      }
    });
    /**
     * @return {module:echarts/scale/Time}
     */

    IntervalScale.create = function () {
      return new IntervalScale();
    };

    var _default$1q = IntervalScale;
    var Interval = _default$1q;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var parsePercent$3 = number.parsePercent;



    var isDimensionStacked$1 = dataStackHelper.isDimensionStacked;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /* global Float32Array */
    var STACK_PREFIX = '__ec_stack_';
    var LARGE_BAR_MIN_WIDTH = 0.5;
    var LargeArr = typeof Float32Array !== 'undefined' ? Float32Array : Array;

    function getSeriesStackId(seriesModel) {
      return seriesModel.get('stack') || STACK_PREFIX + seriesModel.seriesIndex;
    }

    function getAxisKey(axis) {
      return axis.dim + axis.index;
    }
    /**
     * @param {Object} opt
     * @param {module:echarts/coord/Axis} opt.axis Only support category axis currently.
     * @param {number} opt.count Positive interger.
     * @param {number} [opt.barWidth]
     * @param {number} [opt.barMaxWidth]
     * @param {number} [opt.barMinWidth]
     * @param {number} [opt.barGap]
     * @param {number} [opt.barCategoryGap]
     * @return {Object} {width, offset, offsetCenter} If axis.type is not 'category', return undefined.
     */


    function getLayoutOnAxis(opt) {
      var params = [];
      var baseAxis = opt.axis;
      var axisKey = 'axis0';

      if (baseAxis.type !== 'category') {
        return;
      }

      var bandWidth = baseAxis.getBandWidth();

      for (var i = 0; i < opt.count || 0; i++) {
        params.push(util.defaults({
          bandWidth: bandWidth,
          axisKey: axisKey,
          stackId: STACK_PREFIX + i
        }, opt));
      }

      var widthAndOffsets = doCalBarWidthAndOffset(params);
      var result = [];

      for (var i = 0; i < opt.count; i++) {
        var item = widthAndOffsets[axisKey][STACK_PREFIX + i];
        item.offsetCenter = item.offset + item.width / 2;
        result.push(item);
      }

      return result;
    }

    function prepareLayoutBarSeries(seriesType, ecModel) {
      var seriesModels = [];
      ecModel.eachSeriesByType(seriesType, function (seriesModel) {
        // Check series coordinate, do layout for cartesian2d only
        if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {
          seriesModels.push(seriesModel);
        }
      });
      return seriesModels;
    }
    /**
     * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent
     * values.
     * This works for time axes, value axes, and log axes.
     * For a single time axis, return value is in the form like
     * {'x_0': [1000000]}.
     * The value of 1000000 is in milliseconds.
     */


    function getValueAxesMinGaps(barSeries) {
      /**
       * Map from axis.index to values.
       * For a single time axis, axisValues is in the form like
       * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.
       * Items in axisValues[x], e.g. 1495555200000, are time values of all
       * series.
       */
      var axisValues = {};
      util.each(barSeries, function (seriesModel) {
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();

        if (baseAxis.type !== 'time' && baseAxis.type !== 'value') {
          return;
        }

        var data = seriesModel.getData();
        var key = baseAxis.dim + '_' + baseAxis.index;
        var dim = data.mapDimension(baseAxis.dim);

        for (var i = 0, cnt = data.count(); i < cnt; ++i) {
          var value = data.get(dim, i);

          if (!axisValues[key]) {
            // No previous data for the axis
            axisValues[key] = [value];
          } else {
            // No value in previous series
            axisValues[key].push(value);
          } // Ignore duplicated time values in the same axis

        }
      });
      var axisMinGaps = [];

      for (var key in axisValues) {
        if (axisValues.hasOwnProperty(key)) {
          var valuesInAxis = axisValues[key];

          if (valuesInAxis) {
            // Sort axis values into ascending order to calculate gaps
            valuesInAxis.sort(function (a, b) {
              return a - b;
            });
            var min = null;

            for (var j = 1; j < valuesInAxis.length; ++j) {
              var delta = valuesInAxis[j] - valuesInAxis[j - 1];

              if (delta > 0) {
                // Ignore 0 delta because they are of the same axis value
                min = min === null ? delta : Math.min(min, delta);
              }
            } // Set to null if only have one data


            axisMinGaps[key] = min;
          }
        }
      }

      return axisMinGaps;
    }

    function makeColumnLayout(barSeries) {
      var axisMinGaps = getValueAxesMinGaps(barSeries);
      var seriesInfoList = [];
      util.each(barSeries, function (seriesModel) {
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();
        var axisExtent = baseAxis.getExtent();
        var bandWidth;

        if (baseAxis.type === 'category') {
          bandWidth = baseAxis.getBandWidth();
        } else if (baseAxis.type === 'value' || baseAxis.type === 'time') {
          var key = baseAxis.dim + '_' + baseAxis.index;
          var minGap = axisMinGaps[key];
          var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);
          var scale = baseAxis.scale.getExtent();
          var scaleSpan = Math.abs(scale[1] - scale[0]);
          bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value
        } else {
          var data = seriesModel.getData();
          bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
        }

        var barWidth = parsePercent$3(seriesModel.get('barWidth'), bandWidth);
        var barMaxWidth = parsePercent$3(seriesModel.get('barMaxWidth'), bandWidth);
        var barMinWidth = parsePercent$3( // barMinWidth by default is 1 in cartesian. Because in value axis,
        // the auto-calculated bar width might be less than 1.
        seriesModel.get('barMinWidth') || 1, bandWidth);
        var barGap = seriesModel.get('barGap');
        var barCategoryGap = seriesModel.get('barCategoryGap');
        seriesInfoList.push({
          bandWidth: bandWidth,
          barWidth: barWidth,
          barMaxWidth: barMaxWidth,
          barMinWidth: barMinWidth,
          barGap: barGap,
          barCategoryGap: barCategoryGap,
          axisKey: getAxisKey(baseAxis),
          stackId: getSeriesStackId(seriesModel)
        });
      });
      return doCalBarWidthAndOffset(seriesInfoList);
    }

    function doCalBarWidthAndOffset(seriesInfoList) {
      // Columns info on each category axis. Key is cartesian name
      var columnsMap = {};
      util.each(seriesInfoList, function (seriesInfo, idx) {
        var axisKey = seriesInfo.axisKey;
        var bandWidth = seriesInfo.bandWidth;
        var columnsOnAxis = columnsMap[axisKey] || {
          bandWidth: bandWidth,
          remainedWidth: bandWidth,
          autoWidthCount: 0,
          categoryGap: '20%',
          gap: '30%',
          stacks: {}
        };
        var stacks = columnsOnAxis.stacks;
        columnsMap[axisKey] = columnsOnAxis;
        var stackId = seriesInfo.stackId;

        if (!stacks[stackId]) {
          columnsOnAxis.autoWidthCount++;
        }

        stacks[stackId] = stacks[stackId] || {
          width: 0,
          maxWidth: 0
        }; // Caution: In a single coordinate system, these barGrid attributes
        // will be shared by series. Consider that they have default values,
        // only the attributes set on the last series will work.
        // Do not change this fact unless there will be a break change.

        var barWidth = seriesInfo.barWidth;

        if (barWidth && !stacks[stackId].width) {
          // See #6312, do not restrict width.
          stacks[stackId].width = barWidth;
          barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
          columnsOnAxis.remainedWidth -= barWidth;
        }

        var barMaxWidth = seriesInfo.barMaxWidth;
        barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
        var barMinWidth = seriesInfo.barMinWidth;
        barMinWidth && (stacks[stackId].minWidth = barMinWidth);
        var barGap = seriesInfo.barGap;
        barGap != null && (columnsOnAxis.gap = barGap);
        var barCategoryGap = seriesInfo.barCategoryGap;
        barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
      });
      var result = {};
      util.each(columnsMap, function (columnsOnAxis, coordSysName) {
        result[coordSysName] = {};
        var stacks = columnsOnAxis.stacks;
        var bandWidth = columnsOnAxis.bandWidth;
        var categoryGap = parsePercent$3(columnsOnAxis.categoryGap, bandWidth);
        var barGapPercent = parsePercent$3(columnsOnAxis.gap, 1);
        var remainedWidth = columnsOnAxis.remainedWidth;
        var autoWidthCount = columnsOnAxis.autoWidthCount;
        var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
        autoWidth = Math.max(autoWidth, 0); // Find if any auto calculated bar exceeded maxBarWidth

        util.each(stacks, function (column) {
          var maxWidth = column.maxWidth;
          var minWidth = column.minWidth;

          if (!column.width) {
            var finalWidth = autoWidth;

            if (maxWidth && maxWidth < finalWidth) {
              finalWidth = Math.min(maxWidth, remainedWidth);
            } // `minWidth` has higher priority. `minWidth` decide that wheter the
            // bar is able to be visible. So `minWidth` should not be restricted
            // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In
            // the extreme cases for `value` axis, bars are allowed to overlap
            // with each other if `minWidth` specified.


            if (minWidth && minWidth > finalWidth) {
              finalWidth = minWidth;
            }

            if (finalWidth !== autoWidth) {
              column.width = finalWidth;
              remainedWidth -= finalWidth + barGapPercent * finalWidth;
              autoWidthCount--;
            }
          } else {
            // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as
            // CSS does. Becuase barWidth can be a percent value, where
            // `barMaxWidth` can be used to restrict the final width.
            var finalWidth = column.width;

            if (maxWidth) {
              finalWidth = Math.min(finalWidth, maxWidth);
            } // `minWidth` has higher priority, as described above


            if (minWidth) {
              finalWidth = Math.max(finalWidth, minWidth);
            }

            column.width = finalWidth;
            remainedWidth -= finalWidth + barGapPercent * finalWidth;
            autoWidthCount--;
          }
        }); // Recalculate width again

        autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
        autoWidth = Math.max(autoWidth, 0);
        var widthSum = 0;
        var lastColumn;
        util.each(stacks, function (column, idx) {
          if (!column.width) {
            column.width = autoWidth;
          }

          lastColumn = column;
          widthSum += column.width * (1 + barGapPercent);
        });

        if (lastColumn) {
          widthSum -= lastColumn.width * barGapPercent;
        }

        var offset = -widthSum / 2;
        util.each(stacks, function (column, stackId) {
          result[coordSysName][stackId] = result[coordSysName][stackId] || {
            bandWidth: bandWidth,
            offset: offset,
            width: column.width
          };
          offset += column.width * (1 + barGapPercent);
        });
      });
      return result;
    }
    /**
     * @param {Object} barWidthAndOffset The result of makeColumnLayout
     * @param {module:echarts/coord/Axis} axis
     * @param {module:echarts/model/Series} [seriesModel] If not provided, return all.
     * @return {Object} {stackId: {offset, width}} or {offset, width} if seriesModel provided.
     */


    function retrieveColumnLayout(barWidthAndOffset, axis, seriesModel) {
      if (barWidthAndOffset && axis) {
        var result = barWidthAndOffset[getAxisKey(axis)];

        if (result != null && seriesModel != null) {
          result = result[getSeriesStackId(seriesModel)];
        }

        return result;
      }
    }
    /**
     * @param {string} seriesType
     * @param {module:echarts/model/Global} ecModel
     */


    function layout$1(seriesType, ecModel) {
      var seriesModels = prepareLayoutBarSeries(seriesType, ecModel);
      var barWidthAndOffset = makeColumnLayout(seriesModels);
      var lastStackCoords = {};
      util.each(seriesModels, function (seriesModel) {
        var data = seriesModel.getData();
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();
        var stackId = getSeriesStackId(seriesModel);
        var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
        var columnOffset = columnLayoutInfo.offset;
        var columnWidth = columnLayoutInfo.width;
        var valueAxis = cartesian.getOtherAxis(baseAxis);
        var barMinHeight = seriesModel.get('barMinHeight') || 0;
        lastStackCoords[stackId] = lastStackCoords[stackId] || [];

        data.setLayout({
          bandWidth: columnLayoutInfo.bandWidth,
          offset: columnOffset,
          size: columnWidth
        });
        var valueDim = data.mapDimension(valueAxis.dim);
        var baseDim = data.mapDimension(baseAxis.dim);
        var stacked = isDimensionStacked$1(data, valueDim
        /*, baseDim*/
        );
        var isValueAxisH = valueAxis.isHorizontal();
        var valueAxisStart = getValueAxisStart(baseAxis, valueAxis);

        for (var idx = 0, len = data.count(); idx < len; idx++) {
          var value = data.get(valueDim, idx);
          var baseValue = data.get(baseDim, idx); // If dataZoom in filteMode: 'empty', the baseValue can be set as NaN in "axisProxy".

          if (isNaN(value) || isNaN(baseValue)) {
            continue;
          }

          var sign = value >= 0 ? 'p' : 'n';
          var baseCoord = valueAxisStart; // Because of the barMinHeight, we can not use the value in
          // stackResultDimension directly.

          if (stacked) {
            // Only ordinal axis can be stacked.
            if (!lastStackCoords[stackId][baseValue]) {
              lastStackCoords[stackId][baseValue] = {
                p: valueAxisStart,
                // Positive stack
                n: valueAxisStart // Negative stack

              };
            } // Should also consider #4243


            baseCoord = lastStackCoords[stackId][baseValue][sign];
          }

          var x;
          var y;
          var width;
          var height;

          if (isValueAxisH) {
            var coord = cartesian.dataToPoint([value, baseValue]);
            x = baseCoord;
            y = coord[1] + columnOffset;
            width = coord[0] - valueAxisStart;
            height = columnWidth;

            if (Math.abs(width) < barMinHeight) {
              width = (width < 0 ? -1 : 1) * barMinHeight;
            }

            stacked && (lastStackCoords[stackId][baseValue][sign] += width);
          } else {
            var coord = cartesian.dataToPoint([baseValue, value]);
            x = coord[0] + columnOffset;
            y = baseCoord;
            width = columnWidth;
            height = coord[1] - valueAxisStart;

            if (Math.abs(height) < barMinHeight) {
              // Include zero to has a positive bar
              height = (height <= 0 ? -1 : 1) * barMinHeight;
            }

            stacked && (lastStackCoords[stackId][baseValue][sign] += height);
          }

          data.setItemLayout(idx, {
            x: x,
            y: y,
            width: width,
            height: height
          });
        }
      }, this);
    } // TODO: Do not support stack in large mode yet.


    var largeLayout = {
      seriesType: 'bar',
      plan: createRenderPlanner(),
      reset: function (seriesModel) {
        if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {
          return;
        }

        var data = seriesModel.getData();
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();
        var valueAxis = cartesian.getOtherAxis(baseAxis);
        var valueDim = data.mapDimension(valueAxis.dim);
        var baseDim = data.mapDimension(baseAxis.dim);
        var valueAxisHorizontal = valueAxis.isHorizontal();
        var valueDimIdx = valueAxisHorizontal ? 0 : 1;
        var barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;

        if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {
          // jshint ignore:line
          barWidth = LARGE_BAR_MIN_WIDTH;
        }

        return {
          progress: progress
        };

        function progress(params, data) {
          var count = params.count;
          var largePoints = new LargeArr(count * 2);
          var largeDataIndices = new LargeArr(count);
          var dataIndex;
          var coord = [];
          var valuePair = [];
          var pointsOffset = 0;
          var idxOffset = 0;

          while ((dataIndex = params.next()) != null) {
            valuePair[valueDimIdx] = data.get(valueDim, dataIndex);
            valuePair[1 - valueDimIdx] = data.get(baseDim, dataIndex);
            coord = cartesian.dataToPoint(valuePair, null, coord); // Data index might not be in order, depends on `progressiveChunkMode`.

            largePoints[pointsOffset++] = coord[0];
            largePoints[pointsOffset++] = coord[1];
            largeDataIndices[idxOffset++] = dataIndex;
          }

          data.setLayout({
            largePoints: largePoints,
            largeDataIndices: largeDataIndices,
            barWidth: barWidth,
            valueAxisStart: getValueAxisStart(baseAxis, valueAxis),
            valueAxisHorizontal: valueAxisHorizontal
          });
        }
      }
    };

    function isOnCartesian(seriesModel) {
      return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
    }

    function isInLargeMode(seriesModel) {
      return seriesModel.pipelineContext && seriesModel.pipelineContext.large;
    } // See cases in `test/bar-start.html` and `#7412`, `#8747`.


    function getValueAxisStart(baseAxis, valueAxis, stacked) {
      return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === 'log' ? 1 : 0));
    }

    var getLayoutOnAxis_1 = getLayoutOnAxis;
    var prepareLayoutBarSeries_1 = prepareLayoutBarSeries;
    var makeColumnLayout_1 = makeColumnLayout;
    var retrieveColumnLayout_1 = retrieveColumnLayout;
    var layout_1 = layout$1;
    var largeLayout_1 = largeLayout;

    var barGrid = {
    	getLayoutOnAxis: getLayoutOnAxis_1,
    	prepareLayoutBarSeries: prepareLayoutBarSeries_1,
    	makeColumnLayout: makeColumnLayout_1,
    	retrieveColumnLayout: retrieveColumnLayout_1,
    	layout: layout_1,
    	largeLayout: largeLayout_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */











    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * A third-party license is embeded for some of the code in this file:
    * The "scaleLevels" was originally copied from "d3.js" with some
    * modifications made for this project.
    * (See more details in the comment on the definition of "scaleLevels" below.)
    * The use of the source code of this file is also subject to the terms
    * and consitions of the license of "d3.js" (BSD-3Clause, see
    * </licenses/LICENSE-d3>).
    */
    // [About UTC and local time zone]:
    // In most cases, `number.parseDate` will treat input data string as local time
    // (except time zone is specified in time string). And `format.formateTime` returns
    // local time by default. option.useUTC is false by default. This design have
    // concidered these common case:
    // (1) Time that is persistent in server is in UTC, but it is needed to be diplayed
    // in local time by default.
    // (2) By default, the input data string (e.g., '2011-01-02') should be displayed
    // as its original time, without any time difference.
    var intervalScaleProto = Interval.prototype;
    var mathCeil = Math.ceil;
    var mathFloor = Math.floor;
    var ONE_SECOND = 1000;
    var ONE_MINUTE = ONE_SECOND * 60;
    var ONE_HOUR = ONE_MINUTE * 60;
    var ONE_DAY = ONE_HOUR * 24; // FIXME 公用？

    var bisect = function (a, x, lo, hi) {
      while (lo < hi) {
        var mid = lo + hi >>> 1;

        if (a[mid][1] < x) {
          lo = mid + 1;
        } else {
          hi = mid;
        }
      }

      return lo;
    };
    /**
     * @alias module:echarts/coord/scale/Time
     * @constructor
     */


    var TimeScale = Interval.extend({
      type: 'time',

      /**
       * @override
       */
      getLabel: function (val) {
        var stepLvl = this._stepLvl;
        var date = new Date(val);
        return format.formatTime(stepLvl[0], date, this.getSetting('useUTC'));
      },

      /**
       * @override
       */
      niceExtent: function (opt) {
        var extent = this._extent; // If extent start and end are same, expand them

        if (extent[0] === extent[1]) {
          // Expand extent
          extent[0] -= ONE_DAY;
          extent[1] += ONE_DAY;
        } // If there are no data and extent are [Infinity, -Infinity]


        if (extent[1] === -Infinity && extent[0] === Infinity) {
          var d = new Date();
          extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
          extent[0] = extent[1] - ONE_DAY;
        }

        this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // var extent = this._extent;

        var interval = this._interval;

        if (!opt.fixMin) {
          extent[0] = number.round(mathFloor(extent[0] / interval) * interval);
        }

        if (!opt.fixMax) {
          extent[1] = number.round(mathCeil(extent[1] / interval) * interval);
        }
      },

      /**
       * @override
       */
      niceTicks: function (approxTickNum, minInterval, maxInterval) {
        approxTickNum = approxTickNum || 10;
        var extent = this._extent;
        var span = extent[1] - extent[0];
        var approxInterval = span / approxTickNum;

        if (minInterval != null && approxInterval < minInterval) {
          approxInterval = minInterval;
        }

        if (maxInterval != null && approxInterval > maxInterval) {
          approxInterval = maxInterval;
        }

        var scaleLevelsLen = scaleLevels.length;
        var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
        var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
        var interval = level[1]; // Same with interval scale if span is much larger than 1 year

        if (level[0] === 'year') {
          var yearSpan = span / interval; // From "Nice Numbers for Graph Labels" of Graphic Gems
          // var niceYearSpan = numberUtil.nice(yearSpan, false);

          var yearStep = number.nice(yearSpan / approxTickNum, true);
          interval *= yearStep;
        }

        var timezoneOffset = this.getSetting('useUTC') ? 0 : new Date(+extent[0] || +extent[1]).getTimezoneOffset() * 60 * 1000;
        var niceExtent = [Math.round(mathCeil((extent[0] - timezoneOffset) / interval) * interval + timezoneOffset), Math.round(mathFloor((extent[1] - timezoneOffset) / interval) * interval + timezoneOffset)];
        helper.fixExtent(niceExtent, extent);
        this._stepLvl = level; // Interval will be used in getTicks

        this._interval = interval;
        this._niceExtent = niceExtent;
      },
      parse: function (val) {
        // val might be float.
        return +number.parseDate(val);
      }
    });
    util.each(['contain', 'normalize'], function (methodName) {
      TimeScale.prototype[methodName] = function (val) {
        return intervalScaleProto[methodName].call(this, this.parse(val));
      };
    });
    /**
     * This implementation was originally copied from "d3.js"
     * <https://github.com/d3/d3/blob/b516d77fb8566b576088e73410437494717ada26/src/time/scale.js>
     * with some modifications made for this program.
     * See the license statement at the head of this file.
     */

    var scaleLevels = [// Format              interval
    ['hh:mm:ss', ONE_SECOND], // 1s
    ['hh:mm:ss', ONE_SECOND * 5], // 5s
    ['hh:mm:ss', ONE_SECOND * 10], // 10s
    ['hh:mm:ss', ONE_SECOND * 15], // 15s
    ['hh:mm:ss', ONE_SECOND * 30], // 30s
    ['hh:mm\nMM-dd', ONE_MINUTE], // 1m
    ['hh:mm\nMM-dd', ONE_MINUTE * 5], // 5m
    ['hh:mm\nMM-dd', ONE_MINUTE * 10], // 10m
    ['hh:mm\nMM-dd', ONE_MINUTE * 15], // 15m
    ['hh:mm\nMM-dd', ONE_MINUTE * 30], // 30m
    ['hh:mm\nMM-dd', ONE_HOUR], // 1h
    ['hh:mm\nMM-dd', ONE_HOUR * 2], // 2h
    ['hh:mm\nMM-dd', ONE_HOUR * 6], // 6h
    ['hh:mm\nMM-dd', ONE_HOUR * 12], // 12h
    ['MM-dd\nyyyy', ONE_DAY], // 1d
    ['MM-dd\nyyyy', ONE_DAY * 2], // 2d
    ['MM-dd\nyyyy', ONE_DAY * 3], // 3d
    ['MM-dd\nyyyy', ONE_DAY * 4], // 4d
    ['MM-dd\nyyyy', ONE_DAY * 5], // 5d
    ['MM-dd\nyyyy', ONE_DAY * 6], // 6d
    ['week', ONE_DAY * 7], // 7d
    ['MM-dd\nyyyy', ONE_DAY * 10], // 10d
    ['week', ONE_DAY * 14], // 2w
    ['week', ONE_DAY * 21], // 3w
    ['month', ONE_DAY * 31], // 1M
    ['week', ONE_DAY * 42], // 6w
    ['month', ONE_DAY * 62], // 2M
    ['week', ONE_DAY * 70], // 10w
    ['quarter', ONE_DAY * 95], // 3M
    ['month', ONE_DAY * 31 * 4], // 4M
    ['month', ONE_DAY * 31 * 5], // 5M
    ['half-year', ONE_DAY * 380 / 2], // 6M
    ['month', ONE_DAY * 31 * 8], // 8M
    ['month', ONE_DAY * 31 * 10], // 10M
    ['year', ONE_DAY * 380] // 1Y
    ];
    /**
     * @param {module:echarts/model/Model}
     * @return {module:echarts/scale/Time}
     */

    TimeScale.create = function (model) {
      return new TimeScale({
        useUTC: model.ecModel.get('useUTC')
      });
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Log scale
     * @module echarts/scale/Log
     */
    // Use some method of IntervalScale
    var scaleProto$1 = Scale_1.prototype;
    var intervalScaleProto$1 = Interval.prototype;
    var getPrecisionSafe$1 = number.getPrecisionSafe;
    var roundingErrorFix = number.round;
    var mathFloor$1 = Math.floor;
    var mathCeil$1 = Math.ceil;
    var mathPow$1 = Math.pow;
    var mathLog = Math.log;
    var LogScale = Scale_1.extend({
      type: 'log',
      base: 10,
      $constructor: function () {
        Scale_1.apply(this, arguments);
        this._originalScale = new Interval();
      },

      /**
       * @param {boolean} [expandToNicedExtent=false] If expand the ticks to niced extent.
       * @return {Array.<number>}
       */
      getTicks: function (expandToNicedExtent) {
        var originalScale = this._originalScale;
        var extent = this._extent;
        var originalExtent = originalScale.getExtent();
        return util.map(intervalScaleProto$1.getTicks.call(this, expandToNicedExtent), function (val) {
          var powVal = number.round(mathPow$1(this.base, val)); // Fix #4158

          powVal = val === extent[0] && originalScale.__fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
          powVal = val === extent[1] && originalScale.__fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;
          return powVal;
        }, this);
      },

      /**
       * @param {number} splitNumber
       * @return {Array.<Array.<number>>}
       */
      getMinorTicks: intervalScaleProto$1.getMinorTicks,

      /**
       * @param {number} val
       * @return {string}
       */
      getLabel: intervalScaleProto$1.getLabel,

      /**
       * @param  {number} val
       * @return {number}
       */
      scale: function (val) {
        val = scaleProto$1.scale.call(this, val);
        return mathPow$1(this.base, val);
      },

      /**
       * @param {number} start
       * @param {number} end
       */
      setExtent: function (start, end) {
        var base = this.base;
        start = mathLog(start) / mathLog(base);
        end = mathLog(end) / mathLog(base);
        intervalScaleProto$1.setExtent.call(this, start, end);
      },

      /**
       * @return {number} end
       */
      getExtent: function () {
        var base = this.base;
        var extent = scaleProto$1.getExtent.call(this);
        extent[0] = mathPow$1(base, extent[0]);
        extent[1] = mathPow$1(base, extent[1]); // Fix #4158

        var originalScale = this._originalScale;
        var originalExtent = originalScale.getExtent();
        originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
        originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));
        return extent;
      },

      /**
       * @param  {Array.<number>} extent
       */
      unionExtent: function (extent) {
        this._originalScale.unionExtent(extent);

        var base = this.base;
        extent[0] = mathLog(extent[0]) / mathLog(base);
        extent[1] = mathLog(extent[1]) / mathLog(base);
        scaleProto$1.unionExtent.call(this, extent);
      },

      /**
       * @override
       */
      unionExtentFromData: function (data, dim) {
        // TODO
        // filter value that <= 0
        this.unionExtent(data.getApproximateExtent(dim));
      },

      /**
       * Update interval and extent of intervals for nice ticks
       * @param  {number} [approxTickNum = 10] Given approx tick number
       */
      niceTicks: function (approxTickNum) {
        approxTickNum = approxTickNum || 10;
        var extent = this._extent;
        var span = extent[1] - extent[0];

        if (span === Infinity || span <= 0) {
          return;
        }

        var interval = number.quantity(span);
        var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.

        if (err <= 0.5) {
          interval *= 10;
        } // Interval should be integer


        while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
          interval *= 10;
        }

        var niceExtent = [number.round(mathCeil$1(extent[0] / interval) * interval), number.round(mathFloor$1(extent[1] / interval) * interval)];
        this._interval = interval;
        this._niceExtent = niceExtent;
      },

      /**
       * Nice extent.
       * @override
       */
      niceExtent: function (opt) {
        intervalScaleProto$1.niceExtent.call(this, opt);
        var originalScale = this._originalScale;
        originalScale.__fixMin = opt.fixMin;
        originalScale.__fixMax = opt.fixMax;
      }
    });
    util.each(['contain', 'normalize'], function (methodName) {
      LogScale.prototype[methodName] = function (val) {
        val = mathLog(val) / mathLog(this.base);
        return scaleProto$1[methodName].call(this, val);
      };
    });

    LogScale.create = function () {
      return new LogScale();
    };

    function fixRoundingError(val, originalVal) {
      return roundingErrorFix(val, getPrecisionSafe$1(originalVal));
    }

    var prepareLayoutBarSeries$1 = barGrid.prepareLayoutBarSeries;
    var makeColumnLayout$1 = barGrid.makeColumnLayout;
    var retrieveColumnLayout$1 = barGrid.retrieveColumnLayout;







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Get axis scale extent before niced.
     * Item of returned array can only be number (including Infinity and NaN).
     */
    function getScaleExtent(scale, model) {
      var scaleType = scale.type;
      var min = model.getMin();
      var max = model.getMax();
      var fixMin = min != null;
      var fixMax = max != null;
      var originalExtent = scale.getExtent();
      var axisDataLen;
      var boundaryGap;
      var span;

      if (scaleType === 'ordinal') {
        axisDataLen = model.getCategories().length;
      } else {
        boundaryGap = model.get('boundaryGap');

        if (!util.isArray(boundaryGap)) {
          boundaryGap = [boundaryGap || 0, boundaryGap || 0];
        }

        if (typeof boundaryGap[0] === 'boolean') {
          boundaryGap = [0, 0];
        }

        boundaryGap[0] = number.parsePercent(boundaryGap[0], 1);
        boundaryGap[1] = number.parsePercent(boundaryGap[1], 1);
        span = originalExtent[1] - originalExtent[0] || Math.abs(originalExtent[0]);
      } // Notice: When min/max is not set (that is, when there are null/undefined,
      // which is the most common case), these cases should be ensured:
      // (1) For 'ordinal', show all axis.data.
      // (2) For others:
      //      + `boundaryGap` is applied (if min/max set, boundaryGap is
      //      disabled).
      //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should
      //      be the result that originalExtent enlarged by boundaryGap.
      // (3) If no data, it should be ensured that `scale.setBlank` is set.
      // FIXME
      // (1) When min/max is 'dataMin' or 'dataMax', should boundaryGap be able to used?
      // (2) When `needCrossZero` and all data is positive/negative, should it be ensured
      // that the results processed by boundaryGap are positive/negative?


      if (min == null) {
        min = scaleType === 'ordinal' ? axisDataLen ? 0 : NaN : originalExtent[0] - boundaryGap[0] * span;
      }

      if (max == null) {
        max = scaleType === 'ordinal' ? axisDataLen ? axisDataLen - 1 : NaN : originalExtent[1] + boundaryGap[1] * span;
      }

      if (min === 'dataMin') {
        min = originalExtent[0];
      } else if (typeof min === 'function') {
        min = min({
          min: originalExtent[0],
          max: originalExtent[1]
        });
      }

      if (max === 'dataMax') {
        max = originalExtent[1];
      } else if (typeof max === 'function') {
        max = max({
          min: originalExtent[0],
          max: originalExtent[1]
        });
      }

      (min == null || !isFinite(min)) && (min = NaN);
      (max == null || !isFinite(max)) && (max = NaN);
      scale.setBlank(util.eqNaN(min) || util.eqNaN(max) || scaleType === 'ordinal' && !scale.getOrdinalMeta().categories.length); // Evaluate if axis needs cross zero

      if (model.getNeedCrossZero()) {
        // Axis is over zero and min is not set
        if (min > 0 && max > 0 && !fixMin) {
          min = 0;
        } // Axis is under zero and max is not set


        if (min < 0 && max < 0 && !fixMax) {
          max = 0;
        }
      } // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis
      // is base axis
      // FIXME
      // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.
      // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?
      //     Should not depend on series type `bar`?
      // (3) Fix that might overlap when using dataZoom.
      // (4) Consider other chart types using `barGrid`?
      // See #6728, #4862, `test/bar-overflow-time-plot.html`


      var ecModel = model.ecModel;

      if (ecModel && scaleType === 'time'
      /*|| scaleType === 'interval' */
      ) {
        var barSeriesModels = prepareLayoutBarSeries$1('bar', ecModel);
        var isBaseAxisAndHasBarSeries;
        util.each(barSeriesModels, function (seriesModel) {
          isBaseAxisAndHasBarSeries |= seriesModel.getBaseAxis() === model.axis;
        });

        if (isBaseAxisAndHasBarSeries) {
          // Calculate placement of bars on axis
          var barWidthAndOffset = makeColumnLayout$1(barSeriesModels); // Adjust axis min and max to account for overflow

          var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);
          min = adjustedScale.min;
          max = adjustedScale.max;
        }
      }

      return [min, max];
    }

    function adjustScaleForOverflow(min, max, model, barWidthAndOffset) {
      // Get Axis Length
      var axisExtent = model.axis.getExtent();
      var axisLength = axisExtent[1] - axisExtent[0]; // Get bars on current base axis and calculate min and max overflow

      var barsOnCurrentAxis = retrieveColumnLayout$1(barWidthAndOffset, model.axis);

      if (barsOnCurrentAxis === undefined) {
        return {
          min: min,
          max: max
        };
      }

      var minOverflow = Infinity;
      util.each(barsOnCurrentAxis, function (item) {
        minOverflow = Math.min(item.offset, minOverflow);
      });
      var maxOverflow = -Infinity;
      util.each(barsOnCurrentAxis, function (item) {
        maxOverflow = Math.max(item.offset + item.width, maxOverflow);
      });
      minOverflow = Math.abs(minOverflow);
      maxOverflow = Math.abs(maxOverflow);
      var totalOverFlow = minOverflow + maxOverflow; // Calulate required buffer based on old range and overflow

      var oldRange = max - min;
      var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;
      var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;
      max += overflowBuffer * (maxOverflow / totalOverFlow);
      min -= overflowBuffer * (minOverflow / totalOverFlow);
      return {
        min: min,
        max: max
      };
    }

    function niceScaleExtent(scale, model) {
      var extent = getScaleExtent(scale, model);
      var fixMin = model.getMin() != null;
      var fixMax = model.getMax() != null;
      var splitNumber = model.get('splitNumber');

      if (scale.type === 'log') {
        scale.base = model.get('logBase');
      }

      var scaleType = scale.type;
      scale.setExtent(extent[0], extent[1]);
      scale.niceExtent({
        splitNumber: splitNumber,
        fixMin: fixMin,
        fixMax: fixMax,
        minInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('minInterval') : null,
        maxInterval: scaleType === 'interval' || scaleType === 'time' ? model.get('maxInterval') : null
      }); // If some one specified the min, max. And the default calculated interval
      // is not good enough. He can specify the interval. It is often appeared
      // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
      // to be 60.
      // FIXME

      var interval = model.get('interval');

      if (interval != null) {
        scale.setInterval && scale.setInterval(interval);
      }
    }
    /**
     * @param {module:echarts/model/Model} model
     * @param {string} [axisType] Default retrieve from model.type
     * @return {module:echarts/scale/*}
     */


    function createScaleByModel(model, axisType) {
      axisType = axisType || model.get('type');

      if (axisType) {
        switch (axisType) {
          // Buildin scale
          case 'category':
            return new Ordinal(model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(), [Infinity, -Infinity]);

          case 'value':
            return new Interval();
          // Extended scale, like time and log

          default:
            return (Scale_1.getClass(axisType) || Interval).create(model);
        }
      }
    }
    /**
     * Check if the axis corss 0
     */


    function ifAxisCrossZero(axis) {
      var dataExtent = axis.scale.getExtent();
      var min = dataExtent[0];
      var max = dataExtent[1];
      return !(min > 0 && max > 0 || min < 0 && max < 0);
    }
    /**
     * @param {module:echarts/coord/Axis} axis
     * @return {Function} Label formatter function.
     *         param: {number} tickValue,
     *         param: {number} idx, the index in all ticks.
     *                         If category axis, this param is not requied.
     *         return: {string} label string.
     */


    function makeLabelFormatter(axis) {
      var labelFormatter = axis.getLabelModel().get('formatter');
      var categoryTickStart = axis.type === 'category' ? axis.scale.getExtent()[0] : null;

      if (typeof labelFormatter === 'string') {
        labelFormatter = function (tpl) {
          return function (val) {
            // For category axis, get raw value; for numeric axis,
            // get foramtted label like '1,333,444'.
            val = axis.scale.getLabel(val);
            return tpl.replace('{value}', val != null ? val : '');
          };
        }(labelFormatter); // Consider empty array


        return labelFormatter;
      } else if (typeof labelFormatter === 'function') {
        return function (tickValue, idx) {
          // The original intention of `idx` is "the index of the tick in all ticks".
          // But the previous implementation of category axis do not consider the
          // `axisLabel.interval`, which cause that, for example, the `interval` is
          // `1`, then the ticks "name5", "name7", "name9" are displayed, where the
          // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep
          // the definition here for back compatibility.
          if (categoryTickStart != null) {
            idx = tickValue - categoryTickStart;
          }

          return labelFormatter(getAxisRawValue(axis, tickValue), idx);
        };
      } else {
        return function (tick) {
          return axis.scale.getLabel(tick);
        };
      }
    }

    function getAxisRawValue(axis, value) {
      // In category axis with data zoom, tick is not the original
      // index of axis.data. So tick should not be exposed to user
      // in category axis.
      return axis.type === 'category' ? axis.scale.getLabel(value) : value;
    }
    /**
     * @param {module:echarts/coord/Axis} axis
     * @return {module:zrender/core/BoundingRect} Be null/undefined if no labels.
     */


    function estimateLabelUnionRect(axis) {
      var axisModel = axis.model;
      var scale = axis.scale;

      if (!axisModel.get('axisLabel.show') || scale.isBlank()) {
        return;
      }

      var isCategory = axis.type === 'category';
      var realNumberScaleTicks;
      var tickCount;
      var categoryScaleExtent = scale.getExtent(); // Optimize for large category data, avoid call `getTicks()`.

      if (isCategory) {
        tickCount = scale.count();
      } else {
        realNumberScaleTicks = scale.getTicks();
        tickCount = realNumberScaleTicks.length;
      }

      var axisLabelModel = axis.getLabelModel();
      var labelFormatter = makeLabelFormatter(axis);
      var rect;
      var step = 1; // Simple optimization for large amount of labels

      if (tickCount > 40) {
        step = Math.ceil(tickCount / 40);
      }

      for (var i = 0; i < tickCount; i += step) {
        var tickValue = realNumberScaleTicks ? realNumberScaleTicks[i] : categoryScaleExtent[0] + i;
        var label = labelFormatter(tickValue);
        var unrotatedSingleRect = axisLabelModel.getTextRect(label);
        var singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get('rotate') || 0);
        rect ? rect.union(singleRect) : rect = singleRect;
      }

      return rect;
    }

    function rotateTextRect(textRect, rotate) {
      var rotateRadians = rotate * Math.PI / 180;
      var boundingBox = textRect.plain();
      var beforeWidth = boundingBox.width;
      var beforeHeight = boundingBox.height;
      var afterWidth = beforeWidth * Math.cos(rotateRadians) + beforeHeight * Math.sin(rotateRadians);
      var afterHeight = beforeWidth * Math.sin(rotateRadians) + beforeHeight * Math.cos(rotateRadians);
      var rotatedRect = new BoundingRect_1(boundingBox.x, boundingBox.y, afterWidth, afterHeight);
      return rotatedRect;
    }
    /**
     * @param {module:echarts/src/model/Model} model axisLabelModel or axisTickModel
     * @return {number|String} Can be null|'auto'|number|function
     */


    function getOptionCategoryInterval(model) {
      var interval = model.get('interval');
      return interval == null ? 'auto' : interval;
    }
    /**
     * Set `categoryInterval` as 0 implicitly indicates that
     * show all labels reguardless of overlap.
     * @param {Object} axis axisModel.axis
     * @return {boolean}
     */


    function shouldShowAllLabels(axis) {
      return axis.type === 'category' && getOptionCategoryInterval(axis.getLabelModel()) === 0;
    }

    var getScaleExtent_1 = getScaleExtent;
    var niceScaleExtent_1 = niceScaleExtent;
    var createScaleByModel_1 = createScaleByModel;
    var ifAxisCrossZero_1 = ifAxisCrossZero;
    var makeLabelFormatter_1 = makeLabelFormatter;
    var getAxisRawValue_1 = getAxisRawValue;
    var estimateLabelUnionRect_1 = estimateLabelUnionRect;
    var getOptionCategoryInterval_1 = getOptionCategoryInterval;
    var shouldShowAllLabels_1 = shouldShowAllLabels;

    var axisHelper = {
    	getScaleExtent: getScaleExtent_1,
    	niceScaleExtent: niceScaleExtent_1,
    	createScaleByModel: createScaleByModel_1,
    	ifAxisCrossZero: ifAxisCrossZero_1,
    	makeLabelFormatter: makeLabelFormatter_1,
    	getAxisRawValue: getAxisRawValue_1,
    	estimateLabelUnionRect: estimateLabelUnionRect_1,
    	getOptionCategoryInterval: getOptionCategoryInterval_1,
    	shouldShowAllLabels: shouldShowAllLabels_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // import * as axisHelper from './axisHelper';
    var _default$1r = {
      /**
       * @param {boolean} origin
       * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
       */
      getMin: function (origin) {
        var option = this.option;
        var min = !origin && option.rangeStart != null ? option.rangeStart : option.min;

        if (this.axis && min != null && min !== 'dataMin' && typeof min !== 'function' && !util.eqNaN(min)) {
          min = this.axis.scale.parse(min);
        }

        return min;
      },

      /**
       * @param {boolean} origin
       * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
       */
      getMax: function (origin) {
        var option = this.option;
        var max = !origin && option.rangeEnd != null ? option.rangeEnd : option.max;

        if (this.axis && max != null && max !== 'dataMax' && typeof max !== 'function' && !util.eqNaN(max)) {
          max = this.axis.scale.parse(max);
        }

        return max;
      },

      /**
       * @return {boolean}
       */
      getNeedCrossZero: function () {
        var option = this.option;
        return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
      },

      /**
       * Should be implemented by each axis model if necessary.
       * @return {module:echarts/model/Component} coordinate system model
       */
      getCoordSysModel: util.noop,

      /**
       * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
       * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
       */
      setRange: function (rangeStart, rangeEnd) {
        this.option.rangeStart = rangeStart;
        this.option.rangeEnd = rangeEnd;
      },

      /**
       * Reset range
       */
      resetRange: function () {
        // rangeStart and rangeEnd is readonly.
        this.option.rangeStart = this.option.rangeEnd = null;
      }
    };
    var axisModelCommonMixin = _default$1r;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    var calculateTextPosition$1 = text.calculateTextPosition;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Symbol factory

    /**
     * Triangle shape
     * @inner
     */
    var Triangle = graphic.extendShape({
      type: 'triangle',
      shape: {
        cx: 0,
        cy: 0,
        width: 0,
        height: 0
      },
      buildPath: function (path, shape) {
        var cx = shape.cx;
        var cy = shape.cy;
        var width = shape.width / 2;
        var height = shape.height / 2;
        path.moveTo(cx, cy - height);
        path.lineTo(cx + width, cy + height);
        path.lineTo(cx - width, cy + height);
        path.closePath();
      }
    });
    /**
     * Diamond shape
     * @inner
     */

    var Diamond = graphic.extendShape({
      type: 'diamond',
      shape: {
        cx: 0,
        cy: 0,
        width: 0,
        height: 0
      },
      buildPath: function (path, shape) {
        var cx = shape.cx;
        var cy = shape.cy;
        var width = shape.width / 2;
        var height = shape.height / 2;
        path.moveTo(cx, cy - height);
        path.lineTo(cx + width, cy);
        path.lineTo(cx, cy + height);
        path.lineTo(cx - width, cy);
        path.closePath();
      }
    });
    /**
     * Pin shape
     * @inner
     */

    var Pin = graphic.extendShape({
      type: 'pin',
      shape: {
        // x, y on the cusp
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      buildPath: function (path, shape) {
        var x = shape.x;
        var y = shape.y;
        var w = shape.width / 5 * 3; // Height must be larger than width

        var h = Math.max(w, shape.height);
        var r = w / 2; // Dist on y with tangent point and circle center

        var dy = r * r / (h - r);
        var cy = y - h + r + dy;
        var angle = Math.asin(dy / r); // Dist on x with tangent point and circle center

        var dx = Math.cos(angle) * r;
        var tanX = Math.sin(angle);
        var tanY = Math.cos(angle);
        var cpLen = r * 0.6;
        var cpLen2 = r * 0.7;
        path.moveTo(x - dx, cy + dy);
        path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
        path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
        path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
        path.closePath();
      }
    });
    /**
     * Arrow shape
     * @inner
     */

    var Arrow = graphic.extendShape({
      type: 'arrow',
      shape: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      buildPath: function (ctx, shape) {
        var height = shape.height;
        var width = shape.width;
        var x = shape.x;
        var y = shape.y;
        var dx = width / 3 * 2;
        ctx.moveTo(x, y);
        ctx.lineTo(x + dx, y + height);
        ctx.lineTo(x, y + height / 4 * 3);
        ctx.lineTo(x - dx, y + height);
        ctx.lineTo(x, y);
        ctx.closePath();
      }
    });
    /**
     * Map of path contructors
     * @type {Object.<string, module:zrender/graphic/Path>}
     */

    var symbolCtors = {
      line: graphic.Line,
      rect: graphic.Rect,
      roundRect: graphic.Rect,
      square: graphic.Rect,
      circle: graphic.Circle,
      diamond: Diamond,
      pin: Pin,
      arrow: Arrow,
      triangle: Triangle
    };
    var symbolShapeMakers = {
      line: function (x, y, w, h, shape) {
        // FIXME
        shape.x1 = x;
        shape.y1 = y + h / 2;
        shape.x2 = x + w;
        shape.y2 = y + h / 2;
      },
      rect: function (x, y, w, h, shape) {
        shape.x = x;
        shape.y = y;
        shape.width = w;
        shape.height = h;
      },
      roundRect: function (x, y, w, h, shape) {
        shape.x = x;
        shape.y = y;
        shape.width = w;
        shape.height = h;
        shape.r = Math.min(w, h) / 4;
      },
      square: function (x, y, w, h, shape) {
        var size = Math.min(w, h);
        shape.x = x;
        shape.y = y;
        shape.width = size;
        shape.height = size;
      },
      circle: function (x, y, w, h, shape) {
        // Put circle in the center of square
        shape.cx = x + w / 2;
        shape.cy = y + h / 2;
        shape.r = Math.min(w, h) / 2;
      },
      diamond: function (x, y, w, h, shape) {
        shape.cx = x + w / 2;
        shape.cy = y + h / 2;
        shape.width = w;
        shape.height = h;
      },
      pin: function (x, y, w, h, shape) {
        shape.x = x + w / 2;
        shape.y = y + h / 2;
        shape.width = w;
        shape.height = h;
      },
      arrow: function (x, y, w, h, shape) {
        shape.x = x + w / 2;
        shape.y = y + h / 2;
        shape.width = w;
        shape.height = h;
      },
      triangle: function (x, y, w, h, shape) {
        shape.cx = x + w / 2;
        shape.cy = y + h / 2;
        shape.width = w;
        shape.height = h;
      }
    };
    var symbolBuildProxies = {};
    util.each(symbolCtors, function (Ctor, name) {
      symbolBuildProxies[name] = new Ctor();
    });
    var SymbolClz = graphic.extendShape({
      type: 'symbol',
      shape: {
        symbolType: '',
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      calculateTextPosition: function (out, style, rect) {
        var res = calculateTextPosition$1(out, style, rect);
        var shape = this.shape;

        if (shape && shape.symbolType === 'pin' && style.textPosition === 'inside') {
          res.y = rect.y + rect.height * 0.4;
        }

        return res;
      },
      buildPath: function (ctx, shape, inBundle) {
        var symbolType = shape.symbolType;

        if (symbolType !== 'none') {
          var proxySymbol = symbolBuildProxies[symbolType];

          if (!proxySymbol) {
            // Default rect
            symbolType = 'rect';
            proxySymbol = symbolBuildProxies[symbolType];
          }

          symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
          proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
        }
      }
    }); // Provide setColor helper method to avoid determine if set the fill or stroke outside

    function symbolPathSetColor(color, innerColor) {
      if (this.type !== 'image') {
        var symbolStyle = this.style;
        var symbolShape = this.shape;

        if (symbolShape && symbolShape.symbolType === 'line') {
          symbolStyle.stroke = color;
        } else if (this.__isEmptyBrush) {
          symbolStyle.stroke = color;
          symbolStyle.fill = innerColor || '#fff';
        } else {
          // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
          symbolStyle.fill && (symbolStyle.fill = color);
          symbolStyle.stroke && (symbolStyle.stroke = color);
        }

        this.dirty(false);
      }
    }
    /**
     * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
     * @param {string} symbolType
     * @param {number} x
     * @param {number} y
     * @param {number} w
     * @param {number} h
     * @param {string} color
     * @param {boolean} [keepAspect=false] whether to keep the ratio of w/h,
     *                            for path and image only.
     */


    function createSymbol(symbolType, x, y, w, h, color, keepAspect) {
      // TODO Support image object, DynamicImage.
      var isEmpty = symbolType.indexOf('empty') === 0;

      if (isEmpty) {
        symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
      }

      var symbolPath;

      if (symbolType.indexOf('image://') === 0) {
        symbolPath = graphic.makeImage(symbolType.slice(8), new BoundingRect_1(x, y, w, h), keepAspect ? 'center' : 'cover');
      } else if (symbolType.indexOf('path://') === 0) {
        symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect_1(x, y, w, h), keepAspect ? 'center' : 'cover');
      } else {
        symbolPath = new SymbolClz({
          shape: {
            symbolType: symbolType,
            x: x,
            y: y,
            width: w,
            height: h
          }
        });
      }

      symbolPath.__isEmptyBrush = isEmpty;
      symbolPath.setColor = symbolPathSetColor;
      symbolPath.setColor(color);
      return symbolPath;
    }

    var createSymbol_1 = createSymbol;

    var symbol = {
    	createSymbol: createSymbol_1
    };

    var getLayoutRect_1$1 = layout.getLayoutRect;



    var enableDataStack$2 = dataStackHelper.enableDataStack;
    var isDimensionStacked$2 = dataStackHelper.isDimensionStacked;
    var getStackedDimension$1 = dataStackHelper.getStackedDimension;



    var completeDimensions$1 = completeDimensions_1;



    var createDimensions$1 = createDimensions;



    var createSymbol$1 = symbol.createSymbol;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // import createGraphFromNodeEdge from './chart/helper/createGraphFromNodeEdge';

    /**
     * Create a muti dimension List structure from seriesModel.
     * @param  {module:echarts/model/Model} seriesModel
     * @return {module:echarts/data/List} list
     */
    function createList(seriesModel) {
      return createListFromArray_1(seriesModel.getSource(), seriesModel);
    } // export function createGraph(seriesModel) {
    //     var nodes = seriesModel.get('data');
    //     var links = seriesModel.get('links');
    //     return createGraphFromNodeEdge(nodes, links, seriesModel);
    // }


    var dataStack$1 = {
      isDimensionStacked: isDimensionStacked$2,
      enableDataStack: enableDataStack$2,
      getStackedDimension: getStackedDimension$1
    };
    /**
     * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
     * @param {string} symbolDesc
     * @param {number} x
     * @param {number} y
     * @param {number} w
     * @param {number} h
     * @param {string} color
     */

    /**
     * Create scale
     * @param {Array.<number>} dataExtent
     * @param {Object|module:echarts/Model} option
     */
    function createScale(dataExtent, option) {
      var axisModel = option;

      if (!Model_1.isInstance(option)) {
        axisModel = new Model_1(option);
        util.mixin(axisModel, axisModelCommonMixin);
      }

      var scale = axisHelper.createScaleByModel(axisModel);
      scale.setExtent(dataExtent[0], dataExtent[1]);
      axisHelper.niceScaleExtent(scale, axisModel);
      return scale;
    }
    /**
     * Mixin common methods to axis model,
     *
     * Inlcude methods
     * `getFormattedLabels() => Array.<string>`
     * `getCategories() => Array.<string>`
     * `getMin(origin: boolean) => number`
     * `getMax(origin: boolean) => number`
     * `getNeedCrossZero() => boolean`
     * `setRange(start: number, end: number)`
     * `resetRange()`
     */


    function mixinAxisModelCommonMethods(Model) {
      util.mixin(Model, axisModelCommonMixin);
    }

    var createList_1 = createList;
    var dataStack_1 = dataStack$1;
    var createScale_1 = createScale;
    var mixinAxisModelCommonMethods_1 = mixinAxisModelCommonMethods;

    var helper$1 = {
    	getLayoutRect: getLayoutRect_1$1,
    	completeDimensions: completeDimensions$1,
    	createDimensions: createDimensions$1,
    	createSymbol: createSymbol$1,
    	createList: createList_1,
    	dataStack: dataStack_1,
    	createScale: createScale_1,
    	mixinAxisModelCommonMethods: mixinAxisModelCommonMethods_1
    };

    var EPSILON$3 = 1e-8;

    function isAroundEqual$1(a, b) {
      return Math.abs(a - b) < EPSILON$3;
    }

    function contain$1(points, x, y) {
      var w = 0;
      var p = points[0];

      if (!p) {
        return false;
      }

      for (var i = 1; i < points.length; i++) {
        var p2 = points[i];
        w += windingLine_1(p[0], p[1], p2[0], p2[1], x, y);
        p = p2;
      } // Close polygon


      var p0 = points[0];

      if (!isAroundEqual$1(p[0], p0[0]) || !isAroundEqual$1(p[1], p0[1])) {
        w += windingLine_1(p[0], p[1], p0[0], p0[1], x, y);
      }

      return w !== 0;
    }

    var contain_1$1 = contain$1;

    var polygon = {
    	contain: contain_1$1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @module echarts/coord/geo/Region
     */

    /**
     * @param {string|Region} name
     * @param {Array} geometries
     * @param {Array.<number>} cp
     */
    function Region(name, geometries, cp) {
      /**
       * @type {string}
       * @readOnly
       */
      this.name = name;
      /**
       * @type {Array.<Array>}
       * @readOnly
       */

      this.geometries = geometries;

      if (!cp) {
        var rect = this.getBoundingRect();
        cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
      } else {
        cp = [cp[0], cp[1]];
      }
      /**
       * @type {Array.<number>}
       */


      this.center = cp;
    }

    Region.prototype = {
      constructor: Region,
      properties: null,

      /**
       * @return {module:zrender/core/BoundingRect}
       */
      getBoundingRect: function () {
        var rect = this._rect;

        if (rect) {
          return rect;
        }

        var MAX_NUMBER = Number.MAX_VALUE;
        var min = [MAX_NUMBER, MAX_NUMBER];
        var max = [-MAX_NUMBER, -MAX_NUMBER];
        var min2 = [];
        var max2 = [];
        var geometries = this.geometries;

        for (var i = 0; i < geometries.length; i++) {
          // Only support polygon
          if (geometries[i].type !== 'polygon') {
            continue;
          } // Doesn't consider hole


          var exterior = geometries[i].exterior;
          bbox.fromPoints(exterior, min2, max2);
          vector.min(min, min, min2);
          vector.max(max, max, max2);
        } // No data


        if (i === 0) {
          min[0] = min[1] = max[0] = max[1] = 0;
        }

        return this._rect = new BoundingRect_1(min[0], min[1], max[0] - min[0], max[1] - min[1]);
      },

      /**
       * @param {<Array.<number>} coord
       * @return {boolean}
       */
      contain: function (coord) {
        var rect = this.getBoundingRect();
        var geometries = this.geometries;

        if (!rect.contain(coord[0], coord[1])) {
          return false;
        }

        loopGeo: for (var i = 0, len = geometries.length; i < len; i++) {
          // Only support polygon.
          if (geometries[i].type !== 'polygon') {
            continue;
          }

          var exterior = geometries[i].exterior;
          var interiors = geometries[i].interiors;

          if (polygon.contain(exterior, coord[0], coord[1])) {
            // Not in the region if point is in the hole.
            for (var k = 0; k < (interiors ? interiors.length : 0); k++) {
              if (polygon.contain(interiors[k])) {
                continue loopGeo;
              }
            }

            return true;
          }
        }

        return false;
      },
      transformTo: function (x, y, width, height) {
        var rect = this.getBoundingRect();
        var aspect = rect.width / rect.height;

        if (!width) {
          width = aspect * height;
        } else if (!height) {
          height = width / aspect;
        }

        var target = new BoundingRect_1(x, y, width, height);
        var transform = rect.calculateTransform(target);
        var geometries = this.geometries;

        for (var i = 0; i < geometries.length; i++) {
          // Only support polygon.
          if (geometries[i].type !== 'polygon') {
            continue;
          }

          var exterior = geometries[i].exterior;
          var interiors = geometries[i].interiors;

          for (var p = 0; p < exterior.length; p++) {
            vector.applyTransform(exterior[p], exterior[p], transform);
          }

          for (var h = 0; h < (interiors ? interiors.length : 0); h++) {
            for (var p = 0; p < interiors[h].length; p++) {
              vector.applyTransform(interiors[h][p], interiors[h][p], transform);
            }
          }
        }

        rect = this._rect;
        rect.copy(target); // Update center

        this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
      },
      cloneShallow: function (name) {
        name == null && (name = this.name);
        var newRegion = new Region(name, this.geometries, this.center);
        newRegion._rect = this._rect;
        newRegion.transformTo = null; // Simply avoid to be called.

        return newRegion;
      }
    };
    var _default$1s = Region;
    var Region_1 = _default$1s;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Parse and decode geo json
     * @module echarts/coord/geo/parseGeoJson
     */
    function decode(json) {
      if (!json.UTF8Encoding) {
        return json;
      }

      var encodeScale = json.UTF8Scale;

      if (encodeScale == null) {
        encodeScale = 1024;
      }

      var features = json.features;

      for (var f = 0; f < features.length; f++) {
        var feature = features[f];
        var geometry = feature.geometry;
        var coordinates = geometry.coordinates;
        var encodeOffsets = geometry.encodeOffsets;

        for (var c = 0; c < coordinates.length; c++) {
          var coordinate = coordinates[c];

          if (geometry.type === 'Polygon') {
            coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);
          } else if (geometry.type === 'MultiPolygon') {
            for (var c2 = 0; c2 < coordinate.length; c2++) {
              var polygon = coordinate[c2];
              coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);
            }
          }
        }
      } // Has been decoded


      json.UTF8Encoding = false;
      return json;
    }

    function decodePolygon(coordinate, encodeOffsets, encodeScale) {
      var result = [];
      var prevX = encodeOffsets[0];
      var prevY = encodeOffsets[1];

      for (var i = 0; i < coordinate.length; i += 2) {
        var x = coordinate.charCodeAt(i) - 64;
        var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding

        x = x >> 1 ^ -(x & 1);
        y = y >> 1 ^ -(y & 1); // Delta deocding

        x += prevX;
        y += prevY;
        prevX = x;
        prevY = y; // Dequantize

        result.push([x / encodeScale, y / encodeScale]);
      }

      return result;
    }
    /**
     * @alias module:echarts/coord/geo/parseGeoJson
     * @param {Object} geoJson
     * @return {module:zrender/container/Group}
     */


    function _default$1t(geoJson) {
      decode(geoJson);
      return util.map(util.filter(geoJson.features, function (featureObj) {
        // Output of mapshaper may have geometry null
        return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;
      }), function (featureObj) {
        var properties = featureObj.properties;
        var geo = featureObj.geometry;
        var coordinates = geo.coordinates;
        var geometries = [];

        if (geo.type === 'Polygon') {
          geometries.push({
            type: 'polygon',
            // According to the GeoJSON specification.
            // First must be exterior, and the rest are all interior(holes).
            exterior: coordinates[0],
            interiors: coordinates.slice(1)
          });
        }

        if (geo.type === 'MultiPolygon') {
          util.each(coordinates, function (item) {
            if (item[0]) {
              geometries.push({
                type: 'polygon',
                exterior: item[0],
                interiors: item.slice(1)
              });
            }
          });
        }

        var region = new Region_1(properties.name, geometries, properties.cp);
        region.properties = properties;
        return region;
      });
    }

    var parseGeoJson = _default$1t;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var makeInner$6 = model.makeInner;



    var makeLabelFormatter$1 = axisHelper.makeLabelFormatter;
    var getOptionCategoryInterval$1 = axisHelper.getOptionCategoryInterval;
    var shouldShowAllLabels$1 = axisHelper.shouldShowAllLabels;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var inner$6 = makeInner$6();
    /**
     * @param {module:echats/coord/Axis} axis
     * @return {Object} {
     *     labels: [{
     *         formattedLabel: string,
     *         rawLabel: string,
     *         tickValue: number
     *     }, ...],
     *     labelCategoryInterval: number
     * }
     */

    function createAxisLabels(axis) {
      // Only ordinal scale support tick interval
      return axis.type === 'category' ? makeCategoryLabels(axis) : makeRealNumberLabels(axis);
    }
    /**
     * @param {module:echats/coord/Axis} axis
     * @param {module:echarts/model/Model} tickModel For example, can be axisTick, splitLine, splitArea.
     * @return {Object} {
     *     ticks: Array.<number>
     *     tickCategoryInterval: number
     * }
     */


    function createAxisTicks(axis, tickModel) {
      // Only ordinal scale support tick interval
      return axis.type === 'category' ? makeCategoryTicks(axis, tickModel) : {
        ticks: axis.scale.getTicks()
      };
    }

    function makeCategoryLabels(axis) {
      var labelModel = axis.getLabelModel();
      var result = makeCategoryLabelsActually(axis, labelModel);
      return !labelModel.get('show') || axis.scale.isBlank() ? {
        labels: [],
        labelCategoryInterval: result.labelCategoryInterval
      } : result;
    }

    function makeCategoryLabelsActually(axis, labelModel) {
      var labelsCache = getListCache(axis, 'labels');
      var optionLabelInterval = getOptionCategoryInterval$1(labelModel);
      var result = listCacheGet(labelsCache, optionLabelInterval);

      if (result) {
        return result;
      }

      var labels;
      var numericLabelInterval;

      if (util.isFunction(optionLabelInterval)) {
        labels = makeLabelsByCustomizedCategoryInterval(axis, optionLabelInterval);
      } else {
        numericLabelInterval = optionLabelInterval === 'auto' ? makeAutoCategoryInterval(axis) : optionLabelInterval;
        labels = makeLabelsByNumericCategoryInterval(axis, numericLabelInterval);
      } // Cache to avoid calling interval function repeatly.


      return listCacheSet(labelsCache, optionLabelInterval, {
        labels: labels,
        labelCategoryInterval: numericLabelInterval
      });
    }

    function makeCategoryTicks(axis, tickModel) {
      var ticksCache = getListCache(axis, 'ticks');
      var optionTickInterval = getOptionCategoryInterval$1(tickModel);
      var result = listCacheGet(ticksCache, optionTickInterval);

      if (result) {
        return result;
      }

      var ticks;
      var tickCategoryInterval; // Optimize for the case that large category data and no label displayed,
      // we should not return all ticks.

      if (!tickModel.get('show') || axis.scale.isBlank()) {
        ticks = [];
      }

      if (util.isFunction(optionTickInterval)) {
        ticks = makeLabelsByCustomizedCategoryInterval(axis, optionTickInterval, true);
      } // Always use label interval by default despite label show. Consider this
      // scenario, Use multiple grid with the xAxis sync, and only one xAxis shows
      // labels. `splitLine` and `axisTick` should be consistent in this case.
      else if (optionTickInterval === 'auto') {
          var labelsResult = makeCategoryLabelsActually(axis, axis.getLabelModel());
          tickCategoryInterval = labelsResult.labelCategoryInterval;
          ticks = util.map(labelsResult.labels, function (labelItem) {
            return labelItem.tickValue;
          });
        } else {
          tickCategoryInterval = optionTickInterval;
          ticks = makeLabelsByNumericCategoryInterval(axis, tickCategoryInterval, true);
        } // Cache to avoid calling interval function repeatly.


      return listCacheSet(ticksCache, optionTickInterval, {
        ticks: ticks,
        tickCategoryInterval: tickCategoryInterval
      });
    }

    function makeRealNumberLabels(axis) {
      var ticks = axis.scale.getTicks();
      var labelFormatter = makeLabelFormatter$1(axis);
      return {
        labels: util.map(ticks, function (tickValue, idx) {
          return {
            formattedLabel: labelFormatter(tickValue, idx),
            rawLabel: axis.scale.getLabel(tickValue),
            tickValue: tickValue
          };
        })
      };
    } // Large category data calculation is performence sensitive, and ticks and label
    // probably be fetched by multiple times. So we cache the result.
    // axis is created each time during a ec process, so we do not need to clear cache.


    function getListCache(axis, prop) {
      // Because key can be funciton, and cache size always be small, we use array cache.
      return inner$6(axis)[prop] || (inner$6(axis)[prop] = []);
    }

    function listCacheGet(cache, key) {
      for (var i = 0; i < cache.length; i++) {
        if (cache[i].key === key) {
          return cache[i].value;
        }
      }
    }

    function listCacheSet(cache, key, value) {
      cache.push({
        key: key,
        value: value
      });
      return value;
    }

    function makeAutoCategoryInterval(axis) {
      var result = inner$6(axis).autoInterval;
      return result != null ? result : inner$6(axis).autoInterval = axis.calculateCategoryInterval();
    }
    /**
     * Calculate interval for category axis ticks and labels.
     * To get precise result, at least one of `getRotate` and `isHorizontal`
     * should be implemented in axis.
     */


    function calculateCategoryInterval(axis) {
      var params = fetchAutoCategoryIntervalCalculationParams(axis);
      var labelFormatter = makeLabelFormatter$1(axis);
      var rotation = (params.axisRotate - params.labelRotate) / 180 * Math.PI;
      var ordinalScale = axis.scale;
      var ordinalExtent = ordinalScale.getExtent(); // Providing this method is for optimization:
      // avoid generating a long array by `getTicks`
      // in large category data case.

      var tickCount = ordinalScale.count();

      if (ordinalExtent[1] - ordinalExtent[0] < 1) {
        return 0;
      }

      var step = 1; // Simple optimization. Empirical value: tick count should less than 40.

      if (tickCount > 40) {
        step = Math.max(1, Math.floor(tickCount / 40));
      }

      var tickValue = ordinalExtent[0];
      var unitSpan = axis.dataToCoord(tickValue + 1) - axis.dataToCoord(tickValue);
      var unitW = Math.abs(unitSpan * Math.cos(rotation));
      var unitH = Math.abs(unitSpan * Math.sin(rotation));
      var maxW = 0;
      var maxH = 0; // Caution: Performance sensitive for large category data.
      // Consider dataZoom, we should make appropriate step to avoid O(n) loop.

      for (; tickValue <= ordinalExtent[1]; tickValue += step) {
        var width = 0;
        var height = 0; // Not precise, do not consider align and vertical align
        // and each distance from axis line yet.

        var rect = text.getBoundingRect(labelFormatter(tickValue), params.font, 'center', 'top'); // Magic number

        width = rect.width * 1.3;
        height = rect.height * 1.3; // Min size, void long loop.

        maxW = Math.max(maxW, width, 7);
        maxH = Math.max(maxH, height, 7);
      }

      var dw = maxW / unitW;
      var dh = maxH / unitH; // 0/0 is NaN, 1/0 is Infinity.

      isNaN(dw) && (dw = Infinity);
      isNaN(dh) && (dh = Infinity);
      var interval = Math.max(0, Math.floor(Math.min(dw, dh)));
      var cache = inner$6(axis.model);
      var axisExtent = axis.getExtent();
      var lastAutoInterval = cache.lastAutoInterval;
      var lastTickCount = cache.lastTickCount; // Use cache to keep interval stable while moving zoom window,
      // otherwise the calculated interval might jitter when the zoom
      // window size is close to the interval-changing size.
      // For example, if all of the axis labels are `a, b, c, d, e, f, g`.
      // The jitter will cause that sometimes the displayed labels are
      // `a, d, g` (interval: 2) sometimes `a, c, e`(interval: 1).

      if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 // Always choose the bigger one, otherwise the critical
      // point is not the same when zooming in or zooming out.
      && lastAutoInterval > interval // If the axis change is caused by chart resize, the cache should not
      // be used. Otherwise some hiden labels might not be shown again.
      && cache.axisExtend0 === axisExtent[0] && cache.axisExtend1 === axisExtent[1]) {
        interval = lastAutoInterval;
      } // Only update cache if cache not used, otherwise the
      // changing of interval is too insensitive.
      else {
          cache.lastTickCount = tickCount;
          cache.lastAutoInterval = interval;
          cache.axisExtend0 = axisExtent[0];
          cache.axisExtend1 = axisExtent[1];
        }

      return interval;
    }

    function fetchAutoCategoryIntervalCalculationParams(axis) {
      var labelModel = axis.getLabelModel();
      return {
        axisRotate: axis.getRotate ? axis.getRotate() : axis.isHorizontal && !axis.isHorizontal() ? 90 : 0,
        labelRotate: labelModel.get('rotate') || 0,
        font: labelModel.getFont()
      };
    }

    function makeLabelsByNumericCategoryInterval(axis, categoryInterval, onlyTick) {
      var labelFormatter = makeLabelFormatter$1(axis);
      var ordinalScale = axis.scale;
      var ordinalExtent = ordinalScale.getExtent();
      var labelModel = axis.getLabelModel();
      var result = []; // TODO: axisType: ordinalTime, pick the tick from each month/day/year/...

      var step = Math.max((categoryInterval || 0) + 1, 1);
      var startTick = ordinalExtent[0];
      var tickCount = ordinalScale.count(); // Calculate start tick based on zero if possible to keep label consistent
      // while zooming and moving while interval > 0. Otherwise the selection
      // of displayable ticks and symbols probably keep changing.
      // 3 is empirical value.

      if (startTick !== 0 && step > 1 && tickCount / step > 2) {
        startTick = Math.round(Math.ceil(startTick / step) * step);
      } // (1) Only add min max label here but leave overlap checking
      // to render stage, which also ensure the returned list
      // suitable for splitLine and splitArea rendering.
      // (2) Scales except category always contain min max label so
      // do not need to perform this process.


      var showAllLabel = shouldShowAllLabels$1(axis);
      var includeMinLabel = labelModel.get('showMinLabel') || showAllLabel;
      var includeMaxLabel = labelModel.get('showMaxLabel') || showAllLabel;

      if (includeMinLabel && startTick !== ordinalExtent[0]) {
        addItem(ordinalExtent[0]);
      } // Optimize: avoid generating large array by `ordinalScale.getTicks()`.


      var tickValue = startTick;

      for (; tickValue <= ordinalExtent[1]; tickValue += step) {
        addItem(tickValue);
      }

      if (includeMaxLabel && tickValue - step !== ordinalExtent[1]) {
        addItem(ordinalExtent[1]);
      }

      function addItem(tVal) {
        result.push(onlyTick ? tVal : {
          formattedLabel: labelFormatter(tVal),
          rawLabel: ordinalScale.getLabel(tVal),
          tickValue: tVal
        });
      }

      return result;
    } // When interval is function, the result `false` means ignore the tick.
    // It is time consuming for large category data.


    function makeLabelsByCustomizedCategoryInterval(axis, categoryInterval, onlyTick) {
      var ordinalScale = axis.scale;
      var labelFormatter = makeLabelFormatter$1(axis);
      var result = [];
      util.each(ordinalScale.getTicks(), function (tickValue) {
        var rawLabel = ordinalScale.getLabel(tickValue);

        if (categoryInterval(tickValue, rawLabel)) {
          result.push(onlyTick ? tickValue : {
            formattedLabel: labelFormatter(tickValue),
            rawLabel: rawLabel,
            tickValue: tickValue
          });
        }
      });
      return result;
    }

    var createAxisLabels_1 = createAxisLabels;
    var createAxisTicks_1 = createAxisTicks;
    var calculateCategoryInterval_1 = calculateCategoryInterval;

    var axisTickLabelBuilder = {
    	createAxisLabels: createAxisLabels_1,
    	createAxisTicks: createAxisTicks_1,
    	calculateCategoryInterval: calculateCategoryInterval_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var each$j = util.each;
    var map$6 = util.map;



    var linearMap$1 = number.linearMap;
    var getPixelPrecision$1 = number.getPixelPrecision;
    var round$2 = number.round;



    var createAxisTicks$1 = axisTickLabelBuilder.createAxisTicks;
    var createAxisLabels$1 = axisTickLabelBuilder.createAxisLabels;
    var calculateCategoryInterval$1 = axisTickLabelBuilder.calculateCategoryInterval;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var NORMALIZED_EXTENT = [0, 1];
    /**
     * Base class of Axis.
     * @constructor
     */

    var Axis = function (dim, scale, extent) {
      /**
       * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'.
       * @type {string}
       */
      this.dim = dim;
      /**
       * Axis scale
       * @type {module:echarts/coord/scale/*}
       */

      this.scale = scale;
      /**
       * @type {Array.<number>}
       * @private
       */

      this._extent = extent || [0, 0];
      /**
       * @type {boolean}
       */

      this.inverse = false;
      /**
       * Usually true when axis has a ordinal scale
       * @type {boolean}
       */

      this.onBand = false;
    };

    Axis.prototype = {
      constructor: Axis,

      /**
       * If axis extent contain given coord
       * @param {number} coord
       * @return {boolean}
       */
      contain: function (coord) {
        var extent = this._extent;
        var min = Math.min(extent[0], extent[1]);
        var max = Math.max(extent[0], extent[1]);
        return coord >= min && coord <= max;
      },

      /**
       * If axis extent contain given data
       * @param {number} data
       * @return {boolean}
       */
      containData: function (data) {
        return this.scale.contain(data);
      },

      /**
       * Get coord extent.
       * @return {Array.<number>}
       */
      getExtent: function () {
        return this._extent.slice();
      },

      /**
       * Get precision used for formatting
       * @param {Array.<number>} [dataExtent]
       * @return {number}
       */
      getPixelPrecision: function (dataExtent) {
        return getPixelPrecision$1(dataExtent || this.scale.getExtent(), this._extent);
      },

      /**
       * Set coord extent
       * @param {number} start
       * @param {number} end
       */
      setExtent: function (start, end) {
        var extent = this._extent;
        extent[0] = start;
        extent[1] = end;
      },

      /**
       * Convert data to coord. Data is the rank if it has an ordinal scale
       * @param {number} data
       * @param  {boolean} clamp
       * @return {number}
       */
      dataToCoord: function (data, clamp) {
        var extent = this._extent;
        var scale = this.scale;
        data = scale.normalize(data);

        if (this.onBand && scale.type === 'ordinal') {
          extent = extent.slice();
          fixExtentWithBands(extent, scale.count());
        }

        return linearMap$1(data, NORMALIZED_EXTENT, extent, clamp);
      },

      /**
       * Convert coord to data. Data is the rank if it has an ordinal scale
       * @param {number} coord
       * @param  {boolean} clamp
       * @return {number}
       */
      coordToData: function (coord, clamp) {
        var extent = this._extent;
        var scale = this.scale;

        if (this.onBand && scale.type === 'ordinal') {
          extent = extent.slice();
          fixExtentWithBands(extent, scale.count());
        }

        var t = linearMap$1(coord, extent, NORMALIZED_EXTENT, clamp);
        return this.scale.scale(t);
      },

      /**
       * Convert pixel point to data in axis
       * @param {Array.<number>} point
       * @param  {boolean} clamp
       * @return {number} data
       */
      pointToData: function (point, clamp) {// Should be implemented in derived class if necessary.
      },

      /**
       * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,
       * `axis.getTicksCoords` considers `onBand`, which is used by
       * `boundaryGap:true` of category axis and splitLine and splitArea.
       * @param {Object} [opt]
       * @param {Model} [opt.tickModel=axis.model.getModel('axisTick')]
       * @param {boolean} [opt.clamp] If `true`, the first and the last
       *        tick must be at the axis end points. Otherwise, clip ticks
       *        that outside the axis extent.
       * @return {Array.<Object>} [{
       *     coord: ...,
       *     tickValue: ...
       * }, ...]
       */
      getTicksCoords: function (opt) {
        opt = opt || {};
        var tickModel = opt.tickModel || this.getTickModel();
        var result = createAxisTicks$1(this, tickModel);
        var ticks = result.ticks;
        var ticksCoords = map$6(ticks, function (tickValue) {
          return {
            coord: this.dataToCoord(tickValue),
            tickValue: tickValue
          };
        }, this);
        var alignWithLabel = tickModel.get('alignWithLabel');
        fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);
        return ticksCoords;
      },

      /**
       * @return {Array.<Array.<Object>>} [{ coord: ..., tickValue: ...}]
       */
      getMinorTicksCoords: function () {
        if (this.scale.type === 'ordinal') {
          // Category axis doesn't support minor ticks
          return [];
        }

        var minorTickModel = this.model.getModel('minorTick');
        var splitNumber = minorTickModel.get('splitNumber'); // Protection.

        if (!(splitNumber > 0 && splitNumber < 100)) {
          splitNumber = 5;
        }

        var minorTicks = this.scale.getMinorTicks(splitNumber);
        var minorTicksCoords = map$6(minorTicks, function (minorTicksGroup) {
          return map$6(minorTicksGroup, function (minorTick) {
            return {
              coord: this.dataToCoord(minorTick),
              tickValue: minorTick
            };
          }, this);
        }, this);
        return minorTicksCoords;
      },

      /**
       * @return {Array.<Object>} [{
       *     formattedLabel: string,
       *     rawLabel: axis.scale.getLabel(tickValue)
       *     tickValue: number
       * }, ...]
       */
      getViewLabels: function () {
        return createAxisLabels$1(this).labels;
      },

      /**
       * @return {module:echarts/coord/model/Model}
       */
      getLabelModel: function () {
        return this.model.getModel('axisLabel');
      },

      /**
       * Notice here we only get the default tick model. For splitLine
       * or splitArea, we should pass the splitLineModel or splitAreaModel
       * manually when calling `getTicksCoords`.
       * In GL, this method may be overrided to:
       * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`
       * @return {module:echarts/coord/model/Model}
       */
      getTickModel: function () {
        return this.model.getModel('axisTick');
      },

      /**
       * Get width of band
       * @return {number}
       */
      getBandWidth: function () {
        var axisExtent = this._extent;
        var dataExtent = this.scale.getExtent();
        var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0); // Fix #2728, avoid NaN when only one data.

        len === 0 && (len = 1);
        var size = Math.abs(axisExtent[1] - axisExtent[0]);
        return Math.abs(size) / len;
      },

      /**
       * @abstract
       * @return {boolean} Is horizontal
       */
      isHorizontal: null,

      /**
       * @abstract
       * @return {number} Get axis rotate, by degree.
       */
      getRotate: null,

      /**
       * Only be called in category axis.
       * Can be overrided, consider other axes like in 3D.
       * @return {number} Auto interval for cateogry axis tick and label
       */
      calculateCategoryInterval: function () {
        return calculateCategoryInterval$1(this);
      }
    };

    function fixExtentWithBands(extent, nTick) {
      var size = extent[1] - extent[0];
      var len = nTick;
      var margin = size / len / 2;
      extent[0] += margin;
      extent[1] -= margin;
    } // If axis has labels [1, 2, 3, 4]. Bands on the axis are
    // |---1---|---2---|---3---|---4---|.
    // So the displayed ticks and splitLine/splitArea should between
    // each data item, otherwise cause misleading (e.g., split tow bars
    // of a single data item when there are two bar series).
    // Also consider if tickCategoryInterval > 0 and onBand, ticks and
    // splitLine/spliteArea should layout appropriately corresponding
    // to displayed labels. (So we should not use `getBandWidth` in this
    // case).


    function fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {
      var ticksLen = ticksCoords.length;

      if (!axis.onBand || alignWithLabel || !ticksLen) {
        return;
      }

      var axisExtent = axis.getExtent();
      var last;
      var diffSize;

      if (ticksLen === 1) {
        ticksCoords[0].coord = axisExtent[0];
        last = ticksCoords[1] = {
          coord: axisExtent[0]
        };
      } else {
        var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;
        var shift = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;
        each$j(ticksCoords, function (ticksItem) {
          ticksItem.coord -= shift / 2;
        });
        var dataExtent = axis.scale.getExtent();
        diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;
        last = {
          coord: ticksCoords[ticksLen - 1].coord + shift * diffSize
        };
        ticksCoords.push(last);
      }

      var inverse = axisExtent[0] > axisExtent[1]; // Handling clamp.

      if (littleThan(ticksCoords[0].coord, axisExtent[0])) {
        clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();
      }

      if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {
        ticksCoords.unshift({
          coord: axisExtent[0]
        });
      }

      if (littleThan(axisExtent[1], last.coord)) {
        clamp ? last.coord = axisExtent[1] : ticksCoords.pop();
      }

      if (clamp && littleThan(last.coord, axisExtent[1])) {
        ticksCoords.push({
          coord: axisExtent[1]
        });
      }

      function littleThan(a, b) {
        // Avoid rounding error cause calculated tick coord different with extent.
        // It may cause an extra unecessary tick added.
        a = round$2(a);
        b = round$2(b);
        return inverse ? a > b : a < b;
      }
    }

    var _default$1u = Axis;
    var Axis_1 = _default$1u;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var zrender_1 = zrender;



    var matrix_1 = matrix;



    var vector_1 = vector;





    var color$1 = color;





    var number$1 = number;



    var format$1 = format;
    var throttle_1$1 = throttle_1.throttle;



    var helper$2 = helper$1;



    var parseGeoJSON_1 = parseGeoJson;



    var List$1 = List_1;



    var Model$1 = Model_1;



    var Axis$1 = Axis_1;



    var env$1 = env_1;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Do not mount those modules on 'src/echarts' for better tree shaking.
     */
    var parseGeoJson$1 = parseGeoJson;
    var ecUtil = {};
    util.each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend', 'defaults', 'clone', 'merge'], function (name) {
      ecUtil[name] = util[name];
    });
    var graphic$1 = {};
    util.each(['extendShape', 'extendPath', 'makePath', 'makeImage', 'mergePath', 'resizePath', 'createIcon', 'setHoverStyle', 'setLabelStyle', 'setTextStyle', 'setText', 'getFont', 'updateProps', 'initProps', 'getTransform', 'clipPointsByRect', 'clipRectByRect', 'registerShape', 'getShapeClass', 'Group', 'Image', 'Text', 'Circle', 'Sector', 'Ring', 'Polygon', 'Polyline', 'Rect', 'Line', 'BezierCurve', 'Arc', 'IncrementalDisplayable', 'CompoundPath', 'LinearGradient', 'RadialGradient', 'BoundingRect'], function (name) {
      graphic$1[name] = graphic[name];
    });
    var parseGeoJson_1 = parseGeoJson$1;
    var util$2 = ecUtil;
    var graphic_1 = graphic$1;

    var _export = {
    	zrender: zrender_1,
    	matrix: matrix_1,
    	vector: vector_1,
    	color: color$1,
    	number: number$1,
    	format: format$1,
    	throttle: throttle_1$1,
    	helper: helper$2,
    	parseGeoJSON: parseGeoJSON_1,
    	List: List$1,
    	Model: Model$1,
    	Axis: Axis$1,
    	env: env$1,
    	parseGeoJson: parseGeoJson_1,
    	util: util$2,
    	graphic: graphic_1
    };

    var echarts = createCommonjsModule(function (module, exports) {







































    var throttle = throttle_1.throttle;

















    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var assert = util.assert;
    var each = util.each;
    var isFunction = util.isFunction;
    var isObject = util.isObject;
    var parseClassType = Component.parseClassType;
    var version = '4.6.0';
    var dependencies = {
      zrender: '4.2.0'
    };
    var TEST_FRAME_REMAIN_TIME = 1;
    var PRIORITY_PROCESSOR_FILTER = 1000;
    var PRIORITY_PROCESSOR_SERIES_FILTER = 800;
    var PRIORITY_PROCESSOR_DATASTACK = 900;
    var PRIORITY_PROCESSOR_STATISTIC = 5000;
    var PRIORITY_VISUAL_LAYOUT = 1000;
    var PRIORITY_VISUAL_PROGRESSIVE_LAYOUT = 1100;
    var PRIORITY_VISUAL_GLOBAL = 2000;
    var PRIORITY_VISUAL_CHART = 3000;
    var PRIORITY_VISUAL_POST_CHART_LAYOUT = 3500;
    var PRIORITY_VISUAL_COMPONENT = 4000; // FIXME
    // necessary?

    var PRIORITY_VISUAL_BRUSH = 5000;
    var PRIORITY = {
      PROCESSOR: {
        FILTER: PRIORITY_PROCESSOR_FILTER,
        SERIES_FILTER: PRIORITY_PROCESSOR_SERIES_FILTER,
        STATISTIC: PRIORITY_PROCESSOR_STATISTIC
      },
      VISUAL: {
        LAYOUT: PRIORITY_VISUAL_LAYOUT,
        PROGRESSIVE_LAYOUT: PRIORITY_VISUAL_PROGRESSIVE_LAYOUT,
        GLOBAL: PRIORITY_VISUAL_GLOBAL,
        CHART: PRIORITY_VISUAL_CHART,
        POST_CHART_LAYOUT: PRIORITY_VISUAL_POST_CHART_LAYOUT,
        COMPONENT: PRIORITY_VISUAL_COMPONENT,
        BRUSH: PRIORITY_VISUAL_BRUSH
      }
    }; // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
    // where they must not be invoked nestedly, except the only case: invoke
    // dispatchAction with updateMethod "none" in main process.
    // This flag is used to carry out this rule.
    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).

    var IN_MAIN_PROCESS = '__flagInMainProcess';
    var OPTION_UPDATED = '__optionUpdated';
    var ACTION_REG = /^[a-zA-Z0-9_]+$/;

    function createRegisterEventWithLowercaseName(method, ignoreDisposed) {
      return function (eventName, handler, context) {
        if (!ignoreDisposed && this._disposed) {
          disposedWarning(this.id);
          return;
        } // Event name is all lowercase


        eventName = eventName && eventName.toLowerCase();
        Eventful_1.prototype[method].call(this, eventName, handler, context);
      };
    }
    /**
     * @module echarts~MessageCenter
     */


    function MessageCenter() {
      Eventful_1.call(this);
    }

    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on', true);
    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off', true);
    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one', true);
    util.mixin(MessageCenter, Eventful_1);
    /**
     * @module echarts~ECharts
     */

    function ECharts(dom, theme, opts) {
      opts = opts || {}; // Get theme by name

      if (typeof theme === 'string') {
        theme = themeStorage[theme];
      }
      /**
       * @type {string}
       */


      this.id;
      /**
       * Group id
       * @type {string}
       */

      this.group;
      /**
       * @type {HTMLElement}
       * @private
       */

      this._dom = dom;
      var defaultRenderer = 'canvas';

      /**
       * @type {module:zrender/ZRender}
       * @private
       */
      var zr = this._zr = zrender.init(dom, {
        renderer: opts.renderer || defaultRenderer,
        devicePixelRatio: opts.devicePixelRatio,
        width: opts.width,
        height: opts.height
      });
      /**
       * Expect 60 fps.
       * @type {Function}
       * @private
       */

      this._throttledZrFlush = throttle(util.bind(zr.flush, zr), 17);
      var theme = util.clone(theme);
      theme && backwardCompat(theme, true);
      /**
       * @type {Object}
       * @private
       */

      this._theme = theme;
      /**
       * @type {Array.<module:echarts/view/Chart>}
       * @private
       */

      this._chartsViews = [];
      /**
       * @type {Object.<string, module:echarts/view/Chart>}
       * @private
       */

      this._chartsMap = {};
      /**
       * @type {Array.<module:echarts/view/Component>}
       * @private
       */

      this._componentsViews = [];
      /**
       * @type {Object.<string, module:echarts/view/Component>}
       * @private
       */

      this._componentsMap = {};
      /**
       * @type {module:echarts/CoordinateSystem}
       * @private
       */

      this._coordSysMgr = new CoordinateSystem();
      /**
       * @type {module:echarts/ExtensionAPI}
       * @private
       */

      var api = this._api = createExtensionAPI(this); // Sort on demand

      function prioritySortFunc(a, b) {
        return a.__prio - b.__prio;
      }

      timsort(visualFuncs, prioritySortFunc);
      timsort(dataProcessorFuncs, prioritySortFunc);
      /**
       * @type {module:echarts/stream/Scheduler}
       */

      this._scheduler = new Scheduler_1(this, api, dataProcessorFuncs, visualFuncs);
      Eventful_1.call(this, this._ecEventProcessor = new EventProcessor());
      /**
       * @type {module:echarts~MessageCenter}
       * @private
       */

      this._messageCenter = new MessageCenter(); // Init mouse events

      this._initEvents(); // In case some people write `window.onresize = chart.resize`


      this.resize = util.bind(this.resize, this); // Can't dispatch action during rendering procedure

      this._pendingActions = [];
      zr.animation.on('frame', this._onframe, this);
      bindRenderedEvent(zr, this); // ECharts instance can be used as value.

      util.setAsPrimitive(this);
    }

    var echartsProto = ECharts.prototype;

    echartsProto._onframe = function () {
      if (this._disposed) {
        return;
      }

      var scheduler = this._scheduler; // Lazy update

      if (this[OPTION_UPDATED]) {
        var silent = this[OPTION_UPDATED].silent;
        this[IN_MAIN_PROCESS] = true;
        prepare(this);
        updateMethods.update.call(this);
        this[IN_MAIN_PROCESS] = false;
        this[OPTION_UPDATED] = false;
        flushPendingActions.call(this, silent);
        triggerUpdatedEvent.call(this, silent);
      } // Avoid do both lazy update and progress in one frame.
      else if (scheduler.unfinished) {
          // Stream progress.
          var remainTime = TEST_FRAME_REMAIN_TIME;
          var ecModel = this._model;
          var api = this._api;
          scheduler.unfinished = false;

          do {
            var startTime = +new Date();
            scheduler.performSeriesTasks(ecModel); // Currently dataProcessorFuncs do not check threshold.

            scheduler.performDataProcessorTasks(ecModel);
            updateStreamModes(this, ecModel); // Do not update coordinate system here. Because that coord system update in
            // each frame is not a good user experience. So we follow the rule that
            // the extent of the coordinate system is determin in the first frame (the
            // frame is executed immedietely after task reset.
            // this._coordSysMgr.update(ecModel, api);
            // console.log('--- ec frame visual ---', remainTime);

            scheduler.performVisualTasks(ecModel);
            renderSeries(this, this._model, api, 'remain');
            remainTime -= +new Date() - startTime;
          } while (remainTime > 0 && scheduler.unfinished); // Call flush explicitly for trigger finished event.


          if (!scheduler.unfinished) {
            this._zr.flush();
          } // Else, zr flushing be ensue within the same frame,
          // because zr flushing is after onframe event.

        }
    };
    /**
     * @return {HTMLElement}
     */


    echartsProto.getDom = function () {
      return this._dom;
    };
    /**
     * @return {module:zrender~ZRender}
     */


    echartsProto.getZr = function () {
      return this._zr;
    };
    /**
     * Usage:
     * chart.setOption(option, notMerge, lazyUpdate);
     * chart.setOption(option, {
     *     notMerge: ...,
     *     lazyUpdate: ...,
     *     silent: ...
     * });
     *
     * @param {Object} option
     * @param {Object|boolean} [opts] opts or notMerge.
     * @param {boolean} [opts.notMerge=false]
     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
     */


    echartsProto.setOption = function (option, notMerge, lazyUpdate) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      var silent;

      if (isObject(notMerge)) {
        lazyUpdate = notMerge.lazyUpdate;
        silent = notMerge.silent;
        notMerge = notMerge.notMerge;
      }

      this[IN_MAIN_PROCESS] = true;

      if (!this._model || notMerge) {
        var optionManager = new OptionManager_1(this._api);
        var theme = this._theme;
        var ecModel = this._model = new Global();
        ecModel.scheduler = this._scheduler;
        ecModel.init(null, null, theme, optionManager);
      }

      this._model.setOption(option, optionPreprocessorFuncs);

      if (lazyUpdate) {
        this[OPTION_UPDATED] = {
          silent: silent
        };
        this[IN_MAIN_PROCESS] = false;
      } else {
        prepare(this);
        updateMethods.update.call(this); // Ensure zr refresh sychronously, and then pixel in canvas can be
        // fetched after `setOption`.

        this._zr.flush();

        this[OPTION_UPDATED] = false;
        this[IN_MAIN_PROCESS] = false;
        flushPendingActions.call(this, silent);
        triggerUpdatedEvent.call(this, silent);
      }
    };
    /**
     * @DEPRECATED
     */


    echartsProto.setTheme = function () {
      console.error('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
    };
    /**
     * @return {module:echarts/model/Global}
     */


    echartsProto.getModel = function () {
      return this._model;
    };
    /**
     * @return {Object}
     */


    echartsProto.getOption = function () {
      return this._model && this._model.getOption();
    };
    /**
     * @return {number}
     */


    echartsProto.getWidth = function () {
      return this._zr.getWidth();
    };
    /**
     * @return {number}
     */


    echartsProto.getHeight = function () {
      return this._zr.getHeight();
    };
    /**
     * @return {number}
     */


    echartsProto.getDevicePixelRatio = function () {
      return this._zr.painter.dpr || window.devicePixelRatio || 1;
    };
    /**
     * Get canvas which has all thing rendered
     * @param {Object} opts
     * @param {string} [opts.backgroundColor]
     * @return {string}
     */


    echartsProto.getRenderedCanvas = function (opts) {
      if (!env_1.canvasSupported) {
        return;
      }

      opts = opts || {};
      opts.pixelRatio = opts.pixelRatio || 1;
      opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
      var zr = this._zr; // var list = zr.storage.getDisplayList();
      // Stop animations
      // Never works before in init animation, so remove it.
      // zrUtil.each(list, function (el) {
      //     el.stopAnimation(true);
      // });

      return zr.painter.getRenderedCanvas(opts);
    };
    /**
     * Get svg data url
     * @return {string}
     */


    echartsProto.getSvgDataUrl = function () {
      if (!env_1.svgSupported) {
        return;
      }

      var zr = this._zr;
      var list = zr.storage.getDisplayList(); // Stop animations

      util.each(list, function (el) {
        el.stopAnimation(true);
      });
      return zr.painter.pathToDataUrl();
    };
    /**
     * @return {string}
     * @param {Object} opts
     * @param {string} [opts.type='png']
     * @param {string} [opts.pixelRatio=1]
     * @param {string} [opts.backgroundColor]
     * @param {string} [opts.excludeComponents]
     */


    echartsProto.getDataURL = function (opts) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      opts = opts || {};
      var excludeComponents = opts.excludeComponents;
      var ecModel = this._model;
      var excludesComponentViews = [];
      var self = this;
      each(excludeComponents, function (componentType) {
        ecModel.eachComponent({
          mainType: componentType
        }, function (component) {
          var view = self._componentsMap[component.__viewId];

          if (!view.group.ignore) {
            excludesComponentViews.push(view);
            view.group.ignore = true;
          }
        });
      });
      var url = this._zr.painter.getType() === 'svg' ? this.getSvgDataUrl() : this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
      each(excludesComponentViews, function (view) {
        view.group.ignore = false;
      });
      return url;
    };
    /**
     * @return {string}
     * @param {Object} opts
     * @param {string} [opts.type='png']
     * @param {string} [opts.pixelRatio=1]
     * @param {string} [opts.backgroundColor]
     */


    echartsProto.getConnectedDataURL = function (opts) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      if (!env_1.canvasSupported) {
        return;
      }

      var groupId = this.group;
      var mathMin = Math.min;
      var mathMax = Math.max;
      var MAX_NUMBER = Infinity;

      if (connectedGroups[groupId]) {
        var left = MAX_NUMBER;
        var top = MAX_NUMBER;
        var right = -MAX_NUMBER;
        var bottom = -MAX_NUMBER;
        var canvasList = [];
        var dpr = opts && opts.pixelRatio || 1;
        util.each(instances, function (chart, id) {
          if (chart.group === groupId) {
            var canvas = chart.getRenderedCanvas(util.clone(opts));
            var boundingRect = chart.getDom().getBoundingClientRect();
            left = mathMin(boundingRect.left, left);
            top = mathMin(boundingRect.top, top);
            right = mathMax(boundingRect.right, right);
            bottom = mathMax(boundingRect.bottom, bottom);
            canvasList.push({
              dom: canvas,
              left: boundingRect.left,
              top: boundingRect.top
            });
          }
        });
        left *= dpr;
        top *= dpr;
        right *= dpr;
        bottom *= dpr;
        var width = right - left;
        var height = bottom - top;
        var targetCanvas = util.createCanvas();
        targetCanvas.width = width;
        targetCanvas.height = height;
        var zr = zrender.init(targetCanvas); // Background between the charts

        if (opts.connectedBackgroundColor) {
          zr.add(new graphic.Rect({
            shape: {
              x: 0,
              y: 0,
              width: width,
              height: height
            },
            style: {
              fill: opts.connectedBackgroundColor
            }
          }));
        }

        each(canvasList, function (item) {
          var img = new graphic.Image({
            style: {
              x: item.left * dpr - left,
              y: item.top * dpr - top,
              image: item.dom
            }
          });
          zr.add(img);
        });
        zr.refreshImmediately();
        return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
      } else {
        return this.getDataURL(opts);
      }
    };
    /**
     * Convert from logical coordinate system to pixel coordinate system.
     * See CoordinateSystem#convertToPixel.
     * @param {string|Object} finder
     *        If string, e.g., 'geo', means {geoIndex: 0}.
     *        If Object, could contain some of these properties below:
     *        {
     *            seriesIndex / seriesId / seriesName,
     *            geoIndex / geoId, geoName,
     *            bmapIndex / bmapId / bmapName,
     *            xAxisIndex / xAxisId / xAxisName,
     *            yAxisIndex / yAxisId / yAxisName,
     *            gridIndex / gridId / gridName,
     *            ... (can be extended)
     *        }
     * @param {Array|number} value
     * @return {Array|number} result
     */


    echartsProto.convertToPixel = util.curry(doConvertPixel, 'convertToPixel');
    /**
     * Convert from pixel coordinate system to logical coordinate system.
     * See CoordinateSystem#convertFromPixel.
     * @param {string|Object} finder
     *        If string, e.g., 'geo', means {geoIndex: 0}.
     *        If Object, could contain some of these properties below:
     *        {
     *            seriesIndex / seriesId / seriesName,
     *            geoIndex / geoId / geoName,
     *            bmapIndex / bmapId / bmapName,
     *            xAxisIndex / xAxisId / xAxisName,
     *            yAxisIndex / yAxisId / yAxisName
     *            gridIndex / gridId / gridName,
     *            ... (can be extended)
     *        }
     * @param {Array|number} value
     * @return {Array|number} result
     */

    echartsProto.convertFromPixel = util.curry(doConvertPixel, 'convertFromPixel');

    function doConvertPixel(methodName, finder, value) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      var ecModel = this._model;

      var coordSysList = this._coordSysMgr.getCoordinateSystems();

      var result;
      finder = model.parseFinder(ecModel, finder);

      for (var i = 0; i < coordSysList.length; i++) {
        var coordSys = coordSysList[i];

        if (coordSys[methodName] && (result = coordSys[methodName](ecModel, finder, value)) != null) {
          return result;
        }
      }
    }
    /**
     * Is the specified coordinate systems or components contain the given pixel point.
     * @param {string|Object} finder
     *        If string, e.g., 'geo', means {geoIndex: 0}.
     *        If Object, could contain some of these properties below:
     *        {
     *            seriesIndex / seriesId / seriesName,
     *            geoIndex / geoId / geoName,
     *            bmapIndex / bmapId / bmapName,
     *            xAxisIndex / xAxisId / xAxisName,
     *            yAxisIndex / yAxisId / yAxisName,
     *            gridIndex / gridId / gridName,
     *            ... (can be extended)
     *        }
     * @param {Array|number} value
     * @return {boolean} result
     */


    echartsProto.containPixel = function (finder, value) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      var ecModel = this._model;
      var result;
      finder = model.parseFinder(ecModel, finder);
      util.each(finder, function (models, key) {
        key.indexOf('Models') >= 0 && util.each(models, function (model) {
          var coordSys = model.coordinateSystem;

          if (coordSys && coordSys.containPoint) {
            result |= !!coordSys.containPoint(value);
          } else if (key === 'seriesModels') {
            var view = this._chartsMap[model.__viewId];

            if (view && view.containPoint) {
              result |= view.containPoint(value, model);
            }
          }
        }, this);
      }, this);
      return !!result;
    };
    /**
     * Get visual from series or data.
     * @param {string|Object} finder
     *        If string, e.g., 'series', means {seriesIndex: 0}.
     *        If Object, could contain some of these properties below:
     *        {
     *            seriesIndex / seriesId / seriesName,
     *            dataIndex / dataIndexInside
     *        }
     *        If dataIndex is not specified, series visual will be fetched,
     *        but not data item visual.
     *        If all of seriesIndex, seriesId, seriesName are not specified,
     *        visual will be fetched from first series.
     * @param {string} visualType 'color', 'symbol', 'symbolSize'
     */


    echartsProto.getVisual = function (finder, visualType) {
      var ecModel = this._model;
      finder = model.parseFinder(ecModel, finder, {
        defaultMainType: 'series'
      });
      var seriesModel = finder.seriesModel;
      var data = seriesModel.getData();
      var dataIndexInside = finder.hasOwnProperty('dataIndexInside') ? finder.dataIndexInside : finder.hasOwnProperty('dataIndex') ? data.indexOfRawIndex(finder.dataIndex) : null;
      return dataIndexInside != null ? data.getItemVisual(dataIndexInside, visualType) : data.getVisual(visualType);
    };
    /**
     * Get view of corresponding component model
     * @param  {module:echarts/model/Component} componentModel
     * @return {module:echarts/view/Component}
     */


    echartsProto.getViewOfComponentModel = function (componentModel) {
      return this._componentsMap[componentModel.__viewId];
    };
    /**
     * Get view of corresponding series model
     * @param  {module:echarts/model/Series} seriesModel
     * @return {module:echarts/view/Chart}
     */


    echartsProto.getViewOfSeriesModel = function (seriesModel) {
      return this._chartsMap[seriesModel.__viewId];
    };

    var updateMethods = {
      prepareAndUpdate: function (payload) {
        prepare(this);
        updateMethods.update.call(this, payload);
      },

      /**
       * @param {Object} payload
       * @private
       */
      update: function (payload) {
        // console.profile && console.profile('update');
        var ecModel = this._model;
        var api = this._api;
        var zr = this._zr;
        var coordSysMgr = this._coordSysMgr;
        var scheduler = this._scheduler; // update before setOption

        if (!ecModel) {
          return;
        }

        scheduler.restoreData(ecModel, payload);
        scheduler.performSeriesTasks(ecModel); // TODO
        // Save total ecModel here for undo/redo (after restoring data and before processing data).
        // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
        // Create new coordinate system each update
        // In LineView may save the old coordinate system and use it to get the orignal point

        coordSysMgr.create(ecModel, api);
        scheduler.performDataProcessorTasks(ecModel, payload); // Current stream render is not supported in data process. So we can update
        // stream modes after data processing, where the filtered data is used to
        // deteming whether use progressive rendering.

        updateStreamModes(this, ecModel); // We update stream modes before coordinate system updated, then the modes info
        // can be fetched when coord sys updating (consider the barGrid extent fix). But
        // the drawback is the full coord info can not be fetched. Fortunately this full
        // coord is not requied in stream mode updater currently.

        coordSysMgr.update(ecModel, api);
        clearColorPalette(ecModel);
        scheduler.performVisualTasks(ecModel, payload);
        render(this, ecModel, api, payload); // Set background

        var backgroundColor = ecModel.get('backgroundColor') || 'transparent'; // In IE8

        if (!env_1.canvasSupported) {
          var colorArr = color.parse(backgroundColor);
          backgroundColor = color.stringify(colorArr, 'rgb');

          if (colorArr[3] === 0) {
            backgroundColor = 'transparent';
          }
        } else {
          zr.setBackgroundColor(backgroundColor);
        }

        performPostUpdateFuncs(ecModel, api); // console.profile && console.profileEnd('update');
      },

      /**
       * @param {Object} payload
       * @private
       */
      updateTransform: function (payload) {
        var ecModel = this._model;
        var ecIns = this;
        var api = this._api; // update before setOption

        if (!ecModel) {
          return;
        } // ChartView.markUpdateMethod(payload, 'updateTransform');


        var componentDirtyList = [];
        ecModel.eachComponent(function (componentType, componentModel) {
          var componentView = ecIns.getViewOfComponentModel(componentModel);

          if (componentView && componentView.__alive) {
            if (componentView.updateTransform) {
              var result = componentView.updateTransform(componentModel, ecModel, api, payload);
              result && result.update && componentDirtyList.push(componentView);
            } else {
              componentDirtyList.push(componentView);
            }
          }
        });
        var seriesDirtyMap = util.createHashMap();
        ecModel.eachSeries(function (seriesModel) {
          var chartView = ecIns._chartsMap[seriesModel.__viewId];

          if (chartView.updateTransform) {
            var result = chartView.updateTransform(seriesModel, ecModel, api, payload);
            result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);
          } else {
            seriesDirtyMap.set(seriesModel.uid, 1);
          }
        });
        clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
        // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);

        this._scheduler.performVisualTasks(ecModel, payload, {
          setDirty: true,
          dirtyMap: seriesDirtyMap
        }); // Currently, not call render of components. Geo render cost a lot.
        // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);


        renderSeries(ecIns, ecModel, api, payload, seriesDirtyMap);
        performPostUpdateFuncs(ecModel, this._api);
      },

      /**
       * @param {Object} payload
       * @private
       */
      updateView: function (payload) {
        var ecModel = this._model; // update before setOption

        if (!ecModel) {
          return;
        }

        Chart_1.markUpdateMethod(payload, 'updateView');
        clearColorPalette(ecModel); // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.

        this._scheduler.performVisualTasks(ecModel, payload, {
          setDirty: true
        });

        render(this, this._model, this._api, payload);
        performPostUpdateFuncs(ecModel, this._api);
      },

      /**
       * @param {Object} payload
       * @private
       */
      updateVisual: function (payload) {
        updateMethods.update.call(this, payload); // var ecModel = this._model;
        // // update before setOption
        // if (!ecModel) {
        //     return;
        // }
        // ChartView.markUpdateMethod(payload, 'updateVisual');
        // clearColorPalette(ecModel);
        // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
        // this._scheduler.performVisualTasks(ecModel, payload, {visualType: 'visual', setDirty: true});
        // render(this, this._model, this._api, payload);
        // performPostUpdateFuncs(ecModel, this._api);
      },

      /**
       * @param {Object} payload
       * @private
       */
      updateLayout: function (payload) {
        updateMethods.update.call(this, payload); // var ecModel = this._model;
        // // update before setOption
        // if (!ecModel) {
        //     return;
        // }
        // ChartView.markUpdateMethod(payload, 'updateLayout');
        // // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
        // // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);
        // this._scheduler.performVisualTasks(ecModel, payload, {setDirty: true});
        // render(this, this._model, this._api, payload);
        // performPostUpdateFuncs(ecModel, this._api);
      }
    };

    function prepare(ecIns) {
      var ecModel = ecIns._model;
      var scheduler = ecIns._scheduler;
      scheduler.restorePipelines(ecModel);
      scheduler.prepareStageTasks();
      prepareView(ecIns, 'component', ecModel, scheduler);
      prepareView(ecIns, 'chart', ecModel, scheduler);
      scheduler.plan();
    }
    /**
     * @private
     */


    function updateDirectly(ecIns, method, payload, mainType, subType) {
      var ecModel = ecIns._model; // broadcast

      if (!mainType) {
        // FIXME
        // Chart will not be update directly here, except set dirty.
        // But there is no such scenario now.
        each(ecIns._componentsViews.concat(ecIns._chartsViews), callView);
        return;
      }

      var query = {};
      query[mainType + 'Id'] = payload[mainType + 'Id'];
      query[mainType + 'Index'] = payload[mainType + 'Index'];
      query[mainType + 'Name'] = payload[mainType + 'Name'];
      var condition = {
        mainType: mainType,
        query: query
      };
      subType && (condition.subType = subType); // subType may be '' by parseClassType;

      var excludeSeriesId = payload.excludeSeriesId;

      if (excludeSeriesId != null) {
        excludeSeriesId = util.createHashMap(model.normalizeToArray(excludeSeriesId));
      } // If dispatchAction before setOption, do nothing.


      ecModel && ecModel.eachComponent(condition, function (model) {
        if (!excludeSeriesId || excludeSeriesId.get(model.id) == null) {
          callView(ecIns[mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId]);
        }
      }, ecIns);

      function callView(view) {
        view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
      }
    }
    /**
     * Resize the chart
     * @param {Object} opts
     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
     * @param {boolean} [opts.silent=false]
     */


    echartsProto.resize = function (opts) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      this._zr.resize(opts);

      var ecModel = this._model; // Resize loading effect

      this._loadingFX && this._loadingFX.resize();

      if (!ecModel) {
        return;
      }

      var optionChanged = ecModel.resetOption('media');
      var silent = opts && opts.silent;
      this[IN_MAIN_PROCESS] = true;
      optionChanged && prepare(this);
      updateMethods.update.call(this);
      this[IN_MAIN_PROCESS] = false;
      flushPendingActions.call(this, silent);
      triggerUpdatedEvent.call(this, silent);
    };

    function updateStreamModes(ecIns, ecModel) {
      var chartsMap = ecIns._chartsMap;
      var scheduler = ecIns._scheduler;
      ecModel.eachSeries(function (seriesModel) {
        scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);
      });
    }
    /**
     * Show loading effect
     * @param  {string} [name='default']
     * @param  {Object} [cfg]
     */


    echartsProto.showLoading = function (name, cfg) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      if (isObject(name)) {
        cfg = name;
        name = '';
      }

      name = name || 'default';
      this.hideLoading();

      if (!loadingEffects[name]) {
        return;
      }

      var el = loadingEffects[name](this._api, cfg);
      var zr = this._zr;
      this._loadingFX = el;
      zr.add(el);
    };
    /**
     * Hide loading effect
     */


    echartsProto.hideLoading = function () {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      this._loadingFX && this._zr.remove(this._loadingFX);
      this._loadingFX = null;
    };
    /**
     * @param {Object} eventObj
     * @return {Object}
     */


    echartsProto.makeActionFromEvent = function (eventObj) {
      var payload = util.extend({}, eventObj);
      payload.type = eventActionMap[eventObj.type];
      return payload;
    };
    /**
     * @pubilc
     * @param {Object} payload
     * @param {string} [payload.type] Action type
     * @param {Object|boolean} [opt] If pass boolean, means opt.silent
     * @param {boolean} [opt.silent=false] Whether trigger events.
     * @param {boolean} [opt.flush=undefined]
     *                  true: Flush immediately, and then pixel in canvas can be fetched
     *                      immediately. Caution: it might affect performance.
     *                  false: Not flush.
     *                  undefined: Auto decide whether perform flush.
     */


    echartsProto.dispatchAction = function (payload, opt) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      if (!isObject(opt)) {
        opt = {
          silent: !!opt
        };
      }

      if (!actions[payload.type]) {
        return;
      } // Avoid dispatch action before setOption. Especially in `connect`.


      if (!this._model) {
        return;
      } // May dispatchAction in rendering procedure


      if (this[IN_MAIN_PROCESS]) {
        this._pendingActions.push(payload);

        return;
      }

      doDispatchAction.call(this, payload, opt.silent);

      if (opt.flush) {
        this._zr.flush(true);
      } else if (opt.flush !== false && env_1.browser.weChat) {
        // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
        // hang when sliding page (on touch event), which cause that zr does not
        // refresh util user interaction finished, which is not expected.
        // But `dispatchAction` may be called too frequently when pan on touch
        // screen, which impacts performance if do not throttle them.
        this._throttledZrFlush();
      }

      flushPendingActions.call(this, opt.silent);
      triggerUpdatedEvent.call(this, opt.silent);
    };

    function doDispatchAction(payload, silent) {
      var payloadType = payload.type;
      var escapeConnect = payload.escapeConnect;
      var actionWrap = actions[payloadType];
      var actionInfo = actionWrap.actionInfo;
      var cptType = (actionInfo.update || 'update').split(':');
      var updateMethod = cptType.pop();
      cptType = cptType[0] != null && parseClassType(cptType[0]);
      this[IN_MAIN_PROCESS] = true;
      var payloads = [payload];
      var batched = false; // Batch action

      if (payload.batch) {
        batched = true;
        payloads = util.map(payload.batch, function (item) {
          item = util.defaults(util.extend({}, item), payload);
          item.batch = null;
          return item;
        });
      }

      var eventObjBatch = [];
      var eventObj;
      var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';
      each(payloads, function (batchItem) {
        // Action can specify the event by return it.
        eventObj = actionWrap.action(batchItem, this._model, this._api); // Emit event outside

        eventObj = eventObj || util.extend({}, batchItem); // Convert type to eventType

        eventObj.type = actionInfo.event || eventObj.type;
        eventObjBatch.push(eventObj); // light update does not perform data process, layout and visual.

        if (isHighDown) {
          // method, payload, mainType, subType
          updateDirectly(this, updateMethod, batchItem, 'series');
        } else if (cptType) {
          updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
        }
      }, this);

      if (updateMethod !== 'none' && !isHighDown && !cptType) {
        // Still dirty
        if (this[OPTION_UPDATED]) {
          // FIXME Pass payload ?
          prepare(this);
          updateMethods.update.call(this, payload);
          this[OPTION_UPDATED] = false;
        } else {
          updateMethods[updateMethod].call(this, payload);
        }
      } // Follow the rule of action batch


      if (batched) {
        eventObj = {
          type: actionInfo.event || payloadType,
          escapeConnect: escapeConnect,
          batch: eventObjBatch
        };
      } else {
        eventObj = eventObjBatch[0];
      }

      this[IN_MAIN_PROCESS] = false;
      !silent && this._messageCenter.trigger(eventObj.type, eventObj);
    }

    function flushPendingActions(silent) {
      var pendingActions = this._pendingActions;

      while (pendingActions.length) {
        var payload = pendingActions.shift();
        doDispatchAction.call(this, payload, silent);
      }
    }

    function triggerUpdatedEvent(silent) {
      !silent && this.trigger('updated');
    }
    /**
     * Event `rendered` is triggered when zr
     * rendered. It is useful for realtime
     * snapshot (reflect animation).
     *
     * Event `finished` is triggered when:
     * (1) zrender rendering finished.
     * (2) initial animation finished.
     * (3) progressive rendering finished.
     * (4) no pending action.
     * (5) no delayed setOption needs to be processed.
     */


    function bindRenderedEvent(zr, ecIns) {
      zr.on('rendered', function () {
        ecIns.trigger('rendered'); // The `finished` event should not be triggered repeatly,
        // so it should only be triggered when rendering indeed happend
        // in zrender. (Consider the case that dipatchAction is keep
        // triggering when mouse move).

        if ( // Although zr is dirty if initial animation is not finished
        // and this checking is called on frame, we also check
        // animation finished for robustness.
        zr.animation.isFinished() && !ecIns[OPTION_UPDATED] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {
          ecIns.trigger('finished');
        }
      });
    }
    /**
     * @param {Object} params
     * @param {number} params.seriesIndex
     * @param {Array|TypedArray} params.data
     */


    echartsProto.appendData = function (params) {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      var seriesIndex = params.seriesIndex;
      var ecModel = this.getModel();
      var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
      seriesModel.appendData(params); // Note: `appendData` does not support that update extent of coordinate
      // system, util some scenario require that. In the expected usage of
      // `appendData`, the initial extent of coordinate system should better
      // be fixed by axis `min`/`max` setting or initial data, otherwise if
      // the extent changed while `appendData`, the location of the painted
      // graphic elements have to be changed, which make the usage of
      // `appendData` meaningless.

      this._scheduler.unfinished = true;
    };
    /**
     * Register event
     * @method
     */


    echartsProto.on = createRegisterEventWithLowercaseName('on', false);
    echartsProto.off = createRegisterEventWithLowercaseName('off', false);
    echartsProto.one = createRegisterEventWithLowercaseName('one', false);
    /**
     * Prepare view instances of charts and components
     * @param  {module:echarts/model/Global} ecModel
     * @private
     */

    function prepareView(ecIns, type, ecModel, scheduler) {
      var isComponent = type === 'component';
      var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;
      var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;
      var zr = ecIns._zr;
      var api = ecIns._api;

      for (var i = 0; i < viewList.length; i++) {
        viewList[i].__alive = false;
      }

      isComponent ? ecModel.eachComponent(function (componentType, model) {
        componentType !== 'series' && doPrepare(model);
      }) : ecModel.eachSeries(doPrepare);

      function doPrepare(model) {
        // Consider: id same and type changed.
        var viewId = '_ec_' + model.id + '_' + model.type;
        var view = viewMap[viewId];

        if (!view) {
          var classType = parseClassType(model.type);
          var Clazz = isComponent ? Component_1.getClass(classType.main, classType.sub) : Chart_1.getClass(classType.sub);
          view = new Clazz();
          view.init(ecModel, api);
          viewMap[viewId] = view;
          viewList.push(view);
          zr.add(view.group);
        }

        model.__viewId = view.__id = viewId;
        view.__alive = true;
        view.__model = model;
        view.group.__ecComponentInfo = {
          mainType: model.mainType,
          index: model.componentIndex
        };
        !isComponent && scheduler.prepareView(view, model, ecModel, api);
      }

      for (var i = 0; i < viewList.length;) {
        var view = viewList[i];

        if (!view.__alive) {
          !isComponent && view.renderTask.dispose();
          zr.remove(view.group);
          view.dispose(ecModel, api);
          viewList.splice(i, 1);
          delete viewMap[view.__id];
          view.__id = view.group.__ecComponentInfo = null;
        } else {
          i++;
        }
      }
    } // /**
    //  * Encode visual infomation from data after data processing
    //  *
    //  * @param {module:echarts/model/Global} ecModel
    //  * @param {object} layout
    //  * @param {boolean} [layoutFilter] `true`: only layout,
    //  *                                 `false`: only not layout,
    //  *                                 `null`/`undefined`: all.
    //  * @param {string} taskBaseTag
    //  * @private
    //  */
    // function startVisualEncoding(ecIns, ecModel, api, payload, layoutFilter) {
    //     each(visualFuncs, function (visual, index) {
    //         var isLayout = visual.isLayout;
    //         if (layoutFilter == null
    //             || (layoutFilter === false && !isLayout)
    //             || (layoutFilter === true && isLayout)
    //         ) {
    //             visual.func(ecModel, api, payload);
    //         }
    //     });
    // }


    function clearColorPalette(ecModel) {
      ecModel.clearColorPalette();
      ecModel.eachSeries(function (seriesModel) {
        seriesModel.clearColorPalette();
      });
    }

    function render(ecIns, ecModel, api, payload) {
      renderComponents(ecIns, ecModel, api, payload);
      each(ecIns._chartsViews, function (chart) {
        chart.__alive = false;
      });
      renderSeries(ecIns, ecModel, api, payload); // Remove groups of unrendered charts

      each(ecIns._chartsViews, function (chart) {
        if (!chart.__alive) {
          chart.remove(ecModel, api);
        }
      });
    }

    function renderComponents(ecIns, ecModel, api, payload, dirtyList) {
      each(dirtyList || ecIns._componentsViews, function (componentView) {
        var componentModel = componentView.__model;
        componentView.render(componentModel, ecModel, api, payload);
        updateZ(componentModel, componentView);
      });
    }
    /**
     * Render each chart and component
     * @private
     */


    function renderSeries(ecIns, ecModel, api, payload, dirtyMap) {
      // Render all charts
      var scheduler = ecIns._scheduler;
      var unfinished;
      ecModel.eachSeries(function (seriesModel) {
        var chartView = ecIns._chartsMap[seriesModel.__viewId];
        chartView.__alive = true;
        var renderTask = chartView.renderTask;
        scheduler.updatePayload(renderTask, payload);

        if (dirtyMap && dirtyMap.get(seriesModel.uid)) {
          renderTask.dirty();
        }

        unfinished |= renderTask.perform(scheduler.getPerformArgs(renderTask));
        chartView.group.silent = !!seriesModel.get('silent');
        updateZ(seriesModel, chartView);
        updateBlend(seriesModel, chartView);
      });
      scheduler.unfinished |= unfinished; // If use hover layer

      updateHoverLayerStatus(ecIns, ecModel); // Add aria

      aria(ecIns._zr.dom, ecModel);
    }

    function performPostUpdateFuncs(ecModel, api) {
      each(postUpdateFuncs, function (func) {
        func(ecModel, api);
      });
    }

    var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'mousemove', 'mousedown', 'mouseup', 'globalout', 'contextmenu'];
    /**
     * @private
     */

    echartsProto._initEvents = function () {
      each(MOUSE_EVENT_NAMES, function (eveName) {
        var handler = function (e) {
          var ecModel = this.getModel();
          var el = e.target;
          var params;
          var isGlobalOut = eveName === 'globalout'; // no e.target when 'globalout'.

          if (isGlobalOut) {
            params = {};
          } else if (el && el.dataIndex != null) {
            var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
            params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType, el) || {};
          } // If element has custom eventData of components
          else if (el && el.eventData) {
              params = util.extend({}, el.eventData);
            } // Contract: if params prepared in mouse event,
          // these properties must be specified:
          // {
          //    componentType: string (component main type)
          //    componentIndex: number
          // }
          // Otherwise event query can not work.


          if (params) {
            var componentType = params.componentType;
            var componentIndex = params.componentIndex; // Special handling for historic reason: when trigger by
            // markLine/markPoint/markArea, the componentType is
            // 'markLine'/'markPoint'/'markArea', but we should better
            // enable them to be queried by seriesIndex, since their
            // option is set in each series.

            if (componentType === 'markLine' || componentType === 'markPoint' || componentType === 'markArea') {
              componentType = 'series';
              componentIndex = params.seriesIndex;
            }

            var model = componentType && componentIndex != null && ecModel.getComponent(componentType, componentIndex);
            var view = model && this[model.mainType === 'series' ? '_chartsMap' : '_componentsMap'][model.__viewId];
            params.event = e;
            params.type = eveName;
            this._ecEventProcessor.eventInfo = {
              targetEl: el,
              packedEvent: params,
              model: model,
              view: view
            };
            this.trigger(eveName, params);
          }
        }; // Consider that some component (like tooltip, brush, ...)
        // register zr event handler, but user event handler might
        // do anything, such as call `setOption` or `dispatchAction`,
        // which probably update any of the content and probably
        // cause problem if it is called previous other inner handlers.


        handler.zrEventfulCallAtLast = true;

        this._zr.on(eveName, handler, this);
      }, this);
      each(eventActionMap, function (actionType, eventType) {
        this._messageCenter.on(eventType, function (event) {
          this.trigger(eventType, event);
        }, this);
      }, this);
    };
    /**
     * @return {boolean}
     */


    echartsProto.isDisposed = function () {
      return this._disposed;
    };
    /**
     * Clear
     */


    echartsProto.clear = function () {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      this.setOption({
        series: []
      }, true);
    };
    /**
     * Dispose instance
     */


    echartsProto.dispose = function () {
      if (this._disposed) {
        disposedWarning(this.id);
        return;
      }

      this._disposed = true;
      model.setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, '');
      var api = this._api;
      var ecModel = this._model;
      each(this._componentsViews, function (component) {
        component.dispose(ecModel, api);
      });
      each(this._chartsViews, function (chart) {
        chart.dispose(ecModel, api);
      }); // Dispose after all views disposed

      this._zr.dispose();

      delete instances[this.id];
    };

    util.mixin(ECharts, Eventful_1);

    function disposedWarning(id) {}

    function updateHoverLayerStatus(ecIns, ecModel) {
      var zr = ecIns._zr;
      var storage = zr.storage;
      var elCount = 0;
      storage.traverse(function (el) {
        elCount++;
      });

      if (elCount > ecModel.get('hoverLayerThreshold') && !env_1.node) {
        ecModel.eachSeries(function (seriesModel) {
          if (seriesModel.preventUsingHoverLayer) {
            return;
          }

          var chartView = ecIns._chartsMap[seriesModel.__viewId];

          if (chartView.__alive) {
            chartView.group.traverse(function (el) {
              // Don't switch back.
              el.useHoverLayer = true;
            });
          }
        });
      }
    }
    /**
     * Update chart progressive and blend.
     * @param {module:echarts/model/Series|module:echarts/model/Component} model
     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
     */


    function updateBlend(seriesModel, chartView) {
      var blendMode = seriesModel.get('blendMode') || null;
      chartView.group.traverse(function (el) {
        // FIXME marker and other components
        if (!el.isGroup) {
          // Only set if blendMode is changed. In case element is incremental and don't wan't to rerender.
          if (el.style.blend !== blendMode) {
            el.setStyle('blend', blendMode);
          }
        }

        if (el.eachPendingDisplayable) {
          el.eachPendingDisplayable(function (displayable) {
            displayable.setStyle('blend', blendMode);
          });
        }
      });
    }
    /**
     * @param {module:echarts/model/Series|module:echarts/model/Component} model
     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
     */


    function updateZ(model, view) {
      var z = model.get('z');
      var zlevel = model.get('zlevel'); // Set z and zlevel

      view.group.traverse(function (el) {
        if (el.type !== 'group') {
          z != null && (el.z = z);
          zlevel != null && (el.zlevel = zlevel);
        }
      });
    }

    function createExtensionAPI(ecInstance) {
      var coordSysMgr = ecInstance._coordSysMgr;
      return util.extend(new ExtensionAPI_1(ecInstance), {
        // Inject methods
        getCoordinateSystems: util.bind(coordSysMgr.getCoordinateSystems, coordSysMgr),
        getComponentByElement: function (el) {
          while (el) {
            var modelInfo = el.__ecComponentInfo;

            if (modelInfo != null) {
              return ecInstance._model.getComponent(modelInfo.mainType, modelInfo.index);
            }

            el = el.parent;
          }
        }
      });
    }
    /**
     * @class
     * Usage of query:
     * `chart.on('click', query, handler);`
     * The `query` can be:
     * + The component type query string, only `mainType` or `mainType.subType`,
     *   like: 'xAxis', 'series', 'xAxis.category' or 'series.line'.
     * + The component query object, like:
     *   `{seriesIndex: 2}`, `{seriesName: 'xx'}`, `{seriesId: 'some'}`,
     *   `{xAxisIndex: 2}`, `{xAxisName: 'xx'}`, `{xAxisId: 'some'}`.
     * + The data query object, like:
     *   `{dataIndex: 123}`, `{dataType: 'link'}`, `{name: 'some'}`.
     * + The other query object (cmponent customized query), like:
     *   `{element: 'some'}` (only available in custom series).
     *
     * Caveat: If a prop in the `query` object is `null/undefined`, it is the
     * same as there is no such prop in the `query` object.
     */


    function EventProcessor() {
      // These info required: targetEl, packedEvent, model, view
      this.eventInfo;
    }

    EventProcessor.prototype = {
      constructor: EventProcessor,
      normalizeQuery: function (query) {
        var cptQuery = {};
        var dataQuery = {};
        var otherQuery = {}; // `query` is `mainType` or `mainType.subType` of component.

        if (util.isString(query)) {
          var condCptType = parseClassType(query); // `.main` and `.sub` may be ''.

          cptQuery.mainType = condCptType.main || null;
          cptQuery.subType = condCptType.sub || null;
        } // `query` is an object, convert to {mainType, index, name, id}.
        else {
            // `xxxIndex`, `xxxName`, `xxxId`, `name`, `dataIndex`, `dataType` is reserved,
            // can not be used in `compomentModel.filterForExposedEvent`.
            var suffixes = ['Index', 'Name', 'Id'];
            var dataKeys = {
              name: 1,
              dataIndex: 1,
              dataType: 1
            };
            util.each(query, function (val, key) {
              var reserved = false;

              for (var i = 0; i < suffixes.length; i++) {
                var propSuffix = suffixes[i];
                var suffixPos = key.lastIndexOf(propSuffix);

                if (suffixPos > 0 && suffixPos === key.length - propSuffix.length) {
                  var mainType = key.slice(0, suffixPos); // Consider `dataIndex`.

                  if (mainType !== 'data') {
                    cptQuery.mainType = mainType;
                    cptQuery[propSuffix.toLowerCase()] = val;
                    reserved = true;
                  }
                }
              }

              if (dataKeys.hasOwnProperty(key)) {
                dataQuery[key] = val;
                reserved = true;
              }

              if (!reserved) {
                otherQuery[key] = val;
              }
            });
          }

        return {
          cptQuery: cptQuery,
          dataQuery: dataQuery,
          otherQuery: otherQuery
        };
      },
      filter: function (eventType, query, args) {
        // They should be assigned before each trigger call.
        var eventInfo = this.eventInfo;

        if (!eventInfo) {
          return true;
        }

        var targetEl = eventInfo.targetEl;
        var packedEvent = eventInfo.packedEvent;
        var model = eventInfo.model;
        var view = eventInfo.view; // For event like 'globalout'.

        if (!model || !view) {
          return true;
        }

        var cptQuery = query.cptQuery;
        var dataQuery = query.dataQuery;
        return check(cptQuery, model, 'mainType') && check(cptQuery, model, 'subType') && check(cptQuery, model, 'index', 'componentIndex') && check(cptQuery, model, 'name') && check(cptQuery, model, 'id') && check(dataQuery, packedEvent, 'name') && check(dataQuery, packedEvent, 'dataIndex') && check(dataQuery, packedEvent, 'dataType') && (!view.filterForExposedEvent || view.filterForExposedEvent(eventType, query.otherQuery, targetEl, packedEvent));

        function check(query, host, prop, propOnHost) {
          return query[prop] == null || host[propOnHost || prop] === query[prop];
        }
      },
      afterTrigger: function () {
        // Make sure the eventInfo wont be used in next trigger.
        this.eventInfo = null;
      }
    };
    /**
     * @type {Object} key: actionType.
     * @inner
     */

    var actions = {};
    /**
     * Map eventType to actionType
     * @type {Object}
     */

    var eventActionMap = {};
    /**
     * Data processor functions of each stage
     * @type {Array.<Object.<string, Function>>}
     * @inner
     */

    var dataProcessorFuncs = [];
    /**
     * @type {Array.<Function>}
     * @inner
     */

    var optionPreprocessorFuncs = [];
    /**
     * @type {Array.<Function>}
     * @inner
     */

    var postUpdateFuncs = [];
    /**
     * Visual encoding functions of each stage
     * @type {Array.<Object.<string, Function>>}
     */

    var visualFuncs = [];
    /**
     * Theme storage
     * @type {Object.<key, Object>}
     */

    var themeStorage = {};
    /**
     * Loading effects
     */

    var loadingEffects = {};
    var instances = {};
    var connectedGroups = {};
    var idBase = new Date() - 0;
    var groupIdBase = new Date() - 0;
    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';

    function enableConnect(chart) {
      var STATUS_PENDING = 0;
      var STATUS_UPDATING = 1;
      var STATUS_UPDATED = 2;
      var STATUS_KEY = '__connectUpdateStatus';

      function updateConnectedChartsStatus(charts, status) {
        for (var i = 0; i < charts.length; i++) {
          var otherChart = charts[i];
          otherChart[STATUS_KEY] = status;
        }
      }

      each(eventActionMap, function (actionType, eventType) {
        chart._messageCenter.on(eventType, function (event) {
          if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
            if (event && event.escapeConnect) {
              return;
            }

            var action = chart.makeActionFromEvent(event);
            var otherCharts = [];
            each(instances, function (otherChart) {
              if (otherChart !== chart && otherChart.group === chart.group) {
                otherCharts.push(otherChart);
              }
            });
            updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
            each(otherCharts, function (otherChart) {
              if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
                otherChart.dispatchAction(action);
              }
            });
            updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
          }
        });
      });
    }
    /**
     * @param {HTMLElement} dom
     * @param {Object} [theme]
     * @param {Object} opts
     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
     * @param {string} [opts.renderer] Can choose 'canvas' or 'svg' to render the chart.
     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
     *                              Can be 'auto' (the same as null/undefined)
     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
     *                               Can be 'auto' (the same as null/undefined)
     */


    function init(dom, theme, opts) {
      var existInstance = getInstanceByDom(dom);

      if (existInstance) {
        return existInstance;
      }

      var chart = new ECharts(dom, theme, opts);
      chart.id = 'ec_' + idBase++;
      instances[chart.id] = chart;
      model.setAttribute(dom, DOM_ATTRIBUTE_KEY, chart.id);
      enableConnect(chart);
      return chart;
    }
    /**
     * @return {string|Array.<module:echarts~ECharts>} groupId
     */


    function connect(groupId) {
      // Is array of charts
      if (util.isArray(groupId)) {
        var charts = groupId;
        groupId = null; // If any chart has group

        each(charts, function (chart) {
          if (chart.group != null) {
            groupId = chart.group;
          }
        });
        groupId = groupId || 'g_' + groupIdBase++;
        each(charts, function (chart) {
          chart.group = groupId;
        });
      }

      connectedGroups[groupId] = true;
      return groupId;
    }
    /**
     * @DEPRECATED
     * @return {string} groupId
     */


    function disConnect(groupId) {
      connectedGroups[groupId] = false;
    }
    /**
     * @return {string} groupId
     */


    var disconnect = disConnect;
    /**
     * Dispose a chart instance
     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
     */

    function dispose(chart) {
      if (typeof chart === 'string') {
        chart = instances[chart];
      } else if (!(chart instanceof ECharts)) {
        // Try to treat as dom
        chart = getInstanceByDom(chart);
      }

      if (chart instanceof ECharts && !chart.isDisposed()) {
        chart.dispose();
      }
    }
    /**
     * @param  {HTMLElement} dom
     * @return {echarts~ECharts}
     */


    function getInstanceByDom(dom) {
      return instances[model.getAttribute(dom, DOM_ATTRIBUTE_KEY)];
    }
    /**
     * @param {string} key
     * @return {echarts~ECharts}
     */


    function getInstanceById(key) {
      return instances[key];
    }
    /**
     * Register theme
     */


    function registerTheme(name, theme) {
      themeStorage[name] = theme;
    }
    /**
     * Register option preprocessor
     * @param {Function} preprocessorFunc
     */


    function registerPreprocessor(preprocessorFunc) {
      optionPreprocessorFuncs.push(preprocessorFunc);
    }
    /**
     * @param {number} [priority=1000]
     * @param {Object|Function} processor
     */


    function registerProcessor(priority, processor) {
      normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_FILTER);
    }
    /**
     * Register postUpdater
     * @param {Function} postUpdateFunc
     */


    function registerPostUpdate(postUpdateFunc) {
      postUpdateFuncs.push(postUpdateFunc);
    }
    /**
     * Usage:
     * registerAction('someAction', 'someEvent', function () { ... });
     * registerAction('someAction', function () { ... });
     * registerAction(
     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
     *     function () { ... }
     * );
     *
     * @param {(string|Object)} actionInfo
     * @param {string} actionInfo.type
     * @param {string} [actionInfo.event]
     * @param {string} [actionInfo.update]
     * @param {string} [eventName]
     * @param {Function} action
     */


    function registerAction(actionInfo, eventName, action) {
      if (typeof eventName === 'function') {
        action = eventName;
        eventName = '';
      }

      var actionType = isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
        event: eventName
      }][0]; // Event name is all lowercase

      actionInfo.event = (actionInfo.event || actionType).toLowerCase();
      eventName = actionInfo.event; // Validate action type and event name.

      assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));

      if (!actions[actionType]) {
        actions[actionType] = {
          action: action,
          actionInfo: actionInfo
        };
      }

      eventActionMap[eventName] = actionType;
    }
    /**
     * @param {string} type
     * @param {*} CoordinateSystem
     */


    function registerCoordinateSystem(type, CoordinateSystem$1) {
      CoordinateSystem.register(type, CoordinateSystem$1);
    }
    /**
     * Get dimensions of specified coordinate system.
     * @param {string} type
     * @return {Array.<string|Object>}
     */


    function getCoordinateSystemDimensions(type) {
      var coordSysCreator = CoordinateSystem.get(type);

      if (coordSysCreator) {
        return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
      }
    }
    /**
     * Layout is a special stage of visual encoding
     * Most visual encoding like color are common for different chart
     * But each chart has it's own layout algorithm
     *
     * @param {number} [priority=1000]
     * @param {Function} layoutTask
     */


    function registerLayout(priority, layoutTask) {
      normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, 'layout');
    }
    /**
     * @param {number} [priority=3000]
     * @param {module:echarts/stream/Task} visualTask
     */


    function registerVisual(priority, visualTask) {
      normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, 'visual');
    }
    /**
     * @param {Object|Function} fn: {seriesType, createOnAllSeries, performRawSeries, reset}
     */


    function normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {
      if (isFunction(priority) || isObject(priority)) {
        fn = priority;
        priority = defaultPriority;
      }

      var stageHandler = Scheduler_1.wrapStageHandler(fn, visualType);
      stageHandler.__prio = priority;
      stageHandler.__raw = fn;
      targetList.push(stageHandler);
      return stageHandler;
    }
    /**
     * @param {string} name
     */


    function registerLoading(name, loadingFx) {
      loadingEffects[name] = loadingFx;
    }
    /**
     * @param {Object} opts
     * @param {string} [superClass]
     */


    function extendComponentModel(opts
    /*, superClass*/
    ) {
      // var Clazz = ComponentModel;
      // if (superClass) {
      //     var classType = parseClassType(superClass);
      //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
      // }
      return Component.extend(opts);
    }
    /**
     * @param {Object} opts
     * @param {string} [superClass]
     */


    function extendComponentView(opts
    /*, superClass*/
    ) {
      // var Clazz = ComponentView;
      // if (superClass) {
      //     var classType = parseClassType(superClass);
      //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
      // }
      return Component_1.extend(opts);
    }
    /**
     * @param {Object} opts
     * @param {string} [superClass]
     */


    function extendSeriesModel(opts
    /*, superClass*/
    ) {
      // var Clazz = SeriesModel;
      // if (superClass) {
      //     superClass = 'series.' + superClass.replace('series.', '');
      //     var classType = parseClassType(superClass);
      //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
      // }
      return Series.extend(opts);
    }
    /**
     * @param {Object} opts
     * @param {string} [superClass]
     */


    function extendChartView(opts
    /*, superClass*/
    ) {
      // var Clazz = ChartView;
      // if (superClass) {
      //     superClass = superClass.replace('series.', '');
      //     var classType = parseClassType(superClass);
      //     Clazz = ChartView.getClass(classType.main, true);
      // }
      return Chart_1.extend(opts);
    }
    /**
     * ZRender need a canvas context to do measureText.
     * But in node environment canvas may be created by node-canvas.
     * So we need to specify how to create a canvas instead of using document.createElement('canvas')
     *
     * Be careful of using it in the browser.
     *
     * @param {Function} creator
     * @example
     *     var Canvas = require('canvas');
     *     var echarts = require('echarts');
     *     echarts.setCanvasCreator(function () {
     *         // Small size is enough.
     *         return new Canvas(32, 32);
     *     });
     */


    function setCanvasCreator(creator) {
      util.$override('createCanvas', creator);
    }
    /**
     * @param {string} mapName
     * @param {Array.<Object>|Object|string} geoJson
     * @param {Object} [specialAreas]
     *
     * @example GeoJSON
     *     $.get('USA.json', function (geoJson) {
     *         echarts.registerMap('USA', geoJson);
     *         // Or
     *         echarts.registerMap('USA', {
     *             geoJson: geoJson,
     *             specialAreas: {}
     *         })
     *     });
     *
     *     $.get('airport.svg', function (svg) {
     *         echarts.registerMap('airport', {
     *             svg: svg
     *         }
     *     });
     *
     *     echarts.registerMap('eu', [
     *         {svg: eu-topographic.svg},
     *         {geoJSON: eu.json}
     *     ])
     */


    function registerMap(mapName, geoJson, specialAreas) {
      mapDataStorage.registerMap(mapName, geoJson, specialAreas);
    }
    /**
     * @param {string} mapName
     * @return {Object}
     */


    function getMap(mapName) {
      // For backward compatibility, only return the first one.
      var records = mapDataStorage.retrieveMap(mapName);
      return records && records[0] && {
        geoJson: records[0].geoJSON,
        specialAreas: records[0].specialAreas
      };
    }

    registerVisual(PRIORITY_VISUAL_GLOBAL, seriesColor);
    registerPreprocessor(backwardCompat);
    registerProcessor(PRIORITY_PROCESSOR_DATASTACK, dataStack);
    registerLoading('default', _default_1); // Default actions

    registerAction({
      type: 'highlight',
      event: 'highlight',
      update: 'highlight'
    }, util.noop);
    registerAction({
      type: 'downplay',
      event: 'downplay',
      update: 'downplay'
    }, util.noop); // Default theme

    registerTheme('light', light);
    registerTheme('dark', dark); // For backward compatibility, where the namespace `dataTool` will
    // be mounted on `echarts` is the extension `dataTool` is imported.

    var dataTool = {};
    exports.version = version;
    exports.dependencies = dependencies;
    exports.PRIORITY = PRIORITY;
    exports.init = init;
    exports.connect = connect;
    exports.disConnect = disConnect;
    exports.disconnect = disconnect;
    exports.dispose = dispose;
    exports.getInstanceByDom = getInstanceByDom;
    exports.getInstanceById = getInstanceById;
    exports.registerTheme = registerTheme;
    exports.registerPreprocessor = registerPreprocessor;
    exports.registerProcessor = registerProcessor;
    exports.registerPostUpdate = registerPostUpdate;
    exports.registerAction = registerAction;
    exports.registerCoordinateSystem = registerCoordinateSystem;
    exports.getCoordinateSystemDimensions = getCoordinateSystemDimensions;
    exports.registerLayout = registerLayout;
    exports.registerVisual = registerVisual;
    exports.registerLoading = registerLoading;
    exports.extendComponentModel = extendComponentModel;
    exports.extendComponentView = extendComponentView;
    exports.extendSeriesModel = extendSeriesModel;
    exports.extendChartView = extendChartView;
    exports.setCanvasCreator = setCanvasCreator;
    exports.registerMap = registerMap;
    exports.getMap = getMap;
    exports.dataTool = dataTool;

    (function () {
        for (var key in _export) {
            if (_export.hasOwnProperty(key)) {
                exports[key] = _export[key];
            }
        }
    })();
    });
    var echarts_1 = echarts.version;
    var echarts_2 = echarts.dependencies;
    var echarts_3 = echarts.PRIORITY;
    var echarts_4 = echarts.init;
    var echarts_5 = echarts.connect;
    var echarts_6 = echarts.disConnect;
    var echarts_7 = echarts.disconnect;
    var echarts_8 = echarts.dispose;
    var echarts_9 = echarts.getInstanceByDom;
    var echarts_10 = echarts.getInstanceById;
    var echarts_11 = echarts.registerTheme;
    var echarts_12 = echarts.registerPreprocessor;
    var echarts_13 = echarts.registerProcessor;
    var echarts_14 = echarts.registerPostUpdate;
    var echarts_15 = echarts.registerAction;
    var echarts_16 = echarts.registerCoordinateSystem;
    var echarts_17 = echarts.getCoordinateSystemDimensions;
    var echarts_18 = echarts.registerLayout;
    var echarts_19 = echarts.registerVisual;
    var echarts_20 = echarts.registerLoading;
    var echarts_21 = echarts.extendComponentModel;
    var echarts_22 = echarts.extendComponentView;
    var echarts_23 = echarts.extendSeriesModel;
    var echarts_24 = echarts.extendChartView;
    var echarts_25 = echarts.setCanvasCreator;
    var echarts_26 = echarts.registerMap;
    var echarts_27 = echarts.getMap;
    var echarts_28 = echarts.dataTool;

    var echarts$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': echarts,
        __moduleExports: echarts,
        version: echarts_1,
        dependencies: echarts_2,
        PRIORITY: echarts_3,
        init: echarts_4,
        connect: echarts_5,
        disConnect: echarts_6,
        disconnect: echarts_7,
        dispose: echarts_8,
        getInstanceByDom: echarts_9,
        getInstanceById: echarts_10,
        registerTheme: echarts_11,
        registerPreprocessor: echarts_12,
        registerProcessor: echarts_13,
        registerPostUpdate: echarts_14,
        registerAction: echarts_15,
        registerCoordinateSystem: echarts_16,
        getCoordinateSystemDimensions: echarts_17,
        registerLayout: echarts_18,
        registerVisual: echarts_19,
        registerLoading: echarts_20,
        extendComponentModel: echarts_21,
        extendComponentView: echarts_22,
        extendSeriesModel: echarts_23,
        extendChartView: echarts_24,
        setCanvasCreator: echarts_25,
        registerMap: echarts_26,
        getMap: echarts_27,
        dataTool: echarts_28
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Cartesian coordinate system
     * @module  echarts/coord/Cartesian
     *
     */
    function dimAxisMapper(dim) {
      return this._axes[dim];
    }
    /**
     * @alias module:echarts/coord/Cartesian
     * @constructor
     */


    var Cartesian = function (name) {
      this._axes = {};
      this._dimList = [];
      /**
       * @type {string}
       */

      this.name = name || '';
    };

    Cartesian.prototype = {
      constructor: Cartesian,
      type: 'cartesian',

      /**
       * Get axis
       * @param  {number|string} dim
       * @return {module:echarts/coord/Cartesian~Axis}
       */
      getAxis: function (dim) {
        return this._axes[dim];
      },

      /**
       * Get axes list
       * @return {Array.<module:echarts/coord/Cartesian~Axis>}
       */
      getAxes: function () {
        return util.map(this._dimList, dimAxisMapper, this);
      },

      /**
       * Get axes list by given scale type
       */
      getAxesByScale: function (scaleType) {
        scaleType = scaleType.toLowerCase();
        return util.filter(this.getAxes(), function (axis) {
          return axis.scale.type === scaleType;
        });
      },

      /**
       * Add axis
       * @param {module:echarts/coord/Cartesian.Axis}
       */
      addAxis: function (axis) {
        var dim = axis.dim;
        this._axes[dim] = axis;

        this._dimList.push(dim);
      },

      /**
       * Convert data to coord in nd space
       * @param {Array.<number>|Object.<string, number>} val
       * @return {Array.<number>|Object.<string, number>}
       */
      dataToCoord: function (val) {
        return this._dataCoordConvert(val, 'dataToCoord');
      },

      /**
       * Convert coord in nd space to data
       * @param  {Array.<number>|Object.<string, number>} val
       * @return {Array.<number>|Object.<string, number>}
       */
      coordToData: function (val) {
        return this._dataCoordConvert(val, 'coordToData');
      },
      _dataCoordConvert: function (input, method) {
        var dimList = this._dimList;
        var output = input instanceof Array ? [] : {};

        for (var i = 0; i < dimList.length; i++) {
          var dim = dimList[i];
          var axis = this._axes[dim];
          output[dim] = axis[method](input[dim]);
        }

        return output;
      }
    };
    var _default$1v = Cartesian;
    var Cartesian_1 = _default$1v;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    function Cartesian2D(name) {
      Cartesian_1.call(this, name);
    }

    Cartesian2D.prototype = {
      constructor: Cartesian2D,
      type: 'cartesian2d',

      /**
       * @type {Array.<string>}
       * @readOnly
       */
      dimensions: ['x', 'y'],

      /**
       * Base axis will be used on stacking.
       *
       * @return {module:echarts/coord/cartesian/Axis2D}
       */
      getBaseAxis: function () {
        return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
      },

      /**
       * If contain point
       * @param {Array.<number>} point
       * @return {boolean}
       */
      containPoint: function (point) {
        var axisX = this.getAxis('x');
        var axisY = this.getAxis('y');
        return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
      },

      /**
       * If contain data
       * @param {Array.<number>} data
       * @return {boolean}
       */
      containData: function (data) {
        return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
      },

      /**
       * @param {Array.<number>} data
       * @param {Array.<number>} out
       * @return {Array.<number>}
       */
      dataToPoint: function (data, reserved, out) {
        var xAxis = this.getAxis('x');
        var yAxis = this.getAxis('y');
        out = out || [];
        out[0] = xAxis.toGlobalCoord(xAxis.dataToCoord(data[0]));
        out[1] = yAxis.toGlobalCoord(yAxis.dataToCoord(data[1]));
        return out;
      },

      /**
       * @param {Array.<number>} data
       * @param {Array.<number>} out
       * @return {Array.<number>}
       */
      clampData: function (data, out) {
        var xScale = this.getAxis('x').scale;
        var yScale = this.getAxis('y').scale;
        var xAxisExtent = xScale.getExtent();
        var yAxisExtent = yScale.getExtent();
        var x = xScale.parse(data[0]);
        var y = yScale.parse(data[1]);
        out = out || [];
        out[0] = Math.min(Math.max(Math.min(xAxisExtent[0], xAxisExtent[1]), x), Math.max(xAxisExtent[0], xAxisExtent[1]));
        out[1] = Math.min(Math.max(Math.min(yAxisExtent[0], yAxisExtent[1]), y), Math.max(yAxisExtent[0], yAxisExtent[1]));
        return out;
      },

      /**
       * @param {Array.<number>} point
       * @param {Array.<number>} out
       * @return {Array.<number>}
       */
      pointToData: function (point, out) {
        var xAxis = this.getAxis('x');
        var yAxis = this.getAxis('y');
        out = out || [];
        out[0] = xAxis.coordToData(xAxis.toLocalCoord(point[0]));
        out[1] = yAxis.coordToData(yAxis.toLocalCoord(point[1]));
        return out;
      },

      /**
       * Get other axis
       * @param {module:echarts/coord/cartesian/Axis2D} axis
       */
      getOtherAxis: function (axis) {
        return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
      },

      /**
       * Get rect area of cartesian.
       * Area will have a contain function to determine if a point is in the coordinate system.
       * @return {BoundingRect}
       */
      getArea: function () {
        var xExtent = this.getAxis('x').getGlobalExtent();
        var yExtent = this.getAxis('y').getGlobalExtent();
        var x = Math.min(xExtent[0], xExtent[1]);
        var y = Math.min(yExtent[0], yExtent[1]);
        var width = Math.max(xExtent[0], xExtent[1]) - x;
        var height = Math.max(yExtent[0], yExtent[1]) - y;
        var rect = new BoundingRect_1(x, y, width, height);
        return rect;
      }
    };
    util.inherits(Cartesian2D, Cartesian_1);
    var _default$1w = Cartesian2D;
    var Cartesian2D_1 = _default$1w;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Extend axis 2d
     * @constructor module:echarts/coord/cartesian/Axis2D
     * @extends {module:echarts/coord/cartesian/Axis}
     * @param {string} dim
     * @param {*} scale
     * @param {Array.<number>} coordExtent
     * @param {string} axisType
     * @param {string} position
     */
    var Axis2D = function (dim, scale, coordExtent, axisType, position) {
      Axis_1.call(this, dim, scale, coordExtent);
      /**
       * Axis type
       *  - 'category'
       *  - 'value'
       *  - 'time'
       *  - 'log'
       * @type {string}
       */

      this.type = axisType || 'value';
      /**
       * Axis position
       *  - 'top'
       *  - 'bottom'
       *  - 'left'
       *  - 'right'
       */

      this.position = position || 'bottom';
    };

    Axis2D.prototype = {
      constructor: Axis2D,

      /**
       * Index of axis, can be used as key
       */
      index: 0,

      /**
       * Implemented in <module:echarts/coord/cartesian/Grid>.
       * @return {Array.<module:echarts/coord/cartesian/Axis2D>}
       *         If not on zero of other axis, return null/undefined.
       *         If no axes, return an empty array.
       */
      getAxesOnZeroOf: null,

      /**
       * Axis model
       * @param {module:echarts/coord/cartesian/AxisModel}
       */
      model: null,
      isHorizontal: function () {
        var position = this.position;
        return position === 'top' || position === 'bottom';
      },

      /**
       * Each item cooresponds to this.getExtent(), which
       * means globalExtent[0] may greater than globalExtent[1],
       * unless `asc` is input.
       *
       * @param {boolean} [asc]
       * @return {Array.<number>}
       */
      getGlobalExtent: function (asc) {
        var ret = this.getExtent();
        ret[0] = this.toGlobalCoord(ret[0]);
        ret[1] = this.toGlobalCoord(ret[1]);
        asc && ret[0] > ret[1] && ret.reverse();
        return ret;
      },
      getOtherAxis: function () {
        this.grid.getOtherAxis();
      },

      /**
       * @override
       */
      pointToData: function (point, clamp) {
        return this.coordToData(this.toLocalCoord(point[this.dim === 'x' ? 0 : 1]), clamp);
      },

      /**
       * Transform global coord to local coord,
       * i.e. var localCoord = axis.toLocalCoord(80);
       * designate by module:echarts/coord/cartesian/Grid.
       * @type {Function}
       */
      toLocalCoord: null,

      /**
       * Transform global coord to local coord,
       * i.e. var globalCoord = axis.toLocalCoord(40);
       * designate by module:echarts/coord/cartesian/Grid.
       * @type {Function}
       */
      toGlobalCoord: null
    };
    util.inherits(Axis2D, Axis_1);
    var _default$1x = Axis2D;
    var Axis2D_1 = _default$1x;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var defaultOption = {
      show: true,
      zlevel: 0,
      z: 0,
      // Inverse the axis.
      inverse: false,
      // Axis name displayed.
      name: '',
      // 'start' | 'middle' | 'end'
      nameLocation: 'end',
      // By degree. By defualt auto rotate by nameLocation.
      nameRotate: null,
      nameTruncate: {
        maxWidth: null,
        ellipsis: '...',
        placeholder: '.'
      },
      // Use global text style by default.
      nameTextStyle: {},
      // The gap between axisName and axisLine.
      nameGap: 15,
      // Default `false` to support tooltip.
      silent: false,
      // Default `false` to avoid legacy user event listener fail.
      triggerEvent: false,
      tooltip: {
        show: false
      },
      axisPointer: {},
      axisLine: {
        show: true,
        onZero: true,
        onZeroAxisIndex: null,
        lineStyle: {
          color: '#333',
          width: 1,
          type: 'solid'
        },
        // The arrow at both ends the the axis.
        symbol: ['none', 'none'],
        symbolSize: [10, 15]
      },
      axisTick: {
        show: true,
        // Whether axisTick is inside the grid or outside the grid.
        inside: false,
        // The length of axisTick.
        length: 5,
        lineStyle: {
          width: 1
        }
      },
      axisLabel: {
        show: true,
        // Whether axisLabel is inside the grid or outside the grid.
        inside: false,
        rotate: 0,
        // true | false | null/undefined (auto)
        showMinLabel: null,
        // true | false | null/undefined (auto)
        showMaxLabel: null,
        margin: 8,
        // formatter: null,
        fontSize: 12
      },
      splitLine: {
        show: true,
        lineStyle: {
          color: ['#ccc'],
          width: 1,
          type: 'solid'
        }
      },
      splitArea: {
        show: false,
        areaStyle: {
          color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
        }
      }
    };
    var axisDefault = {};
    axisDefault.categoryAxis = util.merge({
      // The gap at both ends of the axis. For categoryAxis, boolean.
      boundaryGap: true,
      // Set false to faster category collection.
      // Only usefull in the case like: category is
      // ['2012-01-01', '2012-01-02', ...], where the input
      // data has been ensured not duplicate and is large data.
      // null means "auto":
      // if axis.data provided, do not deduplication,
      // else do deduplication.
      deduplication: null,
      // splitArea: {
      // show: false
      // },
      splitLine: {
        show: false
      },
      axisTick: {
        // If tick is align with label when boundaryGap is true
        alignWithLabel: false,
        interval: 'auto'
      },
      axisLabel: {
        interval: 'auto'
      }
    }, defaultOption);
    axisDefault.valueAxis = util.merge({
      // The gap at both ends of the axis. For value axis, [GAP, GAP], where
      // `GAP` can be an absolute pixel number (like `35`), or percent (like `'30%'`)
      boundaryGap: [0, 0],
      // TODO
      // min/max: [30, datamin, 60] or [20, datamin] or [datamin, 60]
      // Min value of the axis. can be:
      // + a number
      // + 'dataMin': use the min value in data.
      // + null/undefined: auto decide min value (consider pretty look and boundaryGap).
      // min: null,
      // Max value of the axis. can be:
      // + a number
      // + 'dataMax': use the max value in data.
      // + null/undefined: auto decide max value (consider pretty look and boundaryGap).
      // max: null,
      // Readonly prop, specifies start value of the range when using data zoom.
      // rangeStart: null
      // Readonly prop, specifies end value of the range when using data zoom.
      // rangeEnd: null
      // Optional value can be:
      // + `false`: always include value 0.
      // + `true`: the extent do not consider value 0.
      // scale: false,
      // AxisTick and axisLabel and splitLine are caculated based on splitNumber.
      splitNumber: 5,
      // Interval specifies the span of the ticks is mandatorily.
      // interval: null
      // Specify min interval when auto calculate tick interval.
      // minInterval: null
      // Specify max interval when auto calculate tick interval.
      // maxInterval: null
      minorTick: {
        // Minor tick, not available for cateogry axis.
        show: false,
        // Split number of minor ticks. The value should be in range of (0, 100)
        splitNumber: 5,
        // Lenght of minor tick
        length: 3,
        // Same inside with axisTick
        // Line style
        lineStyle: {// Default to be same with axisTick
        }
      },
      minorSplitLine: {
        show: false,
        lineStyle: {
          color: '#eee',
          width: 1
        }
      }
    }, defaultOption);
    axisDefault.timeAxis = util.defaults({
      scale: true,
      min: 'dataMin',
      max: 'dataMax'
    }, axisDefault.valueAxis);
    axisDefault.logAxis = util.defaults({
      scale: true,
      logBase: 10
    }, axisDefault.valueAxis);
    var _default$1y = axisDefault;
    var axisDefault_1 = _default$1y;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    var getLayoutParams$2 = layout.getLayoutParams;
    var mergeLayoutParam$2 = layout.mergeLayoutParam;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // FIXME axisType is fixed ?
    var AXIS_TYPES = ['value', 'category', 'time', 'log'];
    /**
     * Generate sub axis model class
     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
     * @param {module:echarts/model/Component} BaseAxisModelClass
     * @param {Function} axisTypeDefaulter
     * @param {Object} [extraDefaultOption]
     */

    function _default$1z(axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
      util.each(AXIS_TYPES, function (axisType) {
        BaseAxisModelClass.extend({
          /**
           * @readOnly
           */
          type: axisName + 'Axis.' + axisType,
          mergeDefaultAndTheme: function (option, ecModel) {
            var layoutMode = this.layoutMode;
            var inputPositionParams = layoutMode ? getLayoutParams$2(option) : {};
            var themeModel = ecModel.getTheme();
            util.merge(option, themeModel.get(axisType + 'Axis'));
            util.merge(option, this.getDefaultOption());
            option.type = axisTypeDefaulter(axisName, option);

            if (layoutMode) {
              mergeLayoutParam$2(option, inputPositionParams, layoutMode);
            }
          },

          /**
           * @override
           */
          optionUpdated: function () {
            var thisOption = this.option;

            if (thisOption.type === 'category') {
              this.__ordinalMeta = OrdinalMeta_1.createByAxisModel(this);
            }
          },

          /**
           * Should not be called before all of 'getInitailData' finished.
           * Because categories are collected during initializing data.
           */
          getCategories: function (rawData) {
            var option = this.option; // FIXME
            // warning if called before all of 'getInitailData' finished.

            if (option.type === 'category') {
              if (rawData) {
                return option.data;
              }

              return this.__ordinalMeta.categories;
            }
          },
          getOrdinalMeta: function () {
            return this.__ordinalMeta;
          },
          defaultOption: util.mergeAll([{}, axisDefault_1[axisType + 'Axis'], extraDefaultOption], true)
        });
      });
      Component.registerSubTypeDefaulter(axisName + 'Axis', util.curry(axisTypeDefaulter, axisName));
    }

    var axisModelCreator = _default$1z;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var AxisModel = Component.extend({
      type: 'cartesian2dAxis',

      /**
       * @type {module:echarts/coord/cartesian/Axis2D}
       */
      axis: null,

      /**
       * @override
       */
      init: function () {
        AxisModel.superApply(this, 'init', arguments);
        this.resetRange();
      },

      /**
       * @override
       */
      mergeOption: function () {
        AxisModel.superApply(this, 'mergeOption', arguments);
        this.resetRange();
      },

      /**
       * @override
       */
      restoreData: function () {
        AxisModel.superApply(this, 'restoreData', arguments);
        this.resetRange();
      },

      /**
       * @override
       * @return {module:echarts/model/Component}
       */
      getCoordSysModel: function () {
        return this.ecModel.queryComponents({
          mainType: 'grid',
          index: this.option.gridIndex,
          id: this.option.gridId
        })[0];
      }
    });

    function getAxisType(axisDim, option) {
      // Default axis with data is category axis
      return option.type || (option.data ? 'category' : 'value');
    }

    util.merge(AxisModel.prototype, axisModelCommonMixin);
    var extraOption = {
      // gridIndex: 0,
      // gridId: '',
      // Offset is for multiple axis on the same position
      offset: 0
    };
    axisModelCreator('x', AxisModel, getAxisType, extraOption);
    axisModelCreator('y', AxisModel, getAxisType, extraOption);

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Grid 是在有直角坐标系的时候必须要存在的
    // 所以这里也要被 Cartesian2D 依赖
    var _default$1A = Component.extend({
      type: 'grid',
      dependencies: ['xAxis', 'yAxis'],
      layoutMode: 'box',

      /**
       * @type {module:echarts/coord/cartesian/Grid}
       */
      coordinateSystem: null,
      defaultOption: {
        show: false,
        zlevel: 0,
        z: 0,
        left: '10%',
        top: 60,
        right: '10%',
        bottom: 60,
        // If grid size contain label
        containLabel: false,
        // width: {totalWidth} - left - right,
        // height: {totalHeight} - top - bottom,
        backgroundColor: 'rgba(0,0,0,0)',
        borderWidth: 1,
        borderColor: '#ccc'
      }
    });

    var isObject$c = util.isObject;
    var each$k = util.each;
    var map$7 = util.map;
    var indexOf$3 = util.indexOf;



    var getLayoutRect$1 = layout.getLayoutRect;



    var createScaleByModel$1 = axisHelper.createScaleByModel;
    var ifAxisCrossZero$1 = axisHelper.ifAxisCrossZero;
    var niceScaleExtent$1 = axisHelper.niceScaleExtent;
    var estimateLabelUnionRect$1 = axisHelper.estimateLabelUnionRect;









    var getStackedDimension$2 = dataStackHelper.getStackedDimension;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Grid is a region which contains at most 4 cartesian systems
     *
     * TODO Default cartesian
     */
    // Depends on GridModel, AxisModel, which performs preprocess.

    /**
     * Check if the axis is used in the specified grid
     * @inner
     */
    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
      return axisModel.getCoordSysModel() === gridModel;
    }

    function Grid(gridModel, ecModel, api) {
      /**
       * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
       * @private
       */
      this._coordsMap = {};
      /**
       * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
       * @private
       */

      this._coordsList = [];
      /**
       * @type {Object.<string, Array.<module:echarts/coord/cartesian/Axis2D>>}
       * @private
       */

      this._axesMap = {};
      /**
       * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
       * @private
       */

      this._axesList = [];

      this._initCartesian(gridModel, ecModel, api);

      this.model = gridModel;
    }

    var gridProto = Grid.prototype;
    gridProto.type = 'grid';
    gridProto.axisPointerEnabled = true;

    gridProto.getRect = function () {
      return this._rect;
    };

    gridProto.update = function (ecModel, api) {
      var axesMap = this._axesMap;

      this._updateScale(ecModel, this.model);

      each$k(axesMap.x, function (xAxis) {
        niceScaleExtent$1(xAxis.scale, xAxis.model);
      });
      each$k(axesMap.y, function (yAxis) {
        niceScaleExtent$1(yAxis.scale, yAxis.model);
      }); // Key: axisDim_axisIndex, value: boolean, whether onZero target.

      var onZeroRecords = {};
      each$k(axesMap.x, function (xAxis) {
        fixAxisOnZero(axesMap, 'y', xAxis, onZeroRecords);
      });
      each$k(axesMap.y, function (yAxis) {
        fixAxisOnZero(axesMap, 'x', yAxis, onZeroRecords);
      }); // Resize again if containLabel is enabled
      // FIXME It may cause getting wrong grid size in data processing stage

      this.resize(this.model, api);
    };

    function fixAxisOnZero(axesMap, otherAxisDim, axis, onZeroRecords) {
      axis.getAxesOnZeroOf = function () {
        // TODO: onZero of multiple axes.
        return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];
      }; // onZero can not be enabled in these two situations:
      // 1. When any other axis is a category axis.
      // 2. When no axis is cross 0 point.


      var otherAxes = axesMap[otherAxisDim];
      var otherAxisOnZeroOf;
      var axisModel = axis.model;
      var onZero = axisModel.get('axisLine.onZero');
      var onZeroAxisIndex = axisModel.get('axisLine.onZeroAxisIndex');

      if (!onZero) {
        return;
      } // If target axis is specified.


      if (onZeroAxisIndex != null) {
        if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {
          otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];
        }
      } else {
        // Find the first available other axis.
        for (var idx in otherAxes) {
          if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) // Consider that two Y axes on one value axis,
          // if both onZero, the two Y axes overlap.
          && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {
            otherAxisOnZeroOf = otherAxes[idx];
            break;
          }
        }
      }

      if (otherAxisOnZeroOf) {
        onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;
      }

      function getOnZeroRecordKey(axis) {
        return axis.dim + '_' + axis.index;
      }
    }

    function canOnZeroToAxis(axis) {
      return axis && axis.type !== 'category' && axis.type !== 'time' && ifAxisCrossZero$1(axis);
    }
    /**
     * Resize the grid
     * @param {module:echarts/coord/cartesian/GridModel} gridModel
     * @param {module:echarts/ExtensionAPI} api
     */


    gridProto.resize = function (gridModel, api, ignoreContainLabel) {
      var gridRect = getLayoutRect$1(gridModel.getBoxLayoutParams(), {
        width: api.getWidth(),
        height: api.getHeight()
      });
      this._rect = gridRect;
      var axesList = this._axesList;
      adjustAxes(); // Minus label size

      if (!ignoreContainLabel && gridModel.get('containLabel')) {
        each$k(axesList, function (axis) {
          if (!axis.model.get('axisLabel.inside')) {
            var labelUnionRect = estimateLabelUnionRect$1(axis);

            if (labelUnionRect) {
              var dim = axis.isHorizontal() ? 'height' : 'width';
              var margin = axis.model.get('axisLabel.margin');
              gridRect[dim] -= labelUnionRect[dim] + margin;

              if (axis.position === 'top') {
                gridRect.y += labelUnionRect.height + margin;
              } else if (axis.position === 'left') {
                gridRect.x += labelUnionRect.width + margin;
              }
            }
          }
        });
        adjustAxes();
      }

      function adjustAxes() {
        each$k(axesList, function (axis) {
          var isHorizontal = axis.isHorizontal();
          var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
          var idx = axis.inverse ? 1 : 0;
          axis.setExtent(extent[idx], extent[1 - idx]);
          updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);
        });
      }
    };
    /**
     * @param {string} axisType
     * @param {number} [axisIndex]
     */


    gridProto.getAxis = function (axisType, axisIndex) {
      var axesMapOnDim = this._axesMap[axisType];

      if (axesMapOnDim != null) {
        if (axisIndex == null) {
          // Find first axis
          for (var name in axesMapOnDim) {
            if (axesMapOnDim.hasOwnProperty(name)) {
              return axesMapOnDim[name];
            }
          }
        }

        return axesMapOnDim[axisIndex];
      }
    };
    /**
     * @return {Array.<module:echarts/coord/Axis>}
     */


    gridProto.getAxes = function () {
      return this._axesList.slice();
    };
    /**
     * Usage:
     *      grid.getCartesian(xAxisIndex, yAxisIndex);
     *      grid.getCartesian(xAxisIndex);
     *      grid.getCartesian(null, yAxisIndex);
     *      grid.getCartesian({xAxisIndex: ..., yAxisIndex: ...});
     *
     * @param {number|Object} [xAxisIndex]
     * @param {number} [yAxisIndex]
     */


    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
      if (xAxisIndex != null && yAxisIndex != null) {
        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
        return this._coordsMap[key];
      }

      if (isObject$c(xAxisIndex)) {
        yAxisIndex = xAxisIndex.yAxisIndex;
        xAxisIndex = xAxisIndex.xAxisIndex;
      } // When only xAxisIndex or yAxisIndex given, find its first cartesian.


      for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
        if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
          return coordList[i];
        }
      }
    };

    gridProto.getCartesians = function () {
      return this._coordsList.slice();
    };
    /**
     * @implements
     * see {module:echarts/CoodinateSystem}
     */


    gridProto.convertToPixel = function (ecModel, finder, value) {
      var target = this._findConvertTarget(ecModel, finder);

      return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
    };
    /**
     * @implements
     * see {module:echarts/CoodinateSystem}
     */


    gridProto.convertFromPixel = function (ecModel, finder, value) {
      var target = this._findConvertTarget(ecModel, finder);

      return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
    };
    /**
     * @inner
     */


    gridProto._findConvertTarget = function (ecModel, finder) {
      var seriesModel = finder.seriesModel;
      var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis')[0];
      var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis')[0];
      var gridModel = finder.gridModel;
      var coordsList = this._coordsList;
      var cartesian;
      var axis;

      if (seriesModel) {
        cartesian = seriesModel.coordinateSystem;
        indexOf$3(coordsList, cartesian) < 0 && (cartesian = null);
      } else if (xAxisModel && yAxisModel) {
        cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
      } else if (xAxisModel) {
        axis = this.getAxis('x', xAxisModel.componentIndex);
      } else if (yAxisModel) {
        axis = this.getAxis('y', yAxisModel.componentIndex);
      } // Lowest priority.
      else if (gridModel) {
          var grid = gridModel.coordinateSystem;

          if (grid === this) {
            cartesian = this._coordsList[0];
          }
        }

      return {
        cartesian: cartesian,
        axis: axis
      };
    };
    /**
     * @implements
     * see {module:echarts/CoodinateSystem}
     */


    gridProto.containPoint = function (point) {
      var coord = this._coordsList[0];

      if (coord) {
        return coord.containPoint(point);
      }
    };
    /**
     * Initialize cartesian coordinate systems
     * @private
     */


    gridProto._initCartesian = function (gridModel, ecModel, api) {
      var axisPositionUsed = {
        left: false,
        right: false,
        top: false,
        bottom: false
      };
      var axesMap = {
        x: {},
        y: {}
      };
      var axesCount = {
        x: 0,
        y: 0
      }; /// Create axis

      ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
      ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

      if (!axesCount.x || !axesCount.y) {
        // Roll back when there no either x or y axis
        this._axesMap = {};
        this._axesList = [];
        return;
      }

      this._axesMap = axesMap; /// Create cartesian2d

      each$k(axesMap.x, function (xAxis, xAxisIndex) {
        each$k(axesMap.y, function (yAxis, yAxisIndex) {
          var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
          var cartesian = new Cartesian2D_1(key);
          cartesian.grid = this;
          cartesian.model = gridModel;
          this._coordsMap[key] = cartesian;

          this._coordsList.push(cartesian);

          cartesian.addAxis(xAxis);
          cartesian.addAxis(yAxis);
        }, this);
      }, this);

      function createAxisCreator(axisType) {
        return function (axisModel, idx) {
          if (!isAxisUsedInTheGrid(axisModel, gridModel)) {
            return;
          }

          var axisPosition = axisModel.get('position');

          if (axisType === 'x') {
            // Fix position
            if (axisPosition !== 'top' && axisPosition !== 'bottom') {
              // Default bottom of X
              axisPosition = axisPositionUsed.bottom ? 'top' : 'bottom';
            }
          } else {
            // Fix position
            if (axisPosition !== 'left' && axisPosition !== 'right') {
              // Default left of Y
              axisPosition = axisPositionUsed.left ? 'right' : 'left';
            }
          }

          axisPositionUsed[axisPosition] = true;
          var axis = new Axis2D_1(axisType, createScaleByModel$1(axisModel), [0, 0], axisModel.get('type'), axisPosition);
          var isCategory = axis.type === 'category';
          axis.onBand = isCategory && axisModel.get('boundaryGap');
          axis.inverse = axisModel.get('inverse'); // Inject axis into axisModel

          axisModel.axis = axis; // Inject axisModel into axis

          axis.model = axisModel; // Inject grid info axis

          axis.grid = this; // Index of axis, can be used as key

          axis.index = idx;

          this._axesList.push(axis);

          axesMap[axisType][idx] = axis;
          axesCount[axisType]++;
        };
      }
    };
    /**
     * Update cartesian properties from series
     * @param  {module:echarts/model/Option} option
     * @private
     */


    gridProto._updateScale = function (ecModel, gridModel) {
      // Reset scale
      each$k(this._axesList, function (axis) {
        axis.scale.setExtent(Infinity, -Infinity);
      });
      ecModel.eachSeries(function (seriesModel) {
        if (isCartesian2D(seriesModel)) {
          var axesModels = findAxesModels(seriesModel);
          var xAxisModel = axesModels[0];
          var yAxisModel = axesModels[1];

          if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {
            return;
          }

          var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
          var data = seriesModel.getData();
          var xAxis = cartesian.getAxis('x');
          var yAxis = cartesian.getAxis('y');

          if (data.type === 'list') {
            unionExtent(data, xAxis);
            unionExtent(data, yAxis);
          }
        }
      }, this);

      function unionExtent(data, axis, seriesModel) {
        each$k(data.mapDimension(axis.dim, true), function (dim) {
          axis.scale.unionExtentFromData( // For example, the extent of the orginal dimension
          // is [0.1, 0.5], the extent of the `stackResultDimension`
          // is [7, 9], the final extent should not include [0.1, 0.5].
          data, getStackedDimension$2(data, dim));
        });
      }
    };
    /**
     * @param {string} [dim] 'x' or 'y' or 'auto' or null/undefined
     * @return {Object} {baseAxes: [], otherAxes: []}
     */


    gridProto.getTooltipAxes = function (dim) {
      var baseAxes = [];
      var otherAxes = [];
      each$k(this.getCartesians(), function (cartesian) {
        var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
        var otherAxis = cartesian.getOtherAxis(baseAxis);
        indexOf$3(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
        indexOf$3(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
      });
      return {
        baseAxes: baseAxes,
        otherAxes: otherAxes
      };
    };
    /**
     * @inner
     */


    function updateAxisTransform(axis, coordBase) {
      var axisExtent = axis.getExtent();
      var axisExtentSum = axisExtent[0] + axisExtent[1]; // Fast transform

      axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
        return coord + coordBase;
      } : function (coord) {
        return axisExtentSum - coord + coordBase;
      };
      axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
        return coord - coordBase;
      } : function (coord) {
        return axisExtentSum - coord + coordBase;
      };
    }

    var axesTypes = ['xAxis', 'yAxis'];
    /**
     * @inner
     */

    function findAxesModels(seriesModel, ecModel) {
      return map$7(axesTypes, function (axisType) {
        var axisModel = seriesModel.getReferringComponents(axisType)[0];
        return axisModel;
      });
    }
    /**
     * @inner
     */


    function isCartesian2D(seriesModel) {
      return seriesModel.get('coordinateSystem') === 'cartesian2d';
    }

    Grid.create = function (ecModel, api) {
      var grids = [];
      ecModel.eachComponent('grid', function (gridModel, idx) {
        var grid = new Grid(gridModel, ecModel, api);
        grid.name = 'grid_' + idx; // dataSampling requires axis extent, so resize
        // should be performed in create stage.

        grid.resize(gridModel, api, true);
        gridModel.coordinateSystem = grid;
        grids.push(grid);
      }); // Inject the coordinateSystems into seriesModel

      ecModel.eachSeries(function (seriesModel) {
        if (!isCartesian2D(seriesModel)) {
          return;
        }

        var axesModels = findAxesModels(seriesModel);
        var xAxisModel = axesModels[0];
        var yAxisModel = axesModels[1];
        var gridModel = xAxisModel.getCoordSysModel();
        var grid = gridModel.coordinateSystem;
        seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
      });
      return grids;
    }; // For deciding which dimensions to use when creating list data


    Grid.dimensions = Grid.prototype.dimensions = Cartesian2D_1.prototype.dimensions;
    CoordinateSystem.register('cartesian2d', Grid);

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$1B = Series.extend({
      type: 'series.__base_bar__',
      getInitialData: function (option, ecModel) {
        return createListFromArray_1(this.getSource(), this, {
          useEncodeDefaulter: true
        });
      },
      getMarkerPosition: function (value) {
        var coordSys = this.coordinateSystem;

        if (coordSys) {
          // PENDING if clamp ?
          var pt = coordSys.dataToPoint(coordSys.clampData(value));
          var data = this.getData();
          var offset = data.getLayout('offset');
          var size = data.getLayout('size');
          var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
          pt[offsetIndex] += offset + size / 2;
          return pt;
        }

        return [NaN, NaN];
      },
      defaultOption: {
        zlevel: 0,
        // 一级层叠
        z: 2,
        // 二级层叠
        coordinateSystem: 'cartesian2d',
        legendHoverLink: true,
        // stack: null
        // Cartesian coordinate system
        // xAxisIndex: 0,
        // yAxisIndex: 0,
        // 最小高度改为0
        barMinHeight: 0,
        // 最小角度为0，仅对极坐标系下的柱状图有效
        barMinAngle: 0,
        // cursor: null,
        large: false,
        largeThreshold: 400,
        progressive: 3e3,
        progressiveChunkMode: 'mod',
        // barMaxWidth: null,
        // In cartesian, the default value is 1. Otherwise null.
        // barMinWidth: null,
        // 默认自适应
        // barWidth: null,
        // 柱间距离，默认为柱形宽度的30%，可设固定值
        // barGap: '30%',
        // 类目间柱形距离，默认为类目间距的20%，可设固定值
        // barCategoryGap: '20%',
        // label: {
        //      show: false
        // },
        itemStyle: {},
        emphasis: {}
      }
    });

    var BaseBarSeries = _default$1B;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$1C = BaseBarSeries.extend({
      type: 'series.bar',
      dependencies: ['grid', 'polar'],
      brushSelector: 'rect',

      /**
       * @override
       */
      getProgressive: function () {
        // Do not support progressive in normal mode.
        return this.get('large') ? this.get('progressive') : false;
      },

      /**
       * @override
       */
      getProgressiveThreshold: function () {
        // Do not support progressive in normal mode.
        var progressiveThreshold = this.get('progressiveThreshold');
        var largeThreshold = this.get('largeThreshold');

        if (largeThreshold > progressiveThreshold) {
          progressiveThreshold = largeThreshold;
        }

        return progressiveThreshold;
      },
      defaultOption: {
        // If clipped
        // Only available on cartesian2d
        clip: true,
        // If use caps on two sides of bars
        // Only available on tangential polar bar
        roundCap: false
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var retrieveRawValue$4 = dataProvider.retrieveRawValue;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @param {module:echarts/data/List} data
     * @param {number} dataIndex
     * @return {string} label string. Not null/undefined
     */
    function getDefaultLabel(data, dataIndex) {
      var labelDims = data.mapDimension('defaultedLabel', true);
      var len = labelDims.length; // Simple optimization (in lots of cases, label dims length is 1)

      if (len === 1) {
        return retrieveRawValue$4(data, dataIndex, labelDims[0]);
      } else if (len) {
        var vals = [];

        for (var i = 0; i < labelDims.length; i++) {
          var val = retrieveRawValue$4(data, dataIndex, labelDims[i]);
          vals.push(val);
        }

        return vals.join(' ');
      }
    }

    var getDefaultLabel_1 = getDefaultLabel;

    var labelHelper = {
    	getDefaultLabel: getDefaultLabel_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var getDefaultLabel$1 = labelHelper.getDefaultLabel;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    function setLabel(normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside) {
      var labelModel = itemModel.getModel('label');
      var hoverLabelModel = itemModel.getModel('emphasis.label');
      graphic.setLabelStyle(normalStyle, hoverStyle, labelModel, hoverLabelModel, {
        labelFetcher: seriesModel,
        labelDataIndex: dataIndex,
        defaultText: getDefaultLabel$1(seriesModel.getData(), dataIndex),
        isRectText: true,
        autoColor: color
      });
      fixPosition(normalStyle);
      fixPosition(hoverStyle);
    }

    function fixPosition(style, labelPositionOutside) {
      if (style.textPosition === 'outside') {
        style.textPosition = labelPositionOutside;
      }
    }

    var setLabel_1 = setLabel;

    var helper$3 = {
    	setLabel: setLabel_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var getBarItemStyle = makeStyleMapper([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], // Compatitable with 2
    ['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
    var _default$1D = {
      getBarItemStyle: function (excludes) {
        var style = getBarItemStyle(this, excludes);

        if (this.getBorderLineDash) {
          var lineDash = this.getBorderLineDash();
          lineDash && (style.lineDash = lineDash);
        }

        return style;
      }
    };
    var barItemStyle = _default$1D;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var round$3 = number.round;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    function createGridClipPath(cartesian, hasAnimation, seriesModel) {
      var rect = cartesian.getArea();
      var isHorizontal = cartesian.getBaseAxis().isHorizontal();
      var x = rect.x;
      var y = rect.y;
      var width = rect.width;
      var height = rect.height;
      var lineWidth = seriesModel.get('lineStyle.width') || 2; // Expand the clip path a bit to avoid the border is clipped and looks thinner

      x -= lineWidth / 2;
      y -= lineWidth / 2;
      width += lineWidth;
      height += lineWidth;
      var clipPath = new graphic.Rect({
        shape: {
          x: x,
          y: y,
          width: width,
          height: height
        }
      });

      if (hasAnimation) {
        clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
        graphic.initProps(clipPath, {
          shape: {
            width: width,
            height: height
          }
        }, seriesModel);
      }

      return clipPath;
    }

    function createPolarClipPath(polar, hasAnimation, seriesModel) {
      var sectorArea = polar.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.

      var clipPath = new graphic.Sector({
        shape: {
          cx: round$3(polar.cx, 1),
          cy: round$3(polar.cy, 1),
          r0: round$3(sectorArea.r0, 1),
          r: round$3(sectorArea.r, 1),
          startAngle: sectorArea.startAngle,
          endAngle: sectorArea.endAngle,
          clockwise: sectorArea.clockwise
        }
      });

      if (hasAnimation) {
        clipPath.shape.endAngle = sectorArea.startAngle;
        graphic.initProps(clipPath, {
          shape: {
            endAngle: sectorArea.endAngle
          }
        }, seriesModel);
      }

      return clipPath;
    }

    function createClipPath(coordSys, hasAnimation, seriesModel) {
      if (!coordSys) {
        return null;
      } else if (coordSys.type === 'polar') {
        return createPolarClipPath(coordSys, hasAnimation, seriesModel);
      } else if (coordSys.type === 'cartesian2d') {
        return createGridClipPath(coordSys, hasAnimation, seriesModel);
      }

      return null;
    }

    var createGridClipPath_1 = createGridClipPath;
    var createPolarClipPath_1 = createPolarClipPath;
    var createClipPath_1 = createClipPath;

    var createClipPathFromCoordSys = {
    	createGridClipPath: createGridClipPath_1,
    	createPolarClipPath: createPolarClipPath_1,
    	createClipPath: createClipPath_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var extendShape$1 = graphic.extendShape;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Sausage: similar to sector, but have half circle on both sides
     * @public
     */
    var _default$1E = extendShape$1({
      type: 'sausage',
      shape: {
        cx: 0,
        cy: 0,
        r0: 0,
        r: 0,
        startAngle: 0,
        endAngle: Math.PI * 2,
        clockwise: true
      },
      buildPath: function (ctx, shape) {
        var x = shape.cx;
        var y = shape.cy;
        var r0 = Math.max(shape.r0 || 0, 0);
        var r = Math.max(shape.r, 0);
        var dr = (r - r0) * 0.5;
        var rCenter = r0 + dr;
        var startAngle = shape.startAngle;
        var endAngle = shape.endAngle;
        var clockwise = shape.clockwise;
        var unitStartX = Math.cos(startAngle);
        var unitStartY = Math.sin(startAngle);
        var unitEndX = Math.cos(endAngle);
        var unitEndY = Math.sin(endAngle);
        var lessThanCircle = clockwise ? endAngle - startAngle < Math.PI * 2 : startAngle - endAngle < Math.PI * 2;

        if (lessThanCircle) {
          ctx.moveTo(unitStartX * r0 + x, unitStartY * r0 + y);
          ctx.arc(unitStartX * rCenter + x, unitStartY * rCenter + y, dr, -Math.PI + startAngle, startAngle, !clockwise);
        }

        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
        ctx.moveTo(unitEndX * r + x, unitEndY * r + y);
        ctx.arc(unitEndX * rCenter + x, unitEndY * rCenter + y, dr, endAngle - Math.PI * 2, endAngle - Math.PI, !clockwise);

        if (r0 !== 0) {
          ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
          ctx.moveTo(unitStartX * r0 + x, unitEndY * r0 + y);
        }

        ctx.closePath();
      }
    });

    var sausage = _default$1E;

    var setLabel$1 = helper$3.setLabel;









    var throttle$1 = throttle_1.throttle;



    var createClipPath$1 = createClipPathFromCoordSys.createClipPath;



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'barBorderWidth'];
    var _eventPos = [0, 0]; // FIXME
    // Just for compatible with ec2.

    util.extend(Model_1.prototype, barItemStyle);

    function getClipArea(coord, data) {
      var coordSysClipArea = coord.getArea && coord.getArea();

      if (coord.type === 'cartesian2d') {
        var baseAxis = coord.getBaseAxis(); // When boundaryGap is false or using time axis. bar may exceed the grid.
        // We should not clip this part.
        // See test/bar2.html

        if (baseAxis.type !== 'category' || !baseAxis.onBand) {
          var expandWidth = data.getLayout('bandWidth');

          if (baseAxis.isHorizontal()) {
            coordSysClipArea.x -= expandWidth;
            coordSysClipArea.width += expandWidth * 2;
          } else {
            coordSysClipArea.y -= expandWidth;
            coordSysClipArea.height += expandWidth * 2;
          }
        }
      }

      return coordSysClipArea;
    }

    var _default$1F = echarts.extendChartView({
      type: 'bar',
      render: function (seriesModel, ecModel, api) {
        this._updateDrawMode(seriesModel);

        var coordinateSystemType = seriesModel.get('coordinateSystem');

        if (coordinateSystemType === 'cartesian2d' || coordinateSystemType === 'polar') {
          this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api);
        }

        return this.group;
      },
      incrementalPrepareRender: function (seriesModel, ecModel, api) {
        this._clear();

        this._updateDrawMode(seriesModel);
      },
      incrementalRender: function (params, seriesModel, ecModel, api) {
        // Do not support progressive in normal mode.
        this._incrementalRenderLarge(params, seriesModel);
      },
      _updateDrawMode: function (seriesModel) {
        var isLargeDraw = seriesModel.pipelineContext.large;

        if (this._isLargeDraw == null || isLargeDraw ^ this._isLargeDraw) {
          this._isLargeDraw = isLargeDraw;

          this._clear();
        }
      },
      _renderNormal: function (seriesModel, ecModel, api) {
        var group = this.group;
        var data = seriesModel.getData();
        var oldData = this._data;
        var coord = seriesModel.coordinateSystem;
        var baseAxis = coord.getBaseAxis();
        var isHorizontalOrRadial;

        if (coord.type === 'cartesian2d') {
          isHorizontalOrRadial = baseAxis.isHorizontal();
        } else if (coord.type === 'polar') {
          isHorizontalOrRadial = baseAxis.dim === 'angle';
        }

        var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
        var needsClip = seriesModel.get('clip', true);
        var coordSysClipArea = getClipArea(coord, data); // If there is clipPath created in large mode. Remove it.

        group.removeClipPath(); // We don't use clipPath in normal mode because we needs a perfect animation
        // And don't want the label are clipped.

        var roundCap = seriesModel.get('roundCap', true);
        data.diff(oldData).add(function (dataIndex) {
          if (!data.hasValue(dataIndex)) {
            return;
          }

          var itemModel = data.getItemModel(dataIndex);
          var layout = getLayout[coord.type](data, dataIndex, itemModel);

          if (needsClip) {
            // Clip will modify the layout params.
            // And return a boolean to determine if the shape are fully clipped.
            var isClipped = clip[coord.type](coordSysClipArea, layout);

            if (isClipped) {
              group.remove(el);
              return;
            }
          }

          var el = elementCreator[coord.type](dataIndex, layout, isHorizontalOrRadial, animationModel, false, roundCap);
          data.setItemGraphicEl(dataIndex, el);
          group.add(el);
          updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
        }).update(function (newIndex, oldIndex) {
          var el = oldData.getItemGraphicEl(oldIndex);

          if (!data.hasValue(newIndex)) {
            group.remove(el);
            return;
          }

          var itemModel = data.getItemModel(newIndex);
          var layout = getLayout[coord.type](data, newIndex, itemModel);

          if (needsClip) {
            var isClipped = clip[coord.type](coordSysClipArea, layout);

            if (isClipped) {
              group.remove(el);
              return;
            }
          }

          if (el) {
            graphic.updateProps(el, {
              shape: layout
            }, animationModel, newIndex);
          } else {
            el = elementCreator[coord.type](newIndex, layout, isHorizontalOrRadial, animationModel, true, roundCap);
          }

          data.setItemGraphicEl(newIndex, el); // Add back

          group.add(el);
          updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === 'polar');
        }).remove(function (dataIndex) {
          var el = oldData.getItemGraphicEl(dataIndex);

          if (coord.type === 'cartesian2d') {
            el && removeRect(dataIndex, animationModel, el);
          } else {
            el && removeSector(dataIndex, animationModel, el);
          }
        }).execute();
        this._data = data;
      },
      _renderLarge: function (seriesModel, ecModel, api) {
        this._clear();

        createLarge(seriesModel, this.group); // Use clipPath in large mode.

        var clipPath = seriesModel.get('clip', true) ? createClipPath$1(seriesModel.coordinateSystem, false, seriesModel) : null;

        if (clipPath) {
          this.group.setClipPath(clipPath);
        } else {
          this.group.removeClipPath();
        }
      },
      _incrementalRenderLarge: function (params, seriesModel) {
        createLarge(seriesModel, this.group, true);
      },
      dispose: util.noop,
      remove: function (ecModel) {
        this._clear(ecModel);
      },
      _clear: function (ecModel) {
        var group = this.group;
        var data = this._data;

        if (ecModel && ecModel.get('animation') && data && !this._isLargeDraw) {
          data.eachItemGraphicEl(function (el) {
            if (el.type === 'sector') {
              removeSector(el.dataIndex, ecModel, el);
            } else {
              removeRect(el.dataIndex, ecModel, el);
            }
          });
        } else {
          group.removeAll();
        }

        this._data = null;
      }
    });

    var mathMax$4 = Math.max;
    var mathMin$4 = Math.min;
    var clip = {
      cartesian2d: function (coordSysBoundingRect, layout) {
        var signWidth = layout.width < 0 ? -1 : 1;
        var signHeight = layout.height < 0 ? -1 : 1; // Needs positive width and height

        if (signWidth < 0) {
          layout.x += layout.width;
          layout.width = -layout.width;
        }

        if (signHeight < 0) {
          layout.y += layout.height;
          layout.height = -layout.height;
        }

        var x = mathMax$4(layout.x, coordSysBoundingRect.x);
        var x2 = mathMin$4(layout.x + layout.width, coordSysBoundingRect.x + coordSysBoundingRect.width);
        var y = mathMax$4(layout.y, coordSysBoundingRect.y);
        var y2 = mathMin$4(layout.y + layout.height, coordSysBoundingRect.y + coordSysBoundingRect.height);
        layout.x = x;
        layout.y = y;
        layout.width = x2 - x;
        layout.height = y2 - y;
        var clipped = layout.width < 0 || layout.height < 0; // Reverse back

        if (signWidth < 0) {
          layout.x += layout.width;
          layout.width = -layout.width;
        }

        if (signHeight < 0) {
          layout.y += layout.height;
          layout.height = -layout.height;
        }

        return clipped;
      },
      polar: function (coordSysClipArea) {
        return false;
      }
    };
    var elementCreator = {
      cartesian2d: function (dataIndex, layout, isHorizontal, animationModel, isUpdate) {
        var rect = new graphic.Rect({
          shape: util.extend({}, layout)
        }); // Animation

        if (animationModel) {
          var rectShape = rect.shape;
          var animateProperty = isHorizontal ? 'height' : 'width';
          var animateTarget = {};
          rectShape[animateProperty] = 0;
          animateTarget[animateProperty] = layout[animateProperty];
          graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
            shape: animateTarget
          }, animationModel, dataIndex);
        }

        return rect;
      },
      polar: function (dataIndex, layout, isRadial, animationModel, isUpdate, roundCap) {
        // Keep the same logic with bar in catesion: use end value to control
        // direction. Notice that if clockwise is true (by default), the sector
        // will always draw clockwisely, no matter whether endAngle is greater
        // or less than startAngle.
        var clockwise = layout.startAngle < layout.endAngle;
        var ShapeClass = !isRadial && roundCap ? sausage : graphic.Sector;
        var sector = new ShapeClass({
          shape: util.defaults({
            clockwise: clockwise
          }, layout)
        }); // Animation

        if (animationModel) {
          var sectorShape = sector.shape;
          var animateProperty = isRadial ? 'r' : 'endAngle';
          var animateTarget = {};
          sectorShape[animateProperty] = isRadial ? 0 : layout.startAngle;
          animateTarget[animateProperty] = layout[animateProperty];
          graphic[isUpdate ? 'updateProps' : 'initProps'](sector, {
            shape: animateTarget
          }, animationModel, dataIndex);
        }

        return sector;
      }
    };

    function removeRect(dataIndex, animationModel, el) {
      // Not show text when animating
      el.style.text = null;
      graphic.updateProps(el, {
        shape: {
          width: 0
        }
      }, animationModel, dataIndex, function () {
        el.parent && el.parent.remove(el);
      });
    }

    function removeSector(dataIndex, animationModel, el) {
      // Not show text when animating
      el.style.text = null;
      graphic.updateProps(el, {
        shape: {
          r: el.shape.r0
        }
      }, animationModel, dataIndex, function () {
        el.parent && el.parent.remove(el);
      });
    }

    var getLayout = {
      cartesian2d: function (data, dataIndex, itemModel) {
        var layout = data.getItemLayout(dataIndex);
        var fixedLineWidth = getLineWidth(itemModel, layout); // fix layout with lineWidth

        var signX = layout.width > 0 ? 1 : -1;
        var signY = layout.height > 0 ? 1 : -1;
        return {
          x: layout.x + signX * fixedLineWidth / 2,
          y: layout.y + signY * fixedLineWidth / 2,
          width: layout.width - signX * fixedLineWidth,
          height: layout.height - signY * fixedLineWidth
        };
      },
      polar: function (data, dataIndex, itemModel) {
        var layout = data.getItemLayout(dataIndex);
        return {
          cx: layout.cx,
          cy: layout.cy,
          r0: layout.r0,
          r: layout.r,
          startAngle: layout.startAngle,
          endAngle: layout.endAngle
        };
      }
    };

    function isZeroOnPolar(layout) {
      return layout.startAngle != null && layout.endAngle != null && layout.startAngle === layout.endAngle;
    }

    function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal, isPolar) {
      var color = data.getItemVisual(dataIndex, 'color');
      var opacity = data.getItemVisual(dataIndex, 'opacity');
      var stroke = data.getVisual('borderColor');
      var itemStyleModel = itemModel.getModel('itemStyle');
      var hoverStyle = itemModel.getModel('emphasis.itemStyle').getBarItemStyle();

      if (!isPolar) {
        el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
      }

      el.useStyle(util.defaults({
        stroke: isZeroOnPolar(layout) ? 'none' : stroke,
        fill: isZeroOnPolar(layout) ? 'none' : color,
        opacity: opacity
      }, itemStyleModel.getBarItemStyle()));
      var cursorStyle = itemModel.getShallow('cursor');
      cursorStyle && el.attr('cursor', cursorStyle);
      var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';

      if (!isPolar) {
        setLabel$1(el.style, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside);
      }

      if (isZeroOnPolar(layout)) {
        hoverStyle.fill = hoverStyle.stroke = 'none';
      }

      graphic.setHoverStyle(el, hoverStyle);
    } // In case width or height are too small.


    function getLineWidth(itemModel, rawLayout) {
      var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
      return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
    }

    var LargePath = Path_1.extend({
      type: 'largeBar',
      shape: {
        points: []
      },
      buildPath: function (ctx, shape) {
        // Drawing lines is more efficient than drawing
        // a whole line or drawing rects.
        var points = shape.points;
        var startPoint = this.__startPoint;
        var baseDimIdx = this.__baseDimIdx;

        for (var i = 0; i < points.length; i += 2) {
          startPoint[baseDimIdx] = points[i + baseDimIdx];
          ctx.moveTo(startPoint[0], startPoint[1]);
          ctx.lineTo(points[i], points[i + 1]);
        }
      }
    });

    function createLarge(seriesModel, group, incremental) {
      // TODO support polar
      var data = seriesModel.getData();
      var startPoint = [];
      var baseDimIdx = data.getLayout('valueAxisHorizontal') ? 1 : 0;
      startPoint[1 - baseDimIdx] = data.getLayout('valueAxisStart');
      var el = new LargePath({
        shape: {
          points: data.getLayout('largePoints')
        },
        incremental: !!incremental,
        __startPoint: startPoint,
        __baseDimIdx: baseDimIdx,
        __largeDataIndices: data.getLayout('largeDataIndices'),
        __barWidth: data.getLayout('barWidth')
      });
      group.add(el);
      setLargeStyle(el, seriesModel, data); // Enable tooltip and user mouse/touch event handlers.

      el.seriesIndex = seriesModel.seriesIndex;

      if (!seriesModel.get('silent')) {
        el.on('mousedown', largePathUpdateDataIndex);
        el.on('mousemove', largePathUpdateDataIndex);
      }
    } // Use throttle to avoid frequently traverse to find dataIndex.


    var largePathUpdateDataIndex = throttle$1(function (event) {
      var largePath = this;
      var dataIndex = largePathFindDataIndex(largePath, event.offsetX, event.offsetY);
      largePath.dataIndex = dataIndex >= 0 ? dataIndex : null;
    }, 30, false);

    function largePathFindDataIndex(largePath, x, y) {
      var baseDimIdx = largePath.__baseDimIdx;
      var valueDimIdx = 1 - baseDimIdx;
      var points = largePath.shape.points;
      var largeDataIndices = largePath.__largeDataIndices;
      var barWidthHalf = Math.abs(largePath.__barWidth / 2);
      var startValueVal = largePath.__startPoint[valueDimIdx];
      _eventPos[0] = x;
      _eventPos[1] = y;
      var pointerBaseVal = _eventPos[baseDimIdx];
      var pointerValueVal = _eventPos[1 - baseDimIdx];
      var baseLowerBound = pointerBaseVal - barWidthHalf;
      var baseUpperBound = pointerBaseVal + barWidthHalf;

      for (var i = 0, len = points.length / 2; i < len; i++) {
        var ii = i * 2;
        var barBaseVal = points[ii + baseDimIdx];
        var barValueVal = points[ii + valueDimIdx];

        if (barBaseVal >= baseLowerBound && barBaseVal <= baseUpperBound && (startValueVal <= barValueVal ? pointerValueVal >= startValueVal && pointerValueVal <= barValueVal : pointerValueVal >= barValueVal && pointerValueVal <= startValueVal)) {
          return largeDataIndices[i];
        }
      }

      return -1;
    }

    function setLargeStyle(el, seriesModel, data) {
      var borderColor = data.getVisual('borderColor') || data.getVisual('color');
      var itemStyle = seriesModel.getModel('itemStyle').getItemStyle(['color', 'borderColor']);
      el.useStyle(itemStyle);
      el.style.fill = null;
      el.style.stroke = borderColor;
      el.style.lineWidth = data.getLayout('barWidth');
    }

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    var retrieve$1 = util.retrieve;
    var defaults$3 = util.defaults;
    var extend$7 = util.extend;
    var each$l = util.each;









    var isRadianAroundZero$1 = number.isRadianAroundZero;
    var remRadian$1 = number.remRadian;



    var createSymbol$2 = symbol.createSymbol;





    var v2ApplyTransform$2 = vector.applyTransform;



    var shouldShowAllLabels$2 = axisHelper.shouldShowAllLabels;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var PI$2 = Math.PI;
    /**
     * A final axis is translated and rotated from a "standard axis".
     * So opt.position and opt.rotation is required.
     *
     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
     * for example: (0, 0) ------------> (0, 50)
     *
     * nameDirection or tickDirection or labelDirection is 1 means tick
     * or label is below the standard axis, whereas is -1 means above
     * the standard axis. labelOffset means offset between label and axis,
     * which is useful when 'onZero', where axisLabel is in the grid and
     * label in outside grid.
     *
     * Tips: like always,
     * positive rotation represents anticlockwise, and negative rotation
     * represents clockwise.
     * The direction of position coordinate is the same as the direction
     * of screen coordinate.
     *
     * Do not need to consider axis 'inverse', which is auto processed by
     * axis extent.
     *
     * @param {module:zrender/container/Group} group
     * @param {Object} axisModel
     * @param {Object} opt Standard axis parameters.
     * @param {Array.<number>} opt.position [x, y]
     * @param {number} opt.rotation by radian
     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle' or 'center'.
     * @param {number} [opt.tickDirection=1] 1 or -1
     * @param {number} [opt.labelDirection=1] 1 or -1
     * @param {number} [opt.labelOffset=0] Usefull when onZero.
     * @param {string} [opt.axisLabelShow] default get from axisModel.
     * @param {string} [opt.axisName] default get from axisModel.
     * @param {number} [opt.axisNameAvailableWidth]
     * @param {number} [opt.labelRotate] by degree, default get from axisModel.
     * @param {number} [opt.strokeContainThreshold] Default label interval when label
     * @param {number} [opt.nameTruncateMaxWidth]
     */

    var AxisBuilder = function (axisModel, opt) {
      /**
       * @readOnly
       */
      this.opt = opt;
      /**
       * @readOnly
       */

      this.axisModel = axisModel; // Default value

      defaults$3(opt, {
        labelOffset: 0,
        nameDirection: 1,
        tickDirection: 1,
        labelDirection: 1,
        silent: true
      });
      /**
       * @readOnly
       */

      this.group = new graphic.Group(); // FIXME Not use a seperate text group?

      var dumbGroup = new graphic.Group({
        position: opt.position.slice(),
        rotation: opt.rotation
      }); // this.group.add(dumbGroup);
      // this._dumbGroup = dumbGroup;

      dumbGroup.updateTransform();
      this._transform = dumbGroup.transform;
      this._dumbGroup = dumbGroup;
    };

    AxisBuilder.prototype = {
      constructor: AxisBuilder,
      hasBuilder: function (name) {
        return !!builders[name];
      },
      add: function (name) {
        builders[name].call(this);
      },
      getGroup: function () {
        return this.group;
      }
    };
    var builders = {
      /**
       * @private
       */
      axisLine: function () {
        var opt = this.opt;
        var axisModel = this.axisModel;

        if (!axisModel.get('axisLine.show')) {
          return;
        }

        var extent = this.axisModel.axis.getExtent();
        var matrix = this._transform;
        var pt1 = [extent[0], 0];
        var pt2 = [extent[1], 0];

        if (matrix) {
          v2ApplyTransform$2(pt1, pt1, matrix);
          v2ApplyTransform$2(pt2, pt2, matrix);
        }

        var lineStyle = extend$7({
          lineCap: 'round'
        }, axisModel.getModel('axisLine.lineStyle').getLineStyle());
        this.group.add(new graphic.Line({
          // Id for animation
          anid: 'line',
          subPixelOptimize: true,
          shape: {
            x1: pt1[0],
            y1: pt1[1],
            x2: pt2[0],
            y2: pt2[1]
          },
          style: lineStyle,
          strokeContainThreshold: opt.strokeContainThreshold || 5,
          silent: true,
          z2: 1
        }));
        var arrows = axisModel.get('axisLine.symbol');
        var arrowSize = axisModel.get('axisLine.symbolSize');
        var arrowOffset = axisModel.get('axisLine.symbolOffset') || 0;

        if (typeof arrowOffset === 'number') {
          arrowOffset = [arrowOffset, arrowOffset];
        }

        if (arrows != null) {
          if (typeof arrows === 'string') {
            // Use the same arrow for start and end point
            arrows = [arrows, arrows];
          }

          if (typeof arrowSize === 'string' || typeof arrowSize === 'number') {
            // Use the same size for width and height
            arrowSize = [arrowSize, arrowSize];
          }

          var symbolWidth = arrowSize[0];
          var symbolHeight = arrowSize[1];
          each$l([{
            rotate: opt.rotation + Math.PI / 2,
            offset: arrowOffset[0],
            r: 0
          }, {
            rotate: opt.rotation - Math.PI / 2,
            offset: arrowOffset[1],
            r: Math.sqrt((pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]))
          }], function (point, index) {
            if (arrows[index] !== 'none' && arrows[index] != null) {
              var symbol = createSymbol$2(arrows[index], -symbolWidth / 2, -symbolHeight / 2, symbolWidth, symbolHeight, lineStyle.stroke, true); // Calculate arrow position with offset

              var r = point.r + point.offset;
              var pos = [pt1[0] + r * Math.cos(opt.rotation), pt1[1] - r * Math.sin(opt.rotation)];
              symbol.attr({
                rotation: point.rotate,
                position: pos,
                silent: true,
                z2: 11
              });
              this.group.add(symbol);
            }
          }, this);
        }
      },

      /**
       * @private
       */
      axisTickLabel: function () {
        var axisModel = this.axisModel;
        var opt = this.opt;
        var ticksEls = buildAxisMajorTicks(this, axisModel, opt);
        var labelEls = buildAxisLabel(this, axisModel, opt);
        fixMinMaxLabelShow(axisModel, labelEls, ticksEls);
        buildAxisMinorTicks(this, axisModel, opt);
      },

      /**
       * @private
       */
      axisName: function () {
        var opt = this.opt;
        var axisModel = this.axisModel;
        var name = retrieve$1(opt.axisName, axisModel.get('name'));

        if (!name) {
          return;
        }

        var nameLocation = axisModel.get('nameLocation');
        var nameDirection = opt.nameDirection;
        var textStyleModel = axisModel.getModel('nameTextStyle');
        var gap = axisModel.get('nameGap') || 0;
        var extent = this.axisModel.axis.getExtent();
        var gapSignal = extent[0] > extent[1] ? -1 : 1;
        var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
        // Reuse labelOffset.
        isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0];
        var labelLayout;
        var nameRotation = axisModel.get('nameRotate');

        if (nameRotation != null) {
          nameRotation = nameRotation * PI$2 / 180; // To radian.
        }

        var axisNameAvailableWidth;

        if (isNameLocationCenter(nameLocation)) {
          labelLayout = innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
          nameDirection);
        } else {
          labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);
          axisNameAvailableWidth = opt.axisNameAvailableWidth;

          if (axisNameAvailableWidth != null) {
            axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
            !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
          }
        }

        var textFont = textStyleModel.getFont();
        var truncateOpt = axisModel.get('nameTruncate', true) || {};
        var ellipsis = truncateOpt.ellipsis;
        var maxWidth = retrieve$1(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth); // FIXME
        // truncate rich text? (consider performance)

        var truncatedText = ellipsis != null && maxWidth != null ? format.truncateText(name, maxWidth, textFont, ellipsis, {
          minChar: 2,
          placeholder: truncateOpt.placeholder
        }) : name;
        var tooltipOpt = axisModel.get('tooltip', true);
        var mainType = axisModel.mainType;
        var formatterParams = {
          componentType: mainType,
          name: name,
          $vars: ['name']
        };
        formatterParams[mainType + 'Index'] = axisModel.componentIndex;
        var textEl = new graphic.Text({
          // Id for animation
          anid: 'name',
          __fullText: name,
          __truncatedText: truncatedText,
          position: pos,
          rotation: labelLayout.rotation,
          silent: isLabelSilent(axisModel),
          z2: 1,
          tooltip: tooltipOpt && tooltipOpt.show ? extend$7({
            content: name,
            formatter: function () {
              return name;
            },
            formatterParams: formatterParams
          }, tooltipOpt) : null
        });
        graphic.setTextStyle(textEl.style, textStyleModel, {
          text: truncatedText,
          textFont: textFont,
          textFill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
          textAlign: textStyleModel.get('align') || labelLayout.textAlign,
          textVerticalAlign: textStyleModel.get('verticalAlign') || labelLayout.textVerticalAlign
        });

        if (axisModel.get('triggerEvent')) {
          textEl.eventData = makeAxisEventDataBase(axisModel);
          textEl.eventData.targetType = 'axisName';
          textEl.eventData.name = name;
        } // FIXME


        this._dumbGroup.add(textEl);

        textEl.updateTransform();
        this.group.add(textEl);
        textEl.decomposeTransform();
      }
    };

    var makeAxisEventDataBase = AxisBuilder.makeAxisEventDataBase = function (axisModel) {
      var eventData = {
        componentType: axisModel.mainType,
        componentIndex: axisModel.componentIndex
      };
      eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
      return eventData;
    };
    /**
     * @public
     * @static
     * @param {Object} opt
     * @param {number} axisRotation in radian
     * @param {number} textRotation in radian
     * @param {number} direction
     * @return {Object} {
     *  rotation, // according to axis
     *  textAlign,
     *  textVerticalAlign
     * }
     */


    var innerTextLayout = AxisBuilder.innerTextLayout = function (axisRotation, textRotation, direction) {
      var rotationDiff = remRadian$1(textRotation - axisRotation);
      var textAlign;
      var textVerticalAlign;

      if (isRadianAroundZero$1(rotationDiff)) {
        // Label is parallel with axis line.
        textVerticalAlign = direction > 0 ? 'top' : 'bottom';
        textAlign = 'center';
      } else if (isRadianAroundZero$1(rotationDiff - PI$2)) {
        // Label is inverse parallel with axis line.
        textVerticalAlign = direction > 0 ? 'bottom' : 'top';
        textAlign = 'center';
      } else {
        textVerticalAlign = 'middle';

        if (rotationDiff > 0 && rotationDiff < PI$2) {
          textAlign = direction > 0 ? 'right' : 'left';
        } else {
          textAlign = direction > 0 ? 'left' : 'right';
        }
      }

      return {
        rotation: rotationDiff,
        textAlign: textAlign,
        textVerticalAlign: textVerticalAlign
      };
    };

    function endTextLayout(opt, textPosition, textRotate, extent) {
      var rotationDiff = remRadian$1(textRotate - opt.rotation);
      var textAlign;
      var textVerticalAlign;
      var inverse = extent[0] > extent[1];
      var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;

      if (isRadianAroundZero$1(rotationDiff - PI$2 / 2)) {
        textVerticalAlign = onLeft ? 'bottom' : 'top';
        textAlign = 'center';
      } else if (isRadianAroundZero$1(rotationDiff - PI$2 * 1.5)) {
        textVerticalAlign = onLeft ? 'top' : 'bottom';
        textAlign = 'center';
      } else {
        textVerticalAlign = 'middle';

        if (rotationDiff < PI$2 * 1.5 && rotationDiff > PI$2 / 2) {
          textAlign = onLeft ? 'left' : 'right';
        } else {
          textAlign = onLeft ? 'right' : 'left';
        }
      }

      return {
        rotation: rotationDiff,
        textAlign: textAlign,
        textVerticalAlign: textVerticalAlign
      };
    }

    var isLabelSilent = AxisBuilder.isLabelSilent = function (axisModel) {
      var tooltipOpt = axisModel.get('tooltip');
      return axisModel.get('silent') // Consider mouse cursor, add these restrictions.
      || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
    };

    function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
      if (shouldShowAllLabels$2(axisModel.axis)) {
        return;
      } // If min or max are user set, we need to check
      // If the tick on min(max) are overlap on their neighbour tick
      // If they are overlapped, we need to hide the min(max) tick label


      var showMinLabel = axisModel.get('axisLabel.showMinLabel');
      var showMaxLabel = axisModel.get('axisLabel.showMaxLabel'); // FIXME
      // Have not consider onBand yet, where tick els is more than label els.

      labelEls = labelEls || [];
      tickEls = tickEls || [];
      var firstLabel = labelEls[0];
      var nextLabel = labelEls[1];
      var lastLabel = labelEls[labelEls.length - 1];
      var prevLabel = labelEls[labelEls.length - 2];
      var firstTick = tickEls[0];
      var nextTick = tickEls[1];
      var lastTick = tickEls[tickEls.length - 1];
      var prevTick = tickEls[tickEls.length - 2];

      if (showMinLabel === false) {
        ignoreEl(firstLabel);
        ignoreEl(firstTick);
      } else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
        if (showMinLabel) {
          ignoreEl(nextLabel);
          ignoreEl(nextTick);
        } else {
          ignoreEl(firstLabel);
          ignoreEl(firstTick);
        }
      }

      if (showMaxLabel === false) {
        ignoreEl(lastLabel);
        ignoreEl(lastTick);
      } else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
        if (showMaxLabel) {
          ignoreEl(prevLabel);
          ignoreEl(prevTick);
        } else {
          ignoreEl(lastLabel);
          ignoreEl(lastTick);
        }
      }
    }

    function ignoreEl(el) {
      el && (el.ignore = true);
    }

    function isTwoLabelOverlapped(current, next, labelLayout) {
      // current and next has the same rotation.
      var firstRect = current && current.getBoundingRect().clone();
      var nextRect = next && next.getBoundingRect().clone();

      if (!firstRect || !nextRect) {
        return;
      } // When checking intersect of two rotated labels, we use mRotationBack
      // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.


      var mRotationBack = matrix.identity([]);
      matrix.rotate(mRotationBack, mRotationBack, -current.rotation);
      firstRect.applyTransform(matrix.mul([], mRotationBack, current.getLocalTransform()));
      nextRect.applyTransform(matrix.mul([], mRotationBack, next.getLocalTransform()));
      return firstRect.intersect(nextRect);
    }

    function isNameLocationCenter(nameLocation) {
      return nameLocation === 'middle' || nameLocation === 'center';
    }

    function createTicks(ticksCoords, tickTransform, tickEndCoord, tickLineStyle, aniid) {
      var tickEls = [];
      var pt1 = [];
      var pt2 = [];

      for (var i = 0; i < ticksCoords.length; i++) {
        var tickCoord = ticksCoords[i].coord;
        pt1[0] = tickCoord;
        pt1[1] = 0;
        pt2[0] = tickCoord;
        pt2[1] = tickEndCoord;

        if (tickTransform) {
          v2ApplyTransform$2(pt1, pt1, tickTransform);
          v2ApplyTransform$2(pt2, pt2, tickTransform);
        } // Tick line, Not use group transform to have better line draw


        var tickEl = new graphic.Line({
          // Id for animation
          anid: aniid + '_' + ticksCoords[i].tickValue,
          subPixelOptimize: true,
          shape: {
            x1: pt1[0],
            y1: pt1[1],
            x2: pt2[0],
            y2: pt2[1]
          },
          style: tickLineStyle,
          z2: 2,
          silent: true
        });
        tickEls.push(tickEl);
      }

      return tickEls;
    }

    function buildAxisMajorTicks(axisBuilder, axisModel, opt) {
      var axis = axisModel.axis;
      var tickModel = axisModel.getModel('axisTick');

      if (!tickModel.get('show') || axis.scale.isBlank()) {
        return;
      }

      var lineStyleModel = tickModel.getModel('lineStyle');
      var tickEndCoord = opt.tickDirection * tickModel.get('length');
      var ticksCoords = axis.getTicksCoords();
      var ticksEls = createTicks(ticksCoords, axisBuilder._transform, tickEndCoord, defaults$3(lineStyleModel.getLineStyle(), {
        stroke: axisModel.get('axisLine.lineStyle.color')
      }), 'ticks');

      for (var i = 0; i < ticksEls.length; i++) {
        axisBuilder.group.add(ticksEls[i]);
      }

      return ticksEls;
    }

    function buildAxisMinorTicks(axisBuilder, axisModel, opt) {
      var axis = axisModel.axis;
      var minorTickModel = axisModel.getModel('minorTick');

      if (!minorTickModel.get('show') || axis.scale.isBlank()) {
        return;
      }

      var minorTicksCoords = axis.getMinorTicksCoords();

      if (!minorTicksCoords.length) {
        return;
      }

      var lineStyleModel = minorTickModel.getModel('lineStyle');
      var tickEndCoord = opt.tickDirection * minorTickModel.get('length');
      var minorTickLineStyle = defaults$3(lineStyleModel.getLineStyle(), defaults$3(axisModel.getModel('axisTick').getLineStyle(), {
        stroke: axisModel.get('axisLine.lineStyle.color')
      }));

      for (var i = 0; i < minorTicksCoords.length; i++) {
        var minorTicksEls = createTicks(minorTicksCoords[i], axisBuilder._transform, tickEndCoord, minorTickLineStyle, 'minorticks_' + i);

        for (var k = 0; k < minorTicksEls.length; k++) {
          axisBuilder.group.add(minorTicksEls[k]);
        }
      }
    }

    function buildAxisLabel(axisBuilder, axisModel, opt) {
      var axis = axisModel.axis;
      var show = retrieve$1(opt.axisLabelShow, axisModel.get('axisLabel.show'));

      if (!show || axis.scale.isBlank()) {
        return;
      }

      var labelModel = axisModel.getModel('axisLabel');
      var labelMargin = labelModel.get('margin');
      var labels = axis.getViewLabels(); // Special label rotate.

      var labelRotation = (retrieve$1(opt.labelRotate, labelModel.get('rotate')) || 0) * PI$2 / 180;
      var labelLayout = innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
      var rawCategoryData = axisModel.getCategories && axisModel.getCategories(true);
      var labelEls = [];
      var silent = isLabelSilent(axisModel);
      var triggerEvent = axisModel.get('triggerEvent');
      each$l(labels, function (labelItem, index) {
        var tickValue = labelItem.tickValue;
        var formattedLabel = labelItem.formattedLabel;
        var rawLabel = labelItem.rawLabel;
        var itemLabelModel = labelModel;

        if (rawCategoryData && rawCategoryData[tickValue] && rawCategoryData[tickValue].textStyle) {
          itemLabelModel = new Model_1(rawCategoryData[tickValue].textStyle, labelModel, axisModel.ecModel);
        }

        var textColor = itemLabelModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');
        var tickCoord = axis.dataToCoord(tickValue);
        var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
        var textEl = new graphic.Text({
          // Id for animation
          anid: 'label_' + tickValue,
          position: pos,
          rotation: labelLayout.rotation,
          silent: silent,
          z2: 10
        });
        graphic.setTextStyle(textEl.style, itemLabelModel, {
          text: formattedLabel,
          textAlign: itemLabelModel.getShallow('align', true) || labelLayout.textAlign,
          textVerticalAlign: itemLabelModel.getShallow('verticalAlign', true) || itemLabelModel.getShallow('baseline', true) || labelLayout.textVerticalAlign,
          textFill: typeof textColor === 'function' ? textColor( // (1) In category axis with data zoom, tick is not the original
          // index of axis.data. So tick should not be exposed to user
          // in category axis.
          // (2) Compatible with previous version, which always use formatted label as
          // input. But in interval scale the formatted label is like '223,445', which
          // maked user repalce ','. So we modify it to return original val but remain
          // it as 'string' to avoid error in replacing.
          axis.type === 'category' ? rawLabel : axis.type === 'value' ? tickValue + '' : tickValue, index) : textColor
        }); // Pack data for mouse event

        if (triggerEvent) {
          textEl.eventData = makeAxisEventDataBase(axisModel);
          textEl.eventData.targetType = 'axisLabel';
          textEl.eventData.value = rawLabel;
        } // FIXME


        axisBuilder._dumbGroup.add(textEl);

        textEl.updateTransform();
        labelEls.push(textEl);
        axisBuilder.group.add(textEl);
        textEl.decomposeTransform();
      });
      return labelEls;
    }

    var _default$1G = AxisBuilder;
    var AxisBuilder_1 = _default$1G;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$m = util.each;
    var curry$1 = util.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
    // allAxesInfo should be updated when setOption performed.

    function collect(ecModel, api) {
      var result = {
        /**
         * key: makeKey(axis.model)
         * value: {
         *      axis,
         *      coordSys,
         *      axisPointerModel,
         *      triggerTooltip,
         *      involveSeries,
         *      snap,
         *      seriesModels,
         *      seriesDataCount
         * }
         */
        axesInfo: {},
        seriesInvolved: false,

        /**
         * key: makeKey(coordSys.model)
         * value: Object: key makeKey(axis.model), value: axisInfo
         */
        coordSysAxesInfo: {},
        coordSysMap: {}
      };
      collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.

      result.seriesInvolved && collectSeriesInfo(result, ecModel);
      return result;
    }

    function collectAxesInfo(result, ecModel, api) {
      var globalTooltipModel = ecModel.getComponent('tooltip');
      var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.

      var linksOption = globalAxisPointerModel.get('link', true) || [];
      var linkGroups = []; // Collect axes info.

      each$m(api.getCoordinateSystems(), function (coordSys) {
        // Some coordinate system do not support axes, like geo.
        if (!coordSys.axisPointerEnabled) {
          return;
        }

        var coordSysKey = makeKey(coordSys.model);
        var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
        result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer
        // for user. So we enable seting tooltip on coordSys model.

        var coordSysModel = coordSys.model;
        var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);
        each$m(coordSys.getAxes(), curry$1(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.
        // Notice this case: coordSys is `grid` but not `cartesian2D` here.

        if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not
        // show but axisPointer will show as normal.
        && baseTooltipModel.get('show')) {
          // Compatible with previous logic. But series.tooltip.trigger: 'axis'
          // or series.data[n].tooltip.trigger: 'axis' are not support any more.
          var triggerAxis = baseTooltipModel.get('trigger') === 'axis';
          var cross = baseTooltipModel.get('axisPointer.type') === 'cross';
          var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));

          if (triggerAxis || cross) {
            each$m(tooltipAxes.baseAxes, curry$1(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));
          }

          if (cross) {
            each$m(tooltipAxes.otherAxes, curry$1(saveTooltipAxisInfo, 'cross', false));
          }
        } // fromTooltip: true | false | 'cross'
        // triggerTooltip: true | false | null


        function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {
          var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);
          var axisPointerShow = axisPointerModel.get('show');

          if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {
            return;
          }

          if (triggerTooltip == null) {
            triggerTooltip = axisPointerModel.get('triggerTooltip');
          }

          axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
          var snap = axisPointerModel.get('snap');
          var key = makeKey(axis.model);
          var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).

          var axisInfo = result.axesInfo[key] = {
            key: key,
            axis: axis,
            coordSys: coordSys,
            axisPointerModel: axisPointerModel,
            triggerTooltip: triggerTooltip,
            involveSeries: involveSeries,
            snap: snap,
            useHandle: isHandleTrigger(axisPointerModel),
            seriesModels: []
          };
          axesInfoInCoordSys[key] = axisInfo;
          result.seriesInvolved |= involveSeries;
          var groupIndex = getLinkGroupIndex(linksOption, axis);

          if (groupIndex != null) {
            var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
              axesInfo: {}
            });
            linkGroup.axesInfo[key] = axisInfo;
            linkGroup.mapper = linksOption[groupIndex].mapper;
            axisInfo.linkGroup = linkGroup;
          }
        }
      });
    }

    function makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
      var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');
      var volatileOption = {};
      each$m(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {
        volatileOption[field] = util.clone(tooltipAxisPointerModel.get(field));
      }); // category axis do not auto snap, otherwise some tick that do not
      // has value can not be hovered. value/time/log axis default snap if
      // triggered from tooltip and trigger tooltip.

      volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.
      // Only these properties can be overrided from tooltip to axisPointer.

      if (tooltipAxisPointerModel.get('type') === 'cross') {
        volatileOption.type = 'line';
      }

      var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.

      labelOption.show == null && (labelOption.show = false);

      if (fromTooltip === 'cross') {
        // When 'cross', both axes show labels.
        var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');
        labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style
        // (cross style is dashed by default)

        if (!triggerTooltip) {
          var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');
          crossStyle && util.defaults(labelOption, crossStyle.textStyle);
        }
      }

      return axis.model.getModel('axisPointer', new Model_1(volatileOption, globalAxisPointerModel, ecModel));
    }

    function collectSeriesInfo(result, ecModel) {
      // Prepare data for axis trigger
      ecModel.eachSeries(function (seriesModel) {
        // Notice this case: this coordSys is `cartesian2D` but not `grid`.
        var coordSys = seriesModel.coordinateSystem;
        var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);
        var seriesTooltipShow = seriesModel.get('tooltip.show', true);

        if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {
          return;
        }

        each$m(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {
          var axis = axisInfo.axis;

          if (coordSys.getAxis(axis.dim) === axis) {
            axisInfo.seriesModels.push(seriesModel);
            axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
            axisInfo.seriesDataCount += seriesModel.getData().count();
          }
        });
      }, this);
    }
    /**
     * For example:
     * {
     *     axisPointer: {
     *         links: [{
     *             xAxisIndex: [2, 4],
     *             yAxisIndex: 'all'
     *         }, {
     *             xAxisId: ['a5', 'a7'],
     *             xAxisName: 'xxx'
     *         }]
     *     }
     * }
     */


    function getLinkGroupIndex(linksOption, axis) {
      var axisModel = axis.model;
      var dim = axis.dim;

      for (var i = 0; i < linksOption.length; i++) {
        var linkOption = linksOption[i] || {};

        if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {
          return i;
        }
      }
    }

    function checkPropInLink(linkPropValue, axisPropValue) {
      return linkPropValue === 'all' || util.isArray(linkPropValue) && util.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
    }

    function fixValue(axisModel) {
      var axisInfo = getAxisInfo(axisModel);

      if (!axisInfo) {
        return;
      }

      var axisPointerModel = axisInfo.axisPointerModel;
      var scale = axisInfo.axis.scale;
      var option = axisPointerModel.option;
      var status = axisPointerModel.get('status');
      var value = axisPointerModel.get('value'); // Parse init value for category and time axis.

      if (value != null) {
        value = scale.parse(value);
      }

      var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value
      // and status should be initialized.

      if (status == null) {
        option.status = useHandle ? 'show' : 'hide';
      }

      var extent = scale.getExtent().slice();
      extent[0] > extent[1] && extent.reverse();

      if ( // Pick a value on axis when initializing.
      value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,
      // where we should re-pick a value to keep `handle` displaying normally.
      || value > extent[1]) {
        // Make handle displayed on the end of the axis when init, which looks better.
        value = extent[1];
      }

      if (value < extent[0]) {
        value = extent[0];
      }

      option.value = value;

      if (useHandle) {
        option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';
      }
    }

    function getAxisInfo(axisModel) {
      var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;
      return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];
    }

    function getAxisPointerModel(axisModel) {
      var axisInfo = getAxisInfo(axisModel);
      return axisInfo && axisInfo.axisPointerModel;
    }

    function isHandleTrigger(axisPointerModel) {
      return !!axisPointerModel.get('handle.show');
    }
    /**
     * @param {module:echarts/model/Model} model
     * @return {string} unique key
     */


    function makeKey(model) {
      return model.type + '||' + model.id;
    }

    var collect_1 = collect;
    var fixValue_1 = fixValue;
    var getAxisInfo_1 = getAxisInfo;
    var getAxisPointerModel_1 = getAxisPointerModel;
    var makeKey_1 = makeKey;

    var modelHelper = {
    	collect: collect_1,
    	fixValue: fixValue_1,
    	getAxisInfo: getAxisInfo_1,
    	getAxisPointerModel: getAxisPointerModel_1,
    	makeKey: makeKey_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Base class of AxisView.
     */
    var AxisView = echarts.extendComponentView({
      type: 'axis',

      /**
       * @private
       */
      _axisPointer: null,

      /**
       * @protected
       * @type {string}
       */
      axisPointerClass: null,

      /**
       * @override
       */
      render: function (axisModel, ecModel, api, payload) {
        // FIXME
        // This process should proformed after coordinate systems updated
        // (axis scale updated), and should be performed each time update.
        // So put it here temporarily, although it is not appropriate to
        // put a model-writing procedure in `view`.
        this.axisPointerClass && modelHelper.fixValue(axisModel);
        AxisView.superApply(this, 'render', arguments);
        updateAxisPointer(this, axisModel, ecModel, api, payload, true);
      },

      /**
       * Action handler.
       * @public
       * @param {module:echarts/coord/cartesian/AxisModel} axisModel
       * @param {module:echarts/model/Global} ecModel
       * @param {module:echarts/ExtensionAPI} api
       * @param {Object} payload
       */
      updateAxisPointer: function (axisModel, ecModel, api, payload, force) {
        updateAxisPointer(this, axisModel, ecModel, api, payload, false);
      },

      /**
       * @override
       */
      remove: function (ecModel, api) {
        var axisPointer = this._axisPointer;
        axisPointer && axisPointer.remove(api);
        AxisView.superApply(this, 'remove', arguments);
      },

      /**
       * @override
       */
      dispose: function (ecModel, api) {
        disposeAxisPointer(this, api);
        AxisView.superApply(this, 'dispose', arguments);
      }
    });

    function updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {
      var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);

      if (!Clazz) {
        return;
      }

      var axisPointerModel = modelHelper.getAxisPointerModel(axisModel);
      axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);
    }

    function disposeAxisPointer(axisView, ecModel, api) {
      var axisPointer = axisView._axisPointer;
      axisPointer && axisPointer.dispose(ecModel, api);
      axisView._axisPointer = null;
    }

    var axisPointerClazz = [];

    AxisView.registerAxisPointerClass = function (type, clazz) {
      axisPointerClazz[type] = clazz;
    };

    AxisView.getAxisPointerClass = function (type) {
      return type && axisPointerClazz[type];
    };

    var _default$1H = AxisView;
    var AxisView_1 = _default$1H;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Can only be called after coordinate system creation stage.
     * (Can be called before coordinate system update stage).
     *
     * @param {Object} opt {labelInside}
     * @return {Object} {
     *  position, rotation, labelDirection, labelOffset,
     *  tickDirection, labelRotate, z2
     * }
     */
    function layout$2(gridModel, axisModel, opt) {
      opt = opt || {};
      var grid = gridModel.coordinateSystem;
      var axis = axisModel.axis;
      var layout = {};
      var otherAxisOnZeroOf = axis.getAxesOnZeroOf()[0];
      var rawAxisPosition = axis.position;
      var axisPosition = otherAxisOnZeroOf ? 'onZero' : rawAxisPosition;
      var axisDim = axis.dim;
      var rect = grid.getRect();
      var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
      var idx = {
        left: 0,
        right: 1,
        top: 0,
        bottom: 1,
        onZero: 2
      };
      var axisOffset = axisModel.get('offset') || 0;
      var posBound = axisDim === 'x' ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];

      if (otherAxisOnZeroOf) {
        var onZeroCoord = otherAxisOnZeroOf.toGlobalCoord(otherAxisOnZeroOf.dataToCoord(0));
        posBound[idx.onZero] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
      } // Axis position


      layout.position = [axisDim === 'y' ? posBound[idx[axisPosition]] : rectBound[0], axisDim === 'x' ? posBound[idx[axisPosition]] : rectBound[3]]; // Axis rotation

      layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1); // Tick and label direction, x y is axisDim

      var dirMap = {
        top: -1,
        bottom: 1,
        left: -1,
        right: 1
      };
      layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
      layout.labelOffset = otherAxisOnZeroOf ? posBound[idx[rawAxisPosition]] - posBound[idx.onZero] : 0;

      if (axisModel.get('axisTick.inside')) {
        layout.tickDirection = -layout.tickDirection;
      }

      if (util.retrieve(opt.labelInside, axisModel.get('axisLabel.inside'))) {
        layout.labelDirection = -layout.labelDirection;
      } // Special label rotation


      var labelRotate = axisModel.get('axisLabel.rotate');
      layout.labelRotate = axisPosition === 'top' ? -labelRotate : labelRotate; // Over splitLine and splitArea

      layout.z2 = 1;
      return layout;
    }

    var layout_1$1 = layout$2;

    var cartesianAxisHelper = {
    	layout: layout_1$1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */











    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];
    var selfBuilderAttrs = ['splitArea', 'splitLine', 'minorSplitLine'];
    var CartesianAxisView = AxisView_1.extend({
      type: 'cartesianAxis',
      axisPointerClass: 'CartesianAxisPointer',

      /**
       * @override
       */
      render: function (axisModel, ecModel, api, payload) {
        this.group.removeAll();
        var oldAxisGroup = this._axisGroup;
        this._axisGroup = new graphic.Group();
        this.group.add(this._axisGroup);

        if (!axisModel.get('show')) {
          return;
        }

        var gridModel = axisModel.getCoordSysModel();
        var layout = cartesianAxisHelper.layout(gridModel, axisModel);
        var axisBuilder = new AxisBuilder_1(axisModel, layout);
        util.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

        this._axisGroup.add(axisBuilder.getGroup());

        util.each(selfBuilderAttrs, function (name) {
          if (axisModel.get(name + '.show')) {
            this['_' + name](axisModel, gridModel);
          }
        }, this);
        graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
        CartesianAxisView.superCall(this, 'render', axisModel, ecModel, api, payload);
      },
      remove: function () {
        this._splitAreaColors = null;
      },

      /**
       * @param {module:echarts/coord/cartesian/AxisModel} axisModel
       * @param {module:echarts/coord/cartesian/GridModel} gridModel
       * @private
       */
      _splitLine: function (axisModel, gridModel) {
        var axis = axisModel.axis;

        if (axis.scale.isBlank()) {
          return;
        }

        var splitLineModel = axisModel.getModel('splitLine');
        var lineStyleModel = splitLineModel.getModel('lineStyle');
        var lineColors = lineStyleModel.get('color');
        lineColors = util.isArray(lineColors) ? lineColors : [lineColors];
        var gridRect = gridModel.coordinateSystem.getRect();
        var isHorizontal = axis.isHorizontal();
        var lineCount = 0;
        var ticksCoords = axis.getTicksCoords({
          tickModel: splitLineModel
        });
        var p1 = [];
        var p2 = [];
        var lineStyle = lineStyleModel.getLineStyle();

        for (var i = 0; i < ticksCoords.length; i++) {
          var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);

          if (isHorizontal) {
            p1[0] = tickCoord;
            p1[1] = gridRect.y;
            p2[0] = tickCoord;
            p2[1] = gridRect.y + gridRect.height;
          } else {
            p1[0] = gridRect.x;
            p1[1] = tickCoord;
            p2[0] = gridRect.x + gridRect.width;
            p2[1] = tickCoord;
          }

          var colorIndex = lineCount++ % lineColors.length;
          var tickValue = ticksCoords[i].tickValue;

          this._axisGroup.add(new graphic.Line({
            anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,
            subPixelOptimize: true,
            shape: {
              x1: p1[0],
              y1: p1[1],
              x2: p2[0],
              y2: p2[1]
            },
            style: util.defaults({
              stroke: lineColors[colorIndex]
            }, lineStyle),
            silent: true
          }));
        }
      },

      /**
       * @param {module:echarts/coord/cartesian/AxisModel} axisModel
       * @param {module:echarts/coord/cartesian/GridModel} gridModel
       * @private
       */
      _minorSplitLine: function (axisModel, gridModel) {
        var axis = axisModel.axis;
        var minorSplitLineModel = axisModel.getModel('minorSplitLine');
        var lineStyleModel = minorSplitLineModel.getModel('lineStyle');
        var gridRect = gridModel.coordinateSystem.getRect();
        var isHorizontal = axis.isHorizontal();
        var minorTicksCoords = axis.getMinorTicksCoords();

        if (!minorTicksCoords.length) {
          return;
        }

        var p1 = [];
        var p2 = [];
        var lineStyle = lineStyleModel.getLineStyle();

        for (var i = 0; i < minorTicksCoords.length; i++) {
          for (var k = 0; k < minorTicksCoords[i].length; k++) {
            var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);

            if (isHorizontal) {
              p1[0] = tickCoord;
              p1[1] = gridRect.y;
              p2[0] = tickCoord;
              p2[1] = gridRect.y + gridRect.height;
            } else {
              p1[0] = gridRect.x;
              p1[1] = tickCoord;
              p2[0] = gridRect.x + gridRect.width;
              p2[1] = tickCoord;
            }

            this._axisGroup.add(new graphic.Line({
              anid: 'minor_line_' + minorTicksCoords[i][k].tickValue,
              subPixelOptimize: true,
              shape: {
                x1: p1[0],
                y1: p1[1],
                x2: p2[0],
                y2: p2[1]
              },
              style: lineStyle,
              silent: true
            }));
          }
        }
      },

      /**
       * @param {module:echarts/coord/cartesian/AxisModel} axisModel
       * @param {module:echarts/coord/cartesian/GridModel} gridModel
       * @private
       */
      _splitArea: function (axisModel, gridModel) {
        var axis = axisModel.axis;

        if (axis.scale.isBlank()) {
          return;
        }

        var splitAreaModel = axisModel.getModel('splitArea');
        var areaStyleModel = splitAreaModel.getModel('areaStyle');
        var areaColors = areaStyleModel.get('color');
        var gridRect = gridModel.coordinateSystem.getRect();
        var ticksCoords = axis.getTicksCoords({
          tickModel: splitAreaModel,
          clamp: true
        });

        if (!ticksCoords.length) {
          return;
        } // For Making appropriate splitArea animation, the color and anid
        // should be corresponding to previous one if possible.


        var areaColorsLen = areaColors.length;
        var lastSplitAreaColors = this._splitAreaColors;
        var newSplitAreaColors = util.createHashMap();
        var colorIndex = 0;

        if (lastSplitAreaColors) {
          for (var i = 0; i < ticksCoords.length; i++) {
            var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);

            if (cIndex != null) {
              colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;
              break;
            }
          }
        }

        var prev = axis.toGlobalCoord(ticksCoords[0].coord);
        var areaStyle = areaStyleModel.getAreaStyle();
        areaColors = util.isArray(areaColors) ? areaColors : [areaColors];

        for (var i = 1; i < ticksCoords.length; i++) {
          var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
          var x;
          var y;
          var width;
          var height;

          if (axis.isHorizontal()) {
            x = prev;
            y = gridRect.y;
            width = tickCoord - x;
            height = gridRect.height;
            prev = x + width;
          } else {
            x = gridRect.x;
            y = prev;
            width = gridRect.width;
            height = tickCoord - y;
            prev = y + height;
          }

          var tickValue = ticksCoords[i - 1].tickValue;
          tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);

          this._axisGroup.add(new graphic.Rect({
            anid: tickValue != null ? 'area_' + tickValue : null,
            shape: {
              x: x,
              y: y,
              width: width,
              height: height
            },
            style: util.defaults({
              fill: areaColors[colorIndex]
            }, areaStyle),
            silent: true
          }));

          colorIndex = (colorIndex + 1) % areaColorsLen;
        }

        this._splitAreaColors = newSplitAreaColors;
      }
    });
    CartesianAxisView.extend({
      type: 'xAxis'
    });
    CartesianAxisView.extend({
      type: 'yAxis'
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */











    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Grid view
    echarts.extendComponentView({
      type: 'grid',
      render: function (gridModel, ecModel) {
        this.group.removeAll();

        if (gridModel.get('show')) {
          this.group.add(new graphic.Rect({
            shape: gridModel.coordinateSystem.getRect(),
            style: util.defaults({
              fill: gridModel.get('backgroundColor')
            }, gridModel.getItemStyle()),
            silent: true,
            z2: -1
          }));
        }
      }
    });
    echarts.registerPreprocessor(function (option) {
      // Only create grid when need
      if (option.xAxis && option.yAxis && !option.grid) {
        option.grid = {};
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var layout$3 = barGrid.layout;
    var largeLayout$1 = barGrid.largeLayout;









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // In case developer forget to include grid component
    echarts.registerLayout(echarts.PRIORITY.VISUAL.LAYOUT, util.curry(layout$3, 'bar')); // Use higher prority to avoid to be blocked by other overall layout, which do not
    // only exist in this module, but probably also exist in other modules, like `barPolar`.

    echarts.registerLayout(echarts.PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, largeLayout$1);
    echarts.registerVisual({
      seriesType: 'bar',
      reset: function (seriesModel) {
        // Visual coding for legend
        seriesModel.getData().setVisual('legendSymbol', 'roundRect');
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    Component.registerSubTypeDefaulter('dataZoom', function () {
      // Default 'slider' when no type specified.
      return 'slider';
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single']; // Supported coords.

    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];
    /**
     * @param {string} coordType
     * @return {boolean}
     */

    function isCoordSupported(coordType) {
      return util.indexOf(COORDS, coordType) >= 0;
    }
    /**
     * Create "each" method to iterate names.
     *
     * @pubilc
     * @param  {Array.<string>} names
     * @param  {Array.<string>=} attrs
     * @return {Function}
     */


    function createNameEach(names, attrs) {
      names = names.slice();
      var capitalNames = util.map(names, format.capitalFirst);
      attrs = (attrs || []).slice();
      var capitalAttrs = util.map(attrs, format.capitalFirst);
      return function (callback, context) {
        util.each(names, function (name, index) {
          var nameObj = {
            name: name,
            capital: capitalNames[index]
          };

          for (var j = 0; j < attrs.length; j++) {
            nameObj[attrs[j]] = name + capitalAttrs[j];
          }

          callback.call(context, nameObj);
        });
      };
    }
    /**
     * Iterate each dimension name.
     *
     * @public
     * @param {Function} callback The parameter is like:
     *                            {
     *                                name: 'angle',
     *                                capital: 'Angle',
     *                                axis: 'angleAxis',
     *                                axisIndex: 'angleAixs',
     *                                index: 'angleIndex'
     *                            }
     * @param {Object} context
     */


    var eachAxisDim = createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);
    /**
     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
     * dataZoomModels and 'links' make up one or more graphics.
     * This function finds the graphic where the source dataZoomModel is in.
     *
     * @public
     * @param {Function} forEachNode Node iterator.
     * @param {Function} forEachEdgeType edgeType iterator
     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
     */

    function createLinkedNodesFinder(forEachNode, forEachEdgeType, edgeIdGetter) {
      return function (sourceNode) {
        var result = {
          nodes: [],
          records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).

        };
        forEachEdgeType(function (edgeType) {
          result.records[edgeType.name] = {};
        });

        if (!sourceNode) {
          return result;
        }

        absorb(sourceNode, result);
        var existsLink;

        do {
          existsLink = false;
          forEachNode(processSingleNode);
        } while (existsLink);

        function processSingleNode(node) {
          if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
            absorb(node, result);
            existsLink = true;
          }
        }

        return result;
      };

      function isNodeAbsorded(node, result) {
        return util.indexOf(result.nodes, node) >= 0;
      }

      function isLinked(node, result) {
        var hasLink = false;
        forEachEdgeType(function (edgeType) {
          util.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
            result.records[edgeType.name][edgeId] && (hasLink = true);
          });
        });
        return hasLink;
      }

      function absorb(node, result) {
        result.nodes.push(node);
        forEachEdgeType(function (edgeType) {
          util.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
            result.records[edgeType.name][edgeId] = true;
          });
        });
      }
    }

    var isCoordSupported_1 = isCoordSupported;
    var createNameEach_1 = createNameEach;
    var eachAxisDim_1 = eachAxisDim;
    var createLinkedNodesFinder_1 = createLinkedNodesFinder;

    var helper$4 = {
    	isCoordSupported: isCoordSupported_1,
    	createNameEach: createNameEach_1,
    	eachAxisDim: eachAxisDim_1,
    	createLinkedNodesFinder: createLinkedNodesFinder_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * Calculate slider move result.
     * Usage:
     * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as
     * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.
     * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.
     *
     * @param {number} delta Move length.
     * @param {Array.<number>} handleEnds handleEnds[0] can be bigger then handleEnds[1].
     *              handleEnds will be modified in this method.
     * @param {Array.<number>} extent handleEnds is restricted by extent.
     *              extent[0] should less or equals than extent[1].
     * @param {number|string} handleIndex Can be 'all', means that both move the two handleEnds.
     * @param {number} [minSpan] The range of dataZoom can not be smaller than that.
     *              If not set, handle0 and cross handle1. If set as a non-negative
     *              number (including `0`), handles will push each other when reaching
     *              the minSpan.
     * @param {number} [maxSpan] The range of dataZoom can not be larger than that.
     * @return {Array.<number>} The input handleEnds.
     */
    function _default$1I(delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {
      delta = delta || 0;
      var extentSpan = extent[1] - extent[0]; // Notice maxSpan and minSpan can be null/undefined.

      if (minSpan != null) {
        minSpan = restrict(minSpan, [0, extentSpan]);
      }

      if (maxSpan != null) {
        maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);
      }

      if (handleIndex === 'all') {
        var handleSpan = Math.abs(handleEnds[1] - handleEnds[0]);
        handleSpan = restrict(handleSpan, [0, extentSpan]);
        minSpan = maxSpan = restrict(handleSpan, [minSpan, maxSpan]);
        handleIndex = 0;
      }

      handleEnds[0] = restrict(handleEnds[0], extent);
      handleEnds[1] = restrict(handleEnds[1], extent);
      var originalDistSign = getSpanSign(handleEnds, handleIndex);
      handleEnds[handleIndex] += delta; // Restrict in extent.

      var extentMinSpan = minSpan || 0;
      var realExtent = extent.slice();
      originalDistSign.sign < 0 ? realExtent[0] += extentMinSpan : realExtent[1] -= extentMinSpan;
      handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent); // Expand span.

      var currDistSign = getSpanSign(handleEnds, handleIndex);

      if (minSpan != null && (currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan)) {
        // If minSpan exists, 'cross' is forbidden.
        handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;
      } // Shrink span.


      var currDistSign = getSpanSign(handleEnds, handleIndex);

      if (maxSpan != null && currDistSign.span > maxSpan) {
        handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;
      }

      return handleEnds;
    }

    function getSpanSign(handleEnds, handleIndex) {
      var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex]; // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]
      // is at left of handleEnds[1] for non-cross case.

      return {
        span: Math.abs(dist),
        sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1
      };
    }

    function restrict(value, extend) {
      return Math.min(extend[1] != null ? extend[1] : Infinity, Math.max(extend[0] != null ? extend[0] : -Infinity, value));
    }

    var sliderMove = _default$1I;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$n = util.each;
    var asc$1 = number.asc;
    /**
     * Operate single axis.
     * One axis can only operated by one axis operator.
     * Different dataZoomModels may be defined to operate the same axis.
     * (i.e. 'inside' data zoom and 'slider' data zoom components)
     * So dataZoomModels share one axisProxy in that case.
     *
     * @class
     */

    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {
      /**
       * @private
       * @type {string}
       */
      this._dimName = dimName;
      /**
       * @private
       */

      this._axisIndex = axisIndex;
      /**
       * @private
       * @type {Array.<number>}
       */

      this._valueWindow;
      /**
       * @private
       * @type {Array.<number>}
       */

      this._percentWindow;
      /**
       * @private
       * @type {Array.<number>}
       */

      this._dataExtent;
      /**
       * {minSpan, maxSpan, minValueSpan, maxValueSpan}
       * @private
       * @type {Object}
       */

      this._minMaxSpan;
      /**
       * @readOnly
       * @type {module: echarts/model/Global}
       */

      this.ecModel = ecModel;
      /**
       * @private
       * @type {module: echarts/component/dataZoom/DataZoomModel}
       */

      this._dataZoomModel = dataZoomModel; // /**
      //  * @readOnly
      //  * @private
      //  */
      // this.hasSeriesStacked;
    };

    AxisProxy.prototype = {
      constructor: AxisProxy,

      /**
       * Whether the axisProxy is hosted by dataZoomModel.
       *
       * @public
       * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
       * @return {boolean}
       */
      hostedBy: function (dataZoomModel) {
        return this._dataZoomModel === dataZoomModel;
      },

      /**
       * @return {Array.<number>} Value can only be NaN or finite value.
       */
      getDataValueWindow: function () {
        return this._valueWindow.slice();
      },

      /**
       * @return {Array.<number>}
       */
      getDataPercentWindow: function () {
        return this._percentWindow.slice();
      },

      /**
       * @public
       * @param {number} axisIndex
       * @return {Array} seriesModels
       */
      getTargetSeriesModels: function () {
        var seriesModels = [];
        var ecModel = this.ecModel;
        ecModel.eachSeries(function (seriesModel) {
          if (helper$4.isCoordSupported(seriesModel.get('coordinateSystem'))) {
            var dimName = this._dimName;
            var axisModel = ecModel.queryComponents({
              mainType: dimName + 'Axis',
              index: seriesModel.get(dimName + 'AxisIndex'),
              id: seriesModel.get(dimName + 'AxisId')
            })[0];

            if (this._axisIndex === (axisModel && axisModel.componentIndex)) {
              seriesModels.push(seriesModel);
            }
          }
        }, this);
        return seriesModels;
      },
      getAxisModel: function () {
        return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
      },
      getOtherAxisModel: function () {
        var axisDim = this._dimName;
        var ecModel = this.ecModel;
        var axisModel = this.getAxisModel();
        var isCartesian = axisDim === 'x' || axisDim === 'y';
        var otherAxisDim;
        var coordSysIndexName;

        if (isCartesian) {
          coordSysIndexName = 'gridIndex';
          otherAxisDim = axisDim === 'x' ? 'y' : 'x';
        } else {
          coordSysIndexName = 'polarIndex';
          otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
        }

        var foundOtherAxisModel;
        ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
          if ((otherAxisModel.get(coordSysIndexName) || 0) === (axisModel.get(coordSysIndexName) || 0)) {
            foundOtherAxisModel = otherAxisModel;
          }
        });
        return foundOtherAxisModel;
      },
      getMinMaxSpan: function () {
        return util.clone(this._minMaxSpan);
      },

      /**
       * Only calculate by given range and this._dataExtent, do not change anything.
       *
       * @param {Object} opt
       * @param {number} [opt.start]
       * @param {number} [opt.end]
       * @param {number} [opt.startValue]
       * @param {number} [opt.endValue]
       */
      calculateDataWindow: function (opt) {
        var dataExtent = this._dataExtent;
        var axisModel = this.getAxisModel();
        var scale = axisModel.axis.scale;

        var rangePropMode = this._dataZoomModel.getRangePropMode();

        var percentExtent = [0, 100];
        var percentWindow = [];
        var valueWindow = [];
        var hasPropModeValue;
        each$n(['start', 'end'], function (prop, idx) {
          var boundPercent = opt[prop];
          var boundValue = opt[prop + 'Value']; // Notice: dataZoom is based either on `percentProp` ('start', 'end') or
          // on `valueProp` ('startValue', 'endValue'). (They are based on the data extent
          // but not min/max of axis, which will be calculated by data window then).
          // The former one is suitable for cases that a dataZoom component controls multiple
          // axes with different unit or extent, and the latter one is suitable for accurate
          // zoom by pixel (e.g., in dataZoomSelect).
          // we use `getRangePropMode()` to mark which prop is used. `rangePropMode` is updated
          // only when setOption or dispatchAction, otherwise it remains its original value.
          // (Why not only record `percentProp` and always map to `valueProp`? Because
          // the map `valueProp` -> `percentProp` -> `valueProp` probably not the original
          // `valueProp`. consider two axes constrolled by one dataZoom. They have different
          // data extent. All of values that are overflow the `dataExtent` will be calculated
          // to percent '100%').

          if (rangePropMode[idx] === 'percent') {
            boundPercent == null && (boundPercent = percentExtent[idx]); // Use scale.parse to math round for category or time axis.

            boundValue = scale.parse(number.linearMap(boundPercent, percentExtent, dataExtent));
          } else {
            hasPropModeValue = true;
            boundValue = boundValue == null ? dataExtent[idx] : scale.parse(boundValue); // Calculating `percent` from `value` may be not accurate, because
            // This calculation can not be inversed, because all of values that
            // are overflow the `dataExtent` will be calculated to percent '100%'

            boundPercent = number.linearMap(boundValue, dataExtent, percentExtent);
          } // valueWindow[idx] = round(boundValue);
          // percentWindow[idx] = round(boundPercent);


          valueWindow[idx] = boundValue;
          percentWindow[idx] = boundPercent;
        });
        asc$1(valueWindow);
        asc$1(percentWindow); // The windows from user calling of `dispatchAction` might be out of the extent,
        // or do not obey the `min/maxSpan`, `min/maxValueSpan`. But we dont restrict window
        // by `zoomLock` here, because we see `zoomLock` just as a interaction constraint,
        // where API is able to initialize/modify the window size even though `zoomLock`
        // specified.

        var spans = this._minMaxSpan;
        hasPropModeValue ? restrictSet(valueWindow, percentWindow, dataExtent, percentExtent, false) : restrictSet(percentWindow, valueWindow, percentExtent, dataExtent, true);

        function restrictSet(fromWindow, toWindow, fromExtent, toExtent, toValue) {
          var suffix = toValue ? 'Span' : 'ValueSpan';
          sliderMove(0, fromWindow, fromExtent, 'all', spans['min' + suffix], spans['max' + suffix]);

          for (var i = 0; i < 2; i++) {
            toWindow[i] = number.linearMap(fromWindow[i], fromExtent, toExtent, true);
            toValue && (toWindow[i] = scale.parse(toWindow[i]));
          }
        }

        return {
          valueWindow: valueWindow,
          percentWindow: percentWindow
        };
      },

      /**
       * Notice: reset should not be called before series.restoreData() called,
       * so it is recommanded to be called in "process stage" but not "model init
       * stage".
       *
       * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
       */
      reset: function (dataZoomModel) {
        if (dataZoomModel !== this._dataZoomModel) {
          return;
        }

        var targetSeries = this.getTargetSeriesModels(); // Culculate data window and data extent, and record them.

        this._dataExtent = calculateDataExtent(this, this._dimName, targetSeries); // this.hasSeriesStacked = false;
        // each(targetSeries, function (series) {
        // var data = series.getData();
        // var dataDim = data.mapDimension(this._dimName);
        // var stackedDimension = data.getCalculationInfo('stackedDimension');
        // if (stackedDimension && stackedDimension === dataDim) {
        // this.hasSeriesStacked = true;
        // }
        // }, this);
        // `calculateDataWindow` uses min/maxSpan.

        setMinMaxSpan(this);
        var dataWindow = this.calculateDataWindow(dataZoomModel.settledOption);
        this._valueWindow = dataWindow.valueWindow;
        this._percentWindow = dataWindow.percentWindow; // Update axis setting then.

        setAxisModel(this);
      },

      /**
       * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
       */
      restore: function (dataZoomModel) {
        if (dataZoomModel !== this._dataZoomModel) {
          return;
        }

        this._valueWindow = this._percentWindow = null;
        setAxisModel(this, true);
      },

      /**
       * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
       */
      filterData: function (dataZoomModel, api) {
        if (dataZoomModel !== this._dataZoomModel) {
          return;
        }

        var axisDim = this._dimName;
        var seriesModels = this.getTargetSeriesModels();
        var filterMode = dataZoomModel.get('filterMode');
        var valueWindow = this._valueWindow;

        if (filterMode === 'none') {
          return;
        } // FIXME
        // Toolbox may has dataZoom injected. And if there are stacked bar chart
        // with NaN data, NaN will be filtered and stack will be wrong.
        // So we need to force the mode to be set empty.
        // In fect, it is not a big deal that do not support filterMode-'filter'
        // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
        // selection" some day, which might need "adapt to data extent on the
        // otherAxis", which is disabled by filterMode-'empty'.
        // But currently, stack has been fixed to based on value but not index,
        // so this is not an issue any more.
        // var otherAxisModel = this.getOtherAxisModel();
        // if (dataZoomModel.get('$fromToolbox')
        //     && otherAxisModel
        //     && otherAxisModel.hasSeriesStacked
        // ) {
        //     filterMode = 'empty';
        // }
        // TODO
        // filterMode 'weakFilter' and 'empty' is not optimized for huge data yet.


        each$n(seriesModels, function (seriesModel) {
          var seriesData = seriesModel.getData();
          var dataDims = seriesData.mapDimension(axisDim, true);

          if (!dataDims.length) {
            return;
          }

          if (filterMode === 'weakFilter') {
            seriesData.filterSelf(function (dataIndex) {
              var leftOut;
              var rightOut;
              var hasValue;

              for (var i = 0; i < dataDims.length; i++) {
                var value = seriesData.get(dataDims[i], dataIndex);
                var thisHasValue = !isNaN(value);
                var thisLeftOut = value < valueWindow[0];
                var thisRightOut = value > valueWindow[1];

                if (thisHasValue && !thisLeftOut && !thisRightOut) {
                  return true;
                }

                thisHasValue && (hasValue = true);
                thisLeftOut && (leftOut = true);
                thisRightOut && (rightOut = true);
              } // If both left out and right out, do not filter.


              return hasValue && leftOut && rightOut;
            });
          } else {
            each$n(dataDims, function (dim) {
              if (filterMode === 'empty') {
                seriesModel.setData(seriesData = seriesData.map(dim, function (value) {
                  return !isInWindow(value) ? NaN : value;
                }));
              } else {
                var range = {};
                range[dim] = valueWindow; // console.time('select');

                seriesData.selectRange(range); // console.timeEnd('select');
              }
            });
          }

          each$n(dataDims, function (dim) {
            seriesData.setApproximateExtent(valueWindow, dim);
          });
        });

        function isInWindow(value) {
          return value >= valueWindow[0] && value <= valueWindow[1];
        }
      }
    };

    function calculateDataExtent(axisProxy, axisDim, seriesModels) {
      var dataExtent = [Infinity, -Infinity];
      each$n(seriesModels, function (seriesModel) {
        var seriesData = seriesModel.getData();

        if (seriesData) {
          each$n(seriesData.mapDimension(axisDim, true), function (dim) {
            var seriesExtent = seriesData.getApproximateExtent(dim);
            seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
            seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
          });
        }
      });

      if (dataExtent[1] < dataExtent[0]) {
        dataExtent = [NaN, NaN];
      } // It is important to get "consistent" extent when more then one axes is
      // controlled by a `dataZoom`, otherwise those axes will not be synchronized
      // when zooming. But it is difficult to know what is "consistent", considering
      // axes have different type or even different meanings (For example, two
      // time axes are used to compare data of the same date in different years).
      // So basically dataZoom just obtains extent by series.data (in category axis
      // extent can be obtained from axis.data).
      // Nevertheless, user can set min/max/scale on axes to make extent of axes
      // consistent.


      fixExtentByAxis(axisProxy, dataExtent);
      return dataExtent;
    }

    function fixExtentByAxis(axisProxy, dataExtent) {
      var axisModel = axisProxy.getAxisModel();
      var min = axisModel.getMin(true); // For category axis, if min/max/scale are not set, extent is determined
      // by axis.data by default.

      var isCategoryAxis = axisModel.get('type') === 'category';
      var axisDataLen = isCategoryAxis && axisModel.getCategories().length;

      if (min != null && min !== 'dataMin' && typeof min !== 'function') {
        dataExtent[0] = min;
      } else if (isCategoryAxis) {
        dataExtent[0] = axisDataLen > 0 ? 0 : NaN;
      }

      var max = axisModel.getMax(true);

      if (max != null && max !== 'dataMax' && typeof max !== 'function') {
        dataExtent[1] = max;
      } else if (isCategoryAxis) {
        dataExtent[1] = axisDataLen > 0 ? axisDataLen - 1 : NaN;
      }

      if (!axisModel.get('scale', true)) {
        dataExtent[0] > 0 && (dataExtent[0] = 0);
        dataExtent[1] < 0 && (dataExtent[1] = 0);
      } // For value axis, if min/max/scale are not set, we just use the extent obtained
      // by series data, which may be a little different from the extent calculated by
      // `axisHelper.getScaleExtent`. But the different just affects the experience a
      // little when zooming. So it will not be fixed until some users require it strongly.


      return dataExtent;
    }

    function setAxisModel(axisProxy, isRestore) {
      var axisModel = axisProxy.getAxisModel();
      var percentWindow = axisProxy._percentWindow;
      var valueWindow = axisProxy._valueWindow;

      if (!percentWindow) {
        return;
      } // [0, 500]: arbitrary value, guess axis extent.


      var precision = number.getPixelPrecision(valueWindow, [0, 500]);
      precision = Math.min(precision, 20); // isRestore or isFull

      var useOrigin = isRestore || percentWindow[0] === 0 && percentWindow[1] === 100;
      axisModel.setRange(useOrigin ? null : +valueWindow[0].toFixed(precision), useOrigin ? null : +valueWindow[1].toFixed(precision));
    }

    function setMinMaxSpan(axisProxy) {
      var minMaxSpan = axisProxy._minMaxSpan = {};
      var dataZoomModel = axisProxy._dataZoomModel;
      var dataExtent = axisProxy._dataExtent;
      each$n(['min', 'max'], function (minMax) {
        var percentSpan = dataZoomModel.get(minMax + 'Span');
        var valueSpan = dataZoomModel.get(minMax + 'ValueSpan');
        valueSpan != null && (valueSpan = axisProxy.getAxisModel().axis.scale.parse(valueSpan)); // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan

        if (valueSpan != null) {
          percentSpan = number.linearMap(dataExtent[0] + valueSpan, dataExtent, [0, 100], true);
        } else if (percentSpan != null) {
          valueSpan = number.linearMap(percentSpan, [0, 100], dataExtent, true) - dataExtent[0];
        }

        minMaxSpan[minMax + 'Span'] = percentSpan;
        minMaxSpan[minMax + 'ValueSpan'] = valueSpan;
      });
    }

    var _default$1J = AxisProxy;
    var AxisProxy_1 = _default$1J;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$o = util.each;
    var eachAxisDim$1 = helper$4.eachAxisDim;
    var DataZoomModel = echarts.extendComponentModel({
      type: 'dataZoom',
      dependencies: ['xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'],

      /**
       * @protected
       */
      defaultOption: {
        zlevel: 0,
        z: 4,
        // Higher than normal component (z: 2).
        orient: null,
        // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
        xAxisIndex: null,
        // Default the first horizontal category axis.
        yAxisIndex: null,
        // Default the first vertical category axis.
        filterMode: 'filter',
        // Possible values: 'filter' or 'empty' or 'weakFilter'.
        // 'filter': data items which are out of window will be removed. This option is
        //          applicable when filtering outliers. For each data item, it will be
        //          filtered if one of the relevant dimensions is out of the window.
        // 'weakFilter': data items which are out of window will be removed. This option
        //          is applicable when filtering outliers. For each data item, it will be
        //          filtered only if all  of the relevant dimensions are out of the same
        //          side of the window.
        // 'empty': data items which are out of window will be set to empty.
        //          This option is applicable when user should not neglect
        //          that there are some data items out of window.
        // 'none': Do not filter.
        // Taking line chart as an example, line will be broken in
        // the filtered points when filterModel is set to 'empty', but
        // be connected when set to 'filter'.
        throttle: null,
        // Dispatch action by the fixed rate, avoid frequency.
        // default 100. Do not throttle when use null/undefined.
        // If animation === true and animationDurationUpdate > 0,
        // default value is 100, otherwise 20.
        start: 0,
        // Start percent. 0 ~ 100
        end: 100,
        // End percent. 0 ~ 100
        startValue: null,
        // Start value. If startValue specified, start is ignored.
        endValue: null,
        // End value. If endValue specified, end is ignored.
        minSpan: null,
        // 0 ~ 100
        maxSpan: null,
        // 0 ~ 100
        minValueSpan: null,
        // The range of dataZoom can not be smaller than that.
        maxValueSpan: null,
        // The range of dataZoom can not be larger than that.
        rangeMode: null // Array, can be 'value' or 'percent'.

      },

      /**
       * @override
       */
      init: function (option, parentModel, ecModel) {
        /**
         * key like x_0, y_1
         * @private
         * @type {Object}
         */
        this._dataIntervalByAxis = {};
        /**
         * @private
         */

        this._dataInfo = {};
        /**
         * key like x_0, y_1
         * @private
         */

        this._axisProxies = {};
        /**
         * @readOnly
         */

        this.textStyleModel;
        /**
         * @private
         */

        this._autoThrottle = true;
        /**
         * It is `[rangeModeForMin, rangeModeForMax]`.
         * The optional values for `rangeMode`:
         * + `'value'` mode: the axis extent will always be determined by
         *     `dataZoom.startValue` and `dataZoom.endValue`, despite
         *     how data like and how `axis.min` and `axis.max` are.
         * + `'percent'` mode: `100` represents 100% of the `[dMin, dMax]`,
         *     where `dMin` is `axis.min` if `axis.min` specified, otherwise `data.extent[0]`,
         *     and `dMax` is `axis.max` if `axis.max` specified, otherwise `data.extent[1]`.
         *     Axis extent will be determined by the result of the percent of `[dMin, dMax]`.
         *
         * For example, when users are using dynamic data (update data periodically via `setOption`),
         * if in `'value`' mode, the window will be kept in a fixed value range despite how
         * data are appended, while if in `'percent'` mode, whe window range will be changed alone with
         * the appended data (suppose `axis.min` and `axis.max` are not specified).
         *
         * @private
         */

        this._rangePropMode = ['percent', 'percent'];
        var inputRawOption = retrieveRawOption(option);
        /**
         * Suppose a "main process" start at the point that model prepared (that is,
         * model initialized or merged or method called in `action`).
         * We should keep the `main process` idempotent, that is, given a set of values
         * on `option`, we get the same result.
         *
         * But sometimes, values on `option` will be updated for providing users
         * a "final calculated value" (`dataZoomProcessor` will do that). Those value
         * should not be the base/input of the `main process`.
         *
         * So in that case we should save and keep the input of the `main process`
         * separately, called `settledOption`.
         *
         * For example, consider the case:
         * (Step_1) brush zoom the grid by `toolbox.dataZoom`,
         *     where the original input `option.startValue`, `option.endValue` are earsed by
         *     calculated value.
         * (Step)2) click the legend to hide and show a series,
         *     where the new range is calculated by the earsed `startValue` and `endValue`,
         *     which brings incorrect result.
         *
         * @readOnly
         */

        this.settledOption = inputRawOption;
        this.mergeDefaultAndTheme(option, ecModel);
        this.doInit(inputRawOption);
      },

      /**
       * @override
       */
      mergeOption: function (newOption) {
        var inputRawOption = retrieveRawOption(newOption); //FIX #2591

        util.merge(this.option, newOption, true);
        util.merge(this.settledOption, inputRawOption, true);
        this.doInit(inputRawOption);
      },

      /**
       * @protected
       */
      doInit: function (inputRawOption) {
        var thisOption = this.option; // Disable realtime view update if canvas is not supported.

        if (!env_1.canvasSupported) {
          thisOption.realtime = false;
        }

        this._setDefaultThrottle(inputRawOption);

        updateRangeUse(this, inputRawOption);
        var settledOption = this.settledOption;
        each$o([['start', 'startValue'], ['end', 'endValue']], function (names, index) {
          // start/end has higher priority over startValue/endValue if they
          // both set, but we should make chart.setOption({endValue: 1000})
          // effective, rather than chart.setOption({endValue: 1000, end: null}).
          if (this._rangePropMode[index] === 'value') {
            thisOption[names[0]] = settledOption[names[0]] = null;
          } // Otherwise do nothing and use the merge result.

        }, this);
        this.textStyleModel = this.getModel('textStyle');

        this._resetTarget();

        this._giveAxisProxies();
      },

      /**
       * @private
       */
      _giveAxisProxies: function () {
        var axisProxies = this._axisProxies;
        this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
          var axisModel = this.dependentModels[dimNames.axis][axisIndex]; // If exists, share axisProxy with other dataZoomModels.

          var axisProxy = axisModel.__dzAxisProxy || ( // Use the first dataZoomModel as the main model of axisProxy.
          axisModel.__dzAxisProxy = new AxisProxy_1(dimNames.name, axisIndex, this, ecModel)); // FIXME
          // dispose __dzAxisProxy

          axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
        }, this);
      },

      /**
       * @private
       */
      _resetTarget: function () {
        var thisOption = this.option;

        var autoMode = this._judgeAutoMode();

        eachAxisDim$1(function (dimNames) {
          var axisIndexName = dimNames.axisIndex;
          thisOption[axisIndexName] = model.normalizeToArray(thisOption[axisIndexName]);
        }, this);

        if (autoMode === 'axisIndex') {
          this._autoSetAxisIndex();
        } else if (autoMode === 'orient') {
          this._autoSetOrient();
        }
      },

      /**
       * @private
       */
      _judgeAutoMode: function () {
        // Auto set only works for setOption at the first time.
        // The following is user's reponsibility. So using merged
        // option is OK.
        var thisOption = this.option;
        var hasIndexSpecified = false;
        eachAxisDim$1(function (dimNames) {
          // When user set axisIndex as a empty array, we think that user specify axisIndex
          // but do not want use auto mode. Because empty array may be encountered when
          // some error occured.
          if (thisOption[dimNames.axisIndex] != null) {
            hasIndexSpecified = true;
          }
        }, this);
        var orient = thisOption.orient;

        if (orient == null && hasIndexSpecified) {
          return 'orient';
        } else if (!hasIndexSpecified) {
          if (orient == null) {
            thisOption.orient = 'horizontal';
          }

          return 'axisIndex';
        }
      },

      /**
       * @private
       */
      _autoSetAxisIndex: function () {
        var autoAxisIndex = true;
        var orient = this.get('orient', true);
        var thisOption = this.option;
        var dependentModels = this.dependentModels;

        if (autoAxisIndex) {
          // Find axis that parallel to dataZoom as default.
          var dimName = orient === 'vertical' ? 'y' : 'x';

          if (dependentModels[dimName + 'Axis'].length) {
            thisOption[dimName + 'AxisIndex'] = [0];
            autoAxisIndex = false;
          } else {
            each$o(dependentModels.singleAxis, function (singleAxisModel) {
              if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {
                thisOption.singleAxisIndex = [singleAxisModel.componentIndex];
                autoAxisIndex = false;
              }
            });
          }
        }

        if (autoAxisIndex) {
          // Find the first category axis as default. (consider polar)
          eachAxisDim$1(function (dimNames) {
            if (!autoAxisIndex) {
              return;
            }

            var axisIndices = [];
            var axisModels = this.dependentModels[dimNames.axis];

            if (axisModels.length && !axisIndices.length) {
              for (var i = 0, len = axisModels.length; i < len; i++) {
                if (axisModels[i].get('type') === 'category') {
                  axisIndices.push(i);
                }
              }
            }

            thisOption[dimNames.axisIndex] = axisIndices;

            if (axisIndices.length) {
              autoAxisIndex = false;
            }
          }, this);
        }

        if (autoAxisIndex) {
          // FIXME
          // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
          // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？
          // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
          // dataZoom component auto adopts series that reference to
          // both xAxis and yAxis which type is 'value'.
          this.ecModel.eachSeries(function (seriesModel) {
            if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
              eachAxisDim$1(function (dimNames) {
                var axisIndices = thisOption[dimNames.axisIndex];
                var axisIndex = seriesModel.get(dimNames.axisIndex);
                var axisId = seriesModel.get(dimNames.axisId);
                var axisModel = seriesModel.ecModel.queryComponents({
                  mainType: dimNames.axis,
                  index: axisIndex,
                  id: axisId
                })[0];
                axisIndex = axisModel.componentIndex;

                if (util.indexOf(axisIndices, axisIndex) < 0) {
                  axisIndices.push(axisIndex);
                }
              });
            }
          }, this);
        }
      },

      /**
       * @private
       */
      _autoSetOrient: function () {
        var dim; // Find the first axis

        this.eachTargetAxis(function (dimNames) {
          !dim && (dim = dimNames.name);
        }, this);
        this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
      },

      /**
       * @private
       */
      _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
        // FIXME
        // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
        // 例如series.type === scatter时。
        var is = true;
        eachAxisDim$1(function (dimNames) {
          var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
          var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];

          if (!axisModel || axisModel.get('type') !== axisType) {
            is = false;
          }
        }, this);
        return is;
      },

      /**
       * @private
       */
      _setDefaultThrottle: function (inputRawOption) {
        // When first time user set throttle, auto throttle ends.
        if (inputRawOption.hasOwnProperty('throttle')) {
          this._autoThrottle = false;
        }

        if (this._autoThrottle) {
          var globalOption = this.ecModel.option;
          this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
        }
      },

      /**
       * @public
       */
      getFirstTargetAxisModel: function () {
        var firstAxisModel;
        eachAxisDim$1(function (dimNames) {
          if (firstAxisModel == null) {
            var indices = this.get(dimNames.axisIndex);

            if (indices.length) {
              firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
            }
          }
        }, this);
        return firstAxisModel;
      },

      /**
       * @public
       * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
       */
      eachTargetAxis: function (callback, context) {
        var ecModel = this.ecModel;
        eachAxisDim$1(function (dimNames) {
          each$o(this.get(dimNames.axisIndex), function (axisIndex) {
            callback.call(context, dimNames, axisIndex, this, ecModel);
          }, this);
        }, this);
      },

      /**
       * @param {string} dimName
       * @param {number} axisIndex
       * @return {module:echarts/component/dataZoom/AxisProxy} If not found, return null/undefined.
       */
      getAxisProxy: function (dimName, axisIndex) {
        return this._axisProxies[dimName + '_' + axisIndex];
      },

      /**
       * @param {string} dimName
       * @param {number} axisIndex
       * @return {module:echarts/model/Model} If not found, return null/undefined.
       */
      getAxisModel: function (dimName, axisIndex) {
        var axisProxy = this.getAxisProxy(dimName, axisIndex);
        return axisProxy && axisProxy.getAxisModel();
      },

      /**
       * If not specified, set to undefined.
       *
       * @public
       * @param {Object} opt
       * @param {number} [opt.start]
       * @param {number} [opt.end]
       * @param {number} [opt.startValue]
       * @param {number} [opt.endValue]
       */
      setRawRange: function (opt) {
        var thisOption = this.option;
        var settledOption = this.settledOption;
        each$o([['start', 'startValue'], ['end', 'endValue']], function (names) {
          // Consider the pair <start, startValue>:
          // If one has value and the other one is `null/undefined`, we both set them
          // to `settledOption`. This strategy enables the feature to clear the original
          // value in `settledOption` to `null/undefined`.
          // But if both of them are `null/undefined`, we do not set them to `settledOption`
          // and keep `settledOption` with the original value. This strategy enables users to
          // only set <end or endValue> but not set <start or startValue> when calling
          // `dispatchAction`.
          // The pair <end, endValue> is treated in the same way.
          if (opt[names[0]] != null || opt[names[1]] != null) {
            thisOption[names[0]] = settledOption[names[0]] = opt[names[0]];
            thisOption[names[1]] = settledOption[names[1]] = opt[names[1]];
          }
        }, this);
        updateRangeUse(this, opt);
      },

      /**
       * @public
       * @param {Object} opt
       * @param {number} [opt.start]
       * @param {number} [opt.end]
       * @param {number} [opt.startValue]
       * @param {number} [opt.endValue]
       */
      setCalculatedRange: function (opt) {
        var option = this.option;
        each$o(['start', 'startValue', 'end', 'endValue'], function (name) {
          option[name] = opt[name];
        });
      },

      /**
       * @public
       * @return {Array.<number>} [startPercent, endPercent]
       */
      getPercentRange: function () {
        var axisProxy = this.findRepresentativeAxisProxy();

        if (axisProxy) {
          return axisProxy.getDataPercentWindow();
        }
      },

      /**
       * @public
       * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
       *
       * @param {string} [axisDimName]
       * @param {number} [axisIndex]
       * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.
       */
      getValueRange: function (axisDimName, axisIndex) {
        if (axisDimName == null && axisIndex == null) {
          var axisProxy = this.findRepresentativeAxisProxy();

          if (axisProxy) {
            return axisProxy.getDataValueWindow();
          }
        } else {
          return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
        }
      },

      /**
       * @public
       * @param {module:echarts/model/Model} [axisModel] If axisModel given, find axisProxy
       *      corresponding to the axisModel
       * @return {module:echarts/component/dataZoom/AxisProxy}
       */
      findRepresentativeAxisProxy: function (axisModel) {
        if (axisModel) {
          return axisModel.__dzAxisProxy;
        } // Find the first hosted axisProxy


        var axisProxies = this._axisProxies;

        for (var key in axisProxies) {
          if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
            return axisProxies[key];
          }
        } // If no hosted axis find not hosted axisProxy.
        // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
        // and the option.start or option.end settings are different. The percentRange
        // should follow axisProxy.
        // (We encounter this problem in toolbox data zoom.)


        for (var key in axisProxies) {
          if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
            return axisProxies[key];
          }
        }
      },

      /**
       * @return {Array.<string>}
       */
      getRangePropMode: function () {
        return this._rangePropMode.slice();
      }
    });
    /**
     * Retrieve the those raw params from option, which will be cached separately.
     * becasue they will be overwritten by normalized/calculated values in the main
     * process.
     */

    function retrieveRawOption(option) {
      var ret = {};
      each$o(['start', 'end', 'startValue', 'endValue', 'throttle'], function (name) {
        option.hasOwnProperty(name) && (ret[name] = option[name]);
      });
      return ret;
    }

    function updateRangeUse(dataZoomModel, inputRawOption) {
      var rangePropMode = dataZoomModel._rangePropMode;
      var rangeModeInOption = dataZoomModel.get('rangeMode');
      each$o([['start', 'startValue'], ['end', 'endValue']], function (names, index) {
        var percentSpecified = inputRawOption[names[0]] != null;
        var valueSpecified = inputRawOption[names[1]] != null;

        if (percentSpecified && !valueSpecified) {
          rangePropMode[index] = 'percent';
        } else if (!percentSpecified && valueSpecified) {
          rangePropMode[index] = 'value';
        } else if (rangeModeInOption) {
          rangePropMode[index] = rangeModeInOption[index];
        } else if (percentSpecified) {
          // percentSpecified && valueSpecified
          rangePropMode[index] = 'percent';
        } // else remain its original setting.

      });
    }

    var _default$1K = DataZoomModel;
    var DataZoomModel_1 = _default$1K;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$1L = Component_1.extend({
      type: 'dataZoom',
      render: function (dataZoomModel, ecModel, api, payload) {
        this.dataZoomModel = dataZoomModel;
        this.ecModel = ecModel;
        this.api = api;
      },

      /**
       * Find the first target coordinate system.
       *
       * @protected
       * @return {Object} {
       *                   grid: [
       *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
       *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
       *                       ...
       *                   ],  // cartesians must not be null/undefined.
       *                   polar: [
       *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
       *                       ...
       *                   ],  // polars must not be null/undefined.
       *                   singleAxis: [
       *                       {model: coord0, axisModels: [], coordIndex: 0}
       *                   ]
       */
      getTargetCoordInfo: function () {
        var dataZoomModel = this.dataZoomModel;
        var ecModel = this.ecModel;
        var coordSysLists = {};
        dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
          var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);

          if (axisModel) {
            var coordModel = axisModel.getCoordSysModel();
            coordModel && save(coordModel, axisModel, coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []), coordModel.componentIndex);
          }
        }, this);

        function save(coordModel, axisModel, store, coordIndex) {
          var item;

          for (var i = 0; i < store.length; i++) {
            if (store[i].model === coordModel) {
              item = store[i];
              break;
            }
          }

          if (!item) {
            store.push(item = {
              model: coordModel,
              axisModels: [],
              coordIndex: coordIndex
            });
          }

          item.axisModels.push(axisModel);
        }

        return coordSysLists;
      }
    });

    var DataZoomView = _default$1L;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var SliderZoomModel = DataZoomModel_1.extend({
      type: 'dataZoom.slider',
      layoutMode: 'box',

      /**
       * @protected
       */
      defaultOption: {
        show: true,
        // ph => placeholder. Using placehoder here because
        // deault value can only be drived in view stage.
        right: 'ph',
        // Default align to grid rect.
        top: 'ph',
        // Default align to grid rect.
        width: 'ph',
        // Default align to grid rect.
        height: 'ph',
        // Default align to grid rect.
        left: null,
        // Default align to grid rect.
        bottom: null,
        // Default align to grid rect.
        backgroundColor: 'rgba(47,69,84,0)',
        // Background of slider zoom component.
        // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,
        // highest priority, remain for compatibility of
        // previous version, but not recommended any more.
        dataBackground: {
          lineStyle: {
            color: '#2f4554',
            width: 0.5,
            opacity: 0.3
          },
          areaStyle: {
            color: 'rgba(47,69,84,0.3)',
            opacity: 0.3
          }
        },
        borderColor: '#ddd',
        // border color of the box. For compatibility,
        // if dataBackgroundColor is set, borderColor
        // is ignored.
        fillerColor: 'rgba(167,183,204,0.4)',
        // Color of selected area.
        // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.
        // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',

        /* eslint-disable */
        handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',

        /* eslint-enable */
        // Percent of the slider height
        handleSize: '100%',
        handleStyle: {
          color: '#a7b7cc'
        },
        labelPrecision: null,
        labelFormatter: null,
        showDetail: true,
        showDataShadow: 'auto',
        // Default auto decision.
        realtime: true,
        zoomLock: false,
        // Whether disable zoom.
        textStyle: {
          color: '#333'
        }
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

















    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var Rect$1 = graphic.Rect;
    var linearMap$2 = number.linearMap;
    var asc$2 = number.asc;
    var bind$1 = util.bind;
    var each$p = util.each; // Constants

    var DEFAULT_LOCATION_EDGE_GAP = 7;
    var DEFAULT_FRAME_BORDER_WIDTH = 1;
    var DEFAULT_FILLER_SIZE = 30;
    var HORIZONTAL = 'horizontal';
    var VERTICAL = 'vertical';
    var LABEL_GAP = 5;
    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];
    var SliderZoomView = DataZoomView.extend({
      type: 'dataZoom.slider',
      init: function (ecModel, api) {
        /**
         * @private
         * @type {Object}
         */
        this._displayables = {};
        /**
         * @private
         * @type {string}
         */

        this._orient;
        /**
         * [0, 100]
         * @private
         */

        this._range;
        /**
         * [coord of the first handle, coord of the second handle]
         * @private
         */

        this._handleEnds;
        /**
         * [length, thick]
         * @private
         * @type {Array.<number>}
         */

        this._size;
        /**
         * @private
         * @type {number}
         */

        this._handleWidth;
        /**
         * @private
         * @type {number}
         */

        this._handleHeight;
        /**
         * @private
         */

        this._location;
        /**
         * @private
         */

        this._dragging;
        /**
         * @private
         */

        this._dataShadowInfo;
        this.api = api;
      },

      /**
       * @override
       */
      render: function (dataZoomModel, ecModel, api, payload) {
        SliderZoomView.superApply(this, 'render', arguments);
        throttle_1.createOrUpdate(this, '_dispatchZoomAction', this.dataZoomModel.get('throttle'), 'fixRate');
        this._orient = dataZoomModel.get('orient');

        if (this.dataZoomModel.get('show') === false) {
          this.group.removeAll();
          return;
        } // Notice: this._resetInterval() should not be executed when payload.type
        // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
        // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,


        if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
          this._buildView();
        }

        this._updateView();
      },

      /**
       * @override
       */
      remove: function () {
        SliderZoomView.superApply(this, 'remove', arguments);
        throttle_1.clear(this, '_dispatchZoomAction');
      },

      /**
       * @override
       */
      dispose: function () {
        SliderZoomView.superApply(this, 'dispose', arguments);
        throttle_1.clear(this, '_dispatchZoomAction');
      },
      _buildView: function () {
        var thisGroup = this.group;
        thisGroup.removeAll();

        this._resetLocation();

        this._resetInterval();

        var barGroup = this._displayables.barGroup = new graphic.Group();

        this._renderBackground();

        this._renderHandle();

        this._renderDataShadow();

        thisGroup.add(barGroup);

        this._positionGroup();
      },

      /**
       * @private
       */
      _resetLocation: function () {
        var dataZoomModel = this.dataZoomModel;
        var api = this.api; // If some of x/y/width/height are not specified,
        // auto-adapt according to target grid.

        var coordRect = this._findCoordRect();

        var ecSize = {
          width: api.getWidth(),
          height: api.getHeight()
        }; // Default align by coordinate system rect.

        var positionInfo = this._orient === HORIZONTAL ? {
          // Why using 'right', because right should be used in vertical,
          // and it is better to be consistent for dealing with position param merge.
          right: ecSize.width - coordRect.x - coordRect.width,
          top: ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP,
          width: coordRect.width,
          height: DEFAULT_FILLER_SIZE
        } : {
          // vertical
          right: DEFAULT_LOCATION_EDGE_GAP,
          top: coordRect.y,
          width: DEFAULT_FILLER_SIZE,
          height: coordRect.height
        }; // Do not write back to option and replace value 'ph', because
        // the 'ph' value should be recalculated when resize.

        var layoutParams = layout.getLayoutParams(dataZoomModel.option); // Replace the placeholder value.

        util.each(['right', 'top', 'width', 'height'], function (name) {
          if (layoutParams[name] === 'ph') {
            layoutParams[name] = positionInfo[name];
          }
        });
        var layoutRect = layout.getLayoutRect(layoutParams, ecSize, dataZoomModel.padding);
        this._location = {
          x: layoutRect.x,
          y: layoutRect.y
        };
        this._size = [layoutRect.width, layoutRect.height];
        this._orient === VERTICAL && this._size.reverse();
      },

      /**
       * @private
       */
      _positionGroup: function () {
        var thisGroup = this.group;
        var location = this._location;
        var orient = this._orient; // Just use the first axis to determine mapping.

        var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
        var inverse = targetAxisModel && targetAxisModel.get('inverse');
        var barGroup = this._displayables.barGroup;
        var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse; // Transform barGroup.

        barGroup.attr(orient === HORIZONTAL && !inverse ? {
          scale: otherAxisInverse ? [1, 1] : [1, -1]
        } : orient === HORIZONTAL && inverse ? {
          scale: otherAxisInverse ? [-1, 1] : [-1, -1]
        } : orient === VERTICAL && !inverse ? {
          scale: otherAxisInverse ? [1, -1] : [1, 1],
          rotation: Math.PI / 2 // Dont use Math.PI, considering shadow direction.

        } : {
          scale: otherAxisInverse ? [-1, -1] : [-1, 1],
          rotation: Math.PI / 2
        }); // Position barGroup

        var rect = thisGroup.getBoundingRect([barGroup]);
        thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);
      },

      /**
       * @private
       */
      _getViewExtent: function () {
        return [0, this._size[0]];
      },
      _renderBackground: function () {
        var dataZoomModel = this.dataZoomModel;
        var size = this._size;
        var barGroup = this._displayables.barGroup;
        barGroup.add(new Rect$1({
          silent: true,
          shape: {
            x: 0,
            y: 0,
            width: size[0],
            height: size[1]
          },
          style: {
            fill: dataZoomModel.get('backgroundColor')
          },
          z2: -40
        })); // Click panel, over shadow, below handles.

        barGroup.add(new Rect$1({
          shape: {
            x: 0,
            y: 0,
            width: size[0],
            height: size[1]
          },
          style: {
            fill: 'transparent'
          },
          z2: 0,
          onclick: util.bind(this._onClickPanelClick, this)
        }));
      },
      _renderDataShadow: function () {
        var info = this._dataShadowInfo = this._prepareDataShadowInfo();

        if (!info) {
          return;
        }

        var size = this._size;
        var seriesModel = info.series;
        var data = seriesModel.getRawData();
        var otherDim = seriesModel.getShadowDim ? seriesModel.getShadowDim() // @see candlestick
        : info.otherDim;

        if (otherDim == null) {
          return;
        }

        var otherDataExtent = data.getDataExtent(otherDim); // Nice extent.

        var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
        otherDataExtent = [otherDataExtent[0] - otherOffset, otherDataExtent[1] + otherOffset];
        var otherShadowExtent = [0, size[1]];
        var thisShadowExtent = [0, size[0]];
        var areaPoints = [[size[0], 0], [0, 0]];
        var linePoints = [];
        var step = thisShadowExtent[1] / (data.count() - 1);
        var thisCoord = 0; // Optimize for large data shadow

        var stride = Math.round(data.count() / size[0]);
        var lastIsEmpty;
        data.each([otherDim], function (value, index) {
          if (stride > 0 && index % stride) {
            thisCoord += step;
            return;
          } // FIXME
          // Should consider axis.min/axis.max when drawing dataShadow.
          // FIXME
          // 应该使用统一的空判断？还是在list里进行空判断？


          var isEmpty = value == null || isNaN(value) || value === ''; // See #4235.

          var otherCoord = isEmpty ? 0 : linearMap$2(value, otherDataExtent, otherShadowExtent, true); // Attempt to draw data shadow precisely when there are empty value.

          if (isEmpty && !lastIsEmpty && index) {
            areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
            linePoints.push([linePoints[linePoints.length - 1][0], 0]);
          } else if (!isEmpty && lastIsEmpty) {
            areaPoints.push([thisCoord, 0]);
            linePoints.push([thisCoord, 0]);
          }

          areaPoints.push([thisCoord, otherCoord]);
          linePoints.push([thisCoord, otherCoord]);
          thisCoord += step;
          lastIsEmpty = isEmpty;
        });
        var dataZoomModel = this.dataZoomModel; // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');

        this._displayables.barGroup.add(new graphic.Polygon({
          shape: {
            points: areaPoints
          },
          style: util.defaults({
            fill: dataZoomModel.get('dataBackgroundColor')
          }, dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()),
          silent: true,
          z2: -20
        }));

        this._displayables.barGroup.add(new graphic.Polyline({
          shape: {
            points: linePoints
          },
          style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),
          silent: true,
          z2: -19
        }));
      },
      _prepareDataShadowInfo: function () {
        var dataZoomModel = this.dataZoomModel;
        var showDataShadow = dataZoomModel.get('showDataShadow');

        if (showDataShadow === false) {
          return;
        } // Find a representative series.


        var result;
        var ecModel = this.ecModel;
        dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
          var seriesModels = dataZoomModel.getAxisProxy(dimNames.name, axisIndex).getTargetSeriesModels();
          util.each(seriesModels, function (seriesModel) {
            if (result) {
              return;
            }

            if (showDataShadow !== true && util.indexOf(SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')) < 0) {
              return;
            }

            var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
            var otherDim = getOtherDim(dimNames.name);
            var otherAxisInverse;
            var coordSys = seriesModel.coordinateSystem;

            if (otherDim != null && coordSys.getOtherAxis) {
              otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
            }

            otherDim = seriesModel.getData().mapDimension(otherDim);
            result = {
              thisAxis: thisAxis,
              series: seriesModel,
              thisDim: dimNames.name,
              otherDim: otherDim,
              otherAxisInverse: otherAxisInverse
            };
          }, this);
        }, this);
        return result;
      },
      _renderHandle: function () {
        var displaybles = this._displayables;
        var handles = displaybles.handles = [];
        var handleLabels = displaybles.handleLabels = [];
        var barGroup = this._displayables.barGroup;
        var size = this._size;
        var dataZoomModel = this.dataZoomModel;
        barGroup.add(displaybles.filler = new Rect$1({
          draggable: true,
          cursor: getCursor(this._orient),
          drift: bind$1(this._onDragMove, this, 'all'),
          ondragstart: bind$1(this._showDataInfo, this, true),
          ondragend: bind$1(this._onDragEnd, this),
          onmouseover: bind$1(this._showDataInfo, this, true),
          onmouseout: bind$1(this._showDataInfo, this, false),
          style: {
            fill: dataZoomModel.get('fillerColor'),
            textPosition: 'inside'
          }
        })); // Frame border.

        barGroup.add(new Rect$1({
          silent: true,
          subPixelOptimize: true,
          shape: {
            x: 0,
            y: 0,
            width: size[0],
            height: size[1]
          },
          style: {
            stroke: dataZoomModel.get('dataBackgroundColor') || dataZoomModel.get('borderColor'),
            lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
            fill: 'rgba(0,0,0,0)'
          }
        }));
        each$p([0, 1], function (handleIndex) {
          var path = graphic.createIcon(dataZoomModel.get('handleIcon'), {
            cursor: getCursor(this._orient),
            draggable: true,
            drift: bind$1(this._onDragMove, this, handleIndex),
            ondragend: bind$1(this._onDragEnd, this),
            onmouseover: bind$1(this._showDataInfo, this, true),
            onmouseout: bind$1(this._showDataInfo, this, false)
          }, {
            x: -1,
            y: 0,
            width: 2,
            height: 2
          });
          var bRect = path.getBoundingRect();
          this._handleHeight = number.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);
          this._handleWidth = bRect.width / bRect.height * this._handleHeight;
          path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());
          var handleColor = dataZoomModel.get('handleColor'); // Compatitable with previous version

          if (handleColor != null) {
            path.style.fill = handleColor;
          }

          barGroup.add(handles[handleIndex] = path);
          var textStyleModel = dataZoomModel.textStyleModel;
          this.group.add(handleLabels[handleIndex] = new graphic.Text({
            silent: true,
            invisible: true,
            style: {
              x: 0,
              y: 0,
              text: '',
              textVerticalAlign: 'middle',
              textAlign: 'center',
              textFill: textStyleModel.getTextColor(),
              textFont: textStyleModel.getFont()
            },
            z2: 10
          }));
        }, this);
      },

      /**
       * @private
       */
      _resetInterval: function () {
        var range = this._range = this.dataZoomModel.getPercentRange();

        var viewExtent = this._getViewExtent();

        this._handleEnds = [linearMap$2(range[0], [0, 100], viewExtent, true), linearMap$2(range[1], [0, 100], viewExtent, true)];
      },

      /**
       * @private
       * @param {(number|string)} handleIndex 0 or 1 or 'all'
       * @param {number} delta
       * @return {boolean} changed
       */
      _updateInterval: function (handleIndex, delta) {
        var dataZoomModel = this.dataZoomModel;
        var handleEnds = this._handleEnds;

        var viewExtend = this._getViewExtent();

        var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
        var percentExtent = [0, 100];
        sliderMove(delta, handleEnds, viewExtend, dataZoomModel.get('zoomLock') ? 'all' : handleIndex, minMaxSpan.minSpan != null ? linearMap$2(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null, minMaxSpan.maxSpan != null ? linearMap$2(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null);
        var lastRange = this._range;
        var range = this._range = asc$2([linearMap$2(handleEnds[0], viewExtend, percentExtent, true), linearMap$2(handleEnds[1], viewExtend, percentExtent, true)]);
        return !lastRange || lastRange[0] !== range[0] || lastRange[1] !== range[1];
      },

      /**
       * @private
       */
      _updateView: function (nonRealtime) {
        var displaybles = this._displayables;
        var handleEnds = this._handleEnds;
        var handleInterval = asc$2(handleEnds.slice());
        var size = this._size;
        each$p([0, 1], function (handleIndex) {
          // Handles
          var handle = displaybles.handles[handleIndex];
          var handleHeight = this._handleHeight;
          handle.attr({
            scale: [handleHeight / 2, handleHeight / 2],
            position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]
          });
        }, this); // Filler

        displaybles.filler.setShape({
          x: handleInterval[0],
          y: 0,
          width: handleInterval[1] - handleInterval[0],
          height: size[1]
        });

        this._updateDataInfo(nonRealtime);
      },

      /**
       * @private
       */
      _updateDataInfo: function (nonRealtime) {
        var dataZoomModel = this.dataZoomModel;
        var displaybles = this._displayables;
        var handleLabels = displaybles.handleLabels;
        var orient = this._orient;
        var labelTexts = ['', '']; // FIXME
        // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）

        if (dataZoomModel.get('showDetail')) {
          var axisProxy = dataZoomModel.findRepresentativeAxisProxy();

          if (axisProxy) {
            var axis = axisProxy.getAxisModel().axis;
            var range = this._range;
            var dataInterval = nonRealtime // See #4434, data and axis are not processed and reset yet in non-realtime mode.
            ? axisProxy.calculateDataWindow({
              start: range[0],
              end: range[1]
            }).valueWindow : axisProxy.getDataValueWindow();
            labelTexts = [this._formatLabel(dataInterval[0], axis), this._formatLabel(dataInterval[1], axis)];
          }
        }

        var orderedHandleEnds = asc$2(this._handleEnds.slice());
        setLabel.call(this, 0);
        setLabel.call(this, 1);

        function setLabel(handleIndex) {
          // Label
          // Text should not transform by barGroup.
          // Ignore handlers transform
          var barTransform = graphic.getTransform(displaybles.handles[handleIndex].parent, this.group);
          var direction = graphic.transformDirection(handleIndex === 0 ? 'right' : 'left', barTransform);
          var offset = this._handleWidth / 2 + LABEL_GAP;
          var textPoint = graphic.applyTransform([orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset), this._size[1] / 2], barTransform);
          handleLabels[handleIndex].setStyle({
            x: textPoint[0],
            y: textPoint[1],
            textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
            textAlign: orient === HORIZONTAL ? direction : 'center',
            text: labelTexts[handleIndex]
          });
        }
      },

      /**
       * @private
       */
      _formatLabel: function (value, axis) {
        var dataZoomModel = this.dataZoomModel;
        var labelFormatter = dataZoomModel.get('labelFormatter');
        var labelPrecision = dataZoomModel.get('labelPrecision');

        if (labelPrecision == null || labelPrecision === 'auto') {
          labelPrecision = axis.getPixelPrecision();
        }

        var valueStr = value == null || isNaN(value) ? '' // FIXME Glue code
        : axis.type === 'category' || axis.type === 'time' ? axis.scale.getLabel(Math.round(value)) // param of toFixed should less then 20.
        : value.toFixed(Math.min(labelPrecision, 20));
        return util.isFunction(labelFormatter) ? labelFormatter(value, valueStr) : util.isString(labelFormatter) ? labelFormatter.replace('{value}', valueStr) : valueStr;
      },

      /**
       * @private
       * @param {boolean} showOrHide true: show, false: hide
       */
      _showDataInfo: function (showOrHide) {
        // Always show when drgging.
        showOrHide = this._dragging || showOrHide;
        var handleLabels = this._displayables.handleLabels;
        handleLabels[0].attr('invisible', !showOrHide);
        handleLabels[1].attr('invisible', !showOrHide);
      },
      _onDragMove: function (handleIndex, dx, dy, event$1) {
        this._dragging = true; // For mobile device, prevent screen slider on the button.

        event.stop(event$1.event); // Transform dx, dy to bar coordination.

        var barTransform = this._displayables.barGroup.getLocalTransform();

        var vertex = graphic.applyTransform([dx, dy], barTransform, true);

        var changed = this._updateInterval(handleIndex, vertex[0]);

        var realtime = this.dataZoomModel.get('realtime');

        this._updateView(!realtime); // Avoid dispatch dataZoom repeatly but range not changed,
        // which cause bad visual effect when progressive enabled.


        changed && realtime && this._dispatchZoomAction();
      },
      _onDragEnd: function () {
        this._dragging = false;

        this._showDataInfo(false); // While in realtime mode and stream mode, dispatch action when
        // drag end will cause the whole view rerender, which is unnecessary.


        var realtime = this.dataZoomModel.get('realtime');
        !realtime && this._dispatchZoomAction();
      },
      _onClickPanelClick: function (e) {
        var size = this._size;

        var localPoint = this._displayables.barGroup.transformCoordToLocal(e.offsetX, e.offsetY);

        if (localPoint[0] < 0 || localPoint[0] > size[0] || localPoint[1] < 0 || localPoint[1] > size[1]) {
          return;
        }

        var handleEnds = this._handleEnds;
        var center = (handleEnds[0] + handleEnds[1]) / 2;

        var changed = this._updateInterval('all', localPoint[0] - center);

        this._updateView();

        changed && this._dispatchZoomAction();
      },

      /**
       * This action will be throttled.
       * @private
       */
      _dispatchZoomAction: function () {
        var range = this._range;
        this.api.dispatchAction({
          type: 'dataZoom',
          from: this.uid,
          dataZoomId: this.dataZoomModel.id,
          start: range[0],
          end: range[1]
        });
      },

      /**
       * @private
       */
      _findCoordRect: function () {
        // Find the grid coresponding to the first axis referred by dataZoom.
        var rect;
        each$p(this.getTargetCoordInfo(), function (coordInfoList) {
          if (!rect && coordInfoList.length) {
            var coordSys = coordInfoList[0].model.coordinateSystem;
            rect = coordSys.getRect && coordSys.getRect();
          }
        });

        if (!rect) {
          var width = this.api.getWidth();
          var height = this.api.getHeight();
          rect = {
            x: width * 0.2,
            y: height * 0.2,
            width: width * 0.6,
            height: height * 0.6
          };
        }

        return rect;
      }
    });

    function getOtherDim(thisDim) {
      // FIXME
      // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
      var map = {
        x: 'y',
        y: 'x',
        radius: 'angle',
        angle: 'radius'
      };
      return map[thisDim];
    }

    function getCursor(orient) {
      return orient === 'vertical' ? 'ns-resize' : 'ew-resize';
    }

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var createHashMap$b = util.createHashMap;
    var each$q = util.each;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    echarts.registerProcessor({
      // `dataZoomProcessor` will only be performed in needed series. Consider if
      // there is a line series and a pie series, it is better not to update the
      // line series if only pie series is needed to be updated.
      getTargetSeries: function (ecModel) {
        var seriesModelMap = createHashMap$b();
        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
          dataZoomModel.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel) {
            var axisProxy = dataZoomModel.getAxisProxy(dimNames.name, axisIndex);
            each$q(axisProxy.getTargetSeriesModels(), function (seriesModel) {
              seriesModelMap.set(seriesModel.uid, seriesModel);
            });
          });
        });
        return seriesModelMap;
      },
      modifyOutputEnd: true,
      // Consider appendData, where filter should be performed. Because data process is
      // in block mode currently, it is not need to worry about that the overallProgress
      // execute every frame.
      overallReset: function (ecModel, api) {
        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
          // We calculate window and reset axis here but not in model
          // init stage and not after action dispatch handler, because
          // reset should be called after seriesData.restoreData.
          dataZoomModel.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel) {
            dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel, api);
          }); // Caution: data zoom filtering is order sensitive when using
          // percent range and no min/max/scale set on axis.
          // For example, we have dataZoom definition:
          // [
          //      {xAxisIndex: 0, start: 30, end: 70},
          //      {yAxisIndex: 0, start: 20, end: 80}
          // ]
          // In this case, [20, 80] of y-dataZoom should be based on data
          // that have filtered by x-dataZoom using range of [30, 70],
          // but should not be based on full raw data. Thus sliding
          // x-dataZoom will change both ranges of xAxis and yAxis,
          // while sliding y-dataZoom will only change the range of yAxis.
          // So we should filter x-axis after reset x-axis immediately,
          // and then reset y-axis and filter y-axis.

          dataZoomModel.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel) {
            dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel, api);
          });
        });
        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
          // Fullfill all of the range props so that user
          // is able to get them from chart.getOption().
          var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
          var percentRange = axisProxy.getDataPercentWindow();
          var valueRange = axisProxy.getDataValueWindow();
          dataZoomModel.setCalculatedRange({
            start: percentRange[0],
            end: percentRange[1],
            startValue: valueRange[0],
            endValue: valueRange[1]
          });
        });
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    echarts.registerAction('dataZoom', function (payload, ecModel) {
      var linkedNodesFinder = helper$4.createLinkedNodesFinder(util.bind(ecModel.eachComponent, ecModel, 'dataZoom'), helper$4.eachAxisDim, function (model, dimNames) {
        return model.get(dimNames.axisIndex);
      });
      var effectedModels = [];
      ecModel.eachComponent({
        mainType: 'dataZoom',
        query: payload
      }, function (model, index) {
        effectedModels.push.apply(effectedModels, linkedNodesFinder(model).nodes);
      });
      util.each(effectedModels, function (dataZoomModel, index) {
        dataZoomModel.setRawRange({
          start: payload.start,
          end: payload.end,
          startValue: payload.startValue,
          endValue: payload.endValue
        });
      });
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$1M = DataZoomModel_1.extend({
      type: 'dataZoom.inside',

      /**
       * @protected
       */
      defaultOption: {
        disabled: false,
        // Whether disable this inside zoom.
        zoomLock: false,
        // Whether disable zoom but only pan.
        zoomOnMouseWheel: true,
        // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
        moveOnMouseMove: true,
        // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
        moveOnMouseWheel: false,
        // Can be: true / false / 'shift' / 'ctrl' / 'alt'.
        preventDefaultMouseMove: true
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var ATTR = '\0_ec_interaction_mutex';

    function take(zr, resourceKey, userKey) {
      var store = getStore(zr);
      store[resourceKey] = userKey;
    }

    function release(zr, resourceKey, userKey) {
      var store = getStore(zr);
      var uKey = store[resourceKey];

      if (uKey === userKey) {
        store[resourceKey] = null;
      }
    }

    function isTaken(zr, resourceKey) {
      return !!getStore(zr)[resourceKey];
    }

    function getStore(zr) {
      return zr[ATTR] || (zr[ATTR] = {});
    }
    /**
     * payload: {
     *     type: 'takeGlobalCursor',
     *     key: 'dataZoomSelect', or 'brush', or ...,
     *         If no userKey, release global cursor.
     * }
     */


    echarts.registerAction({
      type: 'takeGlobalCursor',
      event: 'globalCursorTaken',
      update: 'update'
    }, function () {});
    var take_1 = take;
    var release_1 = release;
    var isTaken_1 = isTaken;

    var interactionMutex = {
    	take: take_1,
    	release: release_1,
    	isTaken: isTaken_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @alias module:echarts/component/helper/RoamController
     * @constructor
     * @mixin {module:zrender/mixin/Eventful}
     *
     * @param {module:zrender/zrender~ZRender} zr
     */
    function RoamController(zr) {
      /**
       * @type {Function}
       */
      this.pointerChecker;
      /**
       * @type {module:zrender}
       */

      this._zr = zr;
      /**
       * @type {Object}
       */

      this._opt = {}; // Avoid two roamController bind the same handler

      var bind = util.bind;
      var mousedownHandler = bind(mousedown, this);
      var mousemoveHandler = bind(mousemove, this);
      var mouseupHandler = bind(mouseup, this);
      var mousewheelHandler = bind(mousewheel, this);
      var pinchHandler = bind(pinch, this);
      Eventful_1.call(this);
      /**
       * @param {Function} pointerChecker
       *                   input: x, y
       *                   output: boolean
       */

      this.setPointerChecker = function (pointerChecker) {
        this.pointerChecker = pointerChecker;
      };
      /**
       * Notice: only enable needed types. For example, if 'zoom'
       * is not needed, 'zoom' should not be enabled, otherwise
       * default mousewheel behaviour (scroll page) will be disabled.
       *
       * @param  {boolean|string} [controlType=true] Specify the control type,
       *                          which can be null/undefined or true/false
       *                          or 'pan/move' or 'zoom'/'scale'
       * @param {Object} [opt]
       * @param {Object} [opt.zoomOnMouseWheel=true] The value can be: true / false / 'shift' / 'ctrl' / 'alt'.
       * @param {Object} [opt.moveOnMouseMove=true] The value can be: true / false / 'shift' / 'ctrl' / 'alt'.
       * @param {Object} [opt.moveOnMouseWheel=false] The value can be: true / false / 'shift' / 'ctrl' / 'alt'.
       * @param {Object} [opt.preventDefaultMouseMove=true] When pan.
       */


      this.enable = function (controlType, opt) {
        // Disable previous first
        this.disable();
        this._opt = util.defaults(util.clone(opt) || {}, {
          zoomOnMouseWheel: true,
          moveOnMouseMove: true,
          // By default, wheel do not trigger move.
          moveOnMouseWheel: false,
          preventDefaultMouseMove: true
        });

        if (controlType == null) {
          controlType = true;
        }

        if (controlType === true || controlType === 'move' || controlType === 'pan') {
          zr.on('mousedown', mousedownHandler);
          zr.on('mousemove', mousemoveHandler);
          zr.on('mouseup', mouseupHandler);
        }

        if (controlType === true || controlType === 'scale' || controlType === 'zoom') {
          zr.on('mousewheel', mousewheelHandler);
          zr.on('pinch', pinchHandler);
        }
      };

      this.disable = function () {
        zr.off('mousedown', mousedownHandler);
        zr.off('mousemove', mousemoveHandler);
        zr.off('mouseup', mouseupHandler);
        zr.off('mousewheel', mousewheelHandler);
        zr.off('pinch', pinchHandler);
      };

      this.dispose = this.disable;

      this.isDragging = function () {
        return this._dragging;
      };

      this.isPinching = function () {
        return this._pinching;
      };
    }

    util.mixin(RoamController, Eventful_1);

    function mousedown(e) {
      if (event.isMiddleOrRightButtonOnMouseUpDown(e) || e.target && e.target.draggable) {
        return;
      }

      var x = e.offsetX;
      var y = e.offsetY; // Only check on mosedown, but not mousemove.
      // Mouse can be out of target when mouse moving.

      if (this.pointerChecker && this.pointerChecker(e, x, y)) {
        this._x = x;
        this._y = y;
        this._dragging = true;
      }
    }

    function mousemove(e) {
      if (!this._dragging || !isAvailableBehavior('moveOnMouseMove', e, this._opt) || e.gestureEvent === 'pinch' || interactionMutex.isTaken(this._zr, 'globalPan')) {
        return;
      }

      var x = e.offsetX;
      var y = e.offsetY;
      var oldX = this._x;
      var oldY = this._y;
      var dx = x - oldX;
      var dy = y - oldY;
      this._x = x;
      this._y = y;
      this._opt.preventDefaultMouseMove && event.stop(e.event);
      trigger(this, 'pan', 'moveOnMouseMove', e, {
        dx: dx,
        dy: dy,
        oldX: oldX,
        oldY: oldY,
        newX: x,
        newY: y
      });
    }

    function mouseup(e) {
      if (!event.isMiddleOrRightButtonOnMouseUpDown(e)) {
        this._dragging = false;
      }
    }

    function mousewheel(e) {
      var shouldZoom = isAvailableBehavior('zoomOnMouseWheel', e, this._opt);
      var shouldMove = isAvailableBehavior('moveOnMouseWheel', e, this._opt);
      var wheelDelta = e.wheelDelta;
      var absWheelDeltaDelta = Math.abs(wheelDelta);
      var originX = e.offsetX;
      var originY = e.offsetY; // wheelDelta maybe -0 in chrome mac.

      if (wheelDelta === 0 || !shouldZoom && !shouldMove) {
        return;
      } // If both `shouldZoom` and `shouldMove` is true, trigger
      // their event both, and the final behavior is determined
      // by event listener themselves.


      if (shouldZoom) {
        // Convenience:
        // Mac and VM Windows on Mac: scroll up: zoom out.
        // Windows: scroll up: zoom in.
        // FIXME: Should do more test in different environment.
        // wheelDelta is too complicated in difference nvironment
        // (https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel),
        // although it has been normallized by zrender.
        // wheelDelta of mouse wheel is bigger than touch pad.
        var factor = absWheelDeltaDelta > 3 ? 1.4 : absWheelDeltaDelta > 1 ? 1.2 : 1.1;
        var scale = wheelDelta > 0 ? factor : 1 / factor;
        checkPointerAndTrigger(this, 'zoom', 'zoomOnMouseWheel', e, {
          scale: scale,
          originX: originX,
          originY: originY
        });
      }

      if (shouldMove) {
        // FIXME: Should do more test in different environment.
        var absDelta = Math.abs(wheelDelta); // wheelDelta of mouse wheel is bigger than touch pad.

        var scrollDelta = (wheelDelta > 0 ? 1 : -1) * (absDelta > 3 ? 0.4 : absDelta > 1 ? 0.15 : 0.05);
        checkPointerAndTrigger(this, 'scrollMove', 'moveOnMouseWheel', e, {
          scrollDelta: scrollDelta,
          originX: originX,
          originY: originY
        });
      }
    }

    function pinch(e) {
      if (interactionMutex.isTaken(this._zr, 'globalPan')) {
        return;
      }

      var scale = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
      checkPointerAndTrigger(this, 'zoom', null, e, {
        scale: scale,
        originX: e.pinchX,
        originY: e.pinchY
      });
    }

    function checkPointerAndTrigger(controller, eventName, behaviorToCheck, e, contollerEvent) {
      if (controller.pointerChecker && controller.pointerChecker(e, contollerEvent.originX, contollerEvent.originY)) {
        // When mouse is out of roamController rect,
        // default befavoius should not be be disabled, otherwise
        // page sliding is disabled, contrary to expectation.
        event.stop(e.event);
        trigger(controller, eventName, behaviorToCheck, e, contollerEvent);
      }
    }

    function trigger(controller, eventName, behaviorToCheck, e, contollerEvent) {
      // Also provide behavior checker for event listener, for some case that
      // multiple components share one listener.
      contollerEvent.isAvailableBehavior = util.bind(isAvailableBehavior, null, behaviorToCheck, e);
      controller.trigger(eventName, contollerEvent);
    } // settings: {
    //     zoomOnMouseWheel
    //     moveOnMouseMove
    //     moveOnMouseWheel
    // }
    // The value can be: true / false / 'shift' / 'ctrl' / 'alt'.


    function isAvailableBehavior(behaviorToCheck, e, settings) {
      var setting = settings[behaviorToCheck];
      return !behaviorToCheck || setting && (!util.isString(setting) || e.event[setting + 'Key']);
    }

    var _default$1N = RoamController;
    var RoamController_1 = _default$1N;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // Only create one roam controller for each coordinate system.
    // one roam controller might be refered by two inside data zoom
    // components (for example, one for x and one for y). When user
    // pan or zoom, only dispatch one action for those data zoom
    // components.
    var ATTR$1 = '\0_ec_dataZoom_roams';
    /**
     * @public
     * @param {module:echarts/ExtensionAPI} api
     * @param {Object} dataZoomInfo
     * @param {string} dataZoomInfo.coordId
     * @param {Function} dataZoomInfo.containsPoint
     * @param {Array.<string>} dataZoomInfo.allCoordIds
     * @param {string} dataZoomInfo.dataZoomId
     * @param {Object} dataZoomInfo.getRange
     * @param {Function} dataZoomInfo.getRange.pan
     * @param {Function} dataZoomInfo.getRange.zoom
     * @param {Function} dataZoomInfo.getRange.scrollMove
     * @param {boolean} dataZoomInfo.dataZoomModel
     */

    function register(api, dataZoomInfo) {
      var store = giveStore(api);
      var theDataZoomId = dataZoomInfo.dataZoomId;
      var theCoordId = dataZoomInfo.coordId; // Do clean when a dataZoom changes its target coordnate system.
      // Avoid memory leak, dispose all not-used-registered.

      util.each(store, function (record, coordId) {
        var dataZoomInfos = record.dataZoomInfos;

        if (dataZoomInfos[theDataZoomId] && util.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0) {
          delete dataZoomInfos[theDataZoomId];
          record.count--;
        }
      });
      cleanStore(store);
      var record = store[theCoordId]; // Create if needed.

      if (!record) {
        record = store[theCoordId] = {
          coordId: theCoordId,
          dataZoomInfos: {},
          count: 0
        };
        record.controller = createController(api, record);
        record.dispatchAction = util.curry(dispatchAction, api);
      } // Update reference of dataZoom.


      !record.dataZoomInfos[theDataZoomId] && record.count++;
      record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
      var controllerParams = mergeControllerParams(record.dataZoomInfos);
      record.controller.enable(controllerParams.controlType, controllerParams.opt); // Consider resize, area should be always updated.

      record.controller.setPointerChecker(dataZoomInfo.containsPoint); // Update throttle.

      throttle_1.createOrUpdate(record, 'dispatchAction', dataZoomInfo.dataZoomModel.get('throttle', true), 'fixRate');
    }
    /**
     * @public
     * @param {module:echarts/ExtensionAPI} api
     * @param {string} dataZoomId
     */


    function unregister(api, dataZoomId) {
      var store = giveStore(api);
      util.each(store, function (record) {
        record.controller.dispose();
        var dataZoomInfos = record.dataZoomInfos;

        if (dataZoomInfos[dataZoomId]) {
          delete dataZoomInfos[dataZoomId];
          record.count--;
        }
      });
      cleanStore(store);
    }
    /**
     * @public
     */


    function generateCoordId(coordModel) {
      return coordModel.type + '\0_' + coordModel.id;
    }
    /**
     * Key: coordId, value: {dataZoomInfos: [], count, controller}
     * @type {Array.<Object>}
     */


    function giveStore(api) {
      // Mount store on zrender instance, so that we do not
      // need to worry about dispose.
      var zr = api.getZr();
      return zr[ATTR$1] || (zr[ATTR$1] = {});
    }

    function createController(api, newRecord) {
      var controller = new RoamController_1(api.getZr());
      util.each(['pan', 'zoom', 'scrollMove'], function (eventName) {
        controller.on(eventName, function (event) {
          var batch = [];
          util.each(newRecord.dataZoomInfos, function (info) {
            // Check whether the behaviors (zoomOnMouseWheel, moveOnMouseMove,
            // moveOnMouseWheel, ...) enabled.
            if (!event.isAvailableBehavior(info.dataZoomModel.option)) {
              return;
            }

            var method = (info.getRange || {})[eventName];
            var range = method && method(newRecord.controller, event);
            !info.dataZoomModel.get('disabled', true) && range && batch.push({
              dataZoomId: info.dataZoomId,
              start: range[0],
              end: range[1]
            });
          });
          batch.length && newRecord.dispatchAction(batch);
        });
      });
      return controller;
    }

    function cleanStore(store) {
      util.each(store, function (record, coordId) {
        if (!record.count) {
          record.controller.dispose();
          delete store[coordId];
        }
      });
    }
    /**
     * This action will be throttled.
     */


    function dispatchAction(api, batch) {
      api.dispatchAction({
        type: 'dataZoom',
        batch: batch
      });
    }
    /**
     * Merge roamController settings when multiple dataZooms share one roamController.
     */


    function mergeControllerParams(dataZoomInfos) {
      var controlType; // DO NOT use reserved word (true, false, undefined) as key literally. Even if encapsulated
      // as string, it is probably revert to reserved word by compress tool. See #7411.

      var prefix = 'type_';
      var typePriority = {
        'type_true': 2,
        'type_move': 1,
        'type_false': 0,
        'type_undefined': -1
      };
      var preventDefaultMouseMove = true;
      util.each(dataZoomInfos, function (dataZoomInfo) {
        var dataZoomModel = dataZoomInfo.dataZoomModel;
        var oneType = dataZoomModel.get('disabled', true) ? false : dataZoomModel.get('zoomLock', true) ? 'move' : true;

        if (typePriority[prefix + oneType] > typePriority[prefix + controlType]) {
          controlType = oneType;
        } // Prevent default move event by default. If one false, do not prevent. Otherwise
        // users may be confused why it does not work when multiple insideZooms exist.


        preventDefaultMouseMove &= dataZoomModel.get('preventDefaultMouseMove', true);
      });
      return {
        controlType: controlType,
        opt: {
          // RoamController will enable all of these functionalities,
          // and the final behavior is determined by its event listener
          // provided by each inside zoom.
          zoomOnMouseWheel: true,
          moveOnMouseMove: true,
          moveOnMouseWheel: true,
          preventDefaultMouseMove: !!preventDefaultMouseMove
        }
      };
    }

    var register_1 = register;
    var unregister_1 = unregister;
    var generateCoordId_1 = generateCoordId;

    var roams = {
    	register: register_1,
    	unregister: unregister_1,
    	generateCoordId: generateCoordId_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var bind$2 = util.bind;
    var InsideZoomView = DataZoomView.extend({
      type: 'dataZoom.inside',

      /**
       * @override
       */
      init: function (ecModel, api) {
        /**
         * 'throttle' is used in this.dispatchAction, so we save range
         * to avoid missing some 'pan' info.
         * @private
         * @type {Array.<number>}
         */
        this._range;
      },

      /**
       * @override
       */
      render: function (dataZoomModel, ecModel, api, payload) {
        InsideZoomView.superApply(this, 'render', arguments); // Hence the `throttle` util ensures to preserve command order,
        // here simply updating range all the time will not cause missing
        // any of the the roam change.

        this._range = dataZoomModel.getPercentRange(); // Reset controllers.

        util.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {
          var allCoordIds = util.map(coordInfoList, function (coordInfo) {
            return roams.generateCoordId(coordInfo.model);
          });
          util.each(coordInfoList, function (coordInfo) {
            var coordModel = coordInfo.model;
            var getRange = {};
            util.each(['pan', 'zoom', 'scrollMove'], function (eventName) {
              getRange[eventName] = bind$2(roamHandlers[eventName], this, coordInfo, coordSysName);
            }, this);
            roams.register(api, {
              coordId: roams.generateCoordId(coordModel),
              allCoordIds: allCoordIds,
              containsPoint: function (e, x, y) {
                return coordModel.coordinateSystem.containPoint([x, y]);
              },
              dataZoomId: dataZoomModel.id,
              dataZoomModel: dataZoomModel,
              getRange: getRange
            });
          }, this);
        }, this);
      },

      /**
       * @override
       */
      dispose: function () {
        roams.unregister(this.api, this.dataZoomModel.id);
        InsideZoomView.superApply(this, 'dispose', arguments);
        this._range = null;
      }
    });
    var roamHandlers = {
      /**
       * @this {module:echarts/component/dataZoom/InsideZoomView}
       */
      zoom: function (coordInfo, coordSysName, controller, e) {
        var lastRange = this._range;
        var range = lastRange.slice(); // Calculate transform by the first axis.

        var axisModel = coordInfo.axisModels[0];

        if (!axisModel) {
          return;
        }

        var directionInfo = getDirectionInfo[coordSysName](null, [e.originX, e.originY], axisModel, controller, coordInfo);
        var percentPoint = (directionInfo.signal > 0 ? directionInfo.pixelStart + directionInfo.pixelLength - directionInfo.pixel : directionInfo.pixel - directionInfo.pixelStart) / directionInfo.pixelLength * (range[1] - range[0]) + range[0];
        var scale = Math.max(1 / e.scale, 0);
        range[0] = (range[0] - percentPoint) * scale + percentPoint;
        range[1] = (range[1] - percentPoint) * scale + percentPoint; // Restrict range.

        var minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
        sliderMove(0, range, [0, 100], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);
        this._range = range;

        if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) {
          return range;
        }
      },

      /**
       * @this {module:echarts/component/dataZoom/InsideZoomView}
       */
      pan: makeMover(function (range, axisModel, coordInfo, coordSysName, controller, e) {
        var directionInfo = getDirectionInfo[coordSysName]([e.oldX, e.oldY], [e.newX, e.newY], axisModel, controller, coordInfo);
        return directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;
      }),

      /**
       * @this {module:echarts/component/dataZoom/InsideZoomView}
       */
      scrollMove: makeMover(function (range, axisModel, coordInfo, coordSysName, controller, e) {
        var directionInfo = getDirectionInfo[coordSysName]([0, 0], [e.scrollDelta, e.scrollDelta], axisModel, controller, coordInfo);
        return directionInfo.signal * (range[1] - range[0]) * e.scrollDelta;
      })
    };

    function makeMover(getPercentDelta) {
      return function (coordInfo, coordSysName, controller, e) {
        var lastRange = this._range;
        var range = lastRange.slice(); // Calculate transform by the first axis.

        var axisModel = coordInfo.axisModels[0];

        if (!axisModel) {
          return;
        }

        var percentDelta = getPercentDelta(range, axisModel, coordInfo, coordSysName, controller, e);
        sliderMove(percentDelta, range, [0, 100], 'all');
        this._range = range;

        if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) {
          return range;
        }
      };
    }

    var getDirectionInfo = {
      grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
        var axis = axisModel.axis;
        var ret = {};
        var rect = coordInfo.model.coordinateSystem.getRect();
        oldPoint = oldPoint || [0, 0];

        if (axis.dim === 'x') {
          ret.pixel = newPoint[0] - oldPoint[0];
          ret.pixelLength = rect.width;
          ret.pixelStart = rect.x;
          ret.signal = axis.inverse ? 1 : -1;
        } else {
          // axis.dim === 'y'
          ret.pixel = newPoint[1] - oldPoint[1];
          ret.pixelLength = rect.height;
          ret.pixelStart = rect.y;
          ret.signal = axis.inverse ? -1 : 1;
        }

        return ret;
      },
      polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
        var axis = axisModel.axis;
        var ret = {};
        var polar = coordInfo.model.coordinateSystem;
        var radiusExtent = polar.getRadiusAxis().getExtent();
        var angleExtent = polar.getAngleAxis().getExtent();
        oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];
        newPoint = polar.pointToCoord(newPoint);

        if (axisModel.mainType === 'radiusAxis') {
          ret.pixel = newPoint[0] - oldPoint[0]; // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
          // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);

          ret.pixelLength = radiusExtent[1] - radiusExtent[0];
          ret.pixelStart = radiusExtent[0];
          ret.signal = axis.inverse ? 1 : -1;
        } else {
          // 'angleAxis'
          ret.pixel = newPoint[1] - oldPoint[1]; // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
          // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);

          ret.pixelLength = angleExtent[1] - angleExtent[0];
          ret.pixelStart = angleExtent[0];
          ret.signal = axis.inverse ? -1 : 1;
        }

        return ret;
      },
      singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
        var axis = axisModel.axis;
        var rect = coordInfo.model.coordinateSystem.getRect();
        var ret = {};
        oldPoint = oldPoint || [0, 0];

        if (axis.orient === 'horizontal') {
          ret.pixel = newPoint[0] - oldPoint[0];
          ret.pixelLength = rect.width;
          ret.pixelStart = rect.x;
          ret.signal = axis.inverse ? 1 : -1;
        } else {
          // 'vertical'
          ret.pixel = newPoint[1] - oldPoint[1];
          ret.pixelLength = rect.height;
          ret.pixelStart = rect.y;
          ret.signal = axis.inverse ? -1 : 1;
        }

        return ret;
      }
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @param {Object} finder contains {seriesIndex, dataIndex, dataIndexInside}
     * @param {module:echarts/model/Global} ecModel
     * @return {Object} {point: [x, y], el: ...} point Will not be null.
     */
    function _default$1O(finder, ecModel) {
      var point = [];
      var seriesIndex = finder.seriesIndex;
      var seriesModel;

      if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {
        return {
          point: []
        };
      }

      var data = seriesModel.getData();
      var dataIndex = model.queryDataIndex(data, finder);

      if (dataIndex == null || dataIndex < 0 || util.isArray(dataIndex)) {
        return {
          point: []
        };
      }

      var el = data.getItemGraphicEl(dataIndex);
      var coordSys = seriesModel.coordinateSystem;

      if (seriesModel.getTooltipPosition) {
        point = seriesModel.getTooltipPosition(dataIndex) || [];
      } else if (coordSys && coordSys.dataToPoint) {
        point = coordSys.dataToPoint(data.getValues(util.map(coordSys.dimensions, function (dim) {
          return data.mapDimension(dim);
        }), dataIndex, true)) || [];
      } else if (el) {
        // Use graphic bounding rect
        var rect = el.getBoundingRect().clone();
        rect.applyTransform(el.transform);
        point = [rect.x + rect.width / 2, rect.y + rect.height / 2];
      }

      return {
        point: point,
        el: el
      };
    }

    var findPointFromSeries = _default$1O;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    var makeInner$7 = model.makeInner;





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$r = util.each;
    var curry$2 = util.curry;
    var inner$7 = makeInner$7();
    /**
     * Basic logic: check all axis, if they do not demand show/highlight,
     * then hide/downplay them.
     *
     * @param {Object} coordSysAxesInfo
     * @param {Object} payload
     * @param {string} [payload.currTrigger] 'click' | 'mousemove' | 'leave'
     * @param {Array.<number>} [payload.x] x and y, which are mandatory, specify a point to
     *              trigger axisPointer and tooltip.
     * @param {Array.<number>} [payload.y] x and y, which are mandatory, specify a point to
     *              trigger axisPointer and tooltip.
     * @param {Object} [payload.seriesIndex] finder, optional, restrict target axes.
     * @param {Object} [payload.dataIndex] finder, restrict target axes.
     * @param {Object} [payload.axesInfo] finder, restrict target axes.
     *        [{
     *          axisDim: 'x'|'y'|'angle'|...,
     *          axisIndex: ...,
     *          value: ...
     *        }, ...]
     * @param {Function} [payload.dispatchAction]
     * @param {Object} [payload.tooltipOption]
     * @param {Object|Array.<number>|Function} [payload.position] Tooltip position,
     *        which can be specified in dispatchAction
     * @param {module:echarts/model/Global} ecModel
     * @param {module:echarts/ExtensionAPI} api
     * @return {Object} content of event obj for echarts.connect.
     */

    function _default$1P(payload, ecModel, api) {
      var currTrigger = payload.currTrigger;
      var point = [payload.x, payload.y];
      var finder = payload;
      var dispatchAction = payload.dispatchAction || util.bind(api.dispatchAction, api);
      var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo; // Pending
      // See #6121. But we are not able to reproduce it yet.

      if (!coordSysAxesInfo) {
        return;
      }

      if (illegalPoint(point)) {
        // Used in the default behavior of `connection`: use the sample seriesIndex
        // and dataIndex. And also used in the tooltipView trigger.
        point = findPointFromSeries({
          seriesIndex: finder.seriesIndex,
          // Do not use dataIndexInside from other ec instance.
          // FIXME: auto detect it?
          dataIndex: finder.dataIndex
        }, ecModel).point;
      }

      var isIllegalPoint = illegalPoint(point); // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).
      // Notice: In this case, it is difficult to get the `point` (which is necessary to show
      // tooltip, so if point is not given, we just use the point found by sample seriesIndex
      // and dataIndex.

      var inputAxesInfo = finder.axesInfo;
      var axesInfo = coordSysAxesInfo.axesInfo;
      var shouldHide = currTrigger === 'leave' || illegalPoint(point);
      var outputFinder = {};
      var showValueMap = {};
      var dataByCoordSys = {
        list: [],
        map: {}
      };
      var updaters = {
        showPointer: curry$2(showPointer, showValueMap),
        showTooltip: curry$2(showTooltip, dataByCoordSys)
      }; // Process for triggered axes.

      each$r(coordSysAxesInfo.coordSysMap, function (coordSys, coordSysKey) {
        // If a point given, it must be contained by the coordinate system.
        var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);
        each$r(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function (axisInfo, key) {
          var axis = axisInfo.axis;
          var inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo); // If no inputAxesInfo, no axis is restricted.

          if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {
            var val = inputAxisInfo && inputAxisInfo.value;

            if (val == null && !isIllegalPoint) {
              val = axis.pointToData(point);
            }

            val != null && processOnAxis(axisInfo, val, updaters, false, outputFinder);
          }
        });
      }); // Process for linked axes.

      var linkTriggers = {};
      each$r(axesInfo, function (tarAxisInfo, tarKey) {
        var linkGroup = tarAxisInfo.linkGroup; // If axis has been triggered in the previous stage, it should not be triggered by link.

        if (linkGroup && !showValueMap[tarKey]) {
          each$r(linkGroup.axesInfo, function (srcAxisInfo, srcKey) {
            var srcValItem = showValueMap[srcKey]; // If srcValItem exist, source axis is triggered, so link to target axis.

            if (srcAxisInfo !== tarAxisInfo && srcValItem) {
              var val = srcValItem.value;
              linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));
              linkTriggers[tarAxisInfo.key] = val;
            }
          });
        }
      });
      each$r(linkTriggers, function (val, tarKey) {
        processOnAxis(axesInfo[tarKey], val, updaters, true, outputFinder);
      });
      updateModelActually(showValueMap, axesInfo, outputFinder);
      dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);
      dispatchHighDownActually(axesInfo, dispatchAction, api);
      return outputFinder;
    }

    function processOnAxis(axisInfo, newValue, updaters, dontSnap, outputFinder) {
      var axis = axisInfo.axis;

      if (axis.scale.isBlank() || !axis.containData(newValue)) {
        return;
      }

      if (!axisInfo.involveSeries) {
        updaters.showPointer(axisInfo, newValue);
        return;
      } // Heavy calculation. So put it after axis.containData checking.


      var payloadInfo = buildPayloadsBySeries(newValue, axisInfo);
      var payloadBatch = payloadInfo.payloadBatch;
      var snapToValue = payloadInfo.snapToValue; // Fill content of event obj for echarts.connect.
      // By defualt use the first involved series data as a sample to connect.

      if (payloadBatch[0] && outputFinder.seriesIndex == null) {
        util.extend(outputFinder, payloadBatch[0]);
      } // If no linkSource input, this process is for collecting link
      // target, where snap should not be accepted.


      if (!dontSnap && axisInfo.snap) {
        if (axis.containData(snapToValue) && snapToValue != null) {
          newValue = snapToValue;
        }
      }

      updaters.showPointer(axisInfo, newValue, payloadBatch, outputFinder); // Tooltip should always be snapToValue, otherwise there will be
      // incorrect "axis value ~ series value" mapping displayed in tooltip.

      updaters.showTooltip(axisInfo, payloadInfo, snapToValue);
    }

    function buildPayloadsBySeries(value, axisInfo) {
      var axis = axisInfo.axis;
      var dim = axis.dim;
      var snapToValue = value;
      var payloadBatch = [];
      var minDist = Number.MAX_VALUE;
      var minDiff = -1;
      each$r(axisInfo.seriesModels, function (series, idx) {
        var dataDim = series.getData().mapDimension(dim, true);
        var seriesNestestValue;
        var dataIndices;

        if (series.getAxisTooltipData) {
          var result = series.getAxisTooltipData(dataDim, value, axis);
          dataIndices = result.dataIndices;
          seriesNestestValue = result.nestestValue;
        } else {
          dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex
          // when data length is not same.
          // false,
          axis.type === 'category' ? 0.5 : null);

          if (!dataIndices.length) {
            return;
          }

          seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);
        }

        if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {
          return;
        }

        var diff = value - seriesNestestValue;
        var dist = Math.abs(diff); // Consider category case

        if (dist <= minDist) {
          if (dist < minDist || diff >= 0 && minDiff < 0) {
            minDist = dist;
            minDiff = diff;
            snapToValue = seriesNestestValue;
            payloadBatch.length = 0;
          }

          each$r(dataIndices, function (dataIndex) {
            payloadBatch.push({
              seriesIndex: series.seriesIndex,
              dataIndexInside: dataIndex,
              dataIndex: series.getData().getRawIndex(dataIndex)
            });
          });
        }
      });
      return {
        payloadBatch: payloadBatch,
        snapToValue: snapToValue
      };
    }

    function showPointer(showValueMap, axisInfo, value, payloadBatch) {
      showValueMap[axisInfo.key] = {
        value: value,
        payloadBatch: payloadBatch
      };
    }

    function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {
      var payloadBatch = payloadInfo.payloadBatch;
      var axis = axisInfo.axis;
      var axisModel = axis.model;
      var axisPointerModel = axisInfo.axisPointerModel; // If no data, do not create anything in dataByCoordSys,
      // whose length will be used to judge whether dispatch action.

      if (!axisInfo.triggerTooltip || !payloadBatch.length) {
        return;
      }

      var coordSysModel = axisInfo.coordSys.model;
      var coordSysKey = modelHelper.makeKey(coordSysModel);
      var coordSysItem = dataByCoordSys.map[coordSysKey];

      if (!coordSysItem) {
        coordSysItem = dataByCoordSys.map[coordSysKey] = {
          coordSysId: coordSysModel.id,
          coordSysIndex: coordSysModel.componentIndex,
          coordSysType: coordSysModel.type,
          coordSysMainType: coordSysModel.mainType,
          dataByAxis: []
        };
        dataByCoordSys.list.push(coordSysItem);
      }

      coordSysItem.dataByAxis.push({
        axisDim: axis.dim,
        axisIndex: axisModel.componentIndex,
        axisType: axisModel.type,
        axisId: axisModel.id,
        value: value,
        // Caustion: viewHelper.getValueLabel is actually on "view stage", which
        // depends that all models have been updated. So it should not be performed
        // here. Considering axisPointerModel used here is volatile, which is hard
        // to be retrieve in TooltipView, we prepare parameters here.
        valueLabelOpt: {
          precision: axisPointerModel.get('label.precision'),
          formatter: axisPointerModel.get('label.formatter')
        },
        seriesDataIndices: payloadBatch.slice()
      });
    }

    function updateModelActually(showValueMap, axesInfo, outputFinder) {
      var outputAxesInfo = outputFinder.axesInfo = []; // Basic logic: If no 'show' required, 'hide' this axisPointer.

      each$r(axesInfo, function (axisInfo, key) {
        var option = axisInfo.axisPointerModel.option;
        var valItem = showValueMap[key];

        if (valItem) {
          !axisInfo.useHandle && (option.status = 'show');
          option.value = valItem.value; // For label formatter param and highlight.

          option.seriesDataIndices = (valItem.payloadBatch || []).slice();
        } // When always show (e.g., handle used), remain
        // original value and status.
        else {
            // If hide, value still need to be set, consider
            // click legend to toggle axis blank.
            !axisInfo.useHandle && (option.status = 'hide');
          } // If status is 'hide', should be no info in payload.


        option.status === 'show' && outputAxesInfo.push({
          axisDim: axisInfo.axis.dim,
          axisIndex: axisInfo.axis.model.componentIndex,
          value: option.value
        });
      });
    }

    function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {
      // Basic logic: If no showTip required, hideTip will be dispatched.
      if (illegalPoint(point) || !dataByCoordSys.list.length) {
        dispatchAction({
          type: 'hideTip'
        });
        return;
      } // In most case only one axis (or event one series is used). It is
      // convinient to fetch payload.seriesIndex and payload.dataIndex
      // dirtectly. So put the first seriesIndex and dataIndex of the first
      // axis on the payload.


      var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
      dispatchAction({
        type: 'showTip',
        escapeConnect: true,
        x: point[0],
        y: point[1],
        tooltipOption: payload.tooltipOption,
        position: payload.position,
        dataIndexInside: sampleItem.dataIndexInside,
        dataIndex: sampleItem.dataIndex,
        seriesIndex: sampleItem.seriesIndex,
        dataByCoordSys: dataByCoordSys.list
      });
    }

    function dispatchHighDownActually(axesInfo, dispatchAction, api) {
      // FIXME
      // highlight status modification shoule be a stage of main process?
      // (Consider confilct (e.g., legend and axisPointer) and setOption)
      var zr = api.getZr();
      var highDownKey = 'axisPointerLastHighlights';
      var lastHighlights = inner$7(zr)[highDownKey] || {};
      var newHighlights = inner$7(zr)[highDownKey] = {}; // Update highlight/downplay status according to axisPointer model.
      // Build hash map and remove duplicate incidentally.

      each$r(axesInfo, function (axisInfo, key) {
        var option = axisInfo.axisPointerModel.option;
        option.status === 'show' && each$r(option.seriesDataIndices, function (batchItem) {
          var key = batchItem.seriesIndex + ' | ' + batchItem.dataIndex;
          newHighlights[key] = batchItem;
        });
      }); // Diff.

      var toHighlight = [];
      var toDownplay = [];
      util.each(lastHighlights, function (batchItem, key) {
        !newHighlights[key] && toDownplay.push(batchItem);
      });
      util.each(newHighlights, function (batchItem, key) {
        !lastHighlights[key] && toHighlight.push(batchItem);
      });
      toDownplay.length && api.dispatchAction({
        type: 'downplay',
        escapeConnect: true,
        batch: toDownplay
      });
      toHighlight.length && api.dispatchAction({
        type: 'highlight',
        escapeConnect: true,
        batch: toHighlight
      });
    }

    function findInputAxisInfo(inputAxesInfo, axisInfo) {
      for (var i = 0; i < (inputAxesInfo || []).length; i++) {
        var inputAxisInfo = inputAxesInfo[i];

        if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {
          return inputAxisInfo;
        }
      }
    }

    function makeMapperParam(axisInfo) {
      var axisModel = axisInfo.axis.model;
      var item = {};
      var dim = item.axisDim = axisInfo.axis.dim;
      item.axisIndex = item[dim + 'AxisIndex'] = axisModel.componentIndex;
      item.axisName = item[dim + 'AxisName'] = axisModel.name;
      item.axisId = item[dim + 'AxisId'] = axisModel.id;
      return item;
    }

    function illegalPoint(point) {
      return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);
    }

    var axisTrigger = _default$1P;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var AxisPointerModel = echarts.extendComponentModel({
      type: 'axisPointer',
      coordSysAxesInfo: null,
      defaultOption: {
        // 'auto' means that show when triggered by tooltip or handle.
        show: 'auto',
        // 'click' | 'mousemove' | 'none'
        triggerOn: null,
        // set default in AxisPonterView.js
        zlevel: 0,
        z: 50,
        type: 'line',
        // 'line' 'shadow' 'cross' 'none'.
        // axispointer triggered by tootip determine snap automatically,
        // see `modelHelper`.
        snap: false,
        triggerTooltip: true,
        value: null,
        status: null,
        // Init value depends on whether handle is used.
        // [group0, group1, ...]
        // Each group can be: {
        //      mapper: function () {},
        //      singleTooltip: 'multiple',  // 'multiple' or 'single'
        //      xAxisId: ...,
        //      yAxisName: ...,
        //      angleAxisIndex: ...
        // }
        // mapper: can be ignored.
        //      input: {axisInfo, value}
        //      output: {axisInfo, value}
        link: [],
        // Do not set 'auto' here, otherwise global animation: false
        // will not effect at this axispointer.
        animation: null,
        animationDurationUpdate: 200,
        lineStyle: {
          color: '#aaa',
          width: 1,
          type: 'solid'
        },
        shadowStyle: {
          color: 'rgba(150,150,150,0.3)'
        },
        label: {
          show: true,
          formatter: null,
          // string | Function
          precision: 'auto',
          // Or a number like 0, 1, 2 ...
          margin: 3,
          color: '#fff',
          padding: [5, 7, 5, 7],
          backgroundColor: 'auto',
          // default: axis line color
          borderColor: null,
          borderWidth: 0,
          shadowBlur: 3,
          shadowColor: '#aaa' // Considering applicability, common style should
          // better not have shadowOffset.
          // shadowOffsetX: 0,
          // shadowOffsetY: 2

        },
        handle: {
          show: false,

          /* eslint-disable */
          icon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z',
          // jshint ignore:line

          /* eslint-enable */
          size: 45,
          // handle margin is from symbol center to axis, which is stable when circular move.
          margin: 50,
          // color: '#1b8bbd'
          // color: '#2f4554'
          color: '#333',
          shadowBlur: 3,
          shadowColor: '#aaa',
          shadowOffsetX: 0,
          shadowOffsetY: 2,
          // For mobile performance
          throttle: 40
        }
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */







    var makeInner$8 = model.makeInner;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var inner$8 = makeInner$8();
    var each$s = util.each;
    /**
     * @param {string} key
     * @param {module:echarts/ExtensionAPI} api
     * @param {Function} handler
     *      param: {string} currTrigger
     *      param: {Array.<number>} point
     */

    function register$1(key, api, handler) {
      if (env_1.node) {
        return;
      }

      var zr = api.getZr();
      inner$8(zr).records || (inner$8(zr).records = {});
      initGlobalListeners(zr, api);
      var record = inner$8(zr).records[key] || (inner$8(zr).records[key] = {});
      record.handler = handler;
    }

    function initGlobalListeners(zr, api) {
      if (inner$8(zr).initialized) {
        return;
      }

      inner$8(zr).initialized = true;
      useHandler('click', util.curry(doEnter, 'click'));
      useHandler('mousemove', util.curry(doEnter, 'mousemove')); // useHandler('mouseout', onLeave);

      useHandler('globalout', onLeave);

      function useHandler(eventType, cb) {
        zr.on(eventType, function (e) {
          var dis = makeDispatchAction(api);
          each$s(inner$8(zr).records, function (record) {
            record && cb(record, e, dis.dispatchAction);
          });
          dispatchTooltipFinally(dis.pendings, api);
        });
      }
    }

    function dispatchTooltipFinally(pendings, api) {
      var showLen = pendings.showTip.length;
      var hideLen = pendings.hideTip.length;
      var actuallyPayload;

      if (showLen) {
        actuallyPayload = pendings.showTip[showLen - 1];
      } else if (hideLen) {
        actuallyPayload = pendings.hideTip[hideLen - 1];
      }

      if (actuallyPayload) {
        actuallyPayload.dispatchAction = null;
        api.dispatchAction(actuallyPayload);
      }
    }

    function onLeave(record, e, dispatchAction) {
      record.handler('leave', null, dispatchAction);
    }

    function doEnter(currTrigger, record, e, dispatchAction) {
      record.handler(currTrigger, e, dispatchAction);
    }

    function makeDispatchAction(api) {
      var pendings = {
        showTip: [],
        hideTip: []
      }; // FIXME
      // better approach?
      // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,
      // which may be conflict, (axisPointer call showTip but tooltip call hideTip);
      // So we have to add "final stage" to merge those dispatched actions.

      var dispatchAction = function (payload) {
        var pendingList = pendings[payload.type];

        if (pendingList) {
          pendingList.push(payload);
        } else {
          payload.dispatchAction = dispatchAction;
          api.dispatchAction(payload);
        }
      };

      return {
        dispatchAction: dispatchAction,
        pendings: pendings
      };
    }
    /**
     * @param {string} key
     * @param {module:echarts/ExtensionAPI} api
     */


    function unregister$1(key, api) {
      if (env_1.node) {
        return;
      }

      var zr = api.getZr();
      var record = (inner$8(zr).records || {})[key];

      if (record) {
        inner$8(zr).records[key] = null;
      }
    }

    var register_1$1 = register$1;
    var unregister_1$1 = unregister$1;

    var globalListener = {
    	register: register_1$1,
    	unregister: unregister_1$1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var AxisPointerView = echarts.extendComponentView({
      type: 'axisPointer',
      render: function (globalAxisPointerModel, ecModel, api) {
        var globalTooltipModel = ecModel.getComponent('tooltip');
        var triggerOn = globalAxisPointerModel.get('triggerOn') || globalTooltipModel && globalTooltipModel.get('triggerOn') || 'mousemove|click'; // Register global listener in AxisPointerView to enable
        // AxisPointerView to be independent to Tooltip.

        globalListener.register('axisPointer', api, function (currTrigger, e, dispatchAction) {
          // If 'none', it is not controlled by mouse totally.
          if (triggerOn !== 'none' && (currTrigger === 'leave' || triggerOn.indexOf(currTrigger) >= 0)) {
            dispatchAction({
              type: 'updateAxisPointer',
              currTrigger: currTrigger,
              x: e && e.offsetX,
              y: e && e.offsetY
            });
          }
        });
      },

      /**
       * @override
       */
      remove: function (ecModel, api) {
        globalListener.unregister(api.getZr(), 'axisPointer');
        AxisPointerView.superApply(this._model, 'remove', arguments);
      },

      /**
       * @override
       */
      dispose: function (ecModel, api) {
        globalListener.unregister('axisPointer', api);
        AxisPointerView.superApply(this._model, 'dispose', arguments);
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */















    var makeInner$9 = model.makeInner;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var inner$9 = makeInner$9();
    var clone$6 = util.clone;
    var bind$3 = util.bind;
    /**
     * Base axis pointer class in 2D.
     * Implemenents {module:echarts/component/axis/IAxisPointer}.
     */

    function BaseAxisPointer() {}

    BaseAxisPointer.prototype = {
      /**
       * @private
       */
      _group: null,

      /**
       * @private
       */
      _lastGraphicKey: null,

      /**
       * @private
       */
      _handle: null,

      /**
       * @private
       */
      _dragging: false,

      /**
       * @private
       */
      _lastValue: null,

      /**
       * @private
       */
      _lastStatus: null,

      /**
       * @private
       */
      _payloadInfo: null,

      /**
       * In px, arbitrary value. Do not set too small,
       * no animation is ok for most cases.
       * @protected
       */
      animationThreshold: 15,

      /**
       * @implement
       */
      render: function (axisModel, axisPointerModel, api, forceRender) {
        var value = axisPointerModel.get('value');
        var status = axisPointerModel.get('status'); // Bind them to `this`, not in closure, otherwise they will not
        // be replaced when user calling setOption in not merge mode.

        this._axisModel = axisModel;
        this._axisPointerModel = axisPointerModel;
        this._api = api; // Optimize: `render` will be called repeatly during mouse move.
        // So it is power consuming if performing `render` each time,
        // especially on mobile device.

        if (!forceRender && this._lastValue === value && this._lastStatus === status) {
          return;
        }

        this._lastValue = value;
        this._lastStatus = status;
        var group = this._group;
        var handle = this._handle;

        if (!status || status === 'hide') {
          // Do not clear here, for animation better.
          group && group.hide();
          handle && handle.hide();
          return;
        }

        group && group.show();
        handle && handle.show(); // Otherwise status is 'show'

        var elOption = {};
        this.makeElOption(elOption, value, axisModel, axisPointerModel, api); // Enable change axis pointer type.

        var graphicKey = elOption.graphicKey;

        if (graphicKey !== this._lastGraphicKey) {
          this.clear(api);
        }

        this._lastGraphicKey = graphicKey;
        var moveAnimation = this._moveAnimation = this.determineAnimation(axisModel, axisPointerModel);

        if (!group) {
          group = this._group = new graphic.Group();
          this.createPointerEl(group, elOption, axisModel, axisPointerModel);
          this.createLabelEl(group, elOption, axisModel, axisPointerModel);
          api.getZr().add(group);
        } else {
          var doUpdateProps = util.curry(updateProps$1, axisPointerModel, moveAnimation);
          this.updatePointerEl(group, elOption, doUpdateProps, axisPointerModel);
          this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);
        }

        updateMandatoryProps(group, axisPointerModel, true);

        this._renderHandle(value);
      },

      /**
       * @implement
       */
      remove: function (api) {
        this.clear(api);
      },

      /**
       * @implement
       */
      dispose: function (api) {
        this.clear(api);
      },

      /**
       * @protected
       */
      determineAnimation: function (axisModel, axisPointerModel) {
        var animation = axisPointerModel.get('animation');
        var axis = axisModel.axis;
        var isCategoryAxis = axis.type === 'category';
        var useSnap = axisPointerModel.get('snap'); // Value axis without snap always do not snap.

        if (!useSnap && !isCategoryAxis) {
          return false;
        }

        if (animation === 'auto' || animation == null) {
          var animationThreshold = this.animationThreshold;

          if (isCategoryAxis && axis.getBandWidth() > animationThreshold) {
            return true;
          } // It is important to auto animation when snap used. Consider if there is
          // a dataZoom, animation will be disabled when too many points exist, while
          // it will be enabled for better visual effect when little points exist.


          if (useSnap) {
            var seriesDataCount = modelHelper.getAxisInfo(axisModel).seriesDataCount;
            var axisExtent = axis.getExtent(); // Approximate band width

            return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;
          }

          return false;
        }

        return animation === true;
      },

      /**
       * add {pointer, label, graphicKey} to elOption
       * @protected
       */
      makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {// Shoule be implemenented by sub-class.
      },

      /**
       * @protected
       */
      createPointerEl: function (group, elOption, axisModel, axisPointerModel) {
        var pointerOption = elOption.pointer;

        if (pointerOption) {
          var pointerEl = inner$9(group).pointerEl = new graphic[pointerOption.type](clone$6(elOption.pointer));
          group.add(pointerEl);
        }
      },

      /**
       * @protected
       */
      createLabelEl: function (group, elOption, axisModel, axisPointerModel) {
        if (elOption.label) {
          var labelEl = inner$9(group).labelEl = new graphic.Rect(clone$6(elOption.label));
          group.add(labelEl);
          updateLabelShowHide(labelEl, axisPointerModel);
        }
      },

      /**
       * @protected
       */
      updatePointerEl: function (group, elOption, updateProps) {
        var pointerEl = inner$9(group).pointerEl;

        if (pointerEl && elOption.pointer) {
          pointerEl.setStyle(elOption.pointer.style);
          updateProps(pointerEl, {
            shape: elOption.pointer.shape
          });
        }
      },

      /**
       * @protected
       */
      updateLabelEl: function (group, elOption, updateProps, axisPointerModel) {
        var labelEl = inner$9(group).labelEl;

        if (labelEl) {
          labelEl.setStyle(elOption.label.style);
          updateProps(labelEl, {
            // Consider text length change in vertical axis, animation should
            // be used on shape, otherwise the effect will be weird.
            shape: elOption.label.shape,
            position: elOption.label.position
          });
          updateLabelShowHide(labelEl, axisPointerModel);
        }
      },

      /**
       * @private
       */
      _renderHandle: function (value) {
        if (this._dragging || !this.updateHandleTransform) {
          return;
        }

        var axisPointerModel = this._axisPointerModel;

        var zr = this._api.getZr();

        var handle = this._handle;
        var handleModel = axisPointerModel.getModel('handle');
        var status = axisPointerModel.get('status');

        if (!handleModel.get('show') || !status || status === 'hide') {
          handle && zr.remove(handle);
          this._handle = null;
          return;
        }

        var isInit;

        if (!this._handle) {
          isInit = true;
          handle = this._handle = graphic.createIcon(handleModel.get('icon'), {
            cursor: 'move',
            draggable: true,
            onmousemove: function (e) {
              // Fot mobile devicem, prevent screen slider on the button.
              event.stop(e.event);
            },
            onmousedown: bind$3(this._onHandleDragMove, this, 0, 0),
            drift: bind$3(this._onHandleDragMove, this),
            ondragend: bind$3(this._onHandleDragEnd, this)
          });
          zr.add(handle);
        }

        updateMandatoryProps(handle, axisPointerModel, false); // update style

        var includeStyles = ['color', 'borderColor', 'borderWidth', 'opacity', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];
        handle.setStyle(handleModel.getItemStyle(null, includeStyles)); // update position

        var handleSize = handleModel.get('size');

        if (!util.isArray(handleSize)) {
          handleSize = [handleSize, handleSize];
        }

        handle.attr('scale', [handleSize[0] / 2, handleSize[1] / 2]);
        throttle_1.createOrUpdate(this, '_doDispatchAxisPointer', handleModel.get('throttle') || 0, 'fixRate');

        this._moveHandleToValue(value, isInit);
      },

      /**
       * @private
       */
      _moveHandleToValue: function (value, isInit) {
        updateProps$1(this._axisPointerModel, !isInit && this._moveAnimation, this._handle, getHandleTransProps(this.getHandleTransform(value, this._axisModel, this._axisPointerModel)));
      },

      /**
       * @private
       */
      _onHandleDragMove: function (dx, dy) {
        var handle = this._handle;

        if (!handle) {
          return;
        }

        this._dragging = true; // Persistent for throttle.

        var trans = this.updateHandleTransform(getHandleTransProps(handle), [dx, dy], this._axisModel, this._axisPointerModel);
        this._payloadInfo = trans;
        handle.stopAnimation();
        handle.attr(getHandleTransProps(trans));
        inner$9(handle).lastProp = null;

        this._doDispatchAxisPointer();
      },

      /**
       * Throttled method.
       * @private
       */
      _doDispatchAxisPointer: function () {
        var handle = this._handle;

        if (!handle) {
          return;
        }

        var payloadInfo = this._payloadInfo;
        var axisModel = this._axisModel;

        this._api.dispatchAction({
          type: 'updateAxisPointer',
          x: payloadInfo.cursorPoint[0],
          y: payloadInfo.cursorPoint[1],
          tooltipOption: payloadInfo.tooltipOption,
          axesInfo: [{
            axisDim: axisModel.axis.dim,
            axisIndex: axisModel.componentIndex
          }]
        });
      },

      /**
       * @private
       */
      _onHandleDragEnd: function (moveAnimation) {
        this._dragging = false;
        var handle = this._handle;

        if (!handle) {
          return;
        }

        var value = this._axisPointerModel.get('value'); // Consider snap or categroy axis, handle may be not consistent with
        // axisPointer. So move handle to align the exact value position when
        // drag ended.


        this._moveHandleToValue(value); // For the effect: tooltip will be shown when finger holding on handle
        // button, and will be hidden after finger left handle button.


        this._api.dispatchAction({
          type: 'hideTip'
        });
      },

      /**
       * Should be implemenented by sub-class if support `handle`.
       * @protected
       * @param {number} value
       * @param {module:echarts/model/Model} axisModel
       * @param {module:echarts/model/Model} axisPointerModel
       * @return {Object} {position: [x, y], rotation: 0}
       */
      getHandleTransform: null,

      /**
       * * Should be implemenented by sub-class if support `handle`.
       * @protected
       * @param {Object} transform {position, rotation}
       * @param {Array.<number>} delta [dx, dy]
       * @param {module:echarts/model/Model} axisModel
       * @param {module:echarts/model/Model} axisPointerModel
       * @return {Object} {position: [x, y], rotation: 0, cursorPoint: [x, y]}
       */
      updateHandleTransform: null,

      /**
       * @private
       */
      clear: function (api) {
        this._lastValue = null;
        this._lastStatus = null;
        var zr = api.getZr();
        var group = this._group;
        var handle = this._handle;

        if (zr && group) {
          this._lastGraphicKey = null;
          group && zr.remove(group);
          handle && zr.remove(handle);
          this._group = null;
          this._handle = null;
          this._payloadInfo = null;
        }
      },

      /**
       * @protected
       */
      doClear: function () {// Implemented by sub-class if necessary.
      },

      /**
       * @protected
       * @param {Array.<number>} xy
       * @param {Array.<number>} wh
       * @param {number} [xDimIndex=0] or 1
       */
      buildLabel: function (xy, wh, xDimIndex) {
        xDimIndex = xDimIndex || 0;
        return {
          x: xy[xDimIndex],
          y: xy[1 - xDimIndex],
          width: wh[xDimIndex],
          height: wh[1 - xDimIndex]
        };
      }
    };
    BaseAxisPointer.prototype.constructor = BaseAxisPointer;

    function updateProps$1(animationModel, moveAnimation, el, props) {
      // Animation optimize.
      if (!propsEqual(inner$9(el).lastProp, props)) {
        inner$9(el).lastProp = props;
        moveAnimation ? graphic.updateProps(el, props, animationModel) : (el.stopAnimation(), el.attr(props));
      }
    }

    function propsEqual(lastProps, newProps) {
      if (util.isObject(lastProps) && util.isObject(newProps)) {
        var equals = true;
        util.each(newProps, function (item, key) {
          equals = equals && propsEqual(lastProps[key], item);
        });
        return !!equals;
      } else {
        return lastProps === newProps;
      }
    }

    function updateLabelShowHide(labelEl, axisPointerModel) {
      labelEl[axisPointerModel.get('label.show') ? 'show' : 'hide']();
    }

    function getHandleTransProps(trans) {
      return {
        position: trans.position.slice(),
        rotation: trans.rotation || 0
      };
    }

    function updateMandatoryProps(group, axisPointerModel, silent) {
      var z = axisPointerModel.get('z');
      var zlevel = axisPointerModel.get('zlevel');
      group && group.traverse(function (el) {
        if (el.type !== 'group') {
          z != null && (el.z = z);
          zlevel != null && (el.zlevel = zlevel);
          el.silent = silent;
        }
      });
    }

    clazz.enableClassExtend(BaseAxisPointer);
    var _default$1Q = BaseAxisPointer;
    var BaseAxisPointer_1 = _default$1Q;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */















    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */

    /**
     * @param {module:echarts/model/Model} axisPointerModel
     */
    function buildElStyle(axisPointerModel) {
      var axisPointerType = axisPointerModel.get('type');
      var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');
      var style;

      if (axisPointerType === 'line') {
        style = styleModel.getLineStyle();
        style.fill = null;
      } else if (axisPointerType === 'shadow') {
        style = styleModel.getAreaStyle();
        style.stroke = null;
      }

      return style;
    }
    /**
     * @param {Function} labelPos {align, verticalAlign, position}
     */


    function buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {
      var value = axisPointerModel.get('value');
      var text$1 = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {
        precision: axisPointerModel.get('label.precision'),
        formatter: axisPointerModel.get('label.formatter')
      });
      var labelModel = axisPointerModel.getModel('label');
      var paddings = format.normalizeCssArray(labelModel.get('padding') || 0);
      var font = labelModel.getFont();
      var textRect = text.getBoundingRect(text$1, font);
      var position = labelPos.position;
      var width = textRect.width + paddings[1] + paddings[3];
      var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.

      var align = labelPos.align;
      align === 'right' && (position[0] -= width);
      align === 'center' && (position[0] -= width / 2);
      var verticalAlign = labelPos.verticalAlign;
      verticalAlign === 'bottom' && (position[1] -= height);
      verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container

      confineInContainer(position, width, height, api);
      var bgColor = labelModel.get('backgroundColor');

      if (!bgColor || bgColor === 'auto') {
        bgColor = axisModel.get('axisLine.lineStyle.color');
      }

      elOption.label = {
        shape: {
          x: 0,
          y: 0,
          width: width,
          height: height,
          r: labelModel.get('borderRadius')
        },
        position: position.slice(),
        // TODO: rich
        style: {
          text: text$1,
          textFont: font,
          textFill: labelModel.getTextColor(),
          textPosition: 'inside',
          textPadding: paddings,
          fill: bgColor,
          stroke: labelModel.get('borderColor') || 'transparent',
          lineWidth: labelModel.get('borderWidth') || 0,
          shadowBlur: labelModel.get('shadowBlur'),
          shadowColor: labelModel.get('shadowColor'),
          shadowOffsetX: labelModel.get('shadowOffsetX'),
          shadowOffsetY: labelModel.get('shadowOffsetY')
        },
        // Lable should be over axisPointer.
        z2: 10
      };
    } // Do not overflow ec container


    function confineInContainer(position, width, height, api) {
      var viewWidth = api.getWidth();
      var viewHeight = api.getHeight();
      position[0] = Math.min(position[0] + width, viewWidth) - width;
      position[1] = Math.min(position[1] + height, viewHeight) - height;
      position[0] = Math.max(position[0], 0);
      position[1] = Math.max(position[1], 0);
    }
    /**
     * @param {number} value
     * @param {module:echarts/coord/Axis} axis
     * @param {module:echarts/model/Global} ecModel
     * @param {Object} opt
     * @param {Array.<Object>} seriesDataIndices
     * @param {number|string} opt.precision 'auto' or a number
     * @param {string|Function} opt.formatter label formatter
     */


    function getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {
      value = axis.scale.parse(value);
      var text = axis.scale.getLabel( // If `precision` is set, width can be fixed (like '12.00500'), which
      // helps to debounce when when moving label.
      value, {
        precision: opt.precision
      });
      var formatter = opt.formatter;

      if (formatter) {
        var params = {
          value: axisHelper.getAxisRawValue(axis, value),
          axisDimension: axis.dim,
          axisIndex: axis.index,
          seriesData: []
        };
        util.each(seriesDataIndices, function (idxItem) {
          var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
          var dataIndex = idxItem.dataIndexInside;
          var dataParams = series && series.getDataParams(dataIndex);
          dataParams && params.seriesData.push(dataParams);
        });

        if (util.isString(formatter)) {
          text = formatter.replace('{value}', text);
        } else if (util.isFunction(formatter)) {
          text = formatter(params);
        }
      }

      return text;
    }
    /**
     * @param {module:echarts/coord/Axis} axis
     * @param {number} value
     * @param {Object} layoutInfo {
     *  rotation, position, labelOffset, labelDirection, labelMargin
     * }
     */


    function getTransformedPosition(axis, value, layoutInfo) {
      var transform = matrix.create();
      matrix.rotate(transform, transform, layoutInfo.rotation);
      matrix.translate(transform, transform, layoutInfo.position);
      return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);
    }

    function buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {
      var textLayout = AxisBuilder_1.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);
      layoutInfo.labelMargin = axisPointerModel.get('label.margin');
      buildLabelElOption(elOption, axisModel, axisPointerModel, api, {
        position: getTransformedPosition(axisModel.axis, value, layoutInfo),
        align: textLayout.textAlign,
        verticalAlign: textLayout.textVerticalAlign
      });
    }
    /**
     * @param {Array.<number>} p1
     * @param {Array.<number>} p2
     * @param {number} [xDimIndex=0] or 1
     */


    function makeLineShape(p1, p2, xDimIndex) {
      xDimIndex = xDimIndex || 0;
      return {
        x1: p1[xDimIndex],
        y1: p1[1 - xDimIndex],
        x2: p2[xDimIndex],
        y2: p2[1 - xDimIndex]
      };
    }
    /**
     * @param {Array.<number>} xy
     * @param {Array.<number>} wh
     * @param {number} [xDimIndex=0] or 1
     */


    function makeRectShape(xy, wh, xDimIndex) {
      xDimIndex = xDimIndex || 0;
      return {
        x: xy[xDimIndex],
        y: xy[1 - xDimIndex],
        width: wh[xDimIndex],
        height: wh[1 - xDimIndex]
      };
    }

    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
      return {
        cx: cx,
        cy: cy,
        r0: r0,
        r: r,
        startAngle: startAngle,
        endAngle: endAngle,
        clockwise: true
      };
    }

    var buildElStyle_1 = buildElStyle;
    var buildLabelElOption_1 = buildLabelElOption;
    var getValueLabel_1 = getValueLabel;
    var getTransformedPosition_1 = getTransformedPosition;
    var buildCartesianSingleLabelElOption_1 = buildCartesianSingleLabelElOption;
    var makeLineShape_1 = makeLineShape;
    var makeRectShape_1 = makeRectShape;
    var makeSectorShape_1 = makeSectorShape;

    var viewHelper = {
    	buildElStyle: buildElStyle_1,
    	buildLabelElOption: buildLabelElOption_1,
    	getValueLabel: getValueLabel_1,
    	getTransformedPosition: getTransformedPosition_1,
    	buildCartesianSingleLabelElOption: buildCartesianSingleLabelElOption_1,
    	makeLineShape: makeLineShape_1,
    	makeRectShape: makeRectShape_1,
    	makeSectorShape: makeSectorShape_1
    };

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var CartesianAxisPointer = BaseAxisPointer_1.extend({
      /**
       * @override
       */
      makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {
        var axis = axisModel.axis;
        var grid = axis.grid;
        var axisPointerType = axisPointerModel.get('type');
        var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
        var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));

        if (axisPointerType && axisPointerType !== 'none') {
          var elStyle = viewHelper.buildElStyle(axisPointerModel);
          var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);
          pointerOption.style = elStyle;
          elOption.graphicKey = pointerOption.type;
          elOption.pointer = pointerOption;
        }

        var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);
        viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
      },

      /**
       * @override
       */
      getHandleTransform: function (value, axisModel, axisPointerModel) {
        var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {
          labelInside: false
        });
        layoutInfo.labelMargin = axisPointerModel.get('handle.margin');
        return {
          position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),
          rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
        };
      },

      /**
       * @override
       */
      updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {
        var axis = axisModel.axis;
        var grid = axis.grid;
        var axisExtent = axis.getGlobalExtent(true);
        var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
        var dimIndex = axis.dim === 'x' ? 0 : 1;
        var currPosition = transform.position;
        currPosition[dimIndex] += delta[dimIndex];
        currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
        currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
        var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
        var cursorPoint = [cursorOtherValue, cursorOtherValue];
        cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.

        var tooltipOptions = [{
          verticalAlign: 'middle'
        }, {
          align: 'center'
        }];
        return {
          position: currPosition,
          rotation: transform.rotation,
          cursorPoint: cursorPoint,
          tooltipOption: tooltipOptions[dimIndex]
        };
      }
    });

    function getCartesian(grid, axis) {
      var opt = {};
      opt[axis.dim + 'AxisIndex'] = axis.index;
      return grid.getCartesian(opt);
    }

    var pointerShapeBuilder = {
      line: function (axis, pixelValue, otherExtent) {
        var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));
        return {
          type: 'Line',
          subPixelOptimize: true,
          shape: targetShape
        };
      },
      shadow: function (axis, pixelValue, otherExtent) {
        var bandWidth = Math.max(1, axis.getBandWidth());
        var span = otherExtent[1] - otherExtent[0];
        return {
          type: 'Rect',
          shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))
        };
      }
    };

    function getAxisDimIndex(axis) {
      return axis.dim === 'x' ? 0 : 1;
    }

    AxisView_1.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */















    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // CartesianAxisPointer is not supposed to be required here. But consider
    // echarts.simple.js and online build tooltip, which only require gridSimple,
    // CartesianAxisPointer should be able to required somewhere.
    echarts.registerPreprocessor(function (option) {
      // Always has a global axisPointerModel for default setting.
      if (option) {
        (!option.axisPointer || option.axisPointer.length === 0) && (option.axisPointer = {});
        var link = option.axisPointer.link; // Normalize to array to avoid object mergin. But if link
        // is not set, remain null/undefined, otherwise it will
        // override existent link setting.

        if (link && !util.isArray(link)) {
          option.axisPointer.link = [link];
        }
      }
    }); // This process should proformed after coordinate systems created
    // and series data processed. So put it on statistic processing stage.

    echarts.registerProcessor(echarts.PRIORITY.PROCESSOR.STATISTIC, function (ecModel, api) {
      // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
      // allAxesInfo should be updated when setOption performed.
      ecModel.getComponent('axisPointer').coordSysAxesInfo = modelHelper.collect(ecModel, api);
    }); // Broadcast to all views.

    echarts.registerAction({
      type: 'updateAxisPointer',
      event: 'updateAxisPointer',
      update: ':updateAxisPointer'
    }, axisTrigger);

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */



    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var _default$1R = echarts.extendComponentModel({
      type: 'tooltip',
      dependencies: ['axisPointer'],
      defaultOption: {
        zlevel: 0,
        z: 60,
        show: true,
        // tooltip主体内容
        showContent: true,
        // 'trigger' only works on coordinate system.
        // 'item' | 'axis' | 'none'
        trigger: 'item',
        // 'click' | 'mousemove' | 'none'
        triggerOn: 'mousemove|click',
        alwaysShowContent: false,
        displayMode: 'single',
        // 'single' | 'multipleByCoordSys'
        renderMode: 'auto',
        // 'auto' | 'html' | 'richText'
        // 'auto': use html by default, and use non-html if `document` is not defined
        // 'html': use html for tooltip
        // 'richText': use canvas, svg, and etc. for tooltip
        // 位置 {Array} | {Function}
        // position: null
        // Consider triggered from axisPointer handle, verticalAlign should be 'middle'
        // align: null,
        // verticalAlign: null,
        // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
        confine: false,
        // 内容格式器：{string}（Template） ¦ {Function}
        // formatter: null
        showDelay: 0,
        // 隐藏延迟，单位ms
        hideDelay: 100,
        // 动画变换时间，单位s
        transitionDuration: 0.4,
        enterable: false,
        // 提示背景颜色，默认为透明度为0.7的黑色
        backgroundColor: 'rgba(50,50,50,0.7)',
        // 提示边框颜色
        borderColor: '#333',
        // 提示边框圆角，单位px，默认为4
        borderRadius: 4,
        // 提示边框线宽，单位px，默认为0（无边框）
        borderWidth: 0,
        // 提示内边距，单位px，默认各方向内边距为5，
        // 接受数组分别设定上右下左边距，同css
        padding: 5,
        // Extra css text
        extraCssText: '',
        // 坐标轴指示器，坐标轴触发有效
        axisPointer: {
          // 默认为直线
          // 可选为：'line' | 'shadow' | 'cross'
          type: 'line',
          // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
          // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
          // 默认 'auto'，会选择类型为 category 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
          // 极坐标系会默认选择 angle 轴
          axis: 'auto',
          animation: 'auto',
          animationDurationUpdate: 200,
          animationEasingUpdate: 'exponentialOut',
          crossStyle: {
            color: '#999',
            width: 1,
            type: 'dashed',
            // TODO formatter
            textStyle: {} // lineStyle and shadowStyle should not be specified here,
            // otherwise it will always override those styles on option.axisPointer.

          }
        },
        textStyle: {
          color: '#fff',
          fontSize: 14
        }
      }
    });

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */











    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var each$t = util.each;
    var toCamelCase$1 = format.toCamelCase;
    var vendors = ['', '-webkit-', '-moz-', '-o-'];
    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';
    /**
     * @param {number} duration
     * @return {string}
     * @inner
     */

    function assembleTransition(duration) {
      var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
      var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
      return util.map(vendors, function (vendorPrefix) {
        return vendorPrefix + 'transition:' + transitionText;
      }).join(';');
    }
    /**
     * @param {Object} textStyle
     * @return {string}
     * @inner
     */


    function assembleFont(textStyleModel) {
      var cssText = [];
      var fontSize = textStyleModel.get('fontSize');
      var color = textStyleModel.getTextColor();
      color && cssText.push('color:' + color);
      cssText.push('font:' + textStyleModel.getFont());
      fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
      each$t(['decoration', 'align'], function (name) {
        var val = textStyleModel.get(name);
        val && cssText.push('text-' + name + ':' + val);
      });
      return cssText.join(';');
    }
    /**
     * @param {Object} tooltipModel
     * @return {string}
     * @inner
     */


    function assembleCssText(tooltipModel) {
      var cssText = [];
      var transitionDuration = tooltipModel.get('transitionDuration');
      var backgroundColor = tooltipModel.get('backgroundColor');
      var textStyleModel = tooltipModel.getModel('textStyle');
      var padding = tooltipModel.get('padding'); // Animation transition. Do not animate when transitionDuration is 0.

      transitionDuration && cssText.push(assembleTransition(transitionDuration));

      if (backgroundColor) {
        if (env_1.canvasSupported) {
          cssText.push('background-Color:' + backgroundColor);
        } else {
          // for ie
          cssText.push('background-Color:#' + color.toHex(backgroundColor));
          cssText.push('filter:alpha(opacity=70)');
        }
      } // Border style


      each$t(['width', 'color', 'radius'], function (name) {
        var borderName = 'border-' + name;
        var camelCase = toCamelCase$1(borderName);
        var val = tooltipModel.get(camelCase);
        val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
      }); // Text style

      cssText.push(assembleFont(textStyleModel)); // Padding

      if (padding != null) {
        cssText.push('padding:' + format.normalizeCssArray(padding).join('px ') + 'px');
      }

      return cssText.join(';') + ';';
    }
    /**
     * @alias module:echarts/component/tooltip/TooltipContent
     * @constructor
     */


    function TooltipContent(container, api) {
      if (env_1.wxa) {
        return null;
      }

      var el = document.createElement('div');
      var zr = this._zr = api.getZr();
      this.el = el;
      this._x = api.getWidth() / 2;
      this._y = api.getHeight() / 2;
      container.appendChild(el);
      this._container = container;
      this._show = false;
      /**
       * @private
       */

      this._hideTimeout; // FIXME
      // Is it needed to trigger zr event manually if
      // the browser do not support `pointer-events: none`.

      var self = this;

      el.onmouseenter = function () {
        // clear the timeout in hideLater and keep showing tooltip
        if (self._enterable) {
          clearTimeout(self._hideTimeout);
          self._show = true;
        }

        self._inContent = true;
      };

      el.onmousemove = function (e) {
        e = e || window.event;

        if (!self._enterable) {
          // `pointer-events: none` is set to tooltip content div
          // if `enterable` is set as `false`, and `el.onmousemove`
          // can not be triggered. But in browser that do not
          // support `pointer-events`, we need to do this:
          // Try trigger zrender event to avoid mouse
          // in and out shape too frequently
          var handler = zr.handler;
          event.normalizeEvent(container, e, true);
          handler.dispatch('mousemove', e);
        }
      };

      el.onmouseleave = function () {
        if (self._enterable) {
          if (self._show) {
            self.hideLater(self._hideDelay);
          }
        }

        self._inContent = false;
      };
    }

    TooltipContent.prototype = {
      constructor: TooltipContent,

      /**
       * @private
       * @type {boolean}
       */
      _enterable: true,

      /**
       * Update when tooltip is rendered
       */
      update: function () {
        // FIXME
        // Move this logic to ec main?
        var container = this._container;
        var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
        var domStyle = container.style;

        if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
          domStyle.position = 'relative';
        } // Hide the tooltip
        // PENDING
        // this.hide();

      },
      show: function (tooltipModel) {
        clearTimeout(this._hideTimeout);
        var el = this.el;
        el.style.cssText = gCssText + assembleCssText(tooltipModel) // Because of the reason described in:
        // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
        // we should set initial value to `left` and `top`.
        + ';left:' + this._x + 'px;top:' + this._y + 'px;' + (tooltipModel.get('extraCssText') || '');
        el.style.display = el.innerHTML ? 'block' : 'none'; // If mouse occsionally move over the tooltip, a mouseout event will be
        // triggered by canvas, and cuase some unexpectable result like dragging
        // stop, "unfocusAdjacency". Here `pointer-events: none` is used to solve
        // it. Although it is not suppored by IE8~IE10, fortunately it is a rare
        // scenario.

        el.style.pointerEvents = this._enterable ? 'auto' : 'none';
        this._show = true;
      },
      setContent: function (content) {
        this.el.innerHTML = content == null ? '' : content;
      },
      setEnterable: function (enterable) {
        this._enterable = enterable;
      },
      getSize: function () {
        var el = this.el;
        return [el.clientWidth, el.clientHeight];
      },
      moveTo: function (x, y) {
        // xy should be based on canvas root. But tooltipContent is
        // the sibling of canvas root. So padding of ec container
        // should be considered here.
        var zr = this._zr;
        var viewportRootOffset;

        if (zr && zr.painter && (viewportRootOffset = zr.painter.getViewportRootOffset())) {
          x += viewportRootOffset.offsetLeft;
          y += viewportRootOffset.offsetTop;
        }

        var style = this.el.style;
        style.left = x + 'px';
        style.top = y + 'px';
        this._x = x;
        this._y = y;
      },
      hide: function () {
        this.el.style.display = 'none';
        this._show = false;
      },
      hideLater: function (time) {
        if (this._show && !(this._inContent && this._enterable)) {
          if (time) {
            this._hideDelay = time; // Set show false to avoid invoke hideLater mutiple times

            this._show = false;
            this._hideTimeout = setTimeout(util.bind(this.hide, this), time);
          } else {
            this.hide();
          }
        }
      },
      isShow: function () {
        return this._show;
      },
      getOuterSize: function () {
        var width = this.el.clientWidth;
        var height = this.el.clientHeight; // Consider browser compatibility.
        // IE8 does not support getComputedStyle.

        if (document.defaultView && document.defaultView.getComputedStyle) {
          var stl = document.defaultView.getComputedStyle(this.el);

          if (stl) {
            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);
            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);
          }
        }

        return {
          width: width,
          height: height
        };
      }
    };
    var _default$1S = TooltipContent;
    var TooltipContent_1 = _default$1S;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */





    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // import Group from 'zrender/src/container/Group';

    /**
     * @alias module:echarts/component/tooltip/TooltipRichContent
     * @constructor
     */
    function TooltipRichContent(api) {
      this._zr = api.getZr();
      this._show = false;
      /**
       * @private
       */

      this._hideTimeout;
    }

    TooltipRichContent.prototype = {
      constructor: TooltipRichContent,

      /**
       * @private
       * @type {boolean}
       */
      _enterable: true,

      /**
       * Update when tooltip is rendered
       */
      update: function () {// noop
      },
      show: function (tooltipModel) {
        if (this._hideTimeout) {
          clearTimeout(this._hideTimeout);
        }

        this.el.attr('show', true);
        this._show = true;
      },

      /**
       * Set tooltip content
       *
       * @param {string} content rich text string of content
       * @param {Object} markerRich rich text style
       * @param {Object} tooltipModel tooltip model
       */
      setContent: function (content, markerRich, tooltipModel) {
        if (this.el) {
          this._zr.remove(this.el);
        }

        var markers = {};
        var text = content;
        var prefix = '{marker';
        var suffix = '|}';
        var startId = text.indexOf(prefix);

        while (startId >= 0) {
          var endId = text.indexOf(suffix);
          var name = text.substr(startId + prefix.length, endId - startId - prefix.length);

          if (name.indexOf('sub') > -1) {
            markers['marker' + name] = {
              textWidth: 4,
              textHeight: 4,
              textBorderRadius: 2,
              textBackgroundColor: markerRich[name],
              // TODO: textOffset is not implemented for rich text
              textOffset: [3, 0]
            };
          } else {
            markers['marker' + name] = {
              textWidth: 10,
              textHeight: 10,
              textBorderRadius: 5,
              textBackgroundColor: markerRich[name]
            };
          }

          text = text.substr(endId + 1);
          startId = text.indexOf('{marker');
        }

        this.el = new Text_1({
          style: {
            rich: markers,
            text: content,
            textLineHeight: 20,
            textBackgroundColor: tooltipModel.get('backgroundColor'),
            textBorderRadius: tooltipModel.get('borderRadius'),
            textFill: tooltipModel.get('textStyle.color'),
            textPadding: tooltipModel.get('padding')
          },
          z: tooltipModel.get('z')
        });

        this._zr.add(this.el);

        var self = this;
        this.el.on('mouseover', function () {
          // clear the timeout in hideLater and keep showing tooltip
          if (self._enterable) {
            clearTimeout(self._hideTimeout);
            self._show = true;
          }

          self._inContent = true;
        });
        this.el.on('mouseout', function () {
          if (self._enterable) {
            if (self._show) {
              self.hideLater(self._hideDelay);
            }
          }

          self._inContent = false;
        });
      },
      setEnterable: function (enterable) {
        this._enterable = enterable;
      },
      getSize: function () {
        var bounding = this.el.getBoundingRect();
        return [bounding.width, bounding.height];
      },
      moveTo: function (x, y) {
        if (this.el) {
          this.el.attr('position', [x, y]);
        }
      },
      hide: function () {
        if (this.el) {
          this.el.hide();
        }

        this._show = false;
      },
      hideLater: function (time) {
        if (this._show && !(this._inContent && this._enterable)) {
          if (time) {
            this._hideDelay = time; // Set show false to avoid invoke hideLater mutiple times

            this._show = false;
            this._hideTimeout = setTimeout(util.bind(this.hide, this), time);
          } else {
            this.hide();
          }
        }
      },
      isShow: function () {
        return this._show;
      },
      getOuterSize: function () {
        var size = this.getSize();
        return {
          width: size[0],
          height: size[1]
        };
      }
    };
    var _default$1T = TooltipRichContent;
    var TooltipRichContent_1 = _default$1T;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */































    var getTooltipRenderMode$2 = model.getTooltipRenderMode;

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    var bind$4 = util.bind;
    var each$u = util.each;
    var parsePercent$4 = number.parsePercent;
    var proxyRect = new graphic.Rect({
      shape: {
        x: -1,
        y: -1,
        width: 2,
        height: 2
      }
    });

    var _default$1U = echarts.extendComponentView({
      type: 'tooltip',
      init: function (ecModel, api) {
        if (env_1.node) {
          return;
        }

        var tooltipModel = ecModel.getComponent('tooltip');
        var renderMode = tooltipModel.get('renderMode');
        this._renderMode = getTooltipRenderMode$2(renderMode);
        var tooltipContent;

        if (this._renderMode === 'html') {
          tooltipContent = new TooltipContent_1(api.getDom(), api);
          this._newLine = '<br/>';
        } else {
          tooltipContent = new TooltipRichContent_1(api);
          this._newLine = '\n';
        }

        this._tooltipContent = tooltipContent;
      },
      render: function (tooltipModel, ecModel, api) {
        if (env_1.node) {
          return;
        } // Reset


        this.group.removeAll();
        /**
         * @private
         * @type {module:echarts/component/tooltip/TooltipModel}
         */

        this._tooltipModel = tooltipModel;
        /**
         * @private
         * @type {module:echarts/model/Global}
         */

        this._ecModel = ecModel;
        /**
         * @private
         * @type {module:echarts/ExtensionAPI}
         */

        this._api = api;
        /**
         * Should be cleaned when render.
         * @private
         * @type {Array.<Array.<Object>>}
         */

        this._lastDataByCoordSys = null;
        /**
         * @private
         * @type {boolean}
         */

        this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
        var tooltipContent = this._tooltipContent;
        tooltipContent.update();
        tooltipContent.setEnterable(tooltipModel.get('enterable'));

        this._initGlobalListener();

        this._keepShow();
      },
      _initGlobalListener: function () {
        var tooltipModel = this._tooltipModel;
        var triggerOn = tooltipModel.get('triggerOn');
        globalListener.register('itemTooltip', this._api, bind$4(function (currTrigger, e, dispatchAction) {
          // If 'none', it is not controlled by mouse totally.
          if (triggerOn !== 'none') {
            if (triggerOn.indexOf(currTrigger) >= 0) {
              this._tryShow(e, dispatchAction);
            } else if (currTrigger === 'leave') {
              this._hide(dispatchAction);
            }
          }
        }, this));
      },
      _keepShow: function () {
        var tooltipModel = this._tooltipModel;
        var ecModel = this._ecModel;
        var api = this._api; // Try to keep the tooltip show when refreshing

        if (this._lastX != null && this._lastY != null // When user is willing to control tooltip totally using API,
        // self.manuallyShowTip({x, y}) might cause tooltip hide,
        // which is not expected.
        && tooltipModel.get('triggerOn') !== 'none') {
          var self = this;
          clearTimeout(this._refreshUpdateTimeout);
          this._refreshUpdateTimeout = setTimeout(function () {
            // Show tip next tick after other charts are rendered
            // In case highlight action has wrong result
            // FIXME
            !api.isDisposed() && self.manuallyShowTip(tooltipModel, ecModel, api, {
              x: self._lastX,
              y: self._lastY
            });
          });
        }
      },

      /**
       * Show tip manually by
       * dispatchAction({
       *     type: 'showTip',
       *     x: 10,
       *     y: 10
       * });
       * Or
       * dispatchAction({
       *      type: 'showTip',
       *      seriesIndex: 0,
       *      dataIndex or dataIndexInside or name
       * });
       *
       *  TODO Batch
       */
      manuallyShowTip: function (tooltipModel, ecModel, api, payload) {
        if (payload.from === this.uid || env_1.node) {
          return;
        }

        var dispatchAction = makeDispatchAction$1(payload, api); // Reset ticket

        this._ticket = ''; // When triggered from axisPointer.

        var dataByCoordSys = payload.dataByCoordSys;

        if (payload.tooltip && payload.x != null && payload.y != null) {
          var el = proxyRect;
          el.position = [payload.x, payload.y];
          el.update();
          el.tooltip = payload.tooltip; // Manually show tooltip while view is not using zrender elements.

          this._tryShow({
            offsetX: payload.x,
            offsetY: payload.y,
            target: el
          }, dispatchAction);
        } else if (dataByCoordSys) {
          this._tryShow({
            offsetX: payload.x,
            offsetY: payload.y,
            position: payload.position,
            event: {},
            dataByCoordSys: payload.dataByCoordSys,
            tooltipOption: payload.tooltipOption
          }, dispatchAction);
        } else if (payload.seriesIndex != null) {
          if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {
            return;
          }

          var pointInfo = findPointFromSeries(payload, ecModel);
          var cx = pointInfo.point[0];
          var cy = pointInfo.point[1];

          if (cx != null && cy != null) {
            this._tryShow({
              offsetX: cx,
              offsetY: cy,
              position: payload.position,
              target: pointInfo.el,
              event: {}
            }, dispatchAction);
          }
        } else if (payload.x != null && payload.y != null) {
          // FIXME
          // should wrap dispatchAction like `axisPointer/globalListener` ?
          api.dispatchAction({
            type: 'updateAxisPointer',
            x: payload.x,
            y: payload.y
          });

          this._tryShow({
            offsetX: payload.x,
            offsetY: payload.y,
            position: payload.position,
            target: api.getZr().findHover(payload.x, payload.y).target,
            event: {}
          }, dispatchAction);
        }
      },
      manuallyHideTip: function (tooltipModel, ecModel, api, payload) {
        var tooltipContent = this._tooltipContent;

        if (!this._alwaysShowContent && this._tooltipModel) {
          tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
        }

        this._lastX = this._lastY = null;

        if (payload.from !== this.uid) {
          this._hide(makeDispatchAction$1(payload, api));
        }
      },
      // Be compatible with previous design, that is, when tooltip.type is 'axis' and
      // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer
      // and tooltip.
      _manuallyAxisShowTip: function (tooltipModel, ecModel, api, payload) {
        var seriesIndex = payload.seriesIndex;
        var dataIndex = payload.dataIndex;
        var coordSysAxesInfo = ecModel.getComponent('axisPointer').coordSysAxesInfo;

        if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {
          return;
        }

        var seriesModel = ecModel.getSeriesByIndex(seriesIndex);

        if (!seriesModel) {
          return;
        }

        var data = seriesModel.getData();
        var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), seriesModel, (seriesModel.coordinateSystem || {}).model, tooltipModel]);

        if (tooltipModel.get('trigger') !== 'axis') {
          return;
        }

        api.dispatchAction({
          type: 'updateAxisPointer',
          seriesIndex: seriesIndex,
          dataIndex: dataIndex,
          position: payload.position
        });
        return true;
      },
      _tryShow: function (e, dispatchAction) {
        var el = e.target;
        var tooltipModel = this._tooltipModel;

        if (!tooltipModel) {
          return;
        } // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed


        this._lastX = e.offsetX;
        this._lastY = e.offsetY;
        var dataByCoordSys = e.dataByCoordSys;

        if (dataByCoordSys && dataByCoordSys.length) {
          this._showAxisTooltip(dataByCoordSys, e);
        } // Always show item tooltip if mouse is on the element with dataIndex
        else if (el && el.dataIndex != null) {
            this._lastDataByCoordSys = null;

            this._showSeriesItemTooltip(e, el, dispatchAction);
          } // Tooltip provided directly. Like legend.
          else if (el && el.tooltip) {
              this._lastDataByCoordSys = null;

              this._showComponentItemTooltip(e, el, dispatchAction);
            } else {
              this._lastDataByCoordSys = null;

              this._hide(dispatchAction);
            }
      },
      _showOrMove: function (tooltipModel, cb) {
        // showDelay is used in this case: tooltip.enterable is set
        // as true. User intent to move mouse into tooltip and click
        // something. `showDelay` makes it easyer to enter the content
        // but tooltip do not move immediately.
        var delay = tooltipModel.get('showDelay');
        cb = util.bind(cb, this);
        clearTimeout(this._showTimout);
        delay > 0 ? this._showTimout = setTimeout(cb, delay) : cb();
      },
      _showAxisTooltip: function (dataByCoordSys, e) {
        var ecModel = this._ecModel;
        var globalTooltipModel = this._tooltipModel;
        var point = [e.offsetX, e.offsetY];
        var singleDefaultHTML = [];
        var singleParamsList = [];
        var singleTooltipModel = buildTooltipModel([e.tooltipOption, globalTooltipModel]);
        var renderMode = this._renderMode;
        var newLine = this._newLine;
        var markers = {};
        each$u(dataByCoordSys, function (itemCoordSys) {
          // var coordParamList = [];
          // var coordDefaultHTML = [];
          // var coordTooltipModel = buildTooltipModel([
          //     e.tooltipOption,
          //     itemCoordSys.tooltipOption,
          //     ecModel.getComponent(itemCoordSys.coordSysMainType, itemCoordSys.coordSysIndex),
          //     globalTooltipModel
          // ]);
          // var displayMode = coordTooltipModel.get('displayMode');
          // var paramsList = displayMode === 'single' ? singleParamsList : [];
          each$u(itemCoordSys.dataByAxis, function (item) {
            var axisModel = ecModel.getComponent(item.axisDim + 'Axis', item.axisIndex);
            var axisValue = item.value;
            var seriesDefaultHTML = [];

            if (!axisModel || axisValue == null) {
              return;
            }

            var valueLabel = viewHelper.getValueLabel(axisValue, axisModel.axis, ecModel, item.seriesDataIndices, item.valueLabelOpt);
            util.each(item.seriesDataIndices, function (idxItem) {
              var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
              var dataIndex = idxItem.dataIndexInside;
              var dataParams = series && series.getDataParams(dataIndex);
              dataParams.axisDim = item.axisDim;
              dataParams.axisIndex = item.axisIndex;
              dataParams.axisType = item.axisType;
              dataParams.axisId = item.axisId;
              dataParams.axisValue = axisHelper.getAxisRawValue(axisModel.axis, axisValue);
              dataParams.axisValueLabel = valueLabel;

              if (dataParams) {
                singleParamsList.push(dataParams);
                var seriesTooltip = series.formatTooltip(dataIndex, true, null, renderMode);
                var html;

                if (util.isObject(seriesTooltip)) {
                  html = seriesTooltip.html;
                  var newMarkers = seriesTooltip.markers;
                  util.merge(markers, newMarkers);
                } else {
                  html = seriesTooltip;
                }

                seriesDefaultHTML.push(html);
              }
            }); // Default tooltip content
            // FIXME
            // (1) shold be the first data which has name?
            // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.

            var firstLine = valueLabel;

            if (renderMode !== 'html') {
              singleDefaultHTML.push(seriesDefaultHTML.join(newLine));
            } else {
              singleDefaultHTML.push((firstLine ? format.encodeHTML(firstLine) + newLine : '') + seriesDefaultHTML.join(newLine));
            }
          });
        }, this); // In most case, the second axis is shown upper than the first one.

        singleDefaultHTML.reverse();
        singleDefaultHTML = singleDefaultHTML.join(this._newLine + this._newLine);
        var positionExpr = e.position;

        this._showOrMove(singleTooltipModel, function () {
          if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {
            this._updatePosition(singleTooltipModel, positionExpr, point[0], point[1], this._tooltipContent, singleParamsList);
          } else {
            this._showTooltipContent(singleTooltipModel, singleDefaultHTML, singleParamsList, Math.random(), point[0], point[1], positionExpr, undefined, markers);
          }
        }); // Do not trigger events here, because this branch only be entered
        // from dispatchAction.

      },
      _showSeriesItemTooltip: function (e, el, dispatchAction) {
        var ecModel = this._ecModel; // Use dataModel in element if possible
        // Used when mouseover on a element like markPoint or edge
        // In which case, the data is not main data in series.

        var seriesIndex = el.seriesIndex;
        var seriesModel = ecModel.getSeriesByIndex(seriesIndex); // For example, graph link.

        var dataModel = el.dataModel || seriesModel;
        var dataIndex = el.dataIndex;
        var dataType = el.dataType;
        var data = dataModel.getData();
        var tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), dataModel, seriesModel && (seriesModel.coordinateSystem || {}).model, this._tooltipModel]);
        var tooltipTrigger = tooltipModel.get('trigger');

        if (tooltipTrigger != null && tooltipTrigger !== 'item') {
          return;
        }

        var params = dataModel.getDataParams(dataIndex, dataType);
        var seriesTooltip = dataModel.formatTooltip(dataIndex, false, dataType, this._renderMode);
        var defaultHtml;
        var markers;

        if (util.isObject(seriesTooltip)) {
          defaultHtml = seriesTooltip.html;
          markers = seriesTooltip.markers;
        } else {
          defaultHtml = seriesTooltip;
          markers = null;
        }

        var asyncTicket = 'item_' + dataModel.name + '_' + dataIndex;

        this._showOrMove(tooltipModel, function () {
          this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target, markers);
        }); // FIXME
        // duplicated showtip if manuallyShowTip is called from dispatchAction.


        dispatchAction({
          type: 'showTip',
          dataIndexInside: dataIndex,
          dataIndex: data.getRawIndex(dataIndex),
          seriesIndex: seriesIndex,
          from: this.uid
        });
      },
      _showComponentItemTooltip: function (e, el, dispatchAction) {
        var tooltipOpt = el.tooltip;

        if (typeof tooltipOpt === 'string') {
          var content = tooltipOpt;
          tooltipOpt = {
            content: content,
            // Fixed formatter
            formatter: content
          };
        }

        var subTooltipModel = new Model_1(tooltipOpt, this._tooltipModel, this._ecModel);
        var defaultHtml = subTooltipModel.get('content');
        var asyncTicket = Math.random(); // Do not check whether `trigger` is 'none' here, because `trigger`
        // only works on cooridinate system. In fact, we have not found case
        // that requires setting `trigger` nothing on component yet.

        this._showOrMove(subTooltipModel, function () {
          this._showTooltipContent(subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {}, asyncTicket, e.offsetX, e.offsetY, e.position, el);
        }); // If not dispatch showTip, tip may be hide triggered by axis.


        dispatchAction({
          type: 'showTip',
          from: this.uid
        });
      },
      _showTooltipContent: function (tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el, markers) {
        // Reset ticket
        this._ticket = '';

        if (!tooltipModel.get('showContent') || !tooltipModel.get('show')) {
          return;
        }

        var tooltipContent = this._tooltipContent;
        var formatter = tooltipModel.get('formatter');
        positionExpr = positionExpr || tooltipModel.get('position');
        var html = defaultHtml;

        if (formatter && typeof formatter === 'string') {
          html = format.formatTpl(formatter, params, true);
        } else if (typeof formatter === 'function') {
          var callback = bind$4(function (cbTicket, html) {
            if (cbTicket === this._ticket) {
              tooltipContent.setContent(html, markers, tooltipModel);

              this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
            }
          }, this);
          this._ticket = asyncTicket;
          html = formatter(params, asyncTicket, callback);
        }

        tooltipContent.setContent(html, markers, tooltipModel);
        tooltipContent.show(tooltipModel);

        this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
      },

      /**
       * @param  {string|Function|Array.<number>|Object} positionExpr
       * @param  {number} x Mouse x
       * @param  {number} y Mouse y
       * @param  {boolean} confine Whether confine tooltip content in view rect.
       * @param  {Object|<Array.<Object>} params
       * @param  {module:zrender/Element} el target element
       * @param  {module:echarts/ExtensionAPI} api
       * @return {Array.<number>}
       */
      _updatePosition: function (tooltipModel, positionExpr, x, y, content, params, el) {
        var viewWidth = this._api.getWidth();

        var viewHeight = this._api.getHeight();

        positionExpr = positionExpr || tooltipModel.get('position');
        var contentSize = content.getSize();
        var align = tooltipModel.get('align');
        var vAlign = tooltipModel.get('verticalAlign');
        var rect = el && el.getBoundingRect().clone();
        el && rect.applyTransform(el.transform);

        if (typeof positionExpr === 'function') {
          // Callback of position can be an array or a string specify the position
          positionExpr = positionExpr([x, y], params, content.el, rect, {
            viewSize: [viewWidth, viewHeight],
            contentSize: contentSize.slice()
          });
        }

        if (util.isArray(positionExpr)) {
          x = parsePercent$4(positionExpr[0], viewWidth);
          y = parsePercent$4(positionExpr[1], viewHeight);
        } else if (util.isObject(positionExpr)) {
          positionExpr.width = contentSize[0];
          positionExpr.height = contentSize[1];
          var layoutRect = layout.getLayoutRect(positionExpr, {
            width: viewWidth,
            height: viewHeight
          });
          x = layoutRect.x;
          y = layoutRect.y;
          align = null; // When positionExpr is left/top/right/bottom,
          // align and verticalAlign will not work.

          vAlign = null;
        } // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
        else if (typeof positionExpr === 'string' && el) {
            var pos = calcTooltipPosition(positionExpr, rect, contentSize);
            x = pos[0];
            y = pos[1];
          } else {
            var pos = refixTooltipPosition(x, y, content, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20);
            x = pos[0];
            y = pos[1];
          }

        align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === 'right' ? contentSize[0] : 0);
        vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === 'bottom' ? contentSize[1] : 0);

        if (tooltipModel.get('confine')) {
          var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);
          x = pos[0];
          y = pos[1];
        }

        content.moveTo(x, y);
      },
      // FIXME
      // Should we remove this but leave this to user?
      _updateContentNotChangedOnAxis: function (dataByCoordSys) {
        var lastCoordSys = this._lastDataByCoordSys;
        var contentNotChanged = !!lastCoordSys && lastCoordSys.length === dataByCoordSys.length;
        contentNotChanged && each$u(lastCoordSys, function (lastItemCoordSys, indexCoordSys) {
          var lastDataByAxis = lastItemCoordSys.dataByAxis || {};
          var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};
          var thisDataByAxis = thisItemCoordSys.dataByAxis || [];
          contentNotChanged &= lastDataByAxis.length === thisDataByAxis.length;
          contentNotChanged && each$u(lastDataByAxis, function (lastItem, indexAxis) {
            var thisItem = thisDataByAxis[indexAxis] || {};
            var lastIndices = lastItem.seriesDataIndices || [];
            var newIndices = thisItem.seriesDataIndices || [];
            contentNotChanged &= lastItem.value === thisItem.value && lastItem.axisType === thisItem.axisType && lastItem.axisId === thisItem.axisId && lastIndices.length === newIndices.length;
            contentNotChanged && each$u(lastIndices, function (lastIdxItem, j) {
              var newIdxItem = newIndices[j];
              contentNotChanged &= lastIdxItem.seriesIndex === newIdxItem.seriesIndex && lastIdxItem.dataIndex === newIdxItem.dataIndex;
            });
          });
        });
        this._lastDataByCoordSys = dataByCoordSys;
        return !!contentNotChanged;
      },
      _hide: function (dispatchAction) {
        // Do not directly hideLater here, because this behavior may be prevented
        // in dispatchAction when showTip is dispatched.
        // FIXME
        // duplicated hideTip if manuallyHideTip is called from dispatchAction.
        this._lastDataByCoordSys = null;
        dispatchAction({
          type: 'hideTip',
          from: this.uid
        });
      },
      dispose: function (ecModel, api) {
        if (env_1.node) {
          return;
        }

        this._tooltipContent.hide();

        globalListener.unregister('itemTooltip', api);
      }
    });
    /**
     * @param {Array.<Object|module:echarts/model/Model>} modelCascade
     * From top to bottom. (the last one should be globalTooltipModel);
     */


    function buildTooltipModel(modelCascade) {
      var resultModel = modelCascade.pop();

      while (modelCascade.length) {
        var tooltipOpt = modelCascade.pop();

        if (tooltipOpt) {
          if (Model_1.isInstance(tooltipOpt)) {
            tooltipOpt = tooltipOpt.get('tooltip', true);
          } // In each data item tooltip can be simply write:
          // {
          //  value: 10,
          //  tooltip: 'Something you need to know'
          // }


          if (typeof tooltipOpt === 'string') {
            tooltipOpt = {
              formatter: tooltipOpt
            };
          }

          resultModel = new Model_1(tooltipOpt, resultModel, resultModel.ecModel);
        }
      }

      return resultModel;
    }

    function makeDispatchAction$1(payload, api) {
      return payload.dispatchAction || util.bind(api.dispatchAction, api);
    }

    function refixTooltipPosition(x, y, content, viewWidth, viewHeight, gapH, gapV) {
      var size = content.getOuterSize();
      var width = size.width;
      var height = size.height;

      if (gapH != null) {
        if (x + width + gapH > viewWidth) {
          x -= width + gapH;
        } else {
          x += gapH;
        }
      }

      if (gapV != null) {
        if (y + height + gapV > viewHeight) {
          y -= height + gapV;
        } else {
          y += gapV;
        }
      }

      return [x, y];
    }

    function confineTooltipPosition(x, y, content, viewWidth, viewHeight) {
      var size = content.getOuterSize();
      var width = size.width;
      var height = size.height;
      x = Math.min(x + width, viewWidth) - width;
      y = Math.min(y + height, viewHeight) - height;
      x = Math.max(x, 0);
      y = Math.max(y, 0);
      return [x, y];
    }

    function calcTooltipPosition(position, rect, contentSize) {
      var domWidth = contentSize[0];
      var domHeight = contentSize[1];
      var gap = 5;
      var x = 0;
      var y = 0;
      var rectWidth = rect.width;
      var rectHeight = rect.height;

      switch (position) {
        case 'inside':
          x = rect.x + rectWidth / 2 - domWidth / 2;
          y = rect.y + rectHeight / 2 - domHeight / 2;
          break;

        case 'top':
          x = rect.x + rectWidth / 2 - domWidth / 2;
          y = rect.y - domHeight - gap;
          break;

        case 'bottom':
          x = rect.x + rectWidth / 2 - domWidth / 2;
          y = rect.y + rectHeight + gap;
          break;

        case 'left':
          x = rect.x - domWidth - gap;
          y = rect.y + rectHeight / 2 - domHeight / 2;
          break;

        case 'right':
          x = rect.x + rectWidth + gap;
          y = rect.y + rectHeight / 2 - domHeight / 2;
      }

      return [x, y];
    }

    function isCenterAlign(align) {
      return align === 'center' || align === 'middle';
    }

    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */









    /*
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.
    */
    // FIXME Better way to pack data in graphic element

    /**
     * @action
     * @property {string} type
     * @property {number} seriesIndex
     * @property {number} dataIndex
     * @property {number} [x]
     * @property {number} [y]
     */
    echarts.registerAction({
      type: 'showTip',
      event: 'showTip',
      update: 'tooltip:manuallyShowTip'
    }, // noop
    function () {});
    echarts.registerAction({
      type: 'hideTip',
      event: 'hideTip',
      update: 'tooltip:manuallyHideTip'
    }, // noop
    function () {});

    var Barcode_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Barcode = function Barcode(data, options) {
    	_classCallCheck(this, Barcode);

    	this.data = data;
    	this.text = options.text || data;
    	this.options = options;
    };

    exports.default = Barcode;
    });

    unwrapExports(Barcode_1);

    var CODE39_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.CODE39 = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // https://en.wikipedia.org/wiki/Code_39#Encoding

    var CODE39 = function (_Barcode) {
    	_inherits(CODE39, _Barcode);

    	function CODE39(data, options) {
    		_classCallCheck(this, CODE39);

    		data = data.toUpperCase();

    		// Calculate mod43 checksum if enabled
    		if (options.mod43) {
    			data += getCharacter(mod43checksum(data));
    		}

    		return _possibleConstructorReturn(this, (CODE39.__proto__ || Object.getPrototypeOf(CODE39)).call(this, data, options));
    	}

    	_createClass(CODE39, [{
    		key: "encode",
    		value: function encode() {
    			// First character is always a *
    			var result = getEncoding("*");

    			// Take every character and add the binary representation to the result
    			for (var i = 0; i < this.data.length; i++) {
    				result += getEncoding(this.data[i]) + "0";
    			}

    			// Last character is always a *
    			result += getEncoding("*");

    			return {
    				data: result,
    				text: this.text
    			};
    		}
    	}, {
    		key: "valid",
    		value: function valid() {
    			return this.data.search(/^[0-9A-Z\-\.\ \$\/\+\%]+$/) !== -1;
    		}
    	}]);

    	return CODE39;
    }(_Barcode3.default);

    // All characters. The position in the array is the (checksum) value


    var characters = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", "*"];

    // The decimal representation of the characters, is converted to the
    // corresponding binary with the getEncoding function
    var encodings = [20957, 29783, 23639, 30485, 20951, 29813, 23669, 20855, 29789, 23645, 29975, 23831, 30533, 22295, 30149, 24005, 21623, 29981, 23837, 22301, 30023, 23879, 30545, 22343, 30161, 24017, 21959, 30065, 23921, 22385, 29015, 18263, 29141, 17879, 29045, 18293, 17783, 29021, 18269, 17477, 17489, 17681, 20753, 35770];

    // Get the binary representation of a character by converting the encodings
    // from decimal to binary
    function getEncoding(character) {
    	return getBinary(characterValue(character));
    }

    function getBinary(characterValue) {
    	return encodings[characterValue].toString(2);
    }

    function getCharacter(characterValue) {
    	return characters[characterValue];
    }

    function characterValue(character) {
    	return characters.indexOf(character);
    }

    function mod43checksum(data) {
    	var checksum = 0;
    	for (var i = 0; i < data.length; i++) {
    		checksum += characterValue(data[i]);
    	}

    	checksum = checksum % 43;
    	return checksum;
    }

    exports.CODE39 = CODE39;
    });

    unwrapExports(CODE39_1);
    var CODE39_2 = CODE39_1.CODE39;

    var constants = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _SET_BY_CODE;

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    // constants for internal usage
    var SET_A = exports.SET_A = 0;
    var SET_B = exports.SET_B = 1;
    var SET_C = exports.SET_C = 2;

    // Special characters
    var SHIFT = exports.SHIFT = 98;
    var START_A = exports.START_A = 103;
    var START_B = exports.START_B = 104;
    var START_C = exports.START_C = 105;
    var MODULO = exports.MODULO = 103;
    var STOP = exports.STOP = 106;
    var FNC1 = exports.FNC1 = 207;

    // Get set by start code
    var SET_BY_CODE = exports.SET_BY_CODE = (_SET_BY_CODE = {}, _defineProperty(_SET_BY_CODE, START_A, SET_A), _defineProperty(_SET_BY_CODE, START_B, SET_B), _defineProperty(_SET_BY_CODE, START_C, SET_C), _SET_BY_CODE);

    // Get next set by code
    var SWAP = exports.SWAP = {
    	101: SET_A,
    	100: SET_B,
    	99: SET_C
    };

    var A_START_CHAR = exports.A_START_CHAR = String.fromCharCode(208); // START_A + 105
    var B_START_CHAR = exports.B_START_CHAR = String.fromCharCode(209); // START_B + 105
    var C_START_CHAR = exports.C_START_CHAR = String.fromCharCode(210); // START_C + 105

    // 128A (Code Set A)
    // ASCII characters 00 to 95 (0–9, A–Z and control codes), special characters, and FNC 1–4
    var A_CHARS = exports.A_CHARS = "[\x00-\x5F\xC8-\xCF]";

    // 128B (Code Set B)
    // ASCII characters 32 to 127 (0–9, A–Z, a–z), special characters, and FNC 1–4
    var B_CHARS = exports.B_CHARS = "[\x20-\x7F\xC8-\xCF]";

    // 128C (Code Set C)
    // 00–99 (encodes two digits with a single code point) and FNC1
    var C_CHARS = exports.C_CHARS = "(\xCF*[0-9]{2}\xCF*)";

    // CODE128 includes 107 symbols:
    // 103 data symbols, 3 start symbols (A, B and C), and 1 stop symbol (the last one)
    // Each symbol consist of three black bars (1) and three white spaces (0).
    var BARS = exports.BARS = [11011001100, 11001101100, 11001100110, 10010011000, 10010001100, 10001001100, 10011001000, 10011000100, 10001100100, 11001001000, 11001000100, 11000100100, 10110011100, 10011011100, 10011001110, 10111001100, 10011101100, 10011100110, 11001110010, 11001011100, 11001001110, 11011100100, 11001110100, 11101101110, 11101001100, 11100101100, 11100100110, 11101100100, 11100110100, 11100110010, 11011011000, 11011000110, 11000110110, 10100011000, 10001011000, 10001000110, 10110001000, 10001101000, 10001100010, 11010001000, 11000101000, 11000100010, 10110111000, 10110001110, 10001101110, 10111011000, 10111000110, 10001110110, 11101110110, 11010001110, 11000101110, 11011101000, 11011100010, 11011101110, 11101011000, 11101000110, 11100010110, 11101101000, 11101100010, 11100011010, 11101111010, 11001000010, 11110001010, 10100110000, 10100001100, 10010110000, 10010000110, 10000101100, 10000100110, 10110010000, 10110000100, 10011010000, 10011000010, 10000110100, 10000110010, 11000010010, 11001010000, 11110111010, 11000010100, 10001111010, 10100111100, 10010111100, 10010011110, 10111100100, 10011110100, 10011110010, 11110100100, 11110010100, 11110010010, 11011011110, 11011110110, 11110110110, 10101111000, 10100011110, 10001011110, 10111101000, 10111100010, 11110101000, 11110100010, 10111011110, 10111101110, 11101011110, 11110101110, 11010000100, 11010010000, 11010011100, 1100011101011];
    });

    unwrapExports(constants);
    var constants_1 = constants.SET_A;
    var constants_2 = constants.SET_B;
    var constants_3 = constants.SET_C;
    var constants_4 = constants.SHIFT;
    var constants_5 = constants.START_A;
    var constants_6 = constants.START_B;
    var constants_7 = constants.START_C;
    var constants_8 = constants.MODULO;
    var constants_9 = constants.STOP;
    var constants_10 = constants.FNC1;
    var constants_11 = constants.SET_BY_CODE;
    var constants_12 = constants.SWAP;
    var constants_13 = constants.A_START_CHAR;
    var constants_14 = constants.B_START_CHAR;
    var constants_15 = constants.C_START_CHAR;
    var constants_16 = constants.A_CHARS;
    var constants_17 = constants.B_CHARS;
    var constants_18 = constants.C_CHARS;
    var constants_19 = constants.BARS;

    var CODE128_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _Barcode3 = _interopRequireDefault(Barcode_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    // This is the master class,
    // it does require the start code to be included in the string
    var CODE128 = function (_Barcode) {
    	_inherits(CODE128, _Barcode);

    	function CODE128(data, options) {
    		_classCallCheck(this, CODE128);

    		// Get array of ascii codes from data
    		var _this = _possibleConstructorReturn(this, (CODE128.__proto__ || Object.getPrototypeOf(CODE128)).call(this, data.substring(1), options));

    		_this.bytes = data.split('').map(function (char) {
    			return char.charCodeAt(0);
    		});
    		return _this;
    	}

    	_createClass(CODE128, [{
    		key: 'valid',
    		value: function valid() {
    			// ASCII value ranges 0-127, 200-211
    			return (/^[\x00-\x7F\xC8-\xD3]+$/.test(this.data)
    			);
    		}

    		// The public encoding function

    	}, {
    		key: 'encode',
    		value: function encode() {
    			var bytes = this.bytes;
    			// Remove the start code from the bytes and set its index
    			var startIndex = bytes.shift() - 105;
    			// Get start set by index
    			var startSet = constants.SET_BY_CODE[startIndex];

    			if (startSet === undefined) {
    				throw new RangeError('The encoding does not start with a start character.');
    			}

    			if (this.shouldEncodeAsEan128() === true) {
    				bytes.unshift(constants.FNC1);
    			}

    			// Start encode with the right type
    			var encodingResult = CODE128.next(bytes, 1, startSet);

    			return {
    				text: this.text === this.data ? this.text.replace(/[^\x20-\x7E]/g, '') : this.text,
    				data:
    				// Add the start bits
    				CODE128.getBar(startIndex) +
    				// Add the encoded bits
    				encodingResult.result +
    				// Add the checksum
    				CODE128.getBar((encodingResult.checksum + startIndex) % constants.MODULO) +
    				// Add the end bits
    				CODE128.getBar(constants.STOP)
    			};
    		}

    		// GS1-128/EAN-128

    	}, {
    		key: 'shouldEncodeAsEan128',
    		value: function shouldEncodeAsEan128() {
    			var isEAN128 = this.options.ean128 || false;
    			if (typeof isEAN128 === 'string') {
    				isEAN128 = isEAN128.toLowerCase() === 'true';
    			}
    			return isEAN128;
    		}

    		// Get a bar symbol by index

    	}], [{
    		key: 'getBar',
    		value: function getBar(index) {
    			return constants.BARS[index] ? constants.BARS[index].toString() : '';
    		}

    		// Correct an index by a set and shift it from the bytes array

    	}, {
    		key: 'correctIndex',
    		value: function correctIndex(bytes, set) {
    			if (set === constants.SET_A) {
    				var charCode = bytes.shift();
    				return charCode < 32 ? charCode + 64 : charCode - 32;
    			} else if (set === constants.SET_B) {
    				return bytes.shift() - 32;
    			} else {
    				return (bytes.shift() - 48) * 10 + bytes.shift() - 48;
    			}
    		}
    	}, {
    		key: 'next',
    		value: function next(bytes, pos, set) {
    			if (!bytes.length) {
    				return { result: '', checksum: 0 };
    			}

    			var nextCode = void 0,
    			    index = void 0;

    			// Special characters
    			if (bytes[0] >= 200) {
    				index = bytes.shift() - 105;
    				var nextSet = constants.SWAP[index];

    				// Swap to other set
    				if (nextSet !== undefined) {
    					nextCode = CODE128.next(bytes, pos + 1, nextSet);
    				}
    				// Continue on current set but encode a special character
    				else {
    						// Shift
    						if ((set === constants.SET_A || set === constants.SET_B) && index === constants.SHIFT) {
    							// Convert the next character so that is encoded correctly
    							bytes[0] = set === constants.SET_A ? bytes[0] > 95 ? bytes[0] - 96 : bytes[0] : bytes[0] < 32 ? bytes[0] + 96 : bytes[0];
    						}
    						nextCode = CODE128.next(bytes, pos + 1, set);
    					}
    			}
    			// Continue encoding
    			else {
    					index = CODE128.correctIndex(bytes, set);
    					nextCode = CODE128.next(bytes, pos + 1, set);
    				}

    			// Get the correct binary encoding and calculate the weight
    			var enc = CODE128.getBar(index);
    			var weight = index * pos;

    			return {
    				result: enc + nextCode.result,
    				checksum: weight + nextCode.checksum
    			};
    		}
    	}]);

    	return CODE128;
    }(_Barcode3.default);

    exports.default = CODE128;
    });

    unwrapExports(CODE128_1);

    var auto = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    // Match Set functions
    var matchSetALength = function matchSetALength(string) {
    	return string.match(new RegExp('^' + constants.A_CHARS + '*'))[0].length;
    };
    var matchSetBLength = function matchSetBLength(string) {
    	return string.match(new RegExp('^' + constants.B_CHARS + '*'))[0].length;
    };
    var matchSetC = function matchSetC(string) {
    	return string.match(new RegExp('^' + constants.C_CHARS + '*'))[0];
    };

    // CODE128A or CODE128B
    function autoSelectFromAB(string, isA) {
    	var ranges = isA ? constants.A_CHARS : constants.B_CHARS;
    	var untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));

    	if (untilC) {
    		return untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));
    	}

    	var chars = string.match(new RegExp('^' + ranges + '+'))[0];

    	if (chars.length === string.length) {
    		return string;
    	}

    	return chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);
    }

    // CODE128C
    function autoSelectFromC(string) {
    	var cMatch = matchSetC(string);
    	var length = cMatch.length;

    	if (length === string.length) {
    		return string;
    	}

    	string = string.substring(length);

    	// Select A/B depending on the longest match
    	var isA = matchSetALength(string) >= matchSetBLength(string);
    	return cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);
    }

    // Detect Code Set (A, B or C) and format the string

    exports.default = function (string) {
    	var newString = void 0;
    	var cLength = matchSetC(string).length;

    	// Select 128C if the string start with enough digits
    	if (cLength >= 2) {
    		newString = constants.C_START_CHAR + autoSelectFromC(string);
    	} else {
    		// Select A/B depending on the longest match
    		var isA = matchSetALength(string) > matchSetBLength(string);
    		newString = (isA ? constants.A_START_CHAR : constants.B_START_CHAR) + autoSelectFromAB(string, isA);
    	}

    	return newString.replace(/[\xCD\xCE]([^])[\xCD\xCE]/, // Any sequence between 205 and 206 characters
    	function (match, char) {
    		return String.fromCharCode(203) + char;
    	});
    };
    });

    unwrapExports(auto);

    var CODE128_AUTO = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    var _CODE3 = _interopRequireDefault(CODE128_1);



    var _auto2 = _interopRequireDefault(auto);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var CODE128AUTO = function (_CODE) {
    	_inherits(CODE128AUTO, _CODE);

    	function CODE128AUTO(data, options) {
    		_classCallCheck(this, CODE128AUTO);

    		// ASCII value ranges 0-127, 200-211
    		if (/^[\x00-\x7F\xC8-\xD3]+$/.test(data)) {
    			var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, (0, _auto2.default)(data), options));
    		} else {
    			var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, data, options));
    		}
    		return _possibleConstructorReturn(_this);
    	}

    	return CODE128AUTO;
    }(_CODE3.default);

    exports.default = CODE128AUTO;
    });

    unwrapExports(CODE128_AUTO);

    var CODE128A_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _CODE3 = _interopRequireDefault(CODE128_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var CODE128A = function (_CODE) {
    	_inherits(CODE128A, _CODE);

    	function CODE128A(string, options) {
    		_classCallCheck(this, CODE128A);

    		return _possibleConstructorReturn(this, (CODE128A.__proto__ || Object.getPrototypeOf(CODE128A)).call(this, constants.A_START_CHAR + string, options));
    	}

    	_createClass(CODE128A, [{
    		key: 'valid',
    		value: function valid() {
    			return new RegExp('^' + constants.A_CHARS + '+$').test(this.data);
    		}
    	}]);

    	return CODE128A;
    }(_CODE3.default);

    exports.default = CODE128A;
    });

    unwrapExports(CODE128A_1);

    var CODE128B_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _CODE3 = _interopRequireDefault(CODE128_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var CODE128B = function (_CODE) {
    	_inherits(CODE128B, _CODE);

    	function CODE128B(string, options) {
    		_classCallCheck(this, CODE128B);

    		return _possibleConstructorReturn(this, (CODE128B.__proto__ || Object.getPrototypeOf(CODE128B)).call(this, constants.B_START_CHAR + string, options));
    	}

    	_createClass(CODE128B, [{
    		key: 'valid',
    		value: function valid() {
    			return new RegExp('^' + constants.B_CHARS + '+$').test(this.data);
    		}
    	}]);

    	return CODE128B;
    }(_CODE3.default);

    exports.default = CODE128B;
    });

    unwrapExports(CODE128B_1);

    var CODE128C_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _CODE3 = _interopRequireDefault(CODE128_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var CODE128C = function (_CODE) {
    	_inherits(CODE128C, _CODE);

    	function CODE128C(string, options) {
    		_classCallCheck(this, CODE128C);

    		return _possibleConstructorReturn(this, (CODE128C.__proto__ || Object.getPrototypeOf(CODE128C)).call(this, constants.C_START_CHAR + string, options));
    	}

    	_createClass(CODE128C, [{
    		key: 'valid',
    		value: function valid() {
    			return new RegExp('^' + constants.C_CHARS + '+$').test(this.data);
    		}
    	}]);

    	return CODE128C;
    }(_CODE3.default);

    exports.default = CODE128C;
    });

    unwrapExports(CODE128C_1);

    var CODE128 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CODE128C = exports.CODE128B = exports.CODE128A = exports.CODE128 = undefined;



    var _CODE128_AUTO2 = _interopRequireDefault(CODE128_AUTO);



    var _CODE128A2 = _interopRequireDefault(CODE128A_1);



    var _CODE128B2 = _interopRequireDefault(CODE128B_1);



    var _CODE128C2 = _interopRequireDefault(CODE128C_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.CODE128 = _CODE128_AUTO2.default;
    exports.CODE128A = _CODE128A2.default;
    exports.CODE128B = _CODE128B2.default;
    exports.CODE128C = _CODE128C2.default;
    });

    unwrapExports(CODE128);
    var CODE128_1$1 = CODE128.CODE128C;
    var CODE128_2 = CODE128.CODE128B;
    var CODE128_3 = CODE128.CODE128A;
    var CODE128_4 = CODE128.CODE128;

    var constants$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    // Standard start end and middle bits
    var SIDE_BIN = exports.SIDE_BIN = '101';
    var MIDDLE_BIN = exports.MIDDLE_BIN = '01010';

    var BINARIES = exports.BINARIES = {
    	'L': [// The L (left) type of encoding
    	'0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],
    	'G': [// The G type of encoding
    	'0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111'],
    	'R': [// The R (right) type of encoding
    	'1110010', '1100110', '1101100', '1000010', '1011100', '1001110', '1010000', '1000100', '1001000', '1110100'],
    	'O': [// The O (odd) encoding for UPC-E
    	'0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],
    	'E': [// The E (even) encoding for UPC-E
    	'0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111']
    };

    // Define the EAN-2 structure
    var EAN2_STRUCTURE = exports.EAN2_STRUCTURE = ['LL', 'LG', 'GL', 'GG'];

    // Define the EAN-5 structure
    var EAN5_STRUCTURE = exports.EAN5_STRUCTURE = ['GGLLL', 'GLGLL', 'GLLGL', 'GLLLG', 'LGGLL', 'LLGGL', 'LLLGG', 'LGLGL', 'LGLLG', 'LLGLG'];

    // Define the EAN-13 structure
    var EAN13_STRUCTURE = exports.EAN13_STRUCTURE = ['LLLLLL', 'LLGLGG', 'LLGGLG', 'LLGGGL', 'LGLLGG', 'LGGLLG', 'LGGGLL', 'LGLGLG', 'LGLGGL', 'LGGLGL'];
    });

    unwrapExports(constants$1);
    var constants_1$1 = constants$1.SIDE_BIN;
    var constants_2$1 = constants$1.MIDDLE_BIN;
    var constants_3$1 = constants$1.BINARIES;
    var constants_4$1 = constants$1.EAN2_STRUCTURE;
    var constants_5$1 = constants$1.EAN5_STRUCTURE;
    var constants_6$1 = constants$1.EAN13_STRUCTURE;

    var encoder = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    // Encode data string
    var encode = function encode(data, structure, separator) {
    	var encoded = data.split('').map(function (val, idx) {
    		return constants$1.BINARIES[structure[idx]];
    	}).map(function (val, idx) {
    		return val ? val[data[idx]] : '';
    	});

    	if (separator) {
    		var last = data.length - 1;
    		encoded = encoded.map(function (val, idx) {
    			return idx < last ? val + separator : val;
    		});
    	}

    	return encoded.join('');
    };

    exports.default = encode;
    });

    unwrapExports(encoder);

    var EAN_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();





    var _encoder2 = _interopRequireDefault(encoder);



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    // Base class for EAN8 & EAN13
    var EAN = function (_Barcode) {
    	_inherits(EAN, _Barcode);

    	function EAN(data, options) {
    		_classCallCheck(this, EAN);

    		// Make sure the font is not bigger than the space between the guard bars
    		var _this = _possibleConstructorReturn(this, (EAN.__proto__ || Object.getPrototypeOf(EAN)).call(this, data, options));

    		_this.fontSize = !options.flat && options.fontSize > options.width * 10 ? options.width * 10 : options.fontSize;

    		// Make the guard bars go down half the way of the text
    		_this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;
    		return _this;
    	}

    	_createClass(EAN, [{
    		key: 'encode',
    		value: function encode() {
    			return this.options.flat ? this.encodeFlat() : this.encodeGuarded();
    		}
    	}, {
    		key: 'leftText',
    		value: function leftText(from, to) {
    			return this.text.substr(from, to);
    		}
    	}, {
    		key: 'leftEncode',
    		value: function leftEncode(data, structure) {
    			return (0, _encoder2.default)(data, structure);
    		}
    	}, {
    		key: 'rightText',
    		value: function rightText(from, to) {
    			return this.text.substr(from, to);
    		}
    	}, {
    		key: 'rightEncode',
    		value: function rightEncode(data, structure) {
    			return (0, _encoder2.default)(data, structure);
    		}
    	}, {
    		key: 'encodeGuarded',
    		value: function encodeGuarded() {
    			var textOptions = { fontSize: this.fontSize };
    			var guardOptions = { height: this.guardHeight };

    			return [{ data: constants$1.SIDE_BIN, options: guardOptions }, { data: this.leftEncode(), text: this.leftText(), options: textOptions }, { data: constants$1.MIDDLE_BIN, options: guardOptions }, { data: this.rightEncode(), text: this.rightText(), options: textOptions }, { data: constants$1.SIDE_BIN, options: guardOptions }];
    		}
    	}, {
    		key: 'encodeFlat',
    		value: function encodeFlat() {
    			var data = [constants$1.SIDE_BIN, this.leftEncode(), constants$1.MIDDLE_BIN, this.rightEncode(), constants$1.SIDE_BIN];

    			return {
    				data: data.join(''),
    				text: this.text
    			};
    		}
    	}]);

    	return EAN;
    }(_Barcode3.default);

    exports.default = EAN;
    });

    unwrapExports(EAN_1);

    var EAN13_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };





    var _EAN3 = _interopRequireDefault(EAN_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Binary_encoding_of_data_digits_into_EAN-13_barcode

    // Calculate the checksum digit
    // https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit
    var checksum = function checksum(number) {
    	var res = number.substr(0, 12).split('').map(function (n) {
    		return +n;
    	}).reduce(function (sum, a, idx) {
    		return idx % 2 ? sum + a * 3 : sum + a;
    	}, 0);

    	return (10 - res % 10) % 10;
    };

    var EAN13 = function (_EAN) {
    	_inherits(EAN13, _EAN);

    	function EAN13(data, options) {
    		_classCallCheck(this, EAN13);

    		// Add checksum if it does not exist
    		if (data.search(/^[0-9]{12}$/) !== -1) {
    			data += checksum(data);
    		}

    		// Adds a last character to the end of the barcode
    		var _this = _possibleConstructorReturn(this, (EAN13.__proto__ || Object.getPrototypeOf(EAN13)).call(this, data, options));

    		_this.lastChar = options.lastChar;
    		return _this;
    	}

    	_createClass(EAN13, [{
    		key: 'valid',
    		value: function valid() {
    			return this.data.search(/^[0-9]{13}$/) !== -1 && +this.data[12] === checksum(this.data);
    		}
    	}, {
    		key: 'leftText',
    		value: function leftText() {
    			return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftText', this).call(this, 1, 6);
    		}
    	}, {
    		key: 'leftEncode',
    		value: function leftEncode() {
    			var data = this.data.substr(1, 6);
    			var structure = constants$1.EAN13_STRUCTURE[this.data[0]];
    			return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftEncode', this).call(this, data, structure);
    		}
    	}, {
    		key: 'rightText',
    		value: function rightText() {
    			return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightText', this).call(this, 7, 6);
    		}
    	}, {
    		key: 'rightEncode',
    		value: function rightEncode() {
    			var data = this.data.substr(7, 6);
    			return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightEncode', this).call(this, data, 'RRRRRR');
    		}

    		// The "standard" way of printing EAN13 barcodes with guard bars

    	}, {
    		key: 'encodeGuarded',
    		value: function encodeGuarded() {
    			var data = _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'encodeGuarded', this).call(this);

    			// Extend data with left digit & last character
    			if (this.options.displayValue) {
    				data.unshift({
    					data: '000000000000',
    					text: this.text.substr(0, 1),
    					options: { textAlign: 'left', fontSize: this.fontSize }
    				});

    				if (this.options.lastChar) {
    					data.push({
    						data: '00'
    					});
    					data.push({
    						data: '00000',
    						text: this.options.lastChar,
    						options: { fontSize: this.fontSize }
    					});
    				}
    			}

    			return data;
    		}
    	}]);

    	return EAN13;
    }(_EAN3.default);

    exports.default = EAN13;
    });

    unwrapExports(EAN13_1);

    var EAN8_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };



    var _EAN3 = _interopRequireDefault(EAN_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // http://www.barcodeisland.com/ean8.phtml

    // Calculate the checksum digit
    var checksum = function checksum(number) {
    	var res = number.substr(0, 7).split('').map(function (n) {
    		return +n;
    	}).reduce(function (sum, a, idx) {
    		return idx % 2 ? sum + a : sum + a * 3;
    	}, 0);

    	return (10 - res % 10) % 10;
    };

    var EAN8 = function (_EAN) {
    	_inherits(EAN8, _EAN);

    	function EAN8(data, options) {
    		_classCallCheck(this, EAN8);

    		// Add checksum if it does not exist
    		if (data.search(/^[0-9]{7}$/) !== -1) {
    			data += checksum(data);
    		}

    		return _possibleConstructorReturn(this, (EAN8.__proto__ || Object.getPrototypeOf(EAN8)).call(this, data, options));
    	}

    	_createClass(EAN8, [{
    		key: 'valid',
    		value: function valid() {
    			return this.data.search(/^[0-9]{8}$/) !== -1 && +this.data[7] === checksum(this.data);
    		}
    	}, {
    		key: 'leftText',
    		value: function leftText() {
    			return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftText', this).call(this, 0, 4);
    		}
    	}, {
    		key: 'leftEncode',
    		value: function leftEncode() {
    			var data = this.data.substr(0, 4);
    			return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftEncode', this).call(this, data, 'LLLL');
    		}
    	}, {
    		key: 'rightText',
    		value: function rightText() {
    			return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightText', this).call(this, 4, 4);
    		}
    	}, {
    		key: 'rightEncode',
    		value: function rightEncode() {
    			var data = this.data.substr(4, 4);
    			return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightEncode', this).call(this, data, 'RRRR');
    		}
    	}]);

    	return EAN8;
    }(_EAN3.default);

    exports.default = EAN8;
    });

    unwrapExports(EAN8_1);

    var EAN5_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();





    var _encoder2 = _interopRequireDefault(encoder);



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // https://en.wikipedia.org/wiki/EAN_5#Encoding

    var checksum = function checksum(data) {
    	var result = data.split('').map(function (n) {
    		return +n;
    	}).reduce(function (sum, a, idx) {
    		return idx % 2 ? sum + a * 9 : sum + a * 3;
    	}, 0);
    	return result % 10;
    };

    var EAN5 = function (_Barcode) {
    	_inherits(EAN5, _Barcode);

    	function EAN5(data, options) {
    		_classCallCheck(this, EAN5);

    		return _possibleConstructorReturn(this, (EAN5.__proto__ || Object.getPrototypeOf(EAN5)).call(this, data, options));
    	}

    	_createClass(EAN5, [{
    		key: 'valid',
    		value: function valid() {
    			return this.data.search(/^[0-9]{5}$/) !== -1;
    		}
    	}, {
    		key: 'encode',
    		value: function encode() {
    			var structure = constants$1.EAN5_STRUCTURE[checksum(this.data)];
    			return {
    				data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),
    				text: this.text
    			};
    		}
    	}]);

    	return EAN5;
    }(_Barcode3.default);

    exports.default = EAN5;
    });

    unwrapExports(EAN5_1);

    var EAN2_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();





    var _encoder2 = _interopRequireDefault(encoder);



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // https://en.wikipedia.org/wiki/EAN_2#Encoding

    var EAN2 = function (_Barcode) {
    	_inherits(EAN2, _Barcode);

    	function EAN2(data, options) {
    		_classCallCheck(this, EAN2);

    		return _possibleConstructorReturn(this, (EAN2.__proto__ || Object.getPrototypeOf(EAN2)).call(this, data, options));
    	}

    	_createClass(EAN2, [{
    		key: 'valid',
    		value: function valid() {
    			return this.data.search(/^[0-9]{2}$/) !== -1;
    		}
    	}, {
    		key: 'encode',
    		value: function encode() {
    			// Choose the structure based on the number mod 4
    			var structure = constants$1.EAN2_STRUCTURE[parseInt(this.data) % 4];
    			return {
    				// Start bits + Encode the two digits with 01 in between
    				data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),
    				text: this.text
    			};
    		}
    	}]);

    	return EAN2;
    }(_Barcode3.default);

    exports.default = EAN2;
    });

    unwrapExports(EAN2_1);

    var UPC_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    exports.checksum = checksum;



    var _encoder2 = _interopRequireDefault(encoder);



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding

    var UPC = function (_Barcode) {
    	_inherits(UPC, _Barcode);

    	function UPC(data, options) {
    		_classCallCheck(this, UPC);

    		// Add checksum if it does not exist
    		if (data.search(/^[0-9]{11}$/) !== -1) {
    			data += checksum(data);
    		}

    		var _this = _possibleConstructorReturn(this, (UPC.__proto__ || Object.getPrototypeOf(UPC)).call(this, data, options));

    		_this.displayValue = options.displayValue;

    		// Make sure the font is not bigger than the space between the guard bars
    		if (options.fontSize > options.width * 10) {
    			_this.fontSize = options.width * 10;
    		} else {
    			_this.fontSize = options.fontSize;
    		}

    		// Make the guard bars go down half the way of the text
    		_this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;
    		return _this;
    	}

    	_createClass(UPC, [{
    		key: "valid",
    		value: function valid() {
    			return this.data.search(/^[0-9]{12}$/) !== -1 && this.data[11] == checksum(this.data);
    		}
    	}, {
    		key: "encode",
    		value: function encode() {
    			if (this.options.flat) {
    				return this.flatEncoding();
    			} else {
    				return this.guardedEncoding();
    			}
    		}
    	}, {
    		key: "flatEncoding",
    		value: function flatEncoding() {
    			var result = "";

    			result += "101";
    			result += (0, _encoder2.default)(this.data.substr(0, 6), "LLLLLL");
    			result += "01010";
    			result += (0, _encoder2.default)(this.data.substr(6, 6), "RRRRRR");
    			result += "101";

    			return {
    				data: result,
    				text: this.text
    			};
    		}
    	}, {
    		key: "guardedEncoding",
    		value: function guardedEncoding() {
    			var result = [];

    			// Add the first digit
    			if (this.displayValue) {
    				result.push({
    					data: "00000000",
    					text: this.text.substr(0, 1),
    					options: { textAlign: "left", fontSize: this.fontSize }
    				});
    			}

    			// Add the guard bars
    			result.push({
    				data: "101" + (0, _encoder2.default)(this.data[0], "L"),
    				options: { height: this.guardHeight }
    			});

    			// Add the left side
    			result.push({
    				data: (0, _encoder2.default)(this.data.substr(1, 5), "LLLLL"),
    				text: this.text.substr(1, 5),
    				options: { fontSize: this.fontSize }
    			});

    			// Add the middle bits
    			result.push({
    				data: "01010",
    				options: { height: this.guardHeight }
    			});

    			// Add the right side
    			result.push({
    				data: (0, _encoder2.default)(this.data.substr(6, 5), "RRRRR"),
    				text: this.text.substr(6, 5),
    				options: { fontSize: this.fontSize }
    			});

    			// Add the end bits
    			result.push({
    				data: (0, _encoder2.default)(this.data[11], "R") + "101",
    				options: { height: this.guardHeight }
    			});

    			// Add the last digit
    			if (this.displayValue) {
    				result.push({
    					data: "00000000",
    					text: this.text.substr(11, 1),
    					options: { textAlign: "right", fontSize: this.fontSize }
    				});
    			}

    			return result;
    		}
    	}]);

    	return UPC;
    }(_Barcode3.default);

    // Calulate the checksum digit
    // https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit


    function checksum(number) {
    	var result = 0;

    	var i;
    	for (i = 1; i < 11; i += 2) {
    		result += parseInt(number[i]);
    	}
    	for (i = 0; i < 11; i += 2) {
    		result += parseInt(number[i]) * 3;
    	}

    	return (10 - result % 10) % 10;
    }

    exports.default = UPC;
    });

    unwrapExports(UPC_1);
    var UPC_2 = UPC_1.checksum;

    var UPCE_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _encoder2 = _interopRequireDefault(encoder);



    var _Barcode3 = _interopRequireDefault(Barcode_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation:
    // https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding
    //
    // UPC-E documentation:
    // https://en.wikipedia.org/wiki/Universal_Product_Code#UPC-E

    var EXPANSIONS = ["XX00000XXX", "XX10000XXX", "XX20000XXX", "XXX00000XX", "XXXX00000X", "XXXXX00005", "XXXXX00006", "XXXXX00007", "XXXXX00008", "XXXXX00009"];

    var PARITIES = [["EEEOOO", "OOOEEE"], ["EEOEOO", "OOEOEE"], ["EEOOEO", "OOEEOE"], ["EEOOOE", "OOEEEO"], ["EOEEOO", "OEOOEE"], ["EOOEEO", "OEEOOE"], ["EOOOEE", "OEEEOO"], ["EOEOEO", "OEOEOE"], ["EOEOOE", "OEOEEO"], ["EOOEOE", "OEEOEO"]];

    var UPCE = function (_Barcode) {
    	_inherits(UPCE, _Barcode);

    	function UPCE(data, options) {
    		_classCallCheck(this, UPCE);

    		var _this = _possibleConstructorReturn(this, (UPCE.__proto__ || Object.getPrototypeOf(UPCE)).call(this, data, options));
    		// Code may be 6 or 8 digits;
    		// A 7 digit code is ambiguous as to whether the extra digit
    		// is a UPC-A check or number system digit.


    		_this.isValid = false;
    		if (data.search(/^[0-9]{6}$/) !== -1) {
    			_this.middleDigits = data;
    			_this.upcA = expandToUPCA(data, "0");
    			_this.text = options.text || '' + _this.upcA[0] + data + _this.upcA[_this.upcA.length - 1];
    			_this.isValid = true;
    		} else if (data.search(/^[01][0-9]{7}$/) !== -1) {
    			_this.middleDigits = data.substring(1, data.length - 1);
    			_this.upcA = expandToUPCA(_this.middleDigits, data[0]);

    			if (_this.upcA[_this.upcA.length - 1] === data[data.length - 1]) {
    				_this.isValid = true;
    			} else {
    				// checksum mismatch
    				return _possibleConstructorReturn(_this);
    			}
    		} else {
    			return _possibleConstructorReturn(_this);
    		}

    		_this.displayValue = options.displayValue;

    		// Make sure the font is not bigger than the space between the guard bars
    		if (options.fontSize > options.width * 10) {
    			_this.fontSize = options.width * 10;
    		} else {
    			_this.fontSize = options.fontSize;
    		}

    		// Make the guard bars go down half the way of the text
    		_this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;
    		return _this;
    	}

    	_createClass(UPCE, [{
    		key: 'valid',
    		value: function valid() {
    			return this.isValid;
    		}
    	}, {
    		key: 'encode',
    		value: function encode() {
    			if (this.options.flat) {
    				return this.flatEncoding();
    			} else {
    				return this.guardedEncoding();
    			}
    		}
    	}, {
    		key: 'flatEncoding',
    		value: function flatEncoding() {
    			var result = "";

    			result += "101";
    			result += this.encodeMiddleDigits();
    			result += "010101";

    			return {
    				data: result,
    				text: this.text
    			};
    		}
    	}, {
    		key: 'guardedEncoding',
    		value: function guardedEncoding() {
    			var result = [];

    			// Add the UPC-A number system digit beneath the quiet zone
    			if (this.displayValue) {
    				result.push({
    					data: "00000000",
    					text: this.text[0],
    					options: { textAlign: "left", fontSize: this.fontSize }
    				});
    			}

    			// Add the guard bars
    			result.push({
    				data: "101",
    				options: { height: this.guardHeight }
    			});

    			// Add the 6 UPC-E digits
    			result.push({
    				data: this.encodeMiddleDigits(),
    				text: this.text.substring(1, 7),
    				options: { fontSize: this.fontSize }
    			});

    			// Add the end bits
    			result.push({
    				data: "010101",
    				options: { height: this.guardHeight }
    			});

    			// Add the UPC-A check digit beneath the quiet zone
    			if (this.displayValue) {
    				result.push({
    					data: "00000000",
    					text: this.text[7],
    					options: { textAlign: "right", fontSize: this.fontSize }
    				});
    			}

    			return result;
    		}
    	}, {
    		key: 'encodeMiddleDigits',
    		value: function encodeMiddleDigits() {
    			var numberSystem = this.upcA[0];
    			var checkDigit = this.upcA[this.upcA.length - 1];
    			var parity = PARITIES[parseInt(checkDigit)][parseInt(numberSystem)];
    			return (0, _encoder2.default)(this.middleDigits, parity);
    		}
    	}]);

    	return UPCE;
    }(_Barcode3.default);

    function expandToUPCA(middleDigits, numberSystem) {
    	var lastUpcE = parseInt(middleDigits[middleDigits.length - 1]);
    	var expansion = EXPANSIONS[lastUpcE];

    	var result = "";
    	var digitIndex = 0;
    	for (var i = 0; i < expansion.length; i++) {
    		var c = expansion[i];
    		if (c === 'X') {
    			result += middleDigits[digitIndex++];
    		} else {
    			result += c;
    		}
    	}

    	result = '' + numberSystem + result;
    	return '' + result + (0, UPC_1.checksum)(result);
    }

    exports.default = UPCE;
    });

    unwrapExports(UPCE_1);

    var EAN_UPC = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.UPCE = exports.UPC = exports.EAN2 = exports.EAN5 = exports.EAN8 = exports.EAN13 = undefined;



    var _EAN2 = _interopRequireDefault(EAN13_1);



    var _EAN4 = _interopRequireDefault(EAN8_1);



    var _EAN6 = _interopRequireDefault(EAN5_1);



    var _EAN8 = _interopRequireDefault(EAN2_1);



    var _UPC2 = _interopRequireDefault(UPC_1);



    var _UPCE2 = _interopRequireDefault(UPCE_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.EAN13 = _EAN2.default;
    exports.EAN8 = _EAN4.default;
    exports.EAN5 = _EAN6.default;
    exports.EAN2 = _EAN8.default;
    exports.UPC = _UPC2.default;
    exports.UPCE = _UPCE2.default;
    });

    unwrapExports(EAN_UPC);
    var EAN_UPC_1 = EAN_UPC.UPCE;
    var EAN_UPC_2 = EAN_UPC.UPC;
    var EAN_UPC_3 = EAN_UPC.EAN2;
    var EAN_UPC_4 = EAN_UPC.EAN5;
    var EAN_UPC_5 = EAN_UPC.EAN8;
    var EAN_UPC_6 = EAN_UPC.EAN13;

    var constants$2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    var START_BIN = exports.START_BIN = '1010';
    var END_BIN = exports.END_BIN = '11101';

    var BINARIES = exports.BINARIES = ['00110', '10001', '01001', '11000', '00101', '10100', '01100', '00011', '10010', '01010'];
    });

    unwrapExports(constants$2);
    var constants_1$2 = constants$2.START_BIN;
    var constants_2$2 = constants$2.END_BIN;
    var constants_3$2 = constants$2.BINARIES;

    var ITF_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();





    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var ITF = function (_Barcode) {
    	_inherits(ITF, _Barcode);

    	function ITF() {
    		_classCallCheck(this, ITF);

    		return _possibleConstructorReturn(this, (ITF.__proto__ || Object.getPrototypeOf(ITF)).apply(this, arguments));
    	}

    	_createClass(ITF, [{
    		key: 'valid',
    		value: function valid() {
    			return this.data.search(/^([0-9]{2})+$/) !== -1;
    		}
    	}, {
    		key: 'encode',
    		value: function encode() {
    			var _this2 = this;

    			// Calculate all the digit pairs
    			var encoded = this.data.match(/.{2}/g).map(function (pair) {
    				return _this2.encodePair(pair);
    			}).join('');

    			return {
    				data: constants$2.START_BIN + encoded + constants$2.END_BIN,
    				text: this.text
    			};
    		}

    		// Calculate the data of a number pair

    	}, {
    		key: 'encodePair',
    		value: function encodePair(pair) {
    			var second = constants$2.BINARIES[pair[1]];

    			return constants$2.BINARIES[pair[0]].split('').map(function (first, idx) {
    				return (first === '1' ? '111' : '1') + (second[idx] === '1' ? '000' : '0');
    			}).join('');
    		}
    	}]);

    	return ITF;
    }(_Barcode3.default);

    exports.default = ITF;
    });

    unwrapExports(ITF_1);

    var ITF14_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _ITF3 = _interopRequireDefault(ITF_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    // Calculate the checksum digit
    var checksum = function checksum(data) {
    	var res = data.substr(0, 13).split('').map(function (num) {
    		return parseInt(num, 10);
    	}).reduce(function (sum, n, idx) {
    		return sum + n * (3 - idx % 2 * 2);
    	}, 0);

    	return Math.ceil(res / 10) * 10 - res;
    };

    var ITF14 = function (_ITF) {
    	_inherits(ITF14, _ITF);

    	function ITF14(data, options) {
    		_classCallCheck(this, ITF14);

    		// Add checksum if it does not exist
    		if (data.search(/^[0-9]{13}$/) !== -1) {
    			data += checksum(data);
    		}
    		return _possibleConstructorReturn(this, (ITF14.__proto__ || Object.getPrototypeOf(ITF14)).call(this, data, options));
    	}

    	_createClass(ITF14, [{
    		key: 'valid',
    		value: function valid() {
    			return this.data.search(/^[0-9]{14}$/) !== -1 && +this.data[13] === checksum(this.data);
    		}
    	}]);

    	return ITF14;
    }(_ITF3.default);

    exports.default = ITF14;
    });

    unwrapExports(ITF14_1);

    var ITF = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ITF14 = exports.ITF = undefined;



    var _ITF2 = _interopRequireDefault(ITF_1);



    var _ITF4 = _interopRequireDefault(ITF14_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.ITF = _ITF2.default;
    exports.ITF14 = _ITF4.default;
    });

    unwrapExports(ITF);
    var ITF_1$1 = ITF.ITF14;
    var ITF_2 = ITF.ITF;

    var MSI_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation
    // https://en.wikipedia.org/wiki/MSI_Barcode#Character_set_and_binary_lookup

    var MSI = function (_Barcode) {
    	_inherits(MSI, _Barcode);

    	function MSI(data, options) {
    		_classCallCheck(this, MSI);

    		return _possibleConstructorReturn(this, (MSI.__proto__ || Object.getPrototypeOf(MSI)).call(this, data, options));
    	}

    	_createClass(MSI, [{
    		key: "encode",
    		value: function encode() {
    			// Start bits
    			var ret = "110";

    			for (var i = 0; i < this.data.length; i++) {
    				// Convert the character to binary (always 4 binary digits)
    				var digit = parseInt(this.data[i]);
    				var bin = digit.toString(2);
    				bin = addZeroes(bin, 4 - bin.length);

    				// Add 100 for every zero and 110 for every 1
    				for (var b = 0; b < bin.length; b++) {
    					ret += bin[b] == "0" ? "100" : "110";
    				}
    			}

    			// End bits
    			ret += "1001";

    			return {
    				data: ret,
    				text: this.text
    			};
    		}
    	}, {
    		key: "valid",
    		value: function valid() {
    			return this.data.search(/^[0-9]+$/) !== -1;
    		}
    	}]);

    	return MSI;
    }(_Barcode3.default);

    function addZeroes(number, n) {
    	for (var i = 0; i < n; i++) {
    		number = "0" + number;
    	}
    	return number;
    }

    exports.default = MSI;
    });

    unwrapExports(MSI_1);

    var checksums = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.mod10 = mod10;
    exports.mod11 = mod11;
    function mod10(number) {
    	var sum = 0;
    	for (var i = 0; i < number.length; i++) {
    		var n = parseInt(number[i]);
    		if ((i + number.length) % 2 === 0) {
    			sum += n;
    		} else {
    			sum += n * 2 % 10 + Math.floor(n * 2 / 10);
    		}
    	}
    	return (10 - sum % 10) % 10;
    }

    function mod11(number) {
    	var sum = 0;
    	var weights = [2, 3, 4, 5, 6, 7];
    	for (var i = 0; i < number.length; i++) {
    		var n = parseInt(number[number.length - 1 - i]);
    		sum += weights[i % weights.length] * n;
    	}
    	return (11 - sum % 11) % 11;
    }
    });

    unwrapExports(checksums);
    var checksums_1 = checksums.mod10;
    var checksums_2 = checksums.mod11;

    var MSI10_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    var _MSI3 = _interopRequireDefault(MSI_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var MSI10 = function (_MSI) {
    	_inherits(MSI10, _MSI);

    	function MSI10(data, options) {
    		_classCallCheck(this, MSI10);

    		return _possibleConstructorReturn(this, (MSI10.__proto__ || Object.getPrototypeOf(MSI10)).call(this, data + (0, checksums.mod10)(data), options));
    	}

    	return MSI10;
    }(_MSI3.default);

    exports.default = MSI10;
    });

    unwrapExports(MSI10_1);

    var MSI11_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    var _MSI3 = _interopRequireDefault(MSI_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var MSI11 = function (_MSI) {
    	_inherits(MSI11, _MSI);

    	function MSI11(data, options) {
    		_classCallCheck(this, MSI11);

    		return _possibleConstructorReturn(this, (MSI11.__proto__ || Object.getPrototypeOf(MSI11)).call(this, data + (0, checksums.mod11)(data), options));
    	}

    	return MSI11;
    }(_MSI3.default);

    exports.default = MSI11;
    });

    unwrapExports(MSI11_1);

    var MSI1010_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    var _MSI3 = _interopRequireDefault(MSI_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var MSI1010 = function (_MSI) {
    	_inherits(MSI1010, _MSI);

    	function MSI1010(data, options) {
    		_classCallCheck(this, MSI1010);

    		data += (0, checksums.mod10)(data);
    		data += (0, checksums.mod10)(data);
    		return _possibleConstructorReturn(this, (MSI1010.__proto__ || Object.getPrototypeOf(MSI1010)).call(this, data, options));
    	}

    	return MSI1010;
    }(_MSI3.default);

    exports.default = MSI1010;
    });

    unwrapExports(MSI1010_1);

    var MSI1110_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    var _MSI3 = _interopRequireDefault(MSI_1);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var MSI1110 = function (_MSI) {
    	_inherits(MSI1110, _MSI);

    	function MSI1110(data, options) {
    		_classCallCheck(this, MSI1110);

    		data += (0, checksums.mod11)(data);
    		data += (0, checksums.mod10)(data);
    		return _possibleConstructorReturn(this, (MSI1110.__proto__ || Object.getPrototypeOf(MSI1110)).call(this, data, options));
    	}

    	return MSI1110;
    }(_MSI3.default);

    exports.default = MSI1110;
    });

    unwrapExports(MSI1110_1);

    var MSI = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.MSI1110 = exports.MSI1010 = exports.MSI11 = exports.MSI10 = exports.MSI = undefined;



    var _MSI2 = _interopRequireDefault(MSI_1);



    var _MSI4 = _interopRequireDefault(MSI10_1);



    var _MSI6 = _interopRequireDefault(MSI11_1);



    var _MSI8 = _interopRequireDefault(MSI1010_1);



    var _MSI10 = _interopRequireDefault(MSI1110_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.MSI = _MSI2.default;
    exports.MSI10 = _MSI4.default;
    exports.MSI11 = _MSI6.default;
    exports.MSI1010 = _MSI8.default;
    exports.MSI1110 = _MSI10.default;
    });

    unwrapExports(MSI);
    var MSI_1$1 = MSI.MSI1110;
    var MSI_2 = MSI.MSI1010;
    var MSI_3 = MSI.MSI11;
    var MSI_4 = MSI.MSI10;
    var MSI_5 = MSI.MSI;

    var pharmacode_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.pharmacode = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding documentation
    // http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf

    var pharmacode = function (_Barcode) {
    	_inherits(pharmacode, _Barcode);

    	function pharmacode(data, options) {
    		_classCallCheck(this, pharmacode);

    		var _this = _possibleConstructorReturn(this, (pharmacode.__proto__ || Object.getPrototypeOf(pharmacode)).call(this, data, options));

    		_this.number = parseInt(data, 10);
    		return _this;
    	}

    	_createClass(pharmacode, [{
    		key: "encode",
    		value: function encode() {
    			var z = this.number;
    			var result = "";

    			// http://i.imgur.com/RMm4UDJ.png
    			// (source: http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf, page: 34)
    			while (!isNaN(z) && z != 0) {
    				if (z % 2 === 0) {
    					// Even
    					result = "11100" + result;
    					z = (z - 2) / 2;
    				} else {
    					// Odd
    					result = "100" + result;
    					z = (z - 1) / 2;
    				}
    			}

    			// Remove the two last zeroes
    			result = result.slice(0, -2);

    			return {
    				data: result,
    				text: this.text
    			};
    		}
    	}, {
    		key: "valid",
    		value: function valid() {
    			return this.number >= 3 && this.number <= 131070;
    		}
    	}]);

    	return pharmacode;
    }(_Barcode3.default);

    exports.pharmacode = pharmacode;
    });

    unwrapExports(pharmacode_1);
    var pharmacode_2 = pharmacode_1.pharmacode;

    var codabar_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.codabar = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Encoding specification:
    // http://www.barcodeisland.com/codabar.phtml

    var codabar = function (_Barcode) {
    	_inherits(codabar, _Barcode);

    	function codabar(data, options) {
    		_classCallCheck(this, codabar);

    		if (data.search(/^[0-9\-\$\:\.\+\/]+$/) === 0) {
    			data = "A" + data + "A";
    		}

    		var _this = _possibleConstructorReturn(this, (codabar.__proto__ || Object.getPrototypeOf(codabar)).call(this, data.toUpperCase(), options));

    		_this.text = _this.options.text || _this.text.replace(/[A-D]/g, '');
    		return _this;
    	}

    	_createClass(codabar, [{
    		key: "valid",
    		value: function valid() {
    			return this.data.search(/^[A-D][0-9\-\$\:\.\+\/]+[A-D]$/) !== -1;
    		}
    	}, {
    		key: "encode",
    		value: function encode() {
    			var result = [];
    			var encodings = this.getEncodings();
    			for (var i = 0; i < this.data.length; i++) {
    				result.push(encodings[this.data.charAt(i)]);
    				// for all characters except the last, append a narrow-space ("0")
    				if (i !== this.data.length - 1) {
    					result.push("0");
    				}
    			}
    			return {
    				text: this.text,
    				data: result.join('')
    			};
    		}
    	}, {
    		key: "getEncodings",
    		value: function getEncodings() {
    			return {
    				"0": "101010011",
    				"1": "101011001",
    				"2": "101001011",
    				"3": "110010101",
    				"4": "101101001",
    				"5": "110101001",
    				"6": "100101011",
    				"7": "100101101",
    				"8": "100110101",
    				"9": "110100101",
    				"-": "101001101",
    				"$": "101100101",
    				":": "1101011011",
    				"/": "1101101011",
    				".": "1101101101",
    				"+": "101100110011",
    				"A": "1011001001",
    				"B": "1001001011",
    				"C": "1010010011",
    				"D": "1010011001"
    			};
    		}
    	}]);

    	return codabar;
    }(_Barcode3.default);

    exports.codabar = codabar;
    });

    unwrapExports(codabar_1);
    var codabar_2 = codabar_1.codabar;

    var GenericBarcode_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.GenericBarcode = undefined;

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _Barcode3 = _interopRequireDefault(Barcode_1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var GenericBarcode = function (_Barcode) {
    	_inherits(GenericBarcode, _Barcode);

    	function GenericBarcode(data, options) {
    		_classCallCheck(this, GenericBarcode);

    		return _possibleConstructorReturn(this, (GenericBarcode.__proto__ || Object.getPrototypeOf(GenericBarcode)).call(this, data, options)); // Sets this.data and this.text
    	}

    	// Return the corresponding binary numbers for the data provided


    	_createClass(GenericBarcode, [{
    		key: "encode",
    		value: function encode() {
    			return {
    				data: "10101010101010101010101010101010101010101",
    				text: this.text
    			};
    		}

    		// Resturn true/false if the string provided is valid for this encoder

    	}, {
    		key: "valid",
    		value: function valid() {
    			return true;
    		}
    	}]);

    	return GenericBarcode;
    }(_Barcode3.default);

    exports.GenericBarcode = GenericBarcode;
    });

    unwrapExports(GenericBarcode_1);
    var GenericBarcode_2 = GenericBarcode_1.GenericBarcode;

    var barcodes = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

















    exports.default = {
    	CODE39: CODE39_1.CODE39,
    	CODE128: CODE128.CODE128, CODE128A: CODE128.CODE128A, CODE128B: CODE128.CODE128B, CODE128C: CODE128.CODE128C,
    	EAN13: EAN_UPC.EAN13, EAN8: EAN_UPC.EAN8, EAN5: EAN_UPC.EAN5, EAN2: EAN_UPC.EAN2, UPC: EAN_UPC.UPC, UPCE: EAN_UPC.UPCE,
    	ITF14: ITF.ITF14,
    	ITF: ITF.ITF,
    	MSI: MSI.MSI, MSI10: MSI.MSI10, MSI11: MSI.MSI11, MSI1010: MSI.MSI1010, MSI1110: MSI.MSI1110,
    	pharmacode: pharmacode_1.pharmacode,
    	codabar: codabar_1.codabar,
    	GenericBarcode: GenericBarcode_1.GenericBarcode
    };
    });

    unwrapExports(barcodes);

    var merge$3 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    exports.default = function (old, replaceObj) {
      return _extends({}, old, replaceObj);
    };
    });

    unwrapExports(merge$3);

    var linearizeEncodings_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.default = linearizeEncodings;

    // Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]
    // Convert to [1-1, 1-2, 2, 3-1, 3-2]

    function linearizeEncodings(encodings) {
    	var linearEncodings = [];
    	function nextLevel(encoded) {
    		if (Array.isArray(encoded)) {
    			for (var i = 0; i < encoded.length; i++) {
    				nextLevel(encoded[i]);
    			}
    		} else {
    			encoded.text = encoded.text || "";
    			encoded.data = encoded.data || "";
    			linearEncodings.push(encoded);
    		}
    	}
    	nextLevel(encodings);

    	return linearEncodings;
    }
    });

    unwrapExports(linearizeEncodings_1);

    var fixOptions_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.default = fixOptions;


    function fixOptions(options) {
    	// Fix the margins
    	options.marginTop = options.marginTop || options.margin;
    	options.marginBottom = options.marginBottom || options.margin;
    	options.marginRight = options.marginRight || options.margin;
    	options.marginLeft = options.marginLeft || options.margin;

    	return options;
    }
    });

    unwrapExports(fixOptions_1);

    var optionsFromStrings_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.default = optionsFromStrings;

    // Convert string to integers/booleans where it should be

    function optionsFromStrings(options) {
    	var intOptions = ["width", "height", "textMargin", "fontSize", "margin", "marginTop", "marginBottom", "marginLeft", "marginRight"];

    	for (var intOption in intOptions) {
    		if (intOptions.hasOwnProperty(intOption)) {
    			intOption = intOptions[intOption];
    			if (typeof options[intOption] === "string") {
    				options[intOption] = parseInt(options[intOption], 10);
    			}
    		}
    	}

    	if (typeof options["displayValue"] === "string") {
    		options["displayValue"] = options["displayValue"] != "false";
    	}

    	return options;
    }
    });

    unwrapExports(optionsFromStrings_1);

    var defaults_1$1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    var defaults = {
    	width: 2,
    	height: 100,
    	format: "auto",
    	displayValue: true,
    	fontOptions: "",
    	font: "monospace",
    	text: undefined,
    	textAlign: "center",
    	textPosition: "bottom",
    	textMargin: 2,
    	fontSize: 20,
    	background: "#ffffff",
    	lineColor: "#000000",
    	margin: 10,
    	marginTop: undefined,
    	marginBottom: undefined,
    	marginLeft: undefined,
    	marginRight: undefined,
    	valid: function valid() {}
    };

    exports.default = defaults;
    });

    unwrapExports(defaults_1$1);

    var getOptionsFromElement_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });



    var _optionsFromStrings2 = _interopRequireDefault(optionsFromStrings_1);



    var _defaults2 = _interopRequireDefault(defaults_1$1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function getOptionsFromElement(element) {
    	var options = {};
    	for (var property in _defaults2.default) {
    		if (_defaults2.default.hasOwnProperty(property)) {
    			// jsbarcode-*
    			if (element.hasAttribute("jsbarcode-" + property.toLowerCase())) {
    				options[property] = element.getAttribute("jsbarcode-" + property.toLowerCase());
    			}

    			// data-*
    			if (element.hasAttribute("data-" + property.toLowerCase())) {
    				options[property] = element.getAttribute("data-" + property.toLowerCase());
    			}
    		}
    	}

    	options["value"] = element.getAttribute("jsbarcode-value") || element.getAttribute("data-value");

    	// Since all atributes are string they need to be converted to integers
    	options = (0, _optionsFromStrings2.default)(options);

    	return options;
    }

    exports.default = getOptionsFromElement;
    });

    unwrapExports(getOptionsFromElement_1);

    var shared = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });
    exports.getTotalWidthOfEncodings = exports.calculateEncodingAttributes = exports.getBarcodePadding = exports.getEncodingHeight = exports.getMaximumHeightOfEncodings = undefined;



    var _merge2 = _interopRequireDefault(merge$3);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function getEncodingHeight(encoding, options) {
    	return options.height + (options.displayValue && encoding.text.length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;
    }

    function getBarcodePadding(textWidth, barcodeWidth, options) {
    	if (options.displayValue && barcodeWidth < textWidth) {
    		if (options.textAlign == "center") {
    			return Math.floor((textWidth - barcodeWidth) / 2);
    		} else if (options.textAlign == "left") {
    			return 0;
    		} else if (options.textAlign == "right") {
    			return Math.floor(textWidth - barcodeWidth);
    		}
    	}
    	return 0;
    }

    function calculateEncodingAttributes(encodings, barcodeOptions, context) {
    	for (var i = 0; i < encodings.length; i++) {
    		var encoding = encodings[i];
    		var options = (0, _merge2.default)(barcodeOptions, encoding.options);

    		// Calculate the width of the encoding
    		var textWidth;
    		if (options.displayValue) {
    			textWidth = messureText(encoding.text, options, context);
    		} else {
    			textWidth = 0;
    		}

    		var barcodeWidth = encoding.data.length * options.width;
    		encoding.width = Math.ceil(Math.max(textWidth, barcodeWidth));

    		encoding.height = getEncodingHeight(encoding, options);

    		encoding.barcodePadding = getBarcodePadding(textWidth, barcodeWidth, options);
    	}
    }

    function getTotalWidthOfEncodings(encodings) {
    	var totalWidth = 0;
    	for (var i = 0; i < encodings.length; i++) {
    		totalWidth += encodings[i].width;
    	}
    	return totalWidth;
    }

    function getMaximumHeightOfEncodings(encodings) {
    	var maxHeight = 0;
    	for (var i = 0; i < encodings.length; i++) {
    		if (encodings[i].height > maxHeight) {
    			maxHeight = encodings[i].height;
    		}
    	}
    	return maxHeight;
    }

    function messureText(string, options, context) {
    	var ctx;

    	if (context) {
    		ctx = context;
    	} else if (typeof document !== "undefined") {
    		ctx = document.createElement("canvas").getContext("2d");
    	} else {
    		// If the text cannot be messured we will return 0.
    		// This will make some barcode with big text render incorrectly
    		return 0;
    	}
    	ctx.font = options.fontOptions + " " + options.fontSize + "px " + options.font;

    	// Calculate the width of the encoding
    	var size = ctx.measureText(string).width;

    	return size;
    }

    exports.getMaximumHeightOfEncodings = getMaximumHeightOfEncodings;
    exports.getEncodingHeight = getEncodingHeight;
    exports.getBarcodePadding = getBarcodePadding;
    exports.calculateEncodingAttributes = calculateEncodingAttributes;
    exports.getTotalWidthOfEncodings = getTotalWidthOfEncodings;
    });

    unwrapExports(shared);
    var shared_1 = shared.getTotalWidthOfEncodings;
    var shared_2 = shared.calculateEncodingAttributes;
    var shared_3 = shared.getBarcodePadding;
    var shared_4 = shared.getEncodingHeight;
    var shared_5 = shared.getMaximumHeightOfEncodings;

    var canvas = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _merge2 = _interopRequireDefault(merge$3);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var CanvasRenderer = function () {
    	function CanvasRenderer(canvas, encodings, options) {
    		_classCallCheck(this, CanvasRenderer);

    		this.canvas = canvas;
    		this.encodings = encodings;
    		this.options = options;
    	}

    	_createClass(CanvasRenderer, [{
    		key: "render",
    		value: function render() {
    			// Abort if the browser does not support HTML5 canvas
    			if (!this.canvas.getContext) {
    				throw new Error('The browser does not support canvas.');
    			}

    			this.prepareCanvas();
    			for (var i = 0; i < this.encodings.length; i++) {
    				var encodingOptions = (0, _merge2.default)(this.options, this.encodings[i].options);

    				this.drawCanvasBarcode(encodingOptions, this.encodings[i]);
    				this.drawCanvasText(encodingOptions, this.encodings[i]);

    				this.moveCanvasDrawing(this.encodings[i]);
    			}

    			this.restoreCanvas();
    		}
    	}, {
    		key: "prepareCanvas",
    		value: function prepareCanvas() {
    			// Get the canvas context
    			var ctx = this.canvas.getContext("2d");

    			ctx.save();

    			(0, shared.calculateEncodingAttributes)(this.encodings, this.options, ctx);
    			var totalWidth = (0, shared.getTotalWidthOfEncodings)(this.encodings);
    			var maxHeight = (0, shared.getMaximumHeightOfEncodings)(this.encodings);

    			this.canvas.width = totalWidth + this.options.marginLeft + this.options.marginRight;

    			this.canvas.height = maxHeight;

    			// Paint the canvas
    			ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    			if (this.options.background) {
    				ctx.fillStyle = this.options.background;
    				ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    			}

    			ctx.translate(this.options.marginLeft, 0);
    		}
    	}, {
    		key: "drawCanvasBarcode",
    		value: function drawCanvasBarcode(options, encoding) {
    			// Get the canvas context
    			var ctx = this.canvas.getContext("2d");

    			var binary = encoding.data;

    			// Creates the barcode out of the encoded binary
    			var yFrom;
    			if (options.textPosition == "top") {
    				yFrom = options.marginTop + options.fontSize + options.textMargin;
    			} else {
    				yFrom = options.marginTop;
    			}

    			ctx.fillStyle = options.lineColor;

    			for (var b = 0; b < binary.length; b++) {
    				var x = b * options.width + encoding.barcodePadding;

    				if (binary[b] === "1") {
    					ctx.fillRect(x, yFrom, options.width, options.height);
    				} else if (binary[b]) {
    					ctx.fillRect(x, yFrom, options.width, options.height * binary[b]);
    				}
    			}
    		}
    	}, {
    		key: "drawCanvasText",
    		value: function drawCanvasText(options, encoding) {
    			// Get the canvas context
    			var ctx = this.canvas.getContext("2d");

    			var font = options.fontOptions + " " + options.fontSize + "px " + options.font;

    			// Draw the text if displayValue is set
    			if (options.displayValue) {
    				var x, y;

    				if (options.textPosition == "top") {
    					y = options.marginTop + options.fontSize - options.textMargin;
    				} else {
    					y = options.height + options.textMargin + options.marginTop + options.fontSize;
    				}

    				ctx.font = font;

    				// Draw the text in the correct X depending on the textAlign option
    				if (options.textAlign == "left" || encoding.barcodePadding > 0) {
    					x = 0;
    					ctx.textAlign = 'left';
    				} else if (options.textAlign == "right") {
    					x = encoding.width - 1;
    					ctx.textAlign = 'right';
    				}
    				// In all other cases, center the text
    				else {
    						x = encoding.width / 2;
    						ctx.textAlign = 'center';
    					}

    				ctx.fillText(encoding.text, x, y);
    			}
    		}
    	}, {
    		key: "moveCanvasDrawing",
    		value: function moveCanvasDrawing(encoding) {
    			var ctx = this.canvas.getContext("2d");

    			ctx.translate(encoding.width, 0);
    		}
    	}, {
    		key: "restoreCanvas",
    		value: function restoreCanvas() {
    			// Get the canvas context
    			var ctx = this.canvas.getContext("2d");

    			ctx.restore();
    		}
    	}]);

    	return CanvasRenderer;
    }();

    exports.default = CanvasRenderer;
    });

    unwrapExports(canvas);

    var svg = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



    var _merge2 = _interopRequireDefault(merge$3);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var svgns = "http://www.w3.org/2000/svg";

    var SVGRenderer = function () {
    	function SVGRenderer(svg, encodings, options) {
    		_classCallCheck(this, SVGRenderer);

    		this.svg = svg;
    		this.encodings = encodings;
    		this.options = options;
    		this.document = options.xmlDocument || document;
    	}

    	_createClass(SVGRenderer, [{
    		key: "render",
    		value: function render() {
    			var currentX = this.options.marginLeft;

    			this.prepareSVG();
    			for (var i = 0; i < this.encodings.length; i++) {
    				var encoding = this.encodings[i];
    				var encodingOptions = (0, _merge2.default)(this.options, encoding.options);

    				var group = this.createGroup(currentX, encodingOptions.marginTop, this.svg);

    				this.setGroupOptions(group, encodingOptions);

    				this.drawSvgBarcode(group, encodingOptions, encoding);
    				this.drawSVGText(group, encodingOptions, encoding);

    				currentX += encoding.width;
    			}
    		}
    	}, {
    		key: "prepareSVG",
    		value: function prepareSVG() {
    			// Clear the SVG
    			while (this.svg.firstChild) {
    				this.svg.removeChild(this.svg.firstChild);
    			}

    			(0, shared.calculateEncodingAttributes)(this.encodings, this.options);
    			var totalWidth = (0, shared.getTotalWidthOfEncodings)(this.encodings);
    			var maxHeight = (0, shared.getMaximumHeightOfEncodings)(this.encodings);

    			var width = totalWidth + this.options.marginLeft + this.options.marginRight;
    			this.setSvgAttributes(width, maxHeight);

    			if (this.options.background) {
    				this.drawRect(0, 0, width, maxHeight, this.svg).setAttribute("style", "fill:" + this.options.background + ";");
    			}
    		}
    	}, {
    		key: "drawSvgBarcode",
    		value: function drawSvgBarcode(parent, options, encoding) {
    			var binary = encoding.data;

    			// Creates the barcode out of the encoded binary
    			var yFrom;
    			if (options.textPosition == "top") {
    				yFrom = options.fontSize + options.textMargin;
    			} else {
    				yFrom = 0;
    			}

    			var barWidth = 0;
    			var x = 0;
    			for (var b = 0; b < binary.length; b++) {
    				x = b * options.width + encoding.barcodePadding;

    				if (binary[b] === "1") {
    					barWidth++;
    				} else if (barWidth > 0) {
    					this.drawRect(x - options.width * barWidth, yFrom, options.width * barWidth, options.height, parent);
    					barWidth = 0;
    				}
    			}

    			// Last draw is needed since the barcode ends with 1
    			if (barWidth > 0) {
    				this.drawRect(x - options.width * (barWidth - 1), yFrom, options.width * barWidth, options.height, parent);
    			}
    		}
    	}, {
    		key: "drawSVGText",
    		value: function drawSVGText(parent, options, encoding) {
    			var textElem = this.document.createElementNS(svgns, 'text');

    			// Draw the text if displayValue is set
    			if (options.displayValue) {
    				var x, y;

    				textElem.setAttribute("style", "font:" + options.fontOptions + " " + options.fontSize + "px " + options.font);

    				if (options.textPosition == "top") {
    					y = options.fontSize - options.textMargin;
    				} else {
    					y = options.height + options.textMargin + options.fontSize;
    				}

    				// Draw the text in the correct X depending on the textAlign option
    				if (options.textAlign == "left" || encoding.barcodePadding > 0) {
    					x = 0;
    					textElem.setAttribute("text-anchor", "start");
    				} else if (options.textAlign == "right") {
    					x = encoding.width - 1;
    					textElem.setAttribute("text-anchor", "end");
    				}
    				// In all other cases, center the text
    				else {
    						x = encoding.width / 2;
    						textElem.setAttribute("text-anchor", "middle");
    					}

    				textElem.setAttribute("x", x);
    				textElem.setAttribute("y", y);

    				textElem.appendChild(this.document.createTextNode(encoding.text));

    				parent.appendChild(textElem);
    			}
    		}
    	}, {
    		key: "setSvgAttributes",
    		value: function setSvgAttributes(width, height) {
    			var svg = this.svg;
    			svg.setAttribute("width", width + "px");
    			svg.setAttribute("height", height + "px");
    			svg.setAttribute("x", "0px");
    			svg.setAttribute("y", "0px");
    			svg.setAttribute("viewBox", "0 0 " + width + " " + height);

    			svg.setAttribute("xmlns", svgns);
    			svg.setAttribute("version", "1.1");

    			svg.setAttribute("style", "transform: translate(0,0)");
    		}
    	}, {
    		key: "createGroup",
    		value: function createGroup(x, y, parent) {
    			var group = this.document.createElementNS(svgns, 'g');
    			group.setAttribute("transform", "translate(" + x + ", " + y + ")");

    			parent.appendChild(group);

    			return group;
    		}
    	}, {
    		key: "setGroupOptions",
    		value: function setGroupOptions(group, options) {
    			group.setAttribute("style", "fill:" + options.lineColor + ";");
    		}
    	}, {
    		key: "drawRect",
    		value: function drawRect(x, y, width, height, parent) {
    			var rect = this.document.createElementNS(svgns, 'rect');

    			rect.setAttribute("x", x);
    			rect.setAttribute("y", y);
    			rect.setAttribute("width", width);
    			rect.setAttribute("height", height);

    			parent.appendChild(rect);

    			return rect;
    		}
    	}]);

    	return SVGRenderer;
    }();

    exports.default = SVGRenderer;
    });

    unwrapExports(svg);

    var object = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var ObjectRenderer = function () {
    	function ObjectRenderer(object, encodings, options) {
    		_classCallCheck(this, ObjectRenderer);

    		this.object = object;
    		this.encodings = encodings;
    		this.options = options;
    	}

    	_createClass(ObjectRenderer, [{
    		key: "render",
    		value: function render() {
    			this.object.encodings = this.encodings;
    		}
    	}]);

    	return ObjectRenderer;
    }();

    exports.default = ObjectRenderer;
    });

    unwrapExports(object);

    var renderers = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });



    var _canvas2 = _interopRequireDefault(canvas);



    var _svg2 = _interopRequireDefault(svg);



    var _object2 = _interopRequireDefault(object);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    exports.default = { CanvasRenderer: _canvas2.default, SVGRenderer: _svg2.default, ObjectRenderer: _object2.default };
    });

    unwrapExports(renderers);

    var exceptions = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var InvalidInputException = function (_Error) {
    	_inherits(InvalidInputException, _Error);

    	function InvalidInputException(symbology, input) {
    		_classCallCheck(this, InvalidInputException);

    		var _this = _possibleConstructorReturn(this, (InvalidInputException.__proto__ || Object.getPrototypeOf(InvalidInputException)).call(this));

    		_this.name = "InvalidInputException";

    		_this.symbology = symbology;
    		_this.input = input;

    		_this.message = '"' + _this.input + '" is not a valid input for ' + _this.symbology;
    		return _this;
    	}

    	return InvalidInputException;
    }(Error);

    var InvalidElementException = function (_Error2) {
    	_inherits(InvalidElementException, _Error2);

    	function InvalidElementException() {
    		_classCallCheck(this, InvalidElementException);

    		var _this2 = _possibleConstructorReturn(this, (InvalidElementException.__proto__ || Object.getPrototypeOf(InvalidElementException)).call(this));

    		_this2.name = "InvalidElementException";
    		_this2.message = "Not supported type to render on";
    		return _this2;
    	}

    	return InvalidElementException;
    }(Error);

    var NoElementException = function (_Error3) {
    	_inherits(NoElementException, _Error3);

    	function NoElementException() {
    		_classCallCheck(this, NoElementException);

    		var _this3 = _possibleConstructorReturn(this, (NoElementException.__proto__ || Object.getPrototypeOf(NoElementException)).call(this));

    		_this3.name = "NoElementException";
    		_this3.message = "No element to render on.";
    		return _this3;
    	}

    	return NoElementException;
    }(Error);

    exports.InvalidInputException = InvalidInputException;
    exports.InvalidElementException = InvalidElementException;
    exports.NoElementException = NoElementException;
    });

    unwrapExports(exceptions);
    var exceptions_1 = exceptions.InvalidInputException;
    var exceptions_2 = exceptions.InvalidElementException;
    var exceptions_3 = exceptions.NoElementException;

    var getRenderProperties_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* global HTMLImageElement */
    /* global HTMLCanvasElement */
    /* global SVGElement */



    var _getOptionsFromElement2 = _interopRequireDefault(getOptionsFromElement_1);



    var _renderers2 = _interopRequireDefault(renderers);



    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // Takes an element and returns an object with information about how
    // it should be rendered
    // This could also return an array with these objects
    // {
    //   element: The element that the renderer should draw on
    //   renderer: The name of the renderer
    //   afterRender (optional): If something has to done after the renderer
    //     completed, calls afterRender (function)
    //   options (optional): Options that can be defined in the element
    // }

    function getRenderProperties(element) {
    	// If the element is a string, query select call again
    	if (typeof element === "string") {
    		return querySelectedRenderProperties(element);
    	}
    	// If element is array. Recursivly call with every object in the array
    	else if (Array.isArray(element)) {
    			var returnArray = [];
    			for (var i = 0; i < element.length; i++) {
    				returnArray.push(getRenderProperties(element[i]));
    			}
    			return returnArray;
    		}
    		// If element, render on canvas and set the uri as src
    		else if (typeof HTMLCanvasElement !== 'undefined' && element instanceof HTMLImageElement) {
    				return newCanvasRenderProperties(element);
    			}
    			// If SVG
    			else if (element && element.nodeName === 'svg' || typeof SVGElement !== 'undefined' && element instanceof SVGElement) {
    					return {
    						element: element,
    						options: (0, _getOptionsFromElement2.default)(element),
    						renderer: _renderers2.default.SVGRenderer
    					};
    				}
    				// If canvas (in browser)
    				else if (typeof HTMLCanvasElement !== 'undefined' && element instanceof HTMLCanvasElement) {
    						return {
    							element: element,
    							options: (0, _getOptionsFromElement2.default)(element),
    							renderer: _renderers2.default.CanvasRenderer
    						};
    					}
    					// If canvas (in node)
    					else if (element && element.getContext) {
    							return {
    								element: element,
    								renderer: _renderers2.default.CanvasRenderer
    							};
    						} else if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === 'object' && !element.nodeName) {
    							return {
    								element: element,
    								renderer: _renderers2.default.ObjectRenderer
    							};
    						} else {
    							throw new exceptions.InvalidElementException();
    						}
    }

    function querySelectedRenderProperties(string) {
    	var selector = document.querySelectorAll(string);
    	if (selector.length === 0) {
    		return undefined;
    	} else {
    		var returnArray = [];
    		for (var i = 0; i < selector.length; i++) {
    			returnArray.push(getRenderProperties(selector[i]));
    		}
    		return returnArray;
    	}
    }

    function newCanvasRenderProperties(imgElement) {
    	var canvas = document.createElement('canvas');
    	return {
    		element: canvas,
    		options: (0, _getOptionsFromElement2.default)(imgElement),
    		renderer: _renderers2.default.CanvasRenderer,
    		afterRender: function afterRender() {
    			imgElement.setAttribute("src", canvas.toDataURL());
    		}
    	};
    }

    exports.default = getRenderProperties;
    });

    unwrapExports(getRenderProperties_1);

    var ErrorHandler_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
    	value: true
    });

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /*eslint no-console: 0 */

    var ErrorHandler = function () {
    	function ErrorHandler(api) {
    		_classCallCheck(this, ErrorHandler);

    		this.api = api;
    	}

    	_createClass(ErrorHandler, [{
    		key: "handleCatch",
    		value: function handleCatch(e) {
    			// If babel supported extending of Error in a correct way instanceof would be used here
    			if (e.name === "InvalidInputException") {
    				if (this.api._options.valid !== this.api._defaults.valid) {
    					this.api._options.valid(false);
    				} else {
    					throw e.message;
    				}
    			} else {
    				throw e;
    			}

    			this.api.render = function () {};
    		}
    	}, {
    		key: "wrapBarcodeCall",
    		value: function wrapBarcodeCall(func) {
    			try {
    				var result = func.apply(undefined, arguments);
    				this.api._options.valid(true);
    				return result;
    			} catch (e) {
    				this.handleCatch(e);

    				return this.api;
    			}
    		}
    	}]);

    	return ErrorHandler;
    }();

    exports.default = ErrorHandler;
    });

    unwrapExports(ErrorHandler_1);

    var JsBarcode_1 = createCommonjsModule(function (module) {



    var _barcodes2 = _interopRequireDefault(barcodes);



    var _merge2 = _interopRequireDefault(merge$3);



    var _linearizeEncodings2 = _interopRequireDefault(linearizeEncodings_1);



    var _fixOptions2 = _interopRequireDefault(fixOptions_1);



    var _getRenderProperties2 = _interopRequireDefault(getRenderProperties_1);



    var _optionsFromStrings2 = _interopRequireDefault(optionsFromStrings_1);



    var _ErrorHandler2 = _interopRequireDefault(ErrorHandler_1);





    var _defaults2 = _interopRequireDefault(defaults_1$1);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    // The protype of the object returned from the JsBarcode() call


    // Help functions
    var API = function API() {};

    // The first call of the library API
    // Will return an object with all barcodes calls and the data that is used
    // by the renderers


    // Default values


    // Exceptions
    // Import all the barcodes
    var JsBarcode = function JsBarcode(element, text, options) {
    	var api = new API();

    	if (typeof element === "undefined") {
    		throw Error("No element to render on was provided.");
    	}

    	// Variables that will be pased through the API calls
    	api._renderProperties = (0, _getRenderProperties2.default)(element);
    	api._encodings = [];
    	api._options = _defaults2.default;
    	api._errorHandler = new _ErrorHandler2.default(api);

    	// If text is set, use the simple syntax (render the barcode directly)
    	if (typeof text !== "undefined") {
    		options = options || {};

    		if (!options.format) {
    			options.format = autoSelectBarcode();
    		}

    		api.options(options)[options.format](text, options).render();
    	}

    	return api;
    };

    // To make tests work TODO: remove
    JsBarcode.getModule = function (name) {
    	return _barcodes2.default[name];
    };

    // Register all barcodes
    for (var name in _barcodes2.default) {
    	if (_barcodes2.default.hasOwnProperty(name)) {
    		// Security check if the propery is a prototype property
    		registerBarcode(_barcodes2.default, name);
    	}
    }
    function registerBarcode(barcodes, name) {
    	API.prototype[name] = API.prototype[name.toUpperCase()] = API.prototype[name.toLowerCase()] = function (text, options) {
    		var api = this;
    		return api._errorHandler.wrapBarcodeCall(function () {
    			// Ensure text is options.text
    			options.text = typeof options.text === 'undefined' ? undefined : '' + options.text;

    			var newOptions = (0, _merge2.default)(api._options, options);
    			newOptions = (0, _optionsFromStrings2.default)(newOptions);
    			var Encoder = barcodes[name];
    			var encoded = encode(text, Encoder, newOptions);
    			api._encodings.push(encoded);

    			return api;
    		});
    	};
    }

    // encode() handles the Encoder call and builds the binary string to be rendered
    function encode(text, Encoder, options) {
    	// Ensure that text is a string
    	text = "" + text;

    	var encoder = new Encoder(text, options);

    	// If the input is not valid for the encoder, throw error.
    	// If the valid callback option is set, call it instead of throwing error
    	if (!encoder.valid()) {
    		throw new exceptions.InvalidInputException(encoder.constructor.name, text);
    	}

    	// Make a request for the binary data (and other infromation) that should be rendered
    	var encoded = encoder.encode();

    	// Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]
    	// Convert to [1-1, 1-2, 2, 3-1, 3-2]
    	encoded = (0, _linearizeEncodings2.default)(encoded);

    	// Merge
    	for (var i = 0; i < encoded.length; i++) {
    		encoded[i].options = (0, _merge2.default)(options, encoded[i].options);
    	}

    	return encoded;
    }

    function autoSelectBarcode() {
    	// If CODE128 exists. Use it
    	if (_barcodes2.default["CODE128"]) {
    		return "CODE128";
    	}

    	// Else, take the first (probably only) barcode
    	return Object.keys(_barcodes2.default)[0];
    }

    // Sets global encoder options
    // Added to the api by the JsBarcode function
    API.prototype.options = function (options) {
    	this._options = (0, _merge2.default)(this._options, options);
    	return this;
    };

    // Will create a blank space (usually in between barcodes)
    API.prototype.blank = function (size) {
    	var zeroes = new Array(size + 1).join("0");
    	this._encodings.push({ data: zeroes });
    	return this;
    };

    // Initialize JsBarcode on all HTML elements defined.
    API.prototype.init = function () {
    	// Should do nothing if no elements where found
    	if (!this._renderProperties) {
    		return;
    	}

    	// Make sure renderProperies is an array
    	if (!Array.isArray(this._renderProperties)) {
    		this._renderProperties = [this._renderProperties];
    	}

    	var renderProperty;
    	for (var i in this._renderProperties) {
    		renderProperty = this._renderProperties[i];
    		var options = (0, _merge2.default)(this._options, renderProperty.options);

    		if (options.format == "auto") {
    			options.format = autoSelectBarcode();
    		}

    		this._errorHandler.wrapBarcodeCall(function () {
    			var text = options.value;
    			var Encoder = _barcodes2.default[options.format.toUpperCase()];
    			var encoded = encode(text, Encoder, options);

    			render(renderProperty, encoded, options);
    		});
    	}
    };

    // The render API call. Calls the real render function.
    API.prototype.render = function () {
    	if (!this._renderProperties) {
    		throw new exceptions.NoElementException();
    	}

    	if (Array.isArray(this._renderProperties)) {
    		for (var i = 0; i < this._renderProperties.length; i++) {
    			render(this._renderProperties[i], this._encodings, this._options);
    		}
    	} else {
    		render(this._renderProperties, this._encodings, this._options);
    	}

    	return this;
    };

    API.prototype._defaults = _defaults2.default;

    // Prepares the encodings and calls the renderer
    function render(renderProperties, encodings, options) {
    	encodings = (0, _linearizeEncodings2.default)(encodings);

    	for (var i = 0; i < encodings.length; i++) {
    		encodings[i].options = (0, _merge2.default)(options, encodings[i].options);
    		(0, _fixOptions2.default)(encodings[i].options);
    	}

    	(0, _fixOptions2.default)(options);

    	var Renderer = renderProperties.renderer;
    	var renderer = new Renderer(renderProperties.element, encodings, options);
    	renderer.render();

    	if (renderProperties.afterRender) {
    		renderProperties.afterRender();
    	}
    }

    // Export to browser
    if (typeof window !== "undefined") {
    	window.JsBarcode = JsBarcode;
    }

    // Export to jQuery
    /*global jQuery */
    if (typeof jQuery !== 'undefined') {
    	jQuery.fn.JsBarcode = function (content, options) {
    		var elementArray = [];
    		jQuery(this).each(function () {
    			elementArray.push(this);
    		});
    		return JsBarcode(elementArray, content, options);
    	};
    }

    // Export to commonJS
    module.exports = JsBarcode;
    });

    var JsBarcode = unwrapExports(JsBarcode_1);

    // can-promise has a crash in some versions of react native that dont have
    // standard global objects
    // https://github.com/soldair/node-qrcode/issues/157

    var canPromise = function () {
      return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
    };

    var toString = {}.toString;

    var isarray = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    function typedArraySupport () {
      // Can typed array instances be augmented?
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
        return arr.foo() === 42
      } catch (e) {
        return false
      }
    }

    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

    var K_MAX_LENGTH = Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff;

    function Buffer (arg, offset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, offset, length)
      }

      if (typeof arg === 'number') {
        return allocUnsafe(this, arg)
      }

      return from(this, arg, offset, length)
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;

      // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
      if (typeof Symbol !== 'undefined' && Symbol.species &&
          Buffer[Symbol.species] === Buffer) {
        Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true,
          enumerable: false,
          writable: false
        });
      }
    }

    function checked (length) {
      // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= K_MAX_LENGTH) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
      }
      return length | 0
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }

    function createBuffer (that, length) {
      var buf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        buf = new Uint8Array(length);
        buf.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        buf = that;
        if (buf === null) {
          buf = new Buffer(length);
        }
        buf.length = length;
      }

      return buf
    }

    function allocUnsafe (that, size) {
      var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          buf[i] = 0;
        }
      }

      return buf
    }

    function fromString (that, string) {
      var length = byteLength(string) | 0;
      var buf = createBuffer(that, length);

      var actual = buf.write(string);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        buf = buf.slice(0, actual);
      }

      return buf
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      var buf;
      if (byteOffset === undefined && length === undefined) {
        buf = new Uint8Array(array);
      } else if (length === undefined) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        buf.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        buf = fromArrayLike(that, buf);
      }

      return buf
    }

    function fromObject (that, obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(that, len);

        if (buf.length === 0) {
          return buf
        }

        obj.copy(buf, 0, 0, len);
        return buf
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function byteLength (string) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      return utf8ToBytes(string).length
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function from (that, value, offset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, offset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value)
      }

      return fromObject(that, value)
    }

    Buffer.prototype.write = function write (string, offset, length) {
      // Buffer#write(string)
      if (offset === undefined) {
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
        } else {
          length = undefined;
        }
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      return utf8Write(this, string, offset, length)
    };

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        // Return an augmented `Uint8Array` instance
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    Buffer.prototype.fill = function fill (val, start, end) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : new Buffer(val);
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    Buffer.concat = function concat (list, length) {
      if (!isarray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return createBuffer(null, 0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = allocUnsafe(null, length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    Buffer.byteLength = byteLength;

    Buffer.prototype._isBuffer = true;
    Buffer.isBuffer = function isBuffer (b) {
      return !!(b != null && b._isBuffer)
    };

    var alloc = function (size) {
      var buffer = new Buffer(size);
      buffer.fill(0);
      return buffer
    };

    var from_1 = function (data) {
      return new Buffer(data)
    };

    var typedarrayBuffer = {
    	alloc: alloc,
    	from: from_1
    };

    var toSJISFunction;
    var CODEWORDS_COUNT = [
      0, // Not used
      26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
      404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
      1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
      2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
    ];

    /**
     * Returns the QR Code size for the specified version
     *
     * @param  {Number} version QR Code version
     * @return {Number}         size of QR code
     */
    var getSymbolSize = function getSymbolSize (version) {
      if (!version) throw new Error('"version" cannot be null or undefined')
      if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
      return version * 4 + 17
    };

    /**
     * Returns the total number of codewords used to store data and EC information.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Data length in bits
     */
    var getSymbolTotalCodewords = function getSymbolTotalCodewords (version) {
      return CODEWORDS_COUNT[version]
    };

    /**
     * Encode data with Bose-Chaudhuri-Hocquenghem
     *
     * @param  {Number} data Value to encode
     * @return {Number}      Encoded value
     */
    var getBCHDigit = function (data) {
      var digit = 0;

      while (data !== 0) {
        digit++;
        data >>>= 1;
      }

      return digit
    };

    var setToSJISFunction = function setToSJISFunction (f) {
      if (typeof f !== 'function') {
        throw new Error('"toSJISFunc" is not a valid function.')
      }

      toSJISFunction = f;
    };

    var isKanjiModeEnabled = function () {
      return typeof toSJISFunction !== 'undefined'
    };

    var toSJIS = function toSJIS (kanji) {
      return toSJISFunction(kanji)
    };

    var utils = {
    	getSymbolSize: getSymbolSize,
    	getSymbolTotalCodewords: getSymbolTotalCodewords,
    	getBCHDigit: getBCHDigit,
    	setToSJISFunction: setToSJISFunction,
    	isKanjiModeEnabled: isKanjiModeEnabled,
    	toSJIS: toSJIS
    };

    var errorCorrectionLevel = createCommonjsModule(function (module, exports) {
    exports.L = { bit: 1 };
    exports.M = { bit: 0 };
    exports.Q = { bit: 3 };
    exports.H = { bit: 2 };

    function fromString (string) {
      if (typeof string !== 'string') {
        throw new Error('Param is not a string')
      }

      var lcStr = string.toLowerCase();

      switch (lcStr) {
        case 'l':
        case 'low':
          return exports.L

        case 'm':
        case 'medium':
          return exports.M

        case 'q':
        case 'quartile':
          return exports.Q

        case 'h':
        case 'high':
          return exports.H

        default:
          throw new Error('Unknown EC Level: ' + string)
      }
    }

    exports.isValid = function isValid (level) {
      return level && typeof level.bit !== 'undefined' &&
        level.bit >= 0 && level.bit < 4
    };

    exports.from = function from (value, defaultValue) {
      if (exports.isValid(value)) {
        return value
      }

      try {
        return fromString(value)
      } catch (e) {
        return defaultValue
      }
    };
    });
    var errorCorrectionLevel_1 = errorCorrectionLevel.L;
    var errorCorrectionLevel_2 = errorCorrectionLevel.M;
    var errorCorrectionLevel_3 = errorCorrectionLevel.Q;
    var errorCorrectionLevel_4 = errorCorrectionLevel.H;
    var errorCorrectionLevel_5 = errorCorrectionLevel.isValid;

    function BitBuffer () {
      this.buffer = [];
      this.length = 0;
    }

    BitBuffer.prototype = {

      get: function (index) {
        var bufIndex = Math.floor(index / 8);
        return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
      },

      put: function (num, length) {
        for (var i = 0; i < length; i++) {
          this.putBit(((num >>> (length - i - 1)) & 1) === 1);
        }
      },

      getLengthInBits: function () {
        return this.length
      },

      putBit: function (bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }

        if (bit) {
          this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
        }

        this.length++;
      }
    };

    var bitBuffer = BitBuffer;

    /**
     * Helper class to handle QR Code symbol modules
     *
     * @param {Number} size Symbol size
     */
    function BitMatrix (size) {
      if (!size || size < 1) {
        throw new Error('BitMatrix size must be defined and greater than 0')
      }

      this.size = size;
      this.data = typedarrayBuffer.alloc(size * size);
      this.reservedBit = typedarrayBuffer.alloc(size * size);
    }

    /**
     * Set bit value at specified location
     * If reserved flag is set, this bit will be ignored during masking process
     *
     * @param {Number}  row
     * @param {Number}  col
     * @param {Boolean} value
     * @param {Boolean} reserved
     */
    BitMatrix.prototype.set = function (row, col, value, reserved) {
      var index = row * this.size + col;
      this.data[index] = value;
      if (reserved) this.reservedBit[index] = true;
    };

    /**
     * Returns bit value at specified location
     *
     * @param  {Number}  row
     * @param  {Number}  col
     * @return {Boolean}
     */
    BitMatrix.prototype.get = function (row, col) {
      return this.data[row * this.size + col]
    };

    /**
     * Applies xor operator at specified location
     * (used during masking process)
     *
     * @param {Number}  row
     * @param {Number}  col
     * @param {Boolean} value
     */
    BitMatrix.prototype.xor = function (row, col, value) {
      this.data[row * this.size + col] ^= value;
    };

    /**
     * Check if bit at specified location is reserved
     *
     * @param {Number}   row
     * @param {Number}   col
     * @return {Boolean}
     */
    BitMatrix.prototype.isReserved = function (row, col) {
      return this.reservedBit[row * this.size + col]
    };

    var bitMatrix = BitMatrix;

    var alignmentPattern = createCommonjsModule(function (module, exports) {
    /**
     * Alignment pattern are fixed reference pattern in defined positions
     * in a matrix symbology, which enables the decode software to re-synchronise
     * the coordinate mapping of the image modules in the event of moderate amounts
     * of distortion of the image.
     *
     * Alignment patterns are present only in QR Code symbols of version 2 or larger
     * and their number depends on the symbol version.
     */

    var getSymbolSize = utils.getSymbolSize;

    /**
     * Calculate the row/column coordinates of the center module of each alignment pattern
     * for the specified QR Code version.
     *
     * The alignment patterns are positioned symmetrically on either side of the diagonal
     * running from the top left corner of the symbol to the bottom right corner.
     *
     * Since positions are simmetrical only half of the coordinates are returned.
     * Each item of the array will represent in turn the x and y coordinate.
     * @see {@link getPositions}
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinate
     */
    exports.getRowColCoords = function getRowColCoords (version) {
      if (version === 1) return []

      var posCount = Math.floor(version / 7) + 2;
      var size = getSymbolSize(version);
      var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
      var positions = [size - 7]; // Last coord is always (size - 7)

      for (var i = 1; i < posCount - 1; i++) {
        positions[i] = positions[i - 1] - intervals;
      }

      positions.push(6); // First coord is always 6

      return positions.reverse()
    };

    /**
     * Returns an array containing the positions of each alignment pattern.
     * Each array's element represent the center point of the pattern as (x, y) coordinates
     *
     * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
     * and filtering out the items that overlaps with finder pattern
     *
     * @example
     * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
     * The alignment patterns, therefore, are to be centered on (row, column)
     * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
     * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
     * and are not therefore used for alignment patterns.
     *
     * var pos = getPositions(7)
     * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    exports.getPositions = function getPositions (version) {
      var coords = [];
      var pos = exports.getRowColCoords(version);
      var posLength = pos.length;

      for (var i = 0; i < posLength; i++) {
        for (var j = 0; j < posLength; j++) {
          // Skip if position is occupied by finder patterns
          if ((i === 0 && j === 0) ||             // top-left
              (i === 0 && j === posLength - 1) || // bottom-left
              (i === posLength - 1 && j === 0)) { // top-right
            continue
          }

          coords.push([pos[i], pos[j]]);
        }
      }

      return coords
    };
    });
    var alignmentPattern_1 = alignmentPattern.getRowColCoords;
    var alignmentPattern_2 = alignmentPattern.getPositions;

    var getSymbolSize$1 = utils.getSymbolSize;
    var FINDER_PATTERN_SIZE = 7;

    /**
     * Returns an array containing the positions of each finder pattern.
     * Each array's element represent the top-left point of the pattern as (x, y) coordinates
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    var getPositions = function getPositions (version) {
      var size = getSymbolSize$1(version);

      return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE]
      ]
    };

    var finderPattern = {
    	getPositions: getPositions
    };

    var maskPattern = createCommonjsModule(function (module, exports) {
    /**
     * Data mask pattern reference
     * @type {Object}
     */
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };

    /**
     * Weighted penalty scores for the undesirable features
     * @type {Object}
     */
    var PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };

    /**
     * Check if mask pattern value is valid
     *
     * @param  {Number}  mask    Mask pattern
     * @return {Boolean}         true if valid, false otherwise
     */
    exports.isValid = function isValid (mask) {
      return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
    };

    /**
     * Returns mask pattern from a value.
     * If value is not valid, returns undefined
     *
     * @param  {Number|String} value        Mask pattern value
     * @return {Number}                     Valid mask pattern or undefined
     */
    exports.from = function from (value) {
      return exports.isValid(value) ? parseInt(value, 10) : undefined
    };

    /**
    * Find adjacent modules in row/column with the same color
    * and assign a penalty value.
    *
    * Points: N1 + i
    * i is the amount by which the number of adjacent modules of the same color exceeds 5
    */
    exports.getPenaltyN1 = function getPenaltyN1 (data) {
      var size = data.size;
      var points = 0;
      var sameCountCol = 0;
      var sameCountRow = 0;
      var lastCol = null;
      var lastRow = null;

      for (var row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;

        for (var col = 0; col < size; col++) {
          var module = data.get(row, col);
          if (module === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module;
            sameCountCol = 1;
          }

          module = data.get(col, row);
          if (module === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module;
            sameCountRow = 1;
          }
        }

        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
      }

      return points
    };

    /**
     * Find 2x2 blocks with the same color and assign a penalty value
     *
     * Points: N2 * (m - 1) * (n - 1)
     */
    exports.getPenaltyN2 = function getPenaltyN2 (data) {
      var size = data.size;
      var points = 0;

      for (var row = 0; row < size - 1; row++) {
        for (var col = 0; col < size - 1; col++) {
          var last = data.get(row, col) +
            data.get(row, col + 1) +
            data.get(row + 1, col) +
            data.get(row + 1, col + 1);

          if (last === 4 || last === 0) points++;
        }
      }

      return points * PenaltyScores.N2
    };

    /**
     * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
     * preceded or followed by light area 4 modules wide
     *
     * Points: N3 * number of pattern found
     */
    exports.getPenaltyN3 = function getPenaltyN3 (data) {
      var size = data.size;
      var points = 0;
      var bitsCol = 0;
      var bitsRow = 0;

      for (var row = 0; row < size; row++) {
        bitsCol = bitsRow = 0;
        for (var col = 0; col < size; col++) {
          bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col);
          if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;

          bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row);
          if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
        }
      }

      return points * PenaltyScores.N3
    };

    /**
     * Calculate proportion of dark modules in entire symbol
     *
     * Points: N4 * k
     *
     * k is the rating of the deviation of the proportion of dark modules
     * in the symbol from 50% in steps of 5%
     */
    exports.getPenaltyN4 = function getPenaltyN4 (data) {
      var darkCount = 0;
      var modulesCount = data.data.length;

      for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];

      var k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10);

      return k * PenaltyScores.N4
    };

    /**
     * Return mask value at given position
     *
     * @param  {Number} maskPattern Pattern reference value
     * @param  {Number} i           Row
     * @param  {Number} j           Column
     * @return {Boolean}            Mask value
     */
    function getMaskAt (maskPattern, i, j) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
        case exports.Patterns.PATTERN001: return i % 2 === 0
        case exports.Patterns.PATTERN010: return j % 3 === 0
        case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
        case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
        case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
        case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
        case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

        default: throw new Error('bad maskPattern:' + maskPattern)
      }
    }

    /**
     * Apply a mask pattern to a BitMatrix
     *
     * @param  {Number}    pattern Pattern reference number
     * @param  {BitMatrix} data    BitMatrix data
     */
    exports.applyMask = function applyMask (pattern, data) {
      var size = data.size;

      for (var col = 0; col < size; col++) {
        for (var row = 0; row < size; row++) {
          if (data.isReserved(row, col)) continue
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };

    /**
     * Returns the best mask pattern for data
     *
     * @param  {BitMatrix} data
     * @return {Number} Mask pattern reference number
     */
    exports.getBestMask = function getBestMask (data, setupFormatFunc) {
      var numPatterns = Object.keys(exports.Patterns).length;
      var bestPattern = 0;
      var lowerPenalty = Infinity;

      for (var p = 0; p < numPatterns; p++) {
        setupFormatFunc(p);
        exports.applyMask(p, data);

        // Calculate penalty
        var penalty =
          exports.getPenaltyN1(data) +
          exports.getPenaltyN2(data) +
          exports.getPenaltyN3(data) +
          exports.getPenaltyN4(data);

        // Undo previously applied mask
        exports.applyMask(p, data);

        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p;
        }
      }

      return bestPattern
    };
    });
    var maskPattern_1 = maskPattern.Patterns;
    var maskPattern_2 = maskPattern.isValid;
    var maskPattern_3 = maskPattern.getPenaltyN1;
    var maskPattern_4 = maskPattern.getPenaltyN2;
    var maskPattern_5 = maskPattern.getPenaltyN3;
    var maskPattern_6 = maskPattern.getPenaltyN4;
    var maskPattern_7 = maskPattern.applyMask;
    var maskPattern_8 = maskPattern.getBestMask;

    var EC_BLOCKS_TABLE = [
    // L  M  Q  H
      1, 1, 1, 1,
      1, 1, 1, 1,
      1, 1, 2, 2,
      1, 2, 2, 4,
      1, 2, 4, 4,
      2, 4, 4, 4,
      2, 4, 6, 5,
      2, 4, 6, 6,
      2, 5, 8, 8,
      4, 5, 8, 8,
      4, 5, 8, 11,
      4, 8, 10, 11,
      4, 9, 12, 16,
      4, 9, 16, 16,
      6, 10, 12, 18,
      6, 10, 17, 16,
      6, 11, 16, 19,
      6, 13, 18, 21,
      7, 14, 21, 25,
      8, 16, 20, 25,
      8, 17, 23, 25,
      9, 17, 23, 34,
      9, 18, 25, 30,
      10, 20, 27, 32,
      12, 21, 29, 35,
      12, 23, 34, 37,
      12, 25, 34, 40,
      13, 26, 35, 42,
      14, 28, 38, 45,
      15, 29, 40, 48,
      16, 31, 43, 51,
      17, 33, 45, 54,
      18, 35, 48, 57,
      19, 37, 51, 60,
      19, 38, 53, 63,
      20, 40, 56, 66,
      21, 43, 59, 70,
      22, 45, 62, 74,
      24, 47, 65, 77,
      25, 49, 68, 81
    ];

    var EC_CODEWORDS_TABLE = [
    // L  M  Q  H
      7, 10, 13, 17,
      10, 16, 22, 28,
      15, 26, 36, 44,
      20, 36, 52, 64,
      26, 48, 72, 88,
      36, 64, 96, 112,
      40, 72, 108, 130,
      48, 88, 132, 156,
      60, 110, 160, 192,
      72, 130, 192, 224,
      80, 150, 224, 264,
      96, 176, 260, 308,
      104, 198, 288, 352,
      120, 216, 320, 384,
      132, 240, 360, 432,
      144, 280, 408, 480,
      168, 308, 448, 532,
      180, 338, 504, 588,
      196, 364, 546, 650,
      224, 416, 600, 700,
      224, 442, 644, 750,
      252, 476, 690, 816,
      270, 504, 750, 900,
      300, 560, 810, 960,
      312, 588, 870, 1050,
      336, 644, 952, 1110,
      360, 700, 1020, 1200,
      390, 728, 1050, 1260,
      420, 784, 1140, 1350,
      450, 812, 1200, 1440,
      480, 868, 1290, 1530,
      510, 924, 1350, 1620,
      540, 980, 1440, 1710,
      570, 1036, 1530, 1800,
      570, 1064, 1590, 1890,
      600, 1120, 1680, 1980,
      630, 1204, 1770, 2100,
      660, 1260, 1860, 2220,
      720, 1316, 1950, 2310,
      750, 1372, 2040, 2430
    ];

    /**
     * Returns the number of error correction block that the QR Code should contain
     * for the specified version and error correction level.
     *
     * @param  {Number} version              QR Code version
     * @param  {Number} errorCorrectionLevel Error correction level
     * @return {Number}                      Number of error correction blocks
     */
    var getBlocksCount = function getBlocksCount (version, errorCorrectionLevel$1) {
      switch (errorCorrectionLevel$1) {
        case errorCorrectionLevel.L:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
        case errorCorrectionLevel.M:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
        case errorCorrectionLevel.Q:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
        case errorCorrectionLevel.H:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
        default:
          return undefined
      }
    };

    /**
     * Returns the number of error correction codewords to use for the specified
     * version and error correction level.
     *
     * @param  {Number} version              QR Code version
     * @param  {Number} errorCorrectionLevel Error correction level
     * @return {Number}                      Number of error correction codewords
     */
    var getTotalCodewordsCount = function getTotalCodewordsCount (version, errorCorrectionLevel$1) {
      switch (errorCorrectionLevel$1) {
        case errorCorrectionLevel.L:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
        case errorCorrectionLevel.M:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
        case errorCorrectionLevel.Q:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
        case errorCorrectionLevel.H:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
        default:
          return undefined
      }
    };

    var errorCorrectionCode = {
    	getBlocksCount: getBlocksCount,
    	getTotalCodewordsCount: getTotalCodewordsCount
    };

    var EXP_TABLE = typedarrayBuffer.alloc(512);
    var LOG_TABLE = typedarrayBuffer.alloc(256)
    /**
     * Precompute the log and anti-log tables for faster computation later
     *
     * For each possible value in the galois field 2^8, we will pre-compute
     * the logarithm and anti-logarithm (exponential) of this value
     *
     * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
     */
    ;(function initTables () {
      var x = 1;
      for (var i = 0; i < 255; i++) {
        EXP_TABLE[i] = x;
        LOG_TABLE[x] = i;

        x <<= 1; // multiply by 2

        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
        // This means that when a number is 256 or larger, it should be XORed with 0x11D.
        if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
          x ^= 0x11D;
        }
      }

      // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
      // stay inside the bounds (because we will mainly use this table for the multiplication of
      // two GF numbers, no more).
      // @see {@link mul}
      for (i = 255; i < 512; i++) {
        EXP_TABLE[i] = EXP_TABLE[i - 255];
      }
    }());

    /**
     * Returns log value of n inside Galois Field
     *
     * @param  {Number} n
     * @return {Number}
     */
    var log$1 = function log (n) {
      if (n < 1) throw new Error('log(' + n + ')')
      return LOG_TABLE[n]
    };

    /**
     * Returns anti-log value of n inside Galois Field
     *
     * @param  {Number} n
     * @return {Number}
     */
    var exp = function exp (n) {
      return EXP_TABLE[n]
    };

    /**
     * Multiplies two number inside Galois Field
     *
     * @param  {Number} x
     * @param  {Number} y
     * @return {Number}
     */
    var mul$2 = function mul (x, y) {
      if (x === 0 || y === 0) return 0

      // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
      // @see {@link initTables}
      return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
    };

    var galoisField = {
    	log: log$1,
    	exp: exp,
    	mul: mul$2
    };

    var polynomial = createCommonjsModule(function (module, exports) {
    /**
     * Multiplies two polynomials inside Galois Field
     *
     * @param  {Buffer} p1 Polynomial
     * @param  {Buffer} p2 Polynomial
     * @return {Buffer}    Product of p1 and p2
     */
    exports.mul = function mul (p1, p2) {
      var coeff = typedarrayBuffer.alloc(p1.length + p2.length - 1);

      for (var i = 0; i < p1.length; i++) {
        for (var j = 0; j < p2.length; j++) {
          coeff[i + j] ^= galoisField.mul(p1[i], p2[j]);
        }
      }

      return coeff
    };

    /**
     * Calculate the remainder of polynomials division
     *
     * @param  {Buffer} divident Polynomial
     * @param  {Buffer} divisor  Polynomial
     * @return {Buffer}          Remainder
     */
    exports.mod = function mod (divident, divisor) {
      var result = typedarrayBuffer.from(divident);

      while ((result.length - divisor.length) >= 0) {
        var coeff = result[0];

        for (var i = 0; i < divisor.length; i++) {
          result[i] ^= galoisField.mul(divisor[i], coeff);
        }

        // remove all zeros from buffer head
        var offset = 0;
        while (offset < result.length && result[offset] === 0) offset++;
        result = result.slice(offset);
      }

      return result
    };

    /**
     * Generate an irreducible generator polynomial of specified degree
     * (used by Reed-Solomon encoder)
     *
     * @param  {Number} degree Degree of the generator polynomial
     * @return {Buffer}        Buffer containing polynomial coefficients
     */
    exports.generateECPolynomial = function generateECPolynomial (degree) {
      var poly = typedarrayBuffer.from([1]);
      for (var i = 0; i < degree; i++) {
        poly = exports.mul(poly, [1, galoisField.exp(i)]);
      }

      return poly
    };
    });
    var polynomial_1 = polynomial.mul;
    var polynomial_2 = polynomial.mod;
    var polynomial_3 = polynomial.generateECPolynomial;

    var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init$1 () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init$1();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init$1();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString$1 = {}.toString;

    var isArray$7 = Array.isArray || function (arr) {
      return toString$1.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer$1.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer$1 (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer$1(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer$1 (arg, encodingOrOffset, length) {
      if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
        return new Buffer$1(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe$1(this, arg)
      }
      return from$1(this, arg, encodingOrOffset, length)
    }

    Buffer$1.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer$1._augment = function (arr) {
      arr.__proto__ = Buffer$1.prototype;
      return arr
    };

    function from$1 (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer$1(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString$1(that, value, encodingOrOffset)
      }

      return fromObject$1(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer$1.from = function (value, encodingOrOffset, length) {
      return from$1(null, value, encodingOrOffset, length)
    };

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      Buffer$1.prototype.__proto__ = Uint8Array.prototype;
      Buffer$1.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc$1 (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer$1(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer$1(that, size).fill(fill, encoding)
          : createBuffer$1(that, size).fill(fill)
      }
      return createBuffer$1(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer$1.alloc = function (size, fill, encoding) {
      return alloc$1(null, size, fill, encoding)
    };

    function allocUnsafe$1 (that, size) {
      assertSize(size);
      that = createBuffer$1(that, size < 0 ? 0 : checked$1(size) | 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer$1.allocUnsafe = function (size) {
      return allocUnsafe$1(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer$1.allocUnsafeSlow = function (size) {
      return allocUnsafe$1(null, size)
    };

    function fromString$1 (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer$1.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength$1(string, encoding) | 0;
      that = createBuffer$1(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike$1 (that, array) {
      var length = array.length < 0 ? 0 : checked$1(array.length) | 0;
      that = createBuffer$1(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer$1 (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike$1(that, array);
      }
      return that
    }

    function fromObject$1 (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked$1(obj.length) | 0;
        that = createBuffer$1(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan$1(obj.length)) {
            return createBuffer$1(that, 0)
          }
          return fromArrayLike$1(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$7(obj.data)) {
          return fromArrayLike$1(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked$1 (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer$1.alloc(+length)
    }
    Buffer$1.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer$1.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer$1.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer$1.concat = function concat (list, length) {
      if (!isArray$7(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer$1.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer$1.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength$1 (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes$1(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes$1(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$1.byteLength = byteLength$1;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer$1.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer$1.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer$1.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer$1.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer$1.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer$1.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer$1.compare(this, b) === 0
    };

    Buffer$1.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer$1.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer$1.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write$1 (buf, string, offset, length) {
      return blitBuffer$1(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer$1(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer$1(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer$1(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer$1.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write$1(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer$1.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex$1(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer$1.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer$1.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer$1(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes$1(new Buffer$1(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex$1 (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes$1 (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer$1 (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan$1 (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var bufferEs6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        kMaxLength: _kMaxLength,
        Buffer: Buffer$1,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer
    });

    var Buffer$2 = bufferEs6.Buffer;

    function ReedSolomonEncoder (degree) {
      this.genPoly = undefined;
      this.degree = degree;

      if (this.degree) this.initialize(this.degree);
    }

    /**
     * Initialize the encoder.
     * The input param should correspond to the number of error correction codewords.
     *
     * @param  {Number} degree
     */
    ReedSolomonEncoder.prototype.initialize = function initialize (degree) {
      // create an irreducible generator polynomial
      this.degree = degree;
      this.genPoly = polynomial.generateECPolynomial(this.degree);
    };

    /**
     * Encodes a chunk of data
     *
     * @param  {Buffer} data Buffer containing input data
     * @return {Buffer}      Buffer containing encoded data
     */
    ReedSolomonEncoder.prototype.encode = function encode (data) {
      if (!this.genPoly) {
        throw new Error('Encoder not initialized')
      }

      // Calculate EC for this data block
      // extends data size to data+genPoly size
      var pad = typedarrayBuffer.alloc(this.degree);
      var paddedData = Buffer$2.concat([data, pad], data.length + this.degree);

      // The error correction codewords are the remainder after dividing the data codewords
      // by a generator polynomial
      var remainder = polynomial.mod(paddedData, this.genPoly);

      // return EC data blocks (last n byte, where n is the degree of genPoly)
      // If coefficients number in remainder are less than genPoly degree,
      // pad with 0s to the left to reach the needed number of coefficients
      var start = this.degree - remainder.length;
      if (start > 0) {
        var buff = typedarrayBuffer.alloc(this.degree);
        remainder.copy(buff, start);

        return buff
      }

      return remainder
    };

    var reedSolomonEncoder = ReedSolomonEncoder;

    /**
     * Check if QR Code version is valid
     *
     * @param  {Number}  version QR Code version
     * @return {Boolean}         true if valid version, false otherwise
     */
    var isValid = function isValid (version) {
      return !isNaN(version) && version >= 1 && version <= 40
    };

    var versionCheck = {
    	isValid: isValid
    };

    var numeric = '[0-9]+';
    var alphanumeric = '[A-Z $%*+\\-./:]+';
    var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
      '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
      '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
      '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
    kanji = kanji.replace(/u/g, '\\u');

    var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';

    var KANJI = new RegExp(kanji, 'g');
    var BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
    var BYTE = new RegExp(byte, 'g');
    var NUMERIC = new RegExp(numeric, 'g');
    var ALPHANUMERIC = new RegExp(alphanumeric, 'g');

    var TEST_KANJI = new RegExp('^' + kanji + '$');
    var TEST_NUMERIC = new RegExp('^' + numeric + '$');
    var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

    var testKanji = function testKanji (str) {
      return TEST_KANJI.test(str)
    };

    var testNumeric = function testNumeric (str) {
      return TEST_NUMERIC.test(str)
    };

    var testAlphanumeric = function testAlphanumeric (str) {
      return TEST_ALPHANUMERIC.test(str)
    };

    var regex = {
    	KANJI: KANJI,
    	BYTE_KANJI: BYTE_KANJI,
    	BYTE: BYTE,
    	NUMERIC: NUMERIC,
    	ALPHANUMERIC: ALPHANUMERIC,
    	testKanji: testKanji,
    	testNumeric: testNumeric,
    	testAlphanumeric: testAlphanumeric
    };

    var mode = createCommonjsModule(function (module, exports) {
    /**
     * Numeric mode encodes data from the decimal digit set (0 - 9)
     * (byte values 30HEX to 39HEX).
     * Normally, 3 data characters are represented by 10 bits.
     *
     * @type {Object}
     */
    exports.NUMERIC = {
      id: 'Numeric',
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };

    /**
     * Alphanumeric mode encodes data from a set of 45 characters,
     * i.e. 10 numeric digits (0 - 9),
     *      26 alphabetic characters (A - Z),
     *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
     * Normally, two input characters are represented by 11 bits.
     *
     * @type {Object}
     */
    exports.ALPHANUMERIC = {
      id: 'Alphanumeric',
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };

    /**
     * In byte mode, data is encoded at 8 bits per character.
     *
     * @type {Object}
     */
    exports.BYTE = {
      id: 'Byte',
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };

    /**
     * The Kanji mode efficiently encodes Kanji characters in accordance with
     * the Shift JIS system based on JIS X 0208.
     * The Shift JIS values are shifted from the JIS X 0208 values.
     * JIS X 0208 gives details of the shift coded representation.
     * Each two-byte character value is compacted to a 13-bit binary codeword.
     *
     * @type {Object}
     */
    exports.KANJI = {
      id: 'Kanji',
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };

    /**
     * Mixed mode will contain a sequences of data in a combination of any of
     * the modes described above
     *
     * @type {Object}
     */
    exports.MIXED = {
      bit: -1
    };

    /**
     * Returns the number of bits needed to store the data length
     * according to QR Code specifications.
     *
     * @param  {Mode}   mode    Data mode
     * @param  {Number} version QR Code version
     * @return {Number}         Number of bits
     */
    exports.getCharCountIndicator = function getCharCountIndicator (mode, version) {
      if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

      if (!versionCheck.isValid(version)) {
        throw new Error('Invalid version: ' + version)
      }

      if (version >= 1 && version < 10) return mode.ccBits[0]
      else if (version < 27) return mode.ccBits[1]
      return mode.ccBits[2]
    };

    /**
     * Returns the most efficient mode to store the specified data
     *
     * @param  {String} dataStr Input data string
     * @return {Mode}           Best mode
     */
    exports.getBestModeForData = function getBestModeForData (dataStr) {
      if (regex.testNumeric(dataStr)) return exports.NUMERIC
      else if (regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
      else if (regex.testKanji(dataStr)) return exports.KANJI
      else return exports.BYTE
    };

    /**
     * Return mode name as string
     *
     * @param {Mode} mode Mode object
     * @returns {String}  Mode name
     */
    exports.toString = function toString (mode) {
      if (mode && mode.id) return mode.id
      throw new Error('Invalid mode')
    };

    /**
     * Check if input param is a valid mode object
     *
     * @param   {Mode}    mode Mode object
     * @returns {Boolean} True if valid mode, false otherwise
     */
    exports.isValid = function isValid (mode) {
      return mode && mode.bit && mode.ccBits
    };

    /**
     * Get mode object from its name
     *
     * @param   {String} string Mode name
     * @returns {Mode}          Mode object
     */
    function fromString (string) {
      if (typeof string !== 'string') {
        throw new Error('Param is not a string')
      }

      var lcStr = string.toLowerCase();

      switch (lcStr) {
        case 'numeric':
          return exports.NUMERIC
        case 'alphanumeric':
          return exports.ALPHANUMERIC
        case 'kanji':
          return exports.KANJI
        case 'byte':
          return exports.BYTE
        default:
          throw new Error('Unknown mode: ' + string)
      }
    }

    /**
     * Returns mode from a value.
     * If value is not a valid mode, returns defaultValue
     *
     * @param  {Mode|String} value        Encoding mode
     * @param  {Mode}        defaultValue Fallback value
     * @return {Mode}                     Encoding mode
     */
    exports.from = function from (value, defaultValue) {
      if (exports.isValid(value)) {
        return value
      }

      try {
        return fromString(value)
      } catch (e) {
        return defaultValue
      }
    };
    });
    var mode_1 = mode.NUMERIC;
    var mode_2 = mode.ALPHANUMERIC;
    var mode_3 = mode.BYTE;
    var mode_4 = mode.KANJI;
    var mode_5 = mode.MIXED;
    var mode_6 = mode.getCharCountIndicator;
    var mode_7 = mode.getBestModeForData;
    var mode_8 = mode.isValid;

    var version$1 = createCommonjsModule(function (module, exports) {
    // Generator polynomial used to encode version information
    var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
    var G18_BCH = utils.getBCHDigit(G18);

    function getBestVersionForDataLength (mode, length, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion
        }
      }

      return undefined
    }

    function getReservedBitsCount (mode$1, version) {
      // Character count indicator + mode indicator bits
      return mode.getCharCountIndicator(mode$1, version) + 4
    }

    function getTotalBitsFromDataArray (segments, version) {
      var totalBits = 0;

      segments.forEach(function (data) {
        var reservedBits = getReservedBitsCount(data.mode, version);
        totalBits += reservedBits + data.getBitsLength();
      });

      return totalBits
    }

    function getBestVersionForMixedData (segments, errorCorrectionLevel) {
      for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
        var length = getTotalBitsFromDataArray(segments, currentVersion);
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode.MIXED)) {
          return currentVersion
        }
      }

      return undefined
    }

    /**
     * Returns version number from a value.
     * If value is not a valid version, returns defaultValue
     *
     * @param  {Number|String} value        QR Code version
     * @param  {Number}        defaultValue Fallback value
     * @return {Number}                     QR Code version number
     */
    exports.from = function from (value, defaultValue) {
      if (versionCheck.isValid(value)) {
        return parseInt(value, 10)
      }

      return defaultValue
    };

    /**
     * Returns how much data can be stored with the specified QR code version
     * and error correction level
     *
     * @param  {Number} version              QR Code version (1-40)
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Mode}   mode                 Data mode
     * @return {Number}                      Quantity of storable data
     */
    exports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode$1) {
      if (!versionCheck.isValid(version)) {
        throw new Error('Invalid QR Code version')
      }

      // Use Byte mode as default
      if (typeof mode$1 === 'undefined') mode$1 = mode.BYTE;

      // Total codewords for this QR code version (Data + Error correction)
      var totalCodewords = utils.getSymbolTotalCodewords(version);

      // Total number of error correction codewords
      var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

      // Total number of data codewords
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

      if (mode$1 === mode.MIXED) return dataTotalCodewordsBits

      var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode$1, version);

      // Return max number of storable codewords
      switch (mode$1) {
        case mode.NUMERIC:
          return Math.floor((usableBits / 10) * 3)

        case mode.ALPHANUMERIC:
          return Math.floor((usableBits / 11) * 2)

        case mode.KANJI:
          return Math.floor(usableBits / 13)

        case mode.BYTE:
        default:
          return Math.floor(usableBits / 8)
      }
    };

    /**
     * Returns the minimum version needed to contain the amount of data
     *
     * @param  {Segment} data                    Segment of data
     * @param  {Number} [errorCorrectionLevel=H] Error correction level
     * @param  {Mode} mode                       Data mode
     * @return {Number}                          QR Code version
     */
    exports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel$1) {
      var seg;

      var ecl = errorCorrectionLevel.from(errorCorrectionLevel$1, errorCorrectionLevel.M);

      if (isarray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl)
        }

        if (data.length === 0) {
          return 1
        }

        seg = data[0];
      } else {
        seg = data;
      }

      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
    };

    /**
     * Returns version information with relative error correction bits
     *
     * The version information is included in QR Code symbols of version 7 or larger.
     * It consists of an 18-bit sequence containing 6 data bits,
     * with 12 error correction bits calculated using the (18, 6) Golay code.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Encoded version info bits
     */
    exports.getEncodedBits = function getEncodedBits (version) {
      if (!versionCheck.isValid(version) || version < 7) {
        throw new Error('Invalid QR Code version')
      }

      var d = version << 12;

      while (utils.getBCHDigit(d) - G18_BCH >= 0) {
        d ^= (G18 << (utils.getBCHDigit(d) - G18_BCH));
      }

      return (version << 12) | d
    };
    });
    var version_1$1 = version$1.getCapacity;
    var version_2 = version$1.getBestVersionForData;
    var version_3 = version$1.getEncodedBits;

    var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
    var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
    var G15_BCH = utils.getBCHDigit(G15);

    /**
     * Returns format information with relative error correction bits
     *
     * The format information is a 15-bit sequence containing 5 data bits,
     * with 10 error correction bits calculated using the (15, 5) BCH code.
     *
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Number} mask                 Mask pattern
     * @return {Number}                      Encoded format information bits
     */
    var getEncodedBits = function getEncodedBits (errorCorrectionLevel, mask) {
      var data = ((errorCorrectionLevel.bit << 3) | mask);
      var d = data << 10;

      while (utils.getBCHDigit(d) - G15_BCH >= 0) {
        d ^= (G15 << (utils.getBCHDigit(d) - G15_BCH));
      }

      // xor final data with mask pattern in order to ensure that
      // no combination of Error Correction Level and data mask pattern
      // will result in an all-zero data string
      return ((data << 10) | d) ^ G15_MASK
    };

    var formatInfo = {
    	getEncodedBits: getEncodedBits
    };

    function NumericData (data) {
      this.mode = mode.NUMERIC;
      this.data = data.toString();
    }

    NumericData.getBitsLength = function getBitsLength (length) {
      return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
    };

    NumericData.prototype.getLength = function getLength () {
      return this.data.length
    };

    NumericData.prototype.getBitsLength = function getBitsLength () {
      return NumericData.getBitsLength(this.data.length)
    };

    NumericData.prototype.write = function write (bitBuffer) {
      var i, group, value;

      // The input data string is divided into groups of three digits,
      // and each group is converted to its 10-bit binary equivalent.
      for (i = 0; i + 3 <= this.data.length; i += 3) {
        group = this.data.substr(i, 3);
        value = parseInt(group, 10);

        bitBuffer.put(value, 10);
      }

      // If the number of input digits is not an exact multiple of three,
      // the final one or two digits are converted to 4 or 7 bits respectively.
      var remainingNum = this.data.length - i;
      if (remainingNum > 0) {
        group = this.data.substr(i);
        value = parseInt(group, 10);

        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };

    var numericData = NumericData;

    /**
     * Array of characters available in alphanumeric mode
     *
     * As per QR Code specification, to each character
     * is assigned a value from 0 to 44 which in this case coincides
     * with the array index
     *
     * @type {Array}
     */
    var ALPHA_NUM_CHARS = [
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
      'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      ' ', '$', '%', '*', '+', '-', '.', '/', ':'
    ];

    function AlphanumericData (data) {
      this.mode = mode.ALPHANUMERIC;
      this.data = data;
    }

    AlphanumericData.getBitsLength = function getBitsLength (length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2)
    };

    AlphanumericData.prototype.getLength = function getLength () {
      return this.data.length
    };

    AlphanumericData.prototype.getBitsLength = function getBitsLength () {
      return AlphanumericData.getBitsLength(this.data.length)
    };

    AlphanumericData.prototype.write = function write (bitBuffer) {
      var i;

      // Input data characters are divided into groups of two characters
      // and encoded as 11-bit binary codes.
      for (i = 0; i + 2 <= this.data.length; i += 2) {
        // The character value of the first character is multiplied by 45
        var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

        // The character value of the second digit is added to the product
        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

        // The sum is then stored as 11-bit binary number
        bitBuffer.put(value, 11);
      }

      // If the number of input data characters is not a multiple of two,
      // the character value of the final character is encoded as a 6-bit binary number.
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
      }
    };

    var alphanumericData = AlphanumericData;

    function ByteData (data) {
      this.mode = mode.BYTE;
      this.data = typedarrayBuffer.from(data);
    }

    ByteData.getBitsLength = function getBitsLength (length) {
      return length * 8
    };

    ByteData.prototype.getLength = function getLength () {
      return this.data.length
    };

    ByteData.prototype.getBitsLength = function getBitsLength () {
      return ByteData.getBitsLength(this.data.length)
    };

    ByteData.prototype.write = function (bitBuffer) {
      for (var i = 0, l = this.data.length; i < l; i++) {
        bitBuffer.put(this.data[i], 8);
      }
    };

    var byteData = ByteData;

    function KanjiData (data) {
      this.mode = mode.KANJI;
      this.data = data;
    }

    KanjiData.getBitsLength = function getBitsLength (length) {
      return length * 13
    };

    KanjiData.prototype.getLength = function getLength () {
      return this.data.length
    };

    KanjiData.prototype.getBitsLength = function getBitsLength () {
      return KanjiData.getBitsLength(this.data.length)
    };

    KanjiData.prototype.write = function (bitBuffer) {
      var i;

      // In the Shift JIS system, Kanji characters are represented by a two byte combination.
      // These byte values are shifted from the JIS X 0208 values.
      // JIS X 0208 gives details of the shift coded representation.
      for (i = 0; i < this.data.length; i++) {
        var value = utils.toSJIS(this.data[i]);

        // For characters with Shift JIS values from 0x8140 to 0x9FFC:
        if (value >= 0x8140 && value <= 0x9FFC) {
          // Subtract 0x8140 from Shift JIS value
          value -= 0x8140;

        // For characters with Shift JIS values from 0xE040 to 0xEBBF
        } else if (value >= 0xE040 && value <= 0xEBBF) {
          // Subtract 0xC140 from Shift JIS value
          value -= 0xC140;
        } else {
          throw new Error(
            'Invalid SJIS character: ' + this.data[i] + '\n' +
            'Make sure your charset is UTF-8')
        }

        // Multiply most significant byte of result by 0xC0
        // and add least significant byte to product
        value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff);

        // Convert result to a 13-bit binary string
        bitBuffer.put(value, 13);
      }
    };

    var kanjiData = KanjiData;

    var dijkstra_1 = createCommonjsModule(function (module) {

    /******************************************************************************
     * Created 2008-08-19.
     *
     * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
     *
     * Copyright (C) 2008
     *   Wyatt Baldwin <self@wyattbaldwin.com>
     *   All rights reserved
     *
     * Licensed under the MIT license.
     *
     *   http://www.opensource.org/licenses/mit-license.php
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     *****************************************************************************/
    var dijkstra = {
      single_source_shortest_paths: function(graph, s, d) {
        // Predecessor map for each node that has been encountered.
        // node ID => predecessor node ID
        var predecessors = {};

        // Costs of shortest paths from s to all nodes encountered.
        // node ID => cost
        var costs = {};
        costs[s] = 0;

        // Costs of shortest paths from s to all nodes encountered; differs from
        // `costs` in that it provides easy access to the node that currently has
        // the known shortest path from s.
        // XXX: Do we actually need both `costs` and `open`?
        var open = dijkstra.PriorityQueue.make();
        open.push(s, 0);

        var closest,
            u, v,
            cost_of_s_to_u,
            adjacent_nodes,
            cost_of_e,
            cost_of_s_to_u_plus_cost_of_e,
            cost_of_s_to_v,
            first_visit;
        while (!open.empty()) {
          // In the nodes remaining in graph that have a known cost from s,
          // find the node, u, that currently has the shortest path from s.
          closest = open.pop();
          u = closest.value;
          cost_of_s_to_u = closest.cost;

          // Get nodes adjacent to u...
          adjacent_nodes = graph[u] || {};

          // ...and explore the edges that connect u to those nodes, updating
          // the cost of the shortest paths to any or all of those nodes as
          // necessary. v is the node across the current edge from u.
          for (v in adjacent_nodes) {
            if (adjacent_nodes.hasOwnProperty(v)) {
              // Get the cost of the edge running from u to v.
              cost_of_e = adjacent_nodes[v];

              // Cost of s to u plus the cost of u to v across e--this is *a*
              // cost from s to v that may or may not be less than the current
              // known cost to v.
              cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

              // If we haven't visited v yet OR if the current known cost from s to
              // v is greater than the new cost we just found (cost of s to u plus
              // cost of u to v across e), update v's cost in the cost list and
              // update v's predecessor in the predecessor list (it's now u).
              cost_of_s_to_v = costs[v];
              first_visit = (typeof costs[v] === 'undefined');
              if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                costs[v] = cost_of_s_to_u_plus_cost_of_e;
                open.push(v, cost_of_s_to_u_plus_cost_of_e);
                predecessors[v] = u;
              }
            }
          }
        }

        if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
          var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
          throw new Error(msg);
        }

        return predecessors;
      },

      extract_shortest_path_from_predecessor_list: function(predecessors, d) {
        var nodes = [];
        var u = d;
        var predecessor;
        while (u) {
          nodes.push(u);
          predecessor = predecessors[u];
          u = predecessors[u];
        }
        nodes.reverse();
        return nodes;
      },

      find_path: function(graph, s, d) {
        var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
        return dijkstra.extract_shortest_path_from_predecessor_list(
          predecessors, d);
      },

      /**
       * A very naive priority queue implementation.
       */
      PriorityQueue: {
        make: function (opts) {
          var T = dijkstra.PriorityQueue,
              t = {},
              key;
          opts = opts || {};
          for (key in T) {
            if (T.hasOwnProperty(key)) {
              t[key] = T[key];
            }
          }
          t.queue = [];
          t.sorter = opts.sorter || T.default_sorter;
          return t;
        },

        default_sorter: function (a, b) {
          return a.cost - b.cost;
        },

        /**
         * Add a new item to the queue and ensure the highest priority element
         * is at the front of the queue.
         */
        push: function (value, cost) {
          var item = {value: value, cost: cost};
          this.queue.push(item);
          this.queue.sort(this.sorter);
        },

        /**
         * Return the highest priority element in the queue.
         */
        pop: function () {
          return this.queue.shift();
        },

        empty: function () {
          return this.queue.length === 0;
        }
      }
    };


    // node.js module exports
    {
      module.exports = dijkstra;
    }
    });

    var segments = createCommonjsModule(function (module, exports) {
    /**
     * Returns UTF8 byte length
     *
     * @param  {String} str Input string
     * @return {Number}     Number of byte
     */
    function getStringByteLength (str) {
      return unescape(encodeURIComponent(str)).length
    }

    /**
     * Get a list of segments of the specified mode
     * from a string
     *
     * @param  {Mode}   mode Segment mode
     * @param  {String} str  String to process
     * @return {Array}       Array of object with segments data
     */
    function getSegments (regex, mode, str) {
      var segments = [];
      var result;

      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode: mode,
          length: result[0].length
        });
      }

      return segments
    }

    /**
     * Extracts a series of segments with the appropriate
     * modes from a string
     *
     * @param  {String} dataStr Input string
     * @return {Array}          Array of object with segments data
     */
    function getSegmentsFromString (dataStr) {
      var numSegs = getSegments(regex.NUMERIC, mode.NUMERIC, dataStr);
      var alphaNumSegs = getSegments(regex.ALPHANUMERIC, mode.ALPHANUMERIC, dataStr);
      var byteSegs;
      var kanjiSegs;

      if (utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(regex.BYTE, mode.BYTE, dataStr);
        kanjiSegs = getSegments(regex.KANJI, mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(regex.BYTE_KANJI, mode.BYTE, dataStr);
        kanjiSegs = [];
      }

      var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

      return segs
        .sort(function (s1, s2) {
          return s1.index - s2.index
        })
        .map(function (obj) {
          return {
            data: obj.data,
            mode: obj.mode,
            length: obj.length
          }
        })
    }

    /**
     * Returns how many bits are needed to encode a string of
     * specified length with the specified mode
     *
     * @param  {Number} length String length
     * @param  {Mode} mode     Segment mode
     * @return {Number}        Bit length
     */
    function getSegmentBitsLength (length, mode$1) {
      switch (mode$1) {
        case mode.NUMERIC:
          return numericData.getBitsLength(length)
        case mode.ALPHANUMERIC:
          return alphanumericData.getBitsLength(length)
        case mode.KANJI:
          return kanjiData.getBitsLength(length)
        case mode.BYTE:
          return byteData.getBitsLength(length)
      }
    }

    /**
     * Merges adjacent segments which have the same mode
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function mergeSegments (segs) {
      return segs.reduce(function (acc, curr) {
        var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc
        }

        acc.push(curr);
        return acc
      }, [])
    }

    /**
     * Generates a list of all possible nodes combination which
     * will be used to build a segments graph.
     *
     * Nodes are divided by groups. Each group will contain a list of all the modes
     * in which is possible to encode the given text.
     *
     * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
     * The group for '12345' will contain then 3 objects, one for each
     * possible encoding mode.
     *
     * Each node represents a possible segment.
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function buildNodes (segs) {
      var nodes = [];
      for (var i = 0; i < segs.length; i++) {
        var seg = segs[i];

        switch (seg.mode) {
          case mode.NUMERIC:
            nodes.push([seg,
              { data: seg.data, mode: mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: mode.BYTE, length: seg.length }
            ]);
            break
          case mode.ALPHANUMERIC:
            nodes.push([seg,
              { data: seg.data, mode: mode.BYTE, length: seg.length }
            ]);
            break
          case mode.KANJI:
            nodes.push([seg,
              { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break
          case mode.BYTE:
            nodes.push([
              { data: seg.data, mode: mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }

      return nodes
    }

    /**
     * Builds a graph from a list of nodes.
     * All segments in each node group will be connected with all the segments of
     * the next group and so on.
     *
     * At each connection will be assigned a weight depending on the
     * segment's byte length.
     *
     * @param  {Array} nodes    Array of object with segments data
     * @param  {Number} version QR Code version
     * @return {Object}         Graph of all possible segments
     */
    function buildGraph (nodes, version) {
      var table = {};
      var graph = {'start': {}};
      var prevNodeIds = ['start'];

      for (var i = 0; i < nodes.length; i++) {
        var nodeGroup = nodes[i];
        var currentNodeIds = [];

        for (var j = 0; j < nodeGroup.length; j++) {
          var node = nodeGroup[j];
          var key = '' + i + j;

          currentNodeIds.push(key);
          table[key] = { node: node, lastCount: 0 };
          graph[key] = {};

          for (var n = 0; n < prevNodeIds.length; n++) {
            var prevNodeId = prevNodeIds[n];

            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key] =
                getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
                getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

              table[prevNodeId].lastCount += node.length;
            } else {
              if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

              graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
                4 + mode.getCharCountIndicator(node.mode, version); // switch cost
            }
          }
        }

        prevNodeIds = currentNodeIds;
      }

      for (n = 0; n < prevNodeIds.length; n++) {
        graph[prevNodeIds[n]]['end'] = 0;
      }

      return { map: graph, table: table }
    }

    /**
     * Builds a segment from a specified data and mode.
     * If a mode is not specified, the more suitable will be used.
     *
     * @param  {String} data             Input data
     * @param  {Mode | String} modesHint Data mode
     * @return {Segment}                 Segment
     */
    function buildSingleSegment (data, modesHint) {
      var mode$1;
      var bestMode = mode.getBestModeForData(data);

      mode$1 = mode.from(modesHint, bestMode);

      // Make sure data can be encoded
      if (mode$1 !== mode.BYTE && mode$1.bit < bestMode.bit) {
        throw new Error('"' + data + '"' +
          ' cannot be encoded with mode ' + mode.toString(mode$1) +
          '.\n Suggested mode is: ' + mode.toString(bestMode))
      }

      // Use Mode.BYTE if Kanji support is disabled
      if (mode$1 === mode.KANJI && !utils.isKanjiModeEnabled()) {
        mode$1 = mode.BYTE;
      }

      switch (mode$1) {
        case mode.NUMERIC:
          return new numericData(data)

        case mode.ALPHANUMERIC:
          return new alphanumericData(data)

        case mode.KANJI:
          return new kanjiData(data)

        case mode.BYTE:
          return new byteData(data)
      }
    }

    /**
     * Builds a list of segments from an array.
     * Array can contain Strings or Objects with segment's info.
     *
     * For each item which is a string, will be generated a segment with the given
     * string and the more appropriate encoding mode.
     *
     * For each item which is an object, will be generated a segment with the given
     * data and mode.
     * Objects must contain at least the property "data".
     * If property "mode" is not present, the more suitable mode will be used.
     *
     * @param  {Array} array Array of objects with segments data
     * @return {Array}       Array of Segments
     */
    exports.fromArray = function fromArray (array) {
      return array.reduce(function (acc, seg) {
        if (typeof seg === 'string') {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }

        return acc
      }, [])
    };

    /**
     * Builds an optimized sequence of segments from a string,
     * which will produce the shortest possible bitstream.
     *
     * @param  {String} data    Input string
     * @param  {Number} version QR Code version
     * @return {Array}          Array of segments
     */
    exports.fromString = function fromString (data, version) {
      var segs = getSegmentsFromString(data, utils.isKanjiModeEnabled());

      var nodes = buildNodes(segs);
      var graph = buildGraph(nodes, version);
      var path = dijkstra_1.find_path(graph.map, 'start', 'end');

      var optimizedSegs = [];
      for (var i = 1; i < path.length - 1; i++) {
        optimizedSegs.push(graph.table[path[i]].node);
      }

      return exports.fromArray(mergeSegments(optimizedSegs))
    };

    /**
     * Splits a string in various segments with the modes which
     * best represent their content.
     * The produced segments are far from being optimized.
     * The output of this function is only used to estimate a QR Code version
     * which may contain the data.
     *
     * @param  {string} data Input string
     * @return {Array}       Array of segments
     */
    exports.rawSplit = function rawSplit (data) {
      return exports.fromArray(
        getSegmentsFromString(data, utils.isKanjiModeEnabled())
      )
    };
    });
    var segments_1 = segments.fromArray;
    var segments_2 = segments.fromString;
    var segments_3 = segments.rawSplit;

    /**
     * QRCode for JavaScript
     *
     * modified by Ryan Day for nodejs support
     * Copyright (c) 2011 Ryan Day
     *
     * Licensed under the MIT license:
     *   http://www.opensource.org/licenses/mit-license.php
     *
    //---------------------------------------------------------------------
    // QRCode for JavaScript
    //
    // Copyright (c) 2009 Kazuhiko Arase
    //
    // URL: http://www.d-project.com/
    //
    // Licensed under the MIT license:
    //   http://www.opensource.org/licenses/mit-license.php
    //
    // The word "QR Code" is registered trademark of
    // DENSO WAVE INCORPORATED
    //   http://www.denso-wave.com/qrcode/faqpatent-e.html
    //
    //---------------------------------------------------------------------
    */

    /**
     * Add finder patterns bits to matrix
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupFinderPattern (matrix, version) {
      var size = matrix.size;
      var pos = finderPattern.getPositions(version);

      for (var i = 0; i < pos.length; i++) {
        var row = pos[i][0];
        var col = pos[i][1];

        for (var r = -1; r <= 7; r++) {
          if (row + r <= -1 || size <= row + r) continue

          for (var c = -1; c <= 7; c++) {
            if (col + c <= -1 || size <= col + c) continue

            if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
              (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
              (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }

    /**
     * Add timing pattern bits to matrix
     *
     * Note: this function must be called before {@link setupAlignmentPattern}
     *
     * @param  {BitMatrix} matrix Modules matrix
     */
    function setupTimingPattern (matrix) {
      var size = matrix.size;

      for (var r = 8; r < size - 8; r++) {
        var value = r % 2 === 0;
        matrix.set(r, 6, value, true);
        matrix.set(6, r, value, true);
      }
    }

    /**
     * Add alignment patterns bits to matrix
     *
     * Note: this function must be called after {@link setupTimingPattern}
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupAlignmentPattern (matrix, version) {
      var pos = alignmentPattern.getPositions(version);

      for (var i = 0; i < pos.length; i++) {
        var row = pos[i][0];
        var col = pos[i][1];

        for (var r = -2; r <= 2; r++) {
          for (var c = -2; c <= 2; c++) {
            if (r === -2 || r === 2 || c === -2 || c === 2 ||
              (r === 0 && c === 0)) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }

    /**
     * Add version info bits to matrix
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupVersionInfo (matrix, version) {
      var size = matrix.size;
      var bits = version$1.getEncodedBits(version);
      var row, col, mod;

      for (var i = 0; i < 18; i++) {
        row = Math.floor(i / 3);
        col = i % 3 + size - 8 - 3;
        mod = ((bits >> i) & 1) === 1;

        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }

    /**
     * Add format info bits to matrix
     *
     * @param  {BitMatrix} matrix               Modules matrix
     * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
     * @param  {Number}    maskPattern          Mask pattern reference value
     */
    function setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {
      var size = matrix.size;
      var bits = formatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      var i, mod;

      for (i = 0; i < 15; i++) {
        mod = ((bits >> i) & 1) === 1;

        // vertical
        if (i < 6) {
          matrix.set(i, 8, mod, true);
        } else if (i < 8) {
          matrix.set(i + 1, 8, mod, true);
        } else {
          matrix.set(size - 15 + i, 8, mod, true);
        }

        // horizontal
        if (i < 8) {
          matrix.set(8, size - i - 1, mod, true);
        } else if (i < 9) {
          matrix.set(8, 15 - i - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i - 1, mod, true);
        }
      }

      // fixed module
      matrix.set(size - 8, 8, 1, true);
    }

    /**
     * Add encoded data bits to matrix
     *
     * @param  {BitMatrix} matrix Modules matrix
     * @param  {Buffer}    data   Data codewords
     */
    function setupData (matrix, data) {
      var size = matrix.size;
      var inc = -1;
      var row = size - 1;
      var bitIndex = 7;
      var byteIndex = 0;

      for (var col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--;

        while (true) {
          for (var c = 0; c < 2; c++) {
            if (!matrix.isReserved(row, col - c)) {
              var dark = false;

              if (byteIndex < data.length) {
                dark = (((data[byteIndex] >>> bitIndex) & 1) === 1);
              }

              matrix.set(row, col - c, dark);
              bitIndex--;

              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }

          row += inc;

          if (row < 0 || size <= row) {
            row -= inc;
            inc = -inc;
            break
          }
        }
      }
    }

    /**
     * Create encoded codewords from data input
     *
     * @param  {Number}   version              QR Code version
     * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
     * @param  {ByteData} data                 Data input
     * @return {Buffer}                        Buffer containing encoded codewords
     */
    function createData (version, errorCorrectionLevel, segments) {
      // Prepare data buffer
      var buffer = new bitBuffer();

      segments.forEach(function (data) {
        // prefix data with mode indicator (4 bits)
        buffer.put(data.mode.bit, 4);

        // Prefix data with character count indicator.
        // The character count indicator is a string of bits that represents the
        // number of characters that are being encoded.
        // The character count indicator must be placed after the mode indicator
        // and must be a certain number of bits long, depending on the QR version
        // and data mode
        // @see {@link Mode.getCharCountIndicator}.
        buffer.put(data.getLength(), mode.getCharCountIndicator(data.mode, version));

        // add binary data sequence to buffer
        data.write(buffer);
      });

      // Calculate required number of bits
      var totalCodewords = utils.getSymbolTotalCodewords(version);
      var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);
      var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

      // Add a terminator.
      // If the bit string is shorter than the total number of required bits,
      // a terminator of up to four 0s must be added to the right side of the string.
      // If the bit string is more than four bits shorter than the required number of bits,
      // add four 0s to the end.
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
      }

      // If the bit string is fewer than four bits shorter, add only the number of 0s that
      // are needed to reach the required number of bits.

      // After adding the terminator, if the number of bits in the string is not a multiple of 8,
      // pad the string on the right with 0s to make the string's length a multiple of 8.
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
      }

      // Add pad bytes if the string is still shorter than the total number of required bits.
      // Extend the buffer to fill the data capacity of the symbol corresponding to
      // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
      // and 00010001 (0x11) alternately.
      var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
      for (var i = 0; i < remainingByte; i++) {
        buffer.put(i % 2 ? 0x11 : 0xEC, 8);
      }

      return createCodewords(buffer, version, errorCorrectionLevel)
    }

    /**
     * Encode input data with Reed-Solomon and return codewords with
     * relative error correction bits
     *
     * @param  {BitBuffer} bitBuffer            Data to encode
     * @param  {Number}    version              QR Code version
     * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
     * @return {Buffer}                         Buffer containing encoded codewords
     */
    function createCodewords (bitBuffer, version, errorCorrectionLevel) {
      // Total codewords for this QR code version (Data + Error correction)
      var totalCodewords = utils.getSymbolTotalCodewords(version);

      // Total number of error correction codewords
      var ecTotalCodewords = errorCorrectionCode.getTotalCodewordsCount(version, errorCorrectionLevel);

      // Total number of data codewords
      var dataTotalCodewords = totalCodewords - ecTotalCodewords;

      // Total number of blocks
      var ecTotalBlocks = errorCorrectionCode.getBlocksCount(version, errorCorrectionLevel);

      // Calculate how many blocks each group should contain
      var blocksInGroup2 = totalCodewords % ecTotalBlocks;
      var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

      var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

      var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

      // Number of EC codewords is the same for both groups
      var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

      // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
      var rs = new reedSolomonEncoder(ecCount);

      var offset = 0;
      var dcData = new Array(ecTotalBlocks);
      var ecData = new Array(ecTotalBlocks);
      var maxDataSize = 0;
      var buffer = typedarrayBuffer.from(bitBuffer.buffer);

      // Divide the buffer into the required number of blocks
      for (var b = 0; b < ecTotalBlocks; b++) {
        var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

        // extract a block of data from buffer
        dcData[b] = buffer.slice(offset, offset + dataSize);

        // Calculate EC codewords for this data block
        ecData[b] = rs.encode(dcData[b]);

        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }

      // Create final data
      // Interleave the data and error correction codewords from each block
      var data = typedarrayBuffer.alloc(totalCodewords);
      var index = 0;
      var i, r;

      // Add data codewords
      for (i = 0; i < maxDataSize; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          if (i < dcData[r].length) {
            data[index++] = dcData[r][i];
          }
        }
      }

      // Apped EC codewords
      for (i = 0; i < ecCount; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          data[index++] = ecData[r][i];
        }
      }

      return data
    }

    /**
     * Build QR Code symbol
     *
     * @param  {String} data                 Input string
     * @param  {Number} version              QR Code version
     * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
     * @param  {MaskPattern} maskPattern     Mask pattern
     * @return {Object}                      Object containing symbol data
     */
    function createSymbol$3 (data, version, errorCorrectionLevel, maskPattern$1) {
      var segments$1;

      if (isarray(data)) {
        segments$1 = segments.fromArray(data);
      } else if (typeof data === 'string') {
        var estimatedVersion = version;

        if (!estimatedVersion) {
          var rawSegments = segments.rawSplit(data);

          // Estimate best version that can contain raw splitted segments
          estimatedVersion = version$1.getBestVersionForData(rawSegments,
            errorCorrectionLevel);
        }

        // Build optimized segments
        // If estimated version is undefined, try with the highest version
        segments$1 = segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error('Invalid data')
      }

      // Get the min version that can contain data
      var bestVersion = version$1.getBestVersionForData(segments$1,
          errorCorrectionLevel);

      // If no version is found, data cannot be stored
      if (!bestVersion) {
        throw new Error('The amount of data is too big to be stored in a QR Code')
      }

      // If not specified, use min version as default
      if (!version) {
        version = bestVersion;

      // Check if the specified version can contain the data
      } else if (version < bestVersion) {
        throw new Error('\n' +
          'The chosen QR Code version cannot contain this amount of data.\n' +
          'Minimum version required to store current data is: ' + bestVersion + '.\n'
        )
      }

      var dataBits = createData(version, errorCorrectionLevel, segments$1);

      // Allocate matrix buffer
      var moduleCount = utils.getSymbolSize(version);
      var modules = new bitMatrix(moduleCount);

      // Add function modules
      setupFinderPattern(modules, version);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version);

      // Add temporary dummy bits for format info just to set them as reserved.
      // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
      // since the masking operation must be performed only on the encoding region.
      // These blocks will be replaced with correct values later in code.
      setupFormatInfo(modules, errorCorrectionLevel, 0);

      if (version >= 7) {
        setupVersionInfo(modules, version);
      }

      // Add data codewords
      setupData(modules, dataBits);

      if (isNaN(maskPattern$1)) {
        // Find best mask pattern
        maskPattern$1 = maskPattern.getBestMask(modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel));
      }

      // Apply mask pattern
      maskPattern.applyMask(maskPattern$1, modules);

      // Replace format info bits with correct values
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern$1);

      return {
        modules: modules,
        version: version,
        errorCorrectionLevel: errorCorrectionLevel,
        maskPattern: maskPattern$1,
        segments: segments$1
      }
    }

    /**
     * QR Code
     *
     * @param {String | Array} data                 Input data
     * @param {Object} options                      Optional configurations
     * @param {Number} options.version              QR Code version
     * @param {String} options.errorCorrectionLevel Error correction level
     * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
     */
    var create$2 = function create (data, options) {
      if (typeof data === 'undefined' || data === '') {
        throw new Error('No input text')
      }

      var errorCorrectionLevel$1 = errorCorrectionLevel.M;
      var version;
      var mask;

      if (typeof options !== 'undefined') {
        // Use higher error correction level as default
        errorCorrectionLevel$1 = errorCorrectionLevel.from(options.errorCorrectionLevel, errorCorrectionLevel.M);
        version = version$1.from(options.version);
        mask = maskPattern.from(options.maskPattern);

        if (options.toSJISFunc) {
          utils.setToSJISFunction(options.toSJISFunc);
        }
      }

      return createSymbol$3(data, version, errorCorrectionLevel$1, mask)
    };

    var qrcode = {
    	create: create$2
    };

    var utils$1 = createCommonjsModule(function (module, exports) {
    function hex2rgba (hex) {
      if (typeof hex === 'number') {
        hex = hex.toString();
      }

      if (typeof hex !== 'string') {
        throw new Error('Color should be defined as hex string')
      }

      var hexCode = hex.slice().replace('#', '').split('');
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error('Invalid hex color: ' + hex)
      }

      // Convert from short to long form (fff -> ffffff)
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
          return [c, c]
        }));
      }

      // Add default alpha value
      if (hexCode.length === 6) hexCode.push('F', 'F');

      var hexValue = parseInt(hexCode.join(''), 16);

      return {
        r: (hexValue >> 24) & 255,
        g: (hexValue >> 16) & 255,
        b: (hexValue >> 8) & 255,
        a: hexValue & 255,
        hex: '#' + hexCode.slice(0, 6).join('')
      }
    }

    exports.getOptions = function getOptions (options) {
      if (!options) options = {};
      if (!options.color) options.color = {};

      var margin = typeof options.margin === 'undefined' ||
        options.margin === null ||
        options.margin < 0 ? 4 : options.margin;

      var width = options.width && options.width >= 21 ? options.width : undefined;
      var scale = options.scale || 4;

      return {
        width: width,
        scale: width ? 4 : scale,
        margin: margin,
        color: {
          dark: hex2rgba(options.color.dark || '#000000ff'),
          light: hex2rgba(options.color.light || '#ffffffff')
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      }
    };

    exports.getScale = function getScale (qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2
        ? opts.width / (qrSize + opts.margin * 2)
        : opts.scale
    };

    exports.getImageWidth = function getImageWidth (qrSize, opts) {
      var scale = exports.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale)
    };

    exports.qrToImageData = function qrToImageData (imgData, qr, opts) {
      var size = qr.modules.size;
      var data = qr.modules.data;
      var scale = exports.getScale(size, opts);
      var symbolSize = Math.floor((size + opts.margin * 2) * scale);
      var scaledMargin = opts.margin * scale;
      var palette = [opts.color.light, opts.color.dark];

      for (var i = 0; i < symbolSize; i++) {
        for (var j = 0; j < symbolSize; j++) {
          var posDst = (i * symbolSize + j) * 4;
          var pxColor = opts.color.light;

          if (i >= scaledMargin && j >= scaledMargin &&
            i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
            var iSrc = Math.floor((i - scaledMargin) / scale);
            var jSrc = Math.floor((j - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
          }

          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
    });
    var utils_1 = utils$1.getOptions;
    var utils_2 = utils$1.getScale;
    var utils_3 = utils$1.getImageWidth;
    var utils_4 = utils$1.qrToImageData;

    var canvas$1 = createCommonjsModule(function (module, exports) {
    function clearCanvas (ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      if (!canvas.style) canvas.style = {};
      canvas.height = size;
      canvas.width = size;
      canvas.style.height = size + 'px';
      canvas.style.width = size + 'px';
    }

    function getCanvasElement () {
      try {
        return document.createElement('canvas')
      } catch (e) {
        throw new Error('You need to specify a canvas element')
      }
    }

    exports.render = function render (qrData, canvas, options) {
      var opts = options;
      var canvasEl = canvas;

      if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = undefined;
      }

      if (!canvas) {
        canvasEl = getCanvasElement();
      }

      opts = utils$1.getOptions(opts);
      var size = utils$1.getImageWidth(qrData.modules.size, opts);

      var ctx = canvasEl.getContext('2d');
      var image = ctx.createImageData(size, size);
      utils$1.qrToImageData(image.data, qrData, opts);

      clearCanvas(ctx, canvasEl, size);
      ctx.putImageData(image, 0, 0);

      return canvasEl
    };

    exports.renderToDataURL = function renderToDataURL (qrData, canvas, options) {
      var opts = options;

      if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = undefined;
      }

      if (!opts) opts = {};

      var canvasEl = exports.render(qrData, canvas, opts);

      var type = opts.type || 'image/png';
      var rendererOpts = opts.rendererOpts || {};

      return canvasEl.toDataURL(type, rendererOpts.quality)
    };
    });
    var canvas_1 = canvas$1.render;
    var canvas_2 = canvas$1.renderToDataURL;

    function getColorAttrib (color, attrib) {
      var alpha = color.a / 255;
      var str = attrib + '="' + color.hex + '"';

      return alpha < 1
        ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
        : str
    }

    function svgCmd (cmd, x, y) {
      var str = cmd + x;
      if (typeof y !== 'undefined') str += ' ' + y;

      return str
    }

    function qrToPath (data, size, margin) {
      var path = '';
      var moveBy = 0;
      var newRow = false;
      var lineLength = 0;

      for (var i = 0; i < data.length; i++) {
        var col = Math.floor(i % size);
        var row = Math.floor(i / size);

        if (!col && !newRow) newRow = true;

        if (data[i]) {
          lineLength++;

          if (!(i > 0 && col > 0 && data[i - 1])) {
            path += newRow
              ? svgCmd('M', col + margin, 0.5 + row + margin)
              : svgCmd('m', moveBy, 0);

            moveBy = 0;
            newRow = false;
          }

          if (!(col + 1 < size && data[i + 1])) {
            path += svgCmd('h', lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }

      return path
    }

    var render$2 = function render (qrData, options, cb) {
      var opts = utils$1.getOptions(options);
      var size = qrData.modules.size;
      var data = qrData.modules.data;
      var qrcodesize = size + opts.margin * 2;

      var bg = !opts.color.light.a
        ? ''
        : '<path ' + getColorAttrib(opts.color.light, 'fill') +
          ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';

      var path =
        '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
        ' d="' + qrToPath(data, size, opts.margin) + '"/>';

      var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';

      var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';

      var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';

      if (typeof cb === 'function') {
        cb(null, svgTag);
      }

      return svgTag
    };

    var svgTag = {
    	render: render$2
    };

    function renderCanvas (renderFunc, canvas, text, opts, cb) {
      var args = [].slice.call(arguments, 1);
      var argsNum = args.length;
      var isLastArgCb = typeof args[argsNum - 1] === 'function';

      if (!isLastArgCb && !canPromise()) {
        throw new Error('Callback required as last argument')
      }

      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error('Too few arguments provided')
        }

        if (argsNum === 2) {
          cb = text;
          text = canvas;
          canvas = opts = undefined;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === 'undefined') {
            cb = opts;
            opts = undefined;
          } else {
            cb = opts;
            opts = text;
            text = canvas;
            canvas = undefined;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error('Too few arguments provided')
        }

        if (argsNum === 1) {
          text = canvas;
          canvas = opts = undefined;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text;
          text = canvas;
          canvas = undefined;
        }

        return new Promise(function (resolve, reject) {
          try {
            var data = qrcode.create(text, opts);
            resolve(renderFunc(data, canvas, opts));
          } catch (e) {
            reject(e);
          }
        })
      }

      try {
        var data = qrcode.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e) {
        cb(e);
      }
    }

    var create$3 = qrcode.create;
    var toCanvas = renderCanvas.bind(null, canvas$1.render);
    var toDataURL = renderCanvas.bind(null, canvas$1.renderToDataURL);

    // only svg for now.
    var toString_1 = renderCanvas.bind(null, function (data, _, opts) {
      return svgTag.render(data, opts)
    });

    var browser = {
    	create: create$3,
    	toCanvas: toCanvas,
    	toDataURL: toDataURL,
    	toString: toString_1
    };

    // The programming goals of Split.js are to deliver readable, understandable and
    // maintainable code, while at the same time manually optimizing for tiny minified file size,
    // browser compatibility without additional requirements, graceful fallback (IE8 is supported)
    // and very few assumptions about the user's page layout.
    var global$2 = window;
    var document$1 = global$2.document;

    // Save a couple long function names that are used frequently.
    // This optimization saves around 400 bytes.
    var addEventListener$2 = 'addEventListener';
    var removeEventListener$2 = 'removeEventListener';
    var getBoundingClientRect = 'getBoundingClientRect';
    var gutterStartDragging = '_a';
    var aGutterSize = '_b';
    var bGutterSize = '_c';
    var HORIZONTAL$1 = 'horizontal';
    var NOOP = function () { return false; };

    // Figure out if we're in IE8 or not. IE8 will still render correctly,
    // but will be static instead of draggable.
    var isIE8 = global$2.attachEvent && !global$2[addEventListener$2];

    // Helper function determines which prefixes of CSS calc we need.
    // We only need to do this once on startup, when this anonymous function is called.
    //
    // Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:
    // http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167
    var calc = (['', '-webkit-', '-moz-', '-o-']
        .filter(function (prefix) {
            var el = document$1.createElement('div');
            el.style.cssText = "width:" + prefix + "calc(9px)";

            return !!el.style.length
        })
        .shift()) + "calc";

    // Helper function checks if its argument is a string-like type
    var isString$9 = function (v) { return typeof v === 'string' || v instanceof String; };

    // Helper function allows elements and string selectors to be used
    // interchangeably. In either case an element is returned. This allows us to
    // do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.
    var elementOrSelector = function (el) {
        if (isString$9(el)) {
            var ele = document$1.querySelector(el);
            if (!ele) {
                throw new Error(("Selector " + el + " did not match a DOM element"))
            }
            return ele
        }

        return el
    };

    // Helper function gets a property from the properties object, with a default fallback
    var getOption = function (options, propName, def) {
        var value = options[propName];
        if (value !== undefined) {
            return value
        }
        return def
    };

    var getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {
        if (isFirst) {
            if (gutterAlign === 'end') {
                return 0
            }
            if (gutterAlign === 'center') {
                return gutterSize / 2
            }
        } else if (isLast) {
            if (gutterAlign === 'start') {
                return 0
            }
            if (gutterAlign === 'center') {
                return gutterSize / 2
            }
        }

        return gutterSize
    };

    // Default options
    var defaultGutterFn = function (i, gutterDirection) {
        var gut = document$1.createElement('div');
        gut.className = "gutter gutter-" + gutterDirection;
        return gut
    };

    var defaultElementStyleFn = function (dim, size, gutSize) {
        var style = {};

        if (!isString$9(size)) {
            if (!isIE8) {
                style[dim] = calc + "(" + size + "% - " + gutSize + "px)";
            } else {
                style[dim] = size + "%";
            }
        } else {
            style[dim] = size;
        }

        return style
    };

    var defaultGutterStyleFn = function (dim, gutSize) {
        var obj;

        return (( obj = {}, obj[dim] = (gutSize + "px"), obj ));
    };

    // The main function to initialize a split. Split.js thinks about each pair
    // of elements as an independant pair. Dragging the gutter between two elements
    // only changes the dimensions of elements in that pair. This is key to understanding
    // how the following functions operate, since each function is bound to a pair.
    //
    // A pair object is shaped like this:
    //
    // {
    //     a: DOM element,
    //     b: DOM element,
    //     aMin: Number,
    //     bMin: Number,
    //     dragging: Boolean,
    //     parent: DOM element,
    //     direction: 'horizontal' | 'vertical'
    // }
    //
    // The basic sequence:
    //
    // 1. Set defaults to something sane. `options` doesn't have to be passed at all.
    // 2. Initialize a bunch of strings based on the direction we're splitting.
    //    A lot of the behavior in the rest of the library is paramatized down to
    //    rely on CSS strings and classes.
    // 3. Define the dragging helper functions, and a few helpers to go with them.
    // 4. Loop through the elements while pairing them off. Every pair gets an
    //    `pair` object and a gutter.
    // 5. Actually size the pair elements, insert gutters and attach event listeners.
    var Split = function (idsOption, options) {
        if ( options === void 0 ) options = {};

        var ids = idsOption;
        var dimension;
        var clientAxis;
        var position;
        var positionEnd;
        var clientSize;
        var elements;

        // Allow HTMLCollection to be used as an argument when supported
        if (Array.from) {
            ids = Array.from(ids);
        }

        // All DOM elements in the split should have a common parent. We can grab
        // the first elements parent and hope users read the docs because the
        // behavior will be whacky otherwise.
        var firstElement = elementOrSelector(ids[0]);
        var parent = firstElement.parentNode;
        var parentStyle = getComputedStyle ? getComputedStyle(parent) : null;
        var parentFlexDirection = parentStyle ? parentStyle.flexDirection : null;

        // Set default options.sizes to equal percentages of the parent element.
        var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });

        // Standardize minSize to an array if it isn't already. This allows minSize
        // to be passed as a number.
        var minSize = getOption(options, 'minSize', 100);
        var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });

        // Get other options
        var expandToMin = getOption(options, 'expandToMin', false);
        var gutterSize = getOption(options, 'gutterSize', 10);
        var gutterAlign = getOption(options, 'gutterAlign', 'center');
        var snapOffset = getOption(options, 'snapOffset', 30);
        var dragInterval = getOption(options, 'dragInterval', 1);
        var direction = getOption(options, 'direction', HORIZONTAL$1);
        var cursor = getOption(
            options,
            'cursor',
            direction === HORIZONTAL$1 ? 'col-resize' : 'row-resize'
        );
        var gutter = getOption(options, 'gutter', defaultGutterFn);
        var elementStyle = getOption(
            options,
            'elementStyle',
            defaultElementStyleFn
        );
        var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);

        // 2. Initialize a bunch of strings based on the direction we're splitting.
        // A lot of the behavior in the rest of the library is paramatized down to
        // rely on CSS strings and classes.
        if (direction === HORIZONTAL$1) {
            dimension = 'width';
            clientAxis = 'clientX';
            position = 'left';
            positionEnd = 'right';
            clientSize = 'clientWidth';
        } else if (direction === 'vertical') {
            dimension = 'height';
            clientAxis = 'clientY';
            position = 'top';
            positionEnd = 'bottom';
            clientSize = 'clientHeight';
        }

        // 3. Define the dragging helper functions, and a few helpers to go with them.
        // Each helper is bound to a pair object that contains its metadata. This
        // also makes it easy to store references to listeners that that will be
        // added and removed.
        //
        // Even though there are no other functions contained in them, aliasing
        // this to self saves 50 bytes or so since it's used so frequently.
        //
        // The pair object saves metadata like dragging state, position and
        // event listener references.

        function setElementSize(el, size, gutSize, i) {
            // Split.js allows setting sizes via numbers (ideally), or if you must,
            // by string, like '300px'. This is less than ideal, because it breaks
            // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,
            // make sure you calculate the gutter size by hand.
            var style = elementStyle(dimension, size, gutSize, i);

            Object.keys(style).forEach(function (prop) {
                // eslint-disable-next-line no-param-reassign
                el.style[prop] = style[prop];
            });
        }

        function setGutterSize(gutterElement, gutSize, i) {
            var style = gutterStyle(dimension, gutSize, i);

            Object.keys(style).forEach(function (prop) {
                // eslint-disable-next-line no-param-reassign
                gutterElement.style[prop] = style[prop];
            });
        }

        function getSizes() {
            return elements.map(function (element) { return element.size; })
        }

        // Supports touch events, but not multitouch, so only the first
        // finger `touches[0]` is counted.
        function getMousePosition(e) {
            if ('touches' in e) { return e.touches[0][clientAxis] }
            return e[clientAxis]
        }

        // Actually adjust the size of elements `a` and `b` to `offset` while dragging.
        // calc is used to allow calc(percentage + gutterpx) on the whole split instance,
        // which allows the viewport to be resized without additional logic.
        // Element a's size is the same as offset. b's size is total size - a size.
        // Both sizes are calculated from the initial parent percentage,
        // then the gutter size is subtracted.
        function adjust(offset) {
            var a = elements[this.a];
            var b = elements[this.b];
            var percentage = a.size + b.size;

            a.size = (offset / this.size) * percentage;
            b.size = percentage - (offset / this.size) * percentage;

            setElementSize(a.element, a.size, this[aGutterSize], a.i);
            setElementSize(b.element, b.size, this[bGutterSize], b.i);
        }

        // drag, where all the magic happens. The logic is really quite simple:
        //
        // 1. Ignore if the pair is not dragging.
        // 2. Get the offset of the event.
        // 3. Snap offset to min if within snappable range (within min + snapOffset).
        // 4. Actually adjust each element in the pair to offset.
        //
        // ---------------------------------------------------------------------
        // |    | <- a.minSize               ||              b.minSize -> |    |
        // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |
        // |    |  |                         ||                        |  |    |
        // |    |  |                         ||                        |  |    |
        // ---------------------------------------------------------------------
        // | <- this.start                                        this.size -> |
        function drag(e) {
            var offset;
            var a = elements[this.a];
            var b = elements[this.b];

            if (!this.dragging) { return }

            // Get the offset of the event from the first side of the
            // pair `this.start`. Then offset by the initial position of the
            // mouse compared to the gutter size.
            offset =
                getMousePosition(e) -
                this.start +
                (this[aGutterSize] - this.dragOffset);

            if (dragInterval > 1) {
                offset = Math.round(offset / dragInterval) * dragInterval;
            }

            // If within snapOffset of min or max, set offset to min or max.
            // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.
            // Include the appropriate gutter sizes to prevent overflows.
            if (offset <= a.minSize + snapOffset + this[aGutterSize]) {
                offset = a.minSize + this[aGutterSize];
            } else if (
                offset >=
                this.size - (b.minSize + snapOffset + this[bGutterSize])
            ) {
                offset = this.size - (b.minSize + this[bGutterSize]);
            }

            // Actually adjust the size.
            adjust.call(this, offset);

            // Call the drag callback continously. Don't do anything too intensive
            // in this callback.
            getOption(options, 'onDrag', NOOP)();
        }

        // Cache some important sizes when drag starts, so we don't have to do that
        // continously:
        //
        // `size`: The total size of the pair. First + second + first gutter + second gutter.
        // `start`: The leading side of the first element.
        //
        // ------------------------------------------------
        // |      aGutterSize -> |||                      |
        // |                     |||                      |
        // |                     |||                      |
        // |                     ||| <- bGutterSize       |
        // ------------------------------------------------
        // | <- start                             size -> |
        function calculateSizes() {
            // Figure out the parent size minus padding.
            var a = elements[this.a].element;
            var b = elements[this.b].element;

            var aBounds = a[getBoundingClientRect]();
            var bBounds = b[getBoundingClientRect]();

            this.size =
                aBounds[dimension] +
                bBounds[dimension] +
                this[aGutterSize] +
                this[bGutterSize];
            this.start = aBounds[position];
            this.end = aBounds[positionEnd];
        }

        function innerSize(element) {
            // Return nothing if getComputedStyle is not supported (< IE9)
            // Or if parent element has no layout yet
            if (!getComputedStyle) { return null }

            var computedStyle = getComputedStyle(element);

            if (!computedStyle) { return null }

            var size = element[clientSize];

            if (size === 0) { return null }

            if (direction === HORIZONTAL$1) {
                size -=
                    parseFloat(computedStyle.paddingLeft) +
                    parseFloat(computedStyle.paddingRight);
            } else {
                size -=
                    parseFloat(computedStyle.paddingTop) +
                    parseFloat(computedStyle.paddingBottom);
            }

            return size
        }

        // When specifying percentage sizes that are less than the computed
        // size of the element minus the gutter, the lesser percentages must be increased
        // (and decreased from the other elements) to make space for the pixels
        // subtracted by the gutters.
        function trimToMin(sizesToTrim) {
            // Try to get inner size of parent element.
            // If it's no supported, return original sizes.
            var parentSize = innerSize(parent);
            if (parentSize === null) {
                return sizesToTrim
            }

            if (minSizes.reduce(function (a, b) { return a + b; }, 0) > parentSize) {
                return sizesToTrim
            }

            // Keep track of the excess pixels, the amount of pixels over the desired percentage
            // Also keep track of the elements with pixels to spare, to decrease after if needed
            var excessPixels = 0;
            var toSpare = [];

            var pixelSizes = sizesToTrim.map(function (size, i) {
                // Convert requested percentages to pixel sizes
                var pixelSize = (parentSize * size) / 100;
                var elementGutterSize = getGutterSize(
                    gutterSize,
                    i === 0,
                    i === sizesToTrim.length - 1,
                    gutterAlign
                );
                var elementMinSize = minSizes[i] + elementGutterSize;

                // If element is too smal, increase excess pixels by the difference
                // and mark that it has no pixels to spare
                if (pixelSize < elementMinSize) {
                    excessPixels += elementMinSize - pixelSize;
                    toSpare.push(0);
                    return elementMinSize
                }

                // Otherwise, mark the pixels it has to spare and return it's original size
                toSpare.push(pixelSize - elementMinSize);
                return pixelSize
            });

            // If nothing was adjusted, return the original sizes
            if (excessPixels === 0) {
                return sizesToTrim
            }

            return pixelSizes.map(function (pixelSize, i) {
                var newPixelSize = pixelSize;

                // While there's still pixels to take, and there's enough pixels to spare,
                // take as many as possible up to the total excess pixels
                if (excessPixels > 0 && toSpare[i] - excessPixels > 0) {
                    var takenPixels = Math.min(
                        excessPixels,
                        toSpare[i] - excessPixels
                    );

                    // Subtract the amount taken for the next iteration
                    excessPixels -= takenPixels;
                    newPixelSize = pixelSize - takenPixels;
                }

                // Return the pixel size adjusted as a percentage
                return (newPixelSize / parentSize) * 100
            })
        }

        // stopDragging is very similar to startDragging in reverse.
        function stopDragging() {
            var self = this;
            var a = elements[self.a].element;
            var b = elements[self.b].element;

            if (self.dragging) {
                getOption(options, 'onDragEnd', NOOP)(getSizes());
            }

            self.dragging = false;

            // Remove the stored event listeners. This is why we store them.
            global$2[removeEventListener$2]('mouseup', self.stop);
            global$2[removeEventListener$2]('touchend', self.stop);
            global$2[removeEventListener$2]('touchcancel', self.stop);
            global$2[removeEventListener$2]('mousemove', self.move);
            global$2[removeEventListener$2]('touchmove', self.move);

            // Clear bound function references
            self.stop = null;
            self.move = null;

            a[removeEventListener$2]('selectstart', NOOP);
            a[removeEventListener$2]('dragstart', NOOP);
            b[removeEventListener$2]('selectstart', NOOP);
            b[removeEventListener$2]('dragstart', NOOP);

            a.style.userSelect = '';
            a.style.webkitUserSelect = '';
            a.style.MozUserSelect = '';
            a.style.pointerEvents = '';

            b.style.userSelect = '';
            b.style.webkitUserSelect = '';
            b.style.MozUserSelect = '';
            b.style.pointerEvents = '';

            self.gutter.style.cursor = '';
            self.parent.style.cursor = '';
            document$1.body.style.cursor = '';
        }

        // startDragging calls `calculateSizes` to store the inital size in the pair object.
        // It also adds event listeners for mouse/touch events,
        // and prevents selection while dragging so avoid the selecting text.
        function startDragging(e) {
            // Right-clicking can't start dragging.
            if ('button' in e && e.button !== 0) {
                return
            }

            // Alias frequently used variables to save space. 200 bytes.
            var self = this;
            var a = elements[self.a].element;
            var b = elements[self.b].element;

            // Call the onDragStart callback.
            if (!self.dragging) {
                getOption(options, 'onDragStart', NOOP)(getSizes());
            }

            // Don't actually drag the element. We emulate that in the drag function.
            e.preventDefault();

            // Set the dragging property of the pair object.
            self.dragging = true;

            // Create two event listeners bound to the same pair object and store
            // them in the pair object.
            self.move = drag.bind(self);
            self.stop = stopDragging.bind(self);

            // All the binding. `window` gets the stop events in case we drag out of the elements.
            global$2[addEventListener$2]('mouseup', self.stop);
            global$2[addEventListener$2]('touchend', self.stop);
            global$2[addEventListener$2]('touchcancel', self.stop);
            global$2[addEventListener$2]('mousemove', self.move);
            global$2[addEventListener$2]('touchmove', self.move);

            // Disable selection. Disable!
            a[addEventListener$2]('selectstart', NOOP);
            a[addEventListener$2]('dragstart', NOOP);
            b[addEventListener$2]('selectstart', NOOP);
            b[addEventListener$2]('dragstart', NOOP);

            a.style.userSelect = 'none';
            a.style.webkitUserSelect = 'none';
            a.style.MozUserSelect = 'none';
            a.style.pointerEvents = 'none';

            b.style.userSelect = 'none';
            b.style.webkitUserSelect = 'none';
            b.style.MozUserSelect = 'none';
            b.style.pointerEvents = 'none';

            // Set the cursor at multiple levels
            self.gutter.style.cursor = cursor;
            self.parent.style.cursor = cursor;
            document$1.body.style.cursor = cursor;

            // Cache the initial sizes of the pair.
            calculateSizes.call(self);

            // Determine the position of the mouse compared to the gutter
            self.dragOffset = getMousePosition(e) - self.end;
        }

        // adjust sizes to ensure percentage is within min size and gutter.
        sizes = trimToMin(sizes);

        // 5. Create pair and element objects. Each pair has an index reference to
        // elements `a` and `b` of the pair (first and second elements).
        // Loop through the elements while pairing them off. Every pair gets a
        // `pair` object and a gutter.
        //
        // Basic logic:
        //
        // - Starting with the second element `i > 0`, create `pair` objects with
        //   `a = i - 1` and `b = i`
        // - Set gutter sizes based on the _pair_ being first/last. The first and last
        //   pair have gutterSize / 2, since they only have one half gutter, and not two.
        // - Create gutter elements and add event listeners.
        // - Set the size of the elements, minus the gutter sizes.
        //
        // -----------------------------------------------------------------------
        // |     i=0     |         i=1         |        i=2       |      i=3     |
        // |             |                     |                  |              |
        // |           pair 0                pair 1             pair 2           |
        // |             |                     |                  |              |
        // -----------------------------------------------------------------------
        var pairs = [];
        elements = ids.map(function (id, i) {
            // Create the element object.
            var element = {
                element: elementOrSelector(id),
                size: sizes[i],
                minSize: minSizes[i],
                i: i,
            };

            var pair;

            if (i > 0) {
                // Create the pair object with its metadata.
                pair = {
                    a: i - 1,
                    b: i,
                    dragging: false,
                    direction: direction,
                    parent: parent,
                };

                pair[aGutterSize] = getGutterSize(
                    gutterSize,
                    i - 1 === 0,
                    false,
                    gutterAlign
                );
                pair[bGutterSize] = getGutterSize(
                    gutterSize,
                    false,
                    i === ids.length - 1,
                    gutterAlign
                );

                // if the parent has a reverse flex-direction, switch the pair elements.
                if (
                    parentFlexDirection === 'row-reverse' ||
                    parentFlexDirection === 'column-reverse'
                ) {
                    var temp = pair.a;
                    pair.a = pair.b;
                    pair.b = temp;
                }
            }

            // Determine the size of the current element. IE8 is supported by
            // staticly assigning sizes without draggable gutters. Assigns a string
            // to `size`.
            //
            // IE9 and above
            if (!isIE8) {
                // Create gutter elements for each pair.
                if (i > 0) {
                    var gutterElement = gutter(i, direction, element.element);
                    setGutterSize(gutterElement, gutterSize, i);

                    // Save bound event listener for removal later
                    pair[gutterStartDragging] = startDragging.bind(pair);

                    // Attach bound event listener
                    gutterElement[addEventListener$2](
                        'mousedown',
                        pair[gutterStartDragging]
                    );
                    gutterElement[addEventListener$2](
                        'touchstart',
                        pair[gutterStartDragging]
                    );

                    parent.insertBefore(gutterElement, element.element);

                    pair.gutter = gutterElement;
                }
            }

            setElementSize(
                element.element,
                element.size,
                getGutterSize(
                    gutterSize,
                    i === 0,
                    i === ids.length - 1,
                    gutterAlign
                ),
                i
            );

            // After the first iteration, and we have a pair object, append it to the
            // list of pairs.
            if (i > 0) {
                pairs.push(pair);
            }

            return element
        });

        function adjustToMin(element) {
            var isLast = element.i === pairs.length;
            var pair = isLast ? pairs[element.i - 1] : pairs[element.i];

            calculateSizes.call(pair);

            var size = isLast
                ? pair.size - element.minSize - pair[bGutterSize]
                : element.minSize + pair[aGutterSize];

            adjust.call(pair, size);
        }

        elements.forEach(function (element) {
            var computedSize = element.element[getBoundingClientRect]()[dimension];

            if (computedSize < element.minSize) {
                if (expandToMin) {
                    adjustToMin(element);
                } else {
                    // eslint-disable-next-line no-param-reassign
                    element.minSize = computedSize;
                }
            }
        });

        function setSizes(newSizes) {
            var trimmed = trimToMin(newSizes);
            trimmed.forEach(function (newSize, i) {
                if (i > 0) {
                    var pair = pairs[i - 1];

                    var a = elements[pair.a];
                    var b = elements[pair.b];

                    a.size = trimmed[i - 1];
                    b.size = newSize;

                    setElementSize(a.element, a.size, pair[aGutterSize], a.i);
                    setElementSize(b.element, b.size, pair[bGutterSize], b.i);
                }
            });
        }

        function destroy(preserveStyles, preserveGutter) {
            pairs.forEach(function (pair) {
                if (preserveGutter !== true) {
                    pair.parent.removeChild(pair.gutter);
                } else {
                    pair.gutter[removeEventListener$2](
                        'mousedown',
                        pair[gutterStartDragging]
                    );
                    pair.gutter[removeEventListener$2](
                        'touchstart',
                        pair[gutterStartDragging]
                    );
                }

                if (preserveStyles !== true) {
                    var style = elementStyle(
                        dimension,
                        pair.a.size,
                        pair[aGutterSize]
                    );

                    Object.keys(style).forEach(function (prop) {
                        elements[pair.a].element.style[prop] = '';
                        elements[pair.b].element.style[prop] = '';
                    });
                }
            });
        }

        if (isIE8) {
            return {
                setSizes: setSizes,
                destroy: destroy,
            }
        }

        return {
            setSizes: setSizes,
            getSizes: getSizes,
            collapse: function collapse(i) {
                adjustToMin(elements[i]);
            },
            destroy: destroy,
            parent: parent,
            pairs: pairs,
        }
    };

    var canvasDatagrid = createCommonjsModule(function (module, exports) {
    !function(e,t){module.exports=t();}("undefined"!=typeof self?self:commonjsGlobal,function(){return function(e){function t(r){if(o[r])return o[r].exports;var n=o[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var o={};return t.m=e,t.c=o,t.d=function(e,o,r){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:r});},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){e.defaults={attributes:[["allowColumnReordering",!0],["allowColumnResize",!0],["allowColumnResizeFromCell",!1],["allowFreezingRows",!1],["allowFreezingColumns",!1],["allowMovingSelection",!0],["allowRowHeaderResize",!0],["allowRowReordering",!1],["allowRowResize",!0],["allowRowResizeFromCell",!1],["allowSorting",!0],["autoGenerateSchema",!1],["autoResizeColumns",!1],["borderDragBehavior","none"],["borderResizeZone",10],["clearSettingsOptionText","Clear saved settings"],["columnHeaderClickBehavior","sort"],["columnSelectorHiddenText","&nbsp;&nbsp;&nbsp;"],["columnSelectorText","Add/Remove columns"],["columnSelectorVisibleText","✓"],["contextHoverScrollAmount",2],["contextHoverScrollRateMs",5],["copyHeadersOnSelectAll",!0],["copyText","Copy"],["debug",!1],["editable",!0],["ellipsisText","..."],["filterOptionText","Filter %s"],["filterTextPrefix","(filtered) "],["globalRowResize",!1],["hideColumnText","Hide %s"],["maxAutoCompleteItems",200],["multiLine",!1],["name",""],["pageUpDownOverlap",1],["pasteText","Paste"],["persistantSelectionMode",!1],["removeFilterOptionText","Remove filter on %s"],["reorderDeadZone",3],["resizeScrollZone",20],["rowGrabZoneSize",5],["saveAppearance",!0],["scrollAnimationPPSThreshold",.75],["scrollPointerLock",!1],["scrollRepeatRate",75],["selectionFollowsActiveCell",!1],["selectionHandleBehavior","none"],["selectionMode","cell"],["selectionScrollIncrement",20],["selectionScrollZone",20],["showClearSettingsOption",!0],["showColumnHeaders",!0],["showColumnSelector",!0],["showCopy",!1],["showFilter",!0],["showNewRow",!1],["showOrderByOption",!0],["showOrderByOptionTextAsc","Order by %s ascending"],["showOrderByOptionTextDesc","Order by %s descending"],["showPaste",!1],["showPerformance",!1],["showRowHeaders",!0],["showRowNumbers",!0],["snapToRow",!1],["touchContextMenuTimeMs",800],["touchDeadZone",3],["touchEasingMethod","easeOutQuad"],["touchReleaseAcceleration",1e3],["touchReleaseAnimationDurationMs",2e3],["touchScrollZone",20],["touchSelectHandleZone",20],["touchZoomSensitivity",.005],["touchZoomMin",.5],["touchZoomMax",1.75],["maxPixelRatio",2],["tree",!1],["treeHorizontalScroll",!1]],styles:[["activeCellBackgroundColor","rgba(255, 255, 255, 1)"],["activeCellBorderColor","rgba(110, 168, 255, 1)"],["activeCellBorderWidth",1],["activeCellColor","rgba(0, 0, 0, 1)"],["activeCellFont","16px sans-serif"],["activeCellHoverBackgroundColor","rgba(255, 255, 255, 1)"],["activeCellHorizontalAlignment","left"],["activeCellHoverColor","rgba(0, 0, 0, 1)"],["activeCellOverlayBorderColor","rgba(66, 133, 244, 1)"],["activeCellOverlayBorderWidth",1],["activeCellPaddingBottom",5],["activeCellPaddingLeft",5],["activeCellPaddingRight",5],["activeCellPaddingTop",5],["activeCellSelectedBackgroundColor","rgba(236, 243, 255, 1)"],["activeCellSelectedColor","rgba(0, 0, 0, 1)"],["activeCellVerticalAlignment","center"],["activeColumnHeaderCellBackgroundColor","rgba(225, 225, 225, 1)"],["activeColumnHeaderCellColor","rgba(0, 0, 0, 1)"],["activeRowHeaderCellBackgroundColor","rgba(225, 225, 225, 1)"],["activeRowHeaderCellColor","rgba(0, 0, 0, 1)"],["autocompleteBottomMargin",60],["autosizeHeaderCellPadding",8],["autosizePadding",5],["cellAutoResizePadding",13],["cellBackgroundColor","rgba(255, 255, 255, 1)"],["cellBorderColor","rgba(195, 199, 202, 1)"],["cellBorderWidth",1],["cellColor","rgba(0, 0, 0, 1)"],["cellFont","16px sans-serif"],["cellGridHeight",250],["cellHeight",24],["cellHeightWithChildGrid",150],["cellHorizontalAlignment","left"],["cellHoverBackgroundColor","rgba(255, 255, 255, 1)"],["cellHoverColor","rgba(0, 0, 0, 1)"],["cellPaddingBottom",5],["cellPaddingLeft",5],["cellPaddingRight",5],["cellPaddingTop",5],["cellSelectedBackgroundColor","rgba(236, 243, 255, 1)"],["cellSelectedColor","rgba(0, 0, 0, 1)"],["cellVerticalAlignment","center"],["cellWidth",250],["cellWidthWithChildGrid",250],["cellWhiteSpace","nowrap"],["cellLineHeight",1],["cellLineSpacing",3],["childContextMenuArrowColor","rgba(43, 48, 43, 1)"],["childContextMenuArrowHTML","&#x25BA;"],["childContextMenuMarginLeft",-11],["childContextMenuMarginTop",-6],["columnHeaderCellBackgroundColor","rgba(240, 240, 240, 1)"],["columnHeaderCellBorderColor","rgba(172, 172, 172, 1)"],["columnHeaderCellBorderWidth",1],["columnHeaderCellCapBackgroundColor","rgba(240, 240, 240, 1)"],["columnHeaderCellCapBorderColor","rgba(172, 172, 172, 1)"],["columnHeaderCellCapBorderWidth",1],["columnHeaderCellColor","rgba(50, 50, 50, 1)"],["columnHeaderCellFont","16px sans-serif"],["columnHeaderCellHeight",25],["columnHeaderCellHorizontalAlignment","left"],["columnHeaderCellHoverBackgroundColor","rgba(235, 235, 235, 1)"],["columnHeaderCellHoverColor","rgba(0, 0, 0, 1)"],["columnHeaderCellPaddingBottom",5],["columnHeaderCellPaddingLeft",5],["columnHeaderCellPaddingRight",5],["columnHeaderCellPaddingTop",5],["columnHeaderCellVerticalAlignment","center"],["columnHeaderOrderByArrowBorderColor","rgba(195, 199, 202, 1)"],["columnHeaderOrderByArrowBorderWidth",1],["columnHeaderOrderByArrowColor","rgba(155, 155, 155, 1)"],["columnHeaderOrderByArrowHeight",8],["columnHeaderOrderByArrowMarginLeft",0],["columnHeaderOrderByArrowMarginRight",5],["columnHeaderOrderByArrowMarginTop",6],["columnHeaderOrderByArrowWidth",13],["contextFilterButtonBorder","solid 1px rgba(158, 163, 169, 1)"],["contextFilterButtonBorderRadius","3px"],["contextFilterButtonHTML","&#x25BC;"],["contextFilterInputBackground","rgba(255,255,255,1)"],["contextFilterInputBorder","solid 1px rgba(158, 163, 169, 1)"],["contextFilterInputBorderRadius","0"],["contextFilterInputColor","rgba(0,0,0,1)"],["contextFilterInputFontFamily","sans-serif"],["contextFilterInputFontSize","14px"],["contextFilterInvalidRegExpBackground","rgba(180, 6, 1, 1)"],["contextFilterInvalidRegExpColor","rgba(255, 255, 255, 1)"],["contextMenuArrowColor","rgba(43, 48, 43, 1)"],["contextMenuArrowDownHTML","&#x25BC;"],["contextMenuArrowUpHTML","&#x25B2;"],["contextMenuBackground","rgba(240, 240, 240, 1)"],["contextMenuBorder","solid 1px rgba(158, 163, 169, 1)"],["contextMenuBorderRadius","3px"],["contextMenuChildArrowFontSize","12px"],["contextMenuColor","rgba(43, 48, 43, 1)"],["contextMenuCursor","default"],["contextMenuFilterButtonFontFamily","sans-serif"],["contextMenuFilterButtonFontSize","10px"],["contextMenuFilterInvalidExpresion","rgba(237, 155, 156, 1)"],["contextMenuFontFamily","sans-serif"],["contextMenuFontSize","16px"],["contextMenuHoverBackground","rgba(182, 205, 250, 1)"],["contextMenuHoverColor","rgba(43, 48, 153, 1)"],["contextMenuItemBorderRadius","3px"],["contextMenuItemMargin","2px"],["contextMenuLabelDisplay","inline-block"],["contextMenuLabelMargin","0 3px 0 0"],["contextMenuLabelMaxWidth","700px"],["contextMenuLabelMinWidth","75px"],["contextMenuMarginLeft",3],["contextMenuMarginTop",-3],["contextMenuOpacity","0.98"],["contextMenuPadding","2px"],["contextMenuWindowMargin",30],["contextMenuZIndex",1e4],["cornerCellBackgroundColor","rgba(240, 240, 240, 1)"],["cornerCellBorderColor","rgba(202, 202, 202, 1)"],["debugBackgroundColor","rgba(0, 0, 0, .0)"],["debugColor","rgba(255, 15, 24, 1)"],["debugEntitiesColor","rgba(76, 231, 239, 1.00)"],["debugFont","11px sans-serif"],["debugPerfChartBackground","rgba(29, 25, 26, 1.00)"],["debugPerfChartTextColor","rgba(255, 255, 255, 0.8)"],["debugPerformanceColor","rgba(252, 255, 37, 1.00)"],["debugScrollHeightColor","rgba(248, 33, 103, 1.00)"],["debugScrollWidthColor","rgba(66, 255, 27, 1.00)"],["debugTouchPPSXColor","rgba(246, 102, 24, 1.00)"],["debugTouchPPSYColor","rgba(186, 0, 255, 1.00)"],["display","inline-block"],["editCellBackgroundColor","white"],["editCellBorder","solid 1px rgba(110, 168, 255, 1)"],["editCellBoxShadow","0 2px 5px rgba(0,0,0,0.4)"],["editCellColor","black"],["editCellFontFamily","sans-serif"],["editCellFontSize","16px"],["editCellPaddingLeft",4],["editCellZIndex",1e4],["frozenMarkerHoverColor","rgba(236, 243, 255, 1)"],["frozenMarkerHoverBorderColor","rgba(110, 168, 255, 1)"],["frozenMarkerActiveColor","rgba(236, 243, 255, 1)"],["frozenMarkerActiveBorderColor","rgba(110, 168, 255, 1)"],["frozenMarkerColor","rgba(222, 222, 222, 1)"],["frozenMarkerBorderColor","rgba(168, 168, 168, 1)"],["frozenMarkerBorderWidth",1],["frozenMarkerWidth",2],["gridBackgroundColor","rgba(240, 240, 240, 1)"],["gridBorderCollapse","collapse"],["gridBorderColor","rgba(202, 202, 202, 1)"],["gridBorderWidth",1],["height","auto"],["maxHeight","inherit"],["maxWidth","inherit"],["minColumnWidth",45],["minHeight","inherit"],["minRowHeight",24],["minWidth","inherit"],["mobileContextMenuMargin",10],["mobileEditInputHeight",30],["mobileEditFontFamily","sans-serif"],["mobileEditFontSize","16px"],["moveOverlayBorderWidth",1],["moveOverlayBorderColor","rgba(66, 133, 244, 1)"],["moveOverlayBorderSegments","12, 7"],["name","default"],["overflowY","auto"],["overflowX","auto"],["reorderMarkerBackgroundColor","rgba(0, 0, 0, 0.1)"],["reorderMarkerBorderColor","rgba(0, 0, 0, 0.2)"],["reorderMarkerBorderWidth",1.25],["reorderMarkerIndexBorderColor","rgba(66, 133, 244, 1)"],["reorderMarkerIndexBorderWidth",2.75],["rowHeaderCellBackgroundColor","rgba(240, 240, 240, 1)"],["rowHeaderCellBorderColor","rgba(200, 200, 200, 1)"],["rowHeaderCellBorderWidth",1],["rowHeaderCellColor","rgba(50, 50, 50, 1)"],["rowHeaderCellFont","16px sans-serif"],["rowHeaderCellHeight",25],["rowHeaderCellHorizontalAlignment","left"],["rowHeaderCellHoverBackgroundColor","rgba(235, 235, 235, 1)"],["rowHeaderCellHoverColor","rgba(0, 0, 0, 1)"],["rowHeaderCellPaddingBottom",5],["rowHeaderCellPaddingLeft",5],["rowHeaderCellPaddingRight",5],["rowHeaderCellPaddingTop",5],["rowHeaderCellSelectedBackgroundColor","rgba(217, 217, 217, 1)"],["rowHeaderCellSelectedColor","rgba(50, 50, 50, 1)"],["rowHeaderCellVerticalAlignment","center"],["rowHeaderCellWidth",57],["scrollBarActiveColor","rgba(125, 125, 125, 1)"],["scrollBarBackgroundColor","rgba(240, 240, 240, 1)"],["scrollBarBorderColor","rgba(202, 202, 202, 1)"],["scrollBarBorderWidth",.5],["scrollBarBoxBorderRadius",4.125],["scrollBarBoxColor","rgba(192, 192, 192, 1)"],["scrollBarBoxMargin",2],["scrollBarBoxMinSize",15],["scrollBarBoxWidth",8],["scrollBarCornerBackgroundColor","rgba(240, 240, 240, 1)"],["scrollBarCornerBorderColor","rgba(202, 202, 202, 1)"],["scrollBarWidth",11],["selectionHandleBorderColor","rgba(255, 255, 255, 1)"],["selectionHandleBorderWidth",1.5],["selectionHandleColor","rgba(66, 133, 244, 1)"],["selectionHandleSize",8],["selectionHandleType","square"],["selectionOverlayBorderColor","rgba(66, 133, 244, 1)"],["selectionOverlayBorderWidth",1],["treeArrowBorderColor","rgba(195, 199, 202, 1)"],["treeArrowBorderWidth",1],["treeArrowClickRadius",5],["treeArrowColor","rgba(155, 155, 155, 1)"],["treeArrowHeight",8],["treeArrowMarginLeft",0],["treeArrowMarginRight",5],["treeArrowMarginTop",6],["treeArrowWidth",13],["treeGridHeight",250],["width","auto"]]};}}.apply(t,r))&&(e.exports=n);},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(2),__webpack_require__(0),__webpack_require__(3),__webpack_require__(4),__webpack_require__(5),__webpack_require__(6),__webpack_require__(7),__webpack_require__(8),__webpack_require__(9)],void 0!==(__WEBPACK_AMD_DEFINE_RESULT__=function context(component){function Grid(args){args=args||{};var self={};return self.isComponent=void 0===args.component,self.isChildGrid=args.parentNode&&/canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType),self.isChildGrid?self.intf={}:self.intf=self.isComponent?eval("Reflect.construct(HTMLElement, [], new.target)"):document.createElement("canvas"),self.args=args,self.intf.args=args,self.applyComponentStyle=component.applyComponentStyle,self.hyphenateProperty=component.hyphenateProperty,self.dehyphenateProperty=component.dehyphenateProperty,self.createGrid=function(e){return e.component=!1,new Grid(e)},modules.forEach(function(e){e(self);}),self.isChildGrid?(self.shadowRoot=args.parentNode.shadowRoot,self.parentNode=args.parentNode):(self.shadowRoot=self.intf.attachShadow({mode:"open"}),self.parentNode=self.shadowRoot),self.init(),self.intf}component=component();var modules=Array.prototype.slice.call(arguments);return window.HTMLElement&&(Grid.prototype=Object.create(window.HTMLElement.prototype)),window.customElements&&(Grid.observedAttributes=component.getObservableAttributes(),Grid.prototype.disconnectedCallback=component.disconnectedCallback,Grid.prototype.attributeChangedCallback=component.attributeChangedCallback,Grid.prototype.connectedCallback=component.connectedCallback,Grid.prototype.adoptedCallback=component.adoptedCallback,window.customElements.define("canvas-datagrid",Grid)),!window||window.canvasDatagrid||window.require||(window.canvasDatagrid=function(e){return new Grid(e)}),module.exports=function(e){e=e||{};var t,o=["style","formatters","sorters","filters","treeGridAttributes","cellGridAttributes","data","schema"];return window.customElements?(t=document.createElement("canvas-datagrid"),Object.keys(e).forEach(function(r){if("data"!==r&&"parentNode"!==r)return -1!==o.indexOf(r)?void o.forEach(function(o){void 0!==e[o]&&o===r&&(-1!==["formatters","sorters","filters"].indexOf(r)?"object"==typeof e[o]&&null!==e[o]&&Object.keys(e[o]).forEach(function(r){t[o][r]=e[o][r];}):t[o]=e[o]);}):void(t.attributes[r]=e[r])}),e.data&&(t.data=e.data),e.parentNode&&e.parentNode.appendChild(t),t):(e.component=!1,t=new Grid(e),e.parentNode&&e.parentNode.appendChild&&e.parentNode.appendChild(t),t)},module.exports}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__);},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[__webpack_require__(0)],void 0!==(__WEBPACK_AMD_DEFINE_RESULT__=function(defaults){return function(){function getDefaultItem(e,t){var o={};return defaults(o),o.defaults[e].filter(function(e){return e[0].toLowerCase()===t.toLowerCase()||component.hyphenateProperty(e[0])===t.toLowerCase()||component.hyphenateProperty(e[0],!0)===t.toLowerCase()})[0]}var typeMap,component={};return component.dehyphenateProperty=function(e){e=e.replace("--cdg-","");var t,o="";return Array.prototype.forEach.call(e,function(e){return t?(t=!1,void(o+=e.toUpperCase())):"-"===e?void(t=!0):void(o+=e)}),o},component.hyphenateProperty=function(e,t){var o="";return Array.prototype.forEach.call(e,function(e){if(e===e.toUpperCase())return void(o+="-"+e.toLowerCase());o+=e;}),(t?"--cdg-":"")+o},component.applyComponentStyle=function(e,t){if(t.isComponent){var o=window.getComputedStyle("CANVAS-DATAGRID"===t.tagName?t:t.canvas,null),r={};t.computedStyle=o,defaults(r),r=r.defaults.styles,r.forEach(function(e){var r;r=o.getPropertyValue(component.hyphenateProperty(e[0],!0)),""===r&&(r=o.getPropertyValue(component.hyphenateProperty(e[0],!1))),""!==r&&"string"==typeof r&&t.setStyleProperty(e[0],typeMap[typeof e[1]](r.replace(/^\s+/,"").replace(/\s+$/,""),e[1]),!0);}),!e&&t.dispatchEvent&&(requestAnimationFrame(function(){t.resize(!0);}),t.dispatchEvent("stylechanged",t.style));}},typeMap={data:function(e){try{return JSON.parse(e)}catch(e){throw new Error("Cannot read JSON data in canvas-datagrid data.")}},schema:function(e){try{return JSON.parse(e)}catch(e){throw new Error("Cannot read JSON data in canvas-datagrid schema attribute.")}},number:function(e,t){var o=parseInt(e,10);return isNaN(o)?t:o},boolean:function(e){return /true/i.test(e)},string:function(e){return e}},component.getObservableAttributes=function(){var e={},t=["data","schema","style","className","name"];return defaults(e),e.defaults.attributes.forEach(function(e){t.push(e[0].toLowerCase());}),t},component.disconnectedCallback=function(){this.connected=!1;},component.connectedCallback=function(){var e=this;e.parentDOMNode.innerHTML="",e.parentDOMNode.appendChild(e.canvas),e.connected=!0,component.observe(e),component.applyComponentStyle(!0,e),e.resize(!0);},component.adoptedCallback=function(){this.resize();},component.attributeChangedCallback=function(attrName,oldVal,newVal){var tfn,intf=this,def;if("style"===attrName)return void component.applyComponentStyle(!1,intf);if("data"===attrName)return "application/x-canvas-datagrid"===intf.dataType&&(intf.dataType="application/json+x-canvas-datagrid"),void(intf.args.data=newVal);if("schema"===attrName)return void(intf.args.schema=typeMap.schema(newVal));if("name"===attrName)return void(intf.name=newVal);if("class"!==attrName&&"className"!==attrName){if(def=getDefaultItem("attributes",attrName))return tfn=typeMap[typeof def[1]],void(intf.attributes[def[0]]=tfn(newVal));/^on/.test(attrName)&&intf.addEventListener("on"+attrName,function(e){eval(newVal);});}},component.observe=function(e){var t;window.MutationObserver&&(e.applyComponentStyle=function(){component.applyComponentStyle(!1,e),e.resize();},t=new window.MutationObserver(function(t){var o,r;Array.prototype.forEach.call(t,function(t){return "class"===t.attributeName||"style"===t.attributeName?void(r=!0):"STYLE"===t.target.nodeName?void(r=!0):t.target.parentNode&&"STYLE"===t.target.parentNode.nodeName?void(r=!0):void(t.target===e&&(t.addedNodes.length>0||"characterData"===t.type)&&(o=!0))}),r&&e.applyComponentStyle(!1,e),o&&("application/x-canvas-datagrid"===e.dataType&&(e.dataType="application/json+x-canvas-datagrid"),e.data=e.innerHTML);}),t.observe(e,{characterData:!0,childList:!0,attributes:!0,subtree:!0}),Array.prototype.forEach.call(document.querySelectorAll("style"),function(e){t.observe(e,{characterData:!0,childList:!0,attributes:!0,subtree:!0});}));},component}}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){function t(e,t,o,r){o=o||1;var n,l=[];for(n=e;n<=t;n+=o)l[n]=void 0===r?n:"function"==typeof r?r(n):r;return l}function o(t,o,r,n,l,i,a,s,c){var d=t/l.length,u=o/a;r+=e.canvasOffsetLeft,n+=e.canvasOffsetTop,e.ctx.beginPath(),e.ctx.moveTo(r,n+o),l.forEach(function(t){var l,a,s=void 0===i?t:t[i];c&&(s=Math.abs(s)),l=r+d,a=n+o-s*u,e.ctx.lineTo(l,a),r+=d;}),e.ctx.moveTo(r+t,n+o),e.ctx.strokeStyle=s,e.ctx.stroke();}function r(){var t=!0;Object.keys(e.htmlImageCache).forEach(function(o){e.htmlImageCache[o].complete||(t=!1);}),t&&!C&&(C=!0,e.draw());}function n(t){var o,n=t.innerHTML||t.formattedValue,l=n.toString()+t.rowIndex.toString()+t.columnIndex.toString(),i=t.x+e.canvasOffsetLeft,a=t.y+e.canvasOffsetTop;if(e.htmlImageCache[l]){if(o=e.htmlImageCache[l],o.height===t.height&&o.width===t.width){if(!o.complete)return;return e.ctx.drawImage(o,i,a)}e.htmlImageCache[l]=void 0;}else C=!1;o=new Image(t.width,t.height),e.htmlImageCache[l]=o,o.onload=function(){e.ctx.drawImage(o,i,a),r();},o.src="data:image/svg+xml;base64,"+btoa('<svg xmlns="http://www.w3.org/2000/svg" width="'+t.width+'" height="'+t.height+'">\n<foreignObject class="node" x="0" y="0" width="100%" height="100%">\n<body xmlns="http://www.w3.org/1999/xhtml" style="margin:0;padding:0;">\n'+n+"\n</body></foreignObject>\n</svg>\n");}function l(t,o){var r=e.style.columnHeaderOrderByArrowMarginTop*e.scale,n=e.style.columnHeaderOrderByArrowMarginLeft*e.scale,l=e.style.columnHeaderOrderByArrowMarginRight*e.scale,i=e.style.columnHeaderOrderByArrowWidth*e.scale,a=e.style.columnHeaderOrderByArrowHeight*e.scale;return t+=e.canvasOffsetLeft,o+=e.canvasOffsetTop,e.ctx.fillStyle=e.style.columnHeaderOrderByArrowColor,e.ctx.strokeStyle=e.style.columnHeaderOrderByArrowBorderColor,e.ctx.beginPath(),t+=n,o+=r,"asc"===e.orderDirection?(e.ctx.moveTo(t,o),e.ctx.lineTo(t+i,o),e.ctx.lineTo(t+.5*i,o+a),e.ctx.moveTo(t,o)):(e.ctx.lineTo(t,o+a),e.ctx.lineTo(t+i,o+a),e.ctx.lineTo(t+.5*i,o),e.ctx.lineTo(t,o+a)),e.ctx.stroke(),e.ctx.fill(),n+i+l}function i(t,o,r){var n=e.style.treeArrowMarginTop*e.scale,l=e.style.treeArrowMarginRight*e.scale,i=e.style.treeArrowMarginLeft*e.scale,a=e.style.treeArrowWidth*e.scale,s=e.style.treeArrowHeight*e.scale;return o+=e.canvasOffsetLeft,r+=e.canvasOffsetTop,e.ctx.fillStyle=e.style.treeArrowColor,e.ctx.strokeStyle=e.style.treeArrowBorderColor,e.ctx.beginPath(),o+=i,r+=n,e.openChildren[t.rowIndex]?(e.ctx.moveTo(o,r),e.ctx.lineTo(o+a,r),e.ctx.lineTo(o+.5*a,r+s),e.ctx.moveTo(o,r)):(e.ctx.lineTo(o,r),e.ctx.lineTo(o+s,r+.5*a),e.ctx.lineTo(o,r+a),e.ctx.lineTo(o,r)),e.ctx.stroke(),e.ctx.fill(),i+a+l}function a(t,o,r,n,l){t+=e.canvasOffsetLeft,o+=e.canvasOffsetTop;var i=t+r,a=o+n;e.ctx.beginPath(),e.ctx.moveTo(t+l,o),e.ctx.lineTo(i-l,o),e.ctx.quadraticCurveTo(i,o,i,o+l),e.ctx.lineTo(i,o+n-l),e.ctx.quadraticCurveTo(i,a,i-l,a),e.ctx.lineTo(t+l,a),e.ctx.quadraticCurveTo(t,a,t,a-l),e.ctx.lineTo(t,o+l),e.ctx.quadraticCurveTo(t,o,t+l,o);}function s(t,o,r,n){t+=e.canvasOffsetLeft,o+=e.canvasOffsetTop,e.ctx.fillRect(t,o,r,n);}function c(t,o,r,n){t+=e.canvasOffsetLeft,o+=e.canvasOffsetTop,e.ctx.strokeRect(t,o,r,n);}function d(t,o,r){o+=e.canvasOffsetLeft,r+=e.canvasOffsetTop,e.ctx.fillText(t,o,r);}function u(t,o,r){t+=e.canvasOffsetLeft,o+=e.canvasOffsetTop,e.ctx.beginPath(),e.ctx.arc(t,o,r,0,2*Math.PI),e.ctx.fill();}function h(t,o,r){t+=e.canvasOffsetLeft,o+=e.canvasOffsetTop,e.ctx.beginPath(),e.ctx.arc(t,o,r,0,2*Math.PI),e.ctx.stroke();}function f(t){e.ctx.beginPath(),0===t&&(e.ctx.moveTo(e.lastFrozenColumnPixel,e.lastFrozenRowPixel),e.ctx.lineTo(e.lastFrozenColumnPixel,e.height),e.ctx.lineTo(e.width,e.height),e.ctx.lineTo(e.width,e.lastFrozenRowPixel)),1===t&&(e.ctx.moveTo(0,e.lastFrozenRowPixel),e.ctx.lineTo(0,e.height),e.ctx.lineTo(e.width,e.height),e.ctx.lineTo(e.width,e.lastFrozenRowPixel)),2===t&&(e.ctx.moveTo(e.lastFrozenColumnPixel,0),e.ctx.lineTo(e.width,0),e.ctx.lineTo(e.width,e.height),e.ctx.lineTo(e.lastFrozenColumnPixel,e.height)),e.ctx.clip();}function g(t,o,r){if("circle"===e.style.selectionHandleType)return u(t,o,.5*r);s(t-.5*r,o-.5*r,r,r);}function m(t,o,r){if("circle"===e.style.selectionHandleType)return h(t,o,.5*r);c(t-.5*r,o-.5*r,r,r);}function p(t,o){var r=e.style.selectionHandleSize;({tr:function(){g(t.x+t.width,t.y,r),m(t.x+t.width,t.y,r);},br:function(){g(t.x+t.width,t.y+t.height,r),m(t.x+t.width,t.y+t.height,r);},tl:function(){g(t.x,t.y,r),m(t.x,t.y,r);},bl:function(){g(t.x,t.y+t.height,r),m(t.x,t.y+t.height,r);}})[o]();}function x(t,o){e.ctx.beginPath(),{t:function(){e.ctx.moveTo(t.x+e.canvasOffsetLeft,t.y+e.canvasOffsetTop),e.ctx.lineTo(t.x+e.canvasOffsetLeft+t.width,t.y+e.canvasOffsetTop);},r:function(){e.ctx.moveTo(t.x+e.canvasOffsetLeft+t.width,t.y+e.canvasOffsetTop),e.ctx.lineTo(t.x+e.canvasOffsetLeft+t.width,t.y+e.canvasOffsetTop+t.height);},b:function(){e.ctx.moveTo(t.x+e.canvasOffsetLeft,t.y+e.canvasOffsetTop+t.height),e.ctx.lineTo(t.x+e.canvasOffsetLeft+t.width,t.y+e.canvasOffsetTop+t.height);},l:function(){e.ctx.moveTo(t.x+e.canvasOffsetLeft,t.y+e.canvasOffsetTop),e.ctx.lineTo(t.x+e.canvasOffsetLeft,t.y+e.canvasOffsetTop+t.height);}}[o](),e.ctx.stroke();}function y(t,o){if(!t.formattedValue)return {lines:[{width:0,value:""}],width:0,height:t.calculatedLineHeight};var r,n,l,i,a,s,c=t.formattedValue.split(o),d=t.calculatedLineHeight,u=[],h="nowrap"!==e.style.cellWhiteSpace,f=e.attributes.ellipsisText,g={width:0,value:""},m=h?t.paddedHeight:t.calculatedLineHeight;for(u.push(g),l=e.ctx.measureText(" "+f).width,r=0;r<c.length;r+=1){n=c[r];var p=e.ctx.measureText(n+o);if(g.width+p.width+l<t.paddedWidth)g.value+=n+o,g.width+=p.width;else if(/\w-\w/.test(n)&&t.paddedWidth<p.width)c.splice(r,1,n.split("-")[0]+"-",n.split("-")[1]),r-=1;else{if(g={width:p.width,value:n+o},0===r&&(u=[],u.push(g)),(d+=t.calculatedLineHeight)>m){if(0===u.length)break;if(s=u[u.length-1],s.width<t.paddedWidth&&1===c.length)break;a=s.value+n,i=e.ctx.measureText(a+f).width;var x=a;if(i>t.paddedWidth)for(var y=parseInt(a.length/2),v=-1;y>0;)a=x.substr(0,y*v+a.length),i=e.ctx.measureText(a+f).width,v=i>t.paddedWidth?-1:1,y=parseInt(y/2);a+=x.length!=a.length?f:"",s.value=a,s.width=i;break}r>0&&u.push(g);}}return {lines:u,width:0,height:t.calculatedLineHeight*u.length}}function v(t){var o,r,n=(t.text.lines.length,t.fontHeight*t.lineHeight),l="nowrap"!==e.style.cellWhiteSpace,i=0;for(o=0;o<t.text.lines.length;o+=1){r=t.text.lines[o];var a=Math.max(.5*(t.height-(l?t.text.height:t.calculatedLineHeight)),0)+n,s=t.paddingLeft+t.treeArrowWidth+t.orderByArrowWidth;"right"===t.horizontalAlignment?s=t.paddingLeft+t.paddedWidth-r.width:"center"===t.horizontalAlignment&&(s=t.paddingLeft+(t.paddedWidth+t.paddingRight)/2-r.width/2),"top"===t.verticalAlignment?a=t.calculatedLineHeight:"bottom"===t.verticalAlignment&&(a=t.height-t.paddingBottom-t.text.height),r.height=n+t.lineSpacing,r.offsetLeft=s,r.offsetTop=a,r.x=t.x+s,r.y=t.y+i+a,i+=r.height,d(r.value,r.x,r.y);}e.attributes.debug&&t.active&&requestAnimationFrame(function(){e.ctx.font=e.style.debugFont,e.ctx.fillStyle=e.style.debugColor,d(JSON.stringify({x:t.x,y:t.y,h:t.height,w:t.width,pw:t.paddedWidth,idx:t.columnIndex,idx_ord:t.sortColumnIndex},null,"\t"),t.x+14,t.y+14),d(JSON.stringify(t.text.lines.map(function(e){return {w:e.width,v:e.value.length}}),null,"\t"),t.x+14,t.y+30);});}function w(){var t,o=0,r=e.getSchema(),n=0,l=Math.min(e.frozenColumn,r.length);for(M=0;n<l;)t=r[n],t.hidden?M+=1:o+=e.getColummnWidth(n),n+=1;return o}var b=[],C=!1,B=0,S=300,I=[],M=0,E=[],T=[];e.htmlImageCache={},e.draw=function(r){function u(t){(e.attributes.allowMovingSelection||e.mobile)&&(t.selectionBorderTop&&t.selectionBorderRight&&e.mobile&&(X.push([t,"tr"]),t.selectionHandle="tr"),t.selectionBorderTop&&t.selectionBorderLeft&&e.mobile&&(X.push([t,"tl"]),t.selectionHandle="tl"),t.selectionBorderBottom&&t.selectionBorderLeft&&e.mobile&&(X.push([t,"bl"]),t.selectionHandle="bl"),t.selectionBorderBottom&&t.selectionBorderRight&&("none"!==e.attributes.selectionHandleBehavior||e.mobile)&&(X.push([t,"br"]),t.selectionHandle="br"));}function h(t,o,r,n){n=n||{x:0,y:0},t.selectionBorder="",!t.isRowHeader&&e.selections[t.rowIndex+-n.y]&&-1!==e.selections[t.rowIndex+-n.y].indexOf(t.columnIndex+-n.x)&&(e.selections[t.rowIndex-1-n.y]&&-1!==e.selections[t.rowIndex-1-n.y].indexOf(t.columnIndex+-n.x)&&0!==t.rowIndex||t.isHeader||(o.push([t,"t"]),t[r+"BorderTop"]=!0,t[r+"Border"]+="t"),e.selections[t.rowIndex+1+-n.y]&&-1!==e.selections[t.rowIndex+1+-n.y].indexOf(t.columnIndex+-n.x)||(o.push([t,"b"]),t[r+"BorderBottom"]=!0,t[r+"Border"]+="b"),e.selections[t.rowIndex+-n.y]&&0!==t.columnIndex&&-1!==e.selections[t.rowIndex+-n.y].indexOf(t.columnIndex-1-n.x)||(o.push([t,"l"]),t[r+"BorderLeft"]=!0,t[r+"Border"]+="l"),e.selections[t.rowIndex+-n.y]&&t.columnIndex!==_.length&&-1!==e.selections[t.rowIndex+-n.y].indexOf(t.columnIndex+1+-n.x)||(o.push([t,"r"]),t[r+"BorderRight"]=!0,t[r+"Border"]+="r"));}function g(t,o,r){return function(d,f,g){if(d.hidden)return 0;var m,p,x,w=d.style||"cell",b=/HeaderCell/.test(w),C=/cornerCell/.test(w),B="rowHeaderCell"===w,S="columnHeaderCell"===w,I=e.selections[o]&&-1!==e.selections[o].indexOf(g),E=e.hovers.rowIndex===o&&e.hovers.columnIndex===g,T=e.activeCell.rowIndex===o&&e.activeCell.columnIndex===g,z="columnHeaderCellCap"===w,P=t?t[d.name]:void 0,k="canvas-datagrid"===d.type,A=!(e.orders.rows[e.activeCell.rowIndex]!==o&&e.orders.columns[e.activeCell.columnIndex]!==f||-1!==g&&-1!==o)&&(B?"activeRowHeaderCell":"activeColumnHeaderCell"),W=e.formatters[d.type||"string"],N=0,_=0,G=e.sizes.columns[f]||d.width,V={value:P,row:t,header:d};if(z&&(G=j-F),void 0===G&&(G=e.style.cellWidth),G*=e.scale,F+G+e.style.cellBorderWidth<0&&(F+=G+e.style.cellBorderWidth),T&&"cornerCell"!==w&&(w="activeCell"),-1!==e.visibleRows.indexOf(r)||b||e.visibleRows.push(r),x=e.dispatchEvent("formatcellvalue",V),H=F,O=D,"cornerCell"===w?(H=0,O=0):B?H=0:b&&(O=0),p={type:k?"canvas-datagrid-cell":d.type,style:w,nodeType:"canvas-datagrid-cell",x:H,y:O,fontHeight:(e.style[w+"FontHeight"]||0)*e.scale,horizontalAlignment:e.style[w+"HorizontalAlignment"],verticalAlignment:e.style[w+"VerticalAlignment"],paddingLeft:(e.style[w+"PaddingLeft"]||0)*e.scale,paddingTop:(e.style[w+"PaddingTop"]||0)*e.scale,paddingRight:(e.style[w+"PaddingRight"]||0)*e.scale,paddingBottom:(e.style[w+"PaddingBottom"]||0)*e.scale,whiteSpace:e.style.cellWhiteSpace,lineHeight:e.style.cellLineHeight,lineSpacing:e.style.cellLineSpacing,offsetTop:e.canvasOffsetTop+O,offsetLeft:e.canvasOffsetLeft+H,scrollTop:e.scrollBox.scrollTop,scrollLeft:e.scrollBox.scrollLeft,active:T||A,hovered:E,selected:I,width:G,height:oe,offsetWidth:G,offsetHeight:oe,parentNode:e.intf.parentNode,offsetParent:e.intf.parentNode,data:t,isCorner:C,isHeader:b,isColumnHeader:S,isColumnHeaderCellCap:z,isRowHeader:B,rowOpen:L,header:d,columnIndex:g,rowIndex:o,sortColumnIndex:f,sortRowIndex:r,isGrid:k,isNormal:!k&&!C&&!b,gridId:(e.attributes.name||"")+r+":"+f,parentGrid:e.intf,innerHTML:"",activeHeader:A,value:b&&!B?d.title||d.name:P},p.calculatedLineHeight=p.fontHeight*p.lineHeight+p.lineSpacing,p.paddedWidth=p.width-p.paddingRight-p.paddingLeft,p.paddedHeight=p.height-p.paddingTop-p.paddingBottom,V.cell=p,p.userHeight=p.isHeader?e.sizes.rows[-1]:R,p.userWidth=p.isHeader?e.sizes.columns.cornerCell:e.sizes.columns[f],e.visibleCells.unshift(p),!e.dispatchEvent("beforerendercell",V)){if(e.ctx.fillStyle=e.style[w+"BackgroundColor"],e.ctx.strokeStyle=e.style[w+"BorderColor"],e.ctx.lineWidth=e.style[w+"BorderWidth"],E&&(e.ctx.fillStyle=e.style[w+"HoverBackgroundColor"],e.ctx.strokeStyle=e.style[w+"HoverBorderColor"]),I&&(e.ctx.fillStyle=e.style[w+"SelectedBackgroundColor"],e.ctx.strokeStyle=e.style[w+"SelectedBorderColor"]),A&&(e.ctx.fillStyle=e.style[A+"BackgroundColor"]),e.dispatchEvent("rendercell",V),p.isGrid&&(p.height!==R&&(p.height=R||e.style.cellHeightWithChildGrid,M=!0),p.width=e.sizes.columns[f]||e.style.cellWidthWithChildGrid),L&&!p.isRowHeader&&(p.height=e.sizes.rows[r]||e.style.cellHeight),p.isGrid||(s(H,O,p.width,p.height),c(H,O,p.width,p.height)),e.ctx.save(),a(p.x,p.y,p.width,p.height,0),e.ctx.clip(),e.dispatchEvent("afterrendercell",V),p.height===oe||L&&!p.isRowHeader||(e.sizes.rows[b?-1:r]=p.height,M=!0),p.width!==G&&(e.sizes.columns[f]=p.width,M=!0),B&&e.attributes.tree&&(e.dispatchEvent("rendertreearrow",V)||(_=i(p,e.style[w+"PaddingLeft"],O))),e.attributes.showRowNumbers&&B||!B)if(p.isGrid&&!e.dispatchEvent("beforerendercellgrid",V)){if(!e.childGrids[p.gridId]){if(m=e.cellGridAttributes,m.name=e.attributes.saveAppearance?p.gridId:void 0,m.component=!1,m.parentNode=p,m.data=P,V.cellGridAttributes=m,e.dispatchEvent("beforecreatecellgrid",V))return;e.childGrids[p.gridId]=e.createGrid(m),e.sizes.rows[r]=e.sizes.rows[r]||e.style.cellGridHeight,M=!0;}p.grid=e.childGrids[p.gridId],p.grid.parentNode=p,p.grid.visible=!0,p.grid.draw(),e.dispatchEvent("rendercellgrid",V);}else p.isGrid||(e.childGrids[p.gridId]&&(e.childGrids[p.gridId].parentNode.offsetHeight=0),b&&e.orderBy===d.name&&(e.dispatchEvent("renderorderbyarrow",V)||(N=l(H+e.style[w+"PaddingLeft"],0))),e.ctx.fillStyle=e.style[w+"Color"],E&&(e.ctx.fillStyle=e.style[w+"HoverColor"]),I&&(e.ctx.fillStyle=e.style[w+"SelectedColor"]),A&&(e.ctx.fillStyle=e.style[A+"Color"]),p.treeArrowWidth=_,p.orderByArrowWidth=N,x=void 0!==x?x:W?W(V):"",void 0!==x||W||(x="",console.warn("canvas-datagrid: Unknown format "+d.type+" add a cellFormater")),p.formattedValue=(void 0!==x&&null!==x?x:"").toString(),e.columnFilters&&void 0!==e.columnFilters[x]&&b&&(p.formattedValue=e.attributes.filterTextPrefix+x),e.ctx.font=e.style[w+"FontHeight"]*e.scale+"px "+e.style[w+"FontName"],e.dispatchEvent("formattext",V)||(p.text=y(p," ")),e.dispatchEvent("rendertext",V)||(p.innerHTML||"html"===d.type?n(p):v(p)));return T&&(Z=p),h(p,Y,"selection"),u(p),e.movingSelection&&h(p,U,"move",e.moveOffset),e.ctx.restore(),F+=p.width+(q?0:e.style.cellBorderWidth),p.width}}}function m(t,o,r){var n,l;e.attributes.showRowHeaders&&(F=0,l=o+1,z={rowHeaderCell:l},n={name:"rowHeaderCell",width:e.sizes.columns[-1]||e.style.rowHeaderCellWidth,style:"rowHeaderCell",type:"string",data:l,index:-1},L=e.openChildren[o],g(z,o,r)(n,-1,-1));}function C(t,o){var r,n,l,i,a=_.length;if(D-2*oe>N)return !1;if(V=K[t],L=e.openChildren[t],l=(e.sizes.rows[t]||e.style.cellHeight)*e.scale,n=(L?e.sizes.trees[t]:0)*e.scale,R=l+n,D<-R)return !1;for(e.attributes.showRowHeaders&&(F+=te),oe=R,i=e.scrollIndexLeft;i<a;i+=1)if(r=e.orders.columns[i],(F+=g(V,t,o)(_[r],r,i))>e.width){e.scrollIndexRight=i,e.scrollPixelRight=F;break}for(F=0,e.attributes.showRowHeaders&&(F+=te),i=0;i<e.frozenColumn&&(r=e.orders.columns[i],!((F+=g(V,t,o)(_[r],r,i))>e.width));i+=1);return e.lastFrozenColumnPixel=F,oe=R,F=-e.scrollBox.scrollLeft+e.scrollPixelLeft+e.style.cellBorderWidth,k=e.childGrids[t],t!==K.length&&L?(k.visible=!0,k.parentNode={offsetTop:D+l+e.canvasOffsetTop,offsetLeft:te-1+e.canvasOffsetLeft,offsetHeight:n,offsetWidth:e.width-te-e.style.scrollBarWidth-1,offsetParent:e.intf.parentNode,parentNode:e.intf.parentNode,style:e.style,nodeType:"canvas-datagrid-tree",scrollTop:e.scrollBox.scrollTop,scrollLeft:e.scrollBox.scrollLeft,rowIndex:t},e.visibleCells.unshift({rowIndex:t,columnIndex:0,y:k.parentNode.offsetTop,x:k.parentNode.offsetLeft,height:k.height,width:k.width,style:"tree-grid",type:k.parentNode.nodeType}),k.draw()):k&&(k.parentNode.offsetHeight=0,delete e.sizes.trees[t]),J.push([V,t,o,D,R]),e.visibleRowHeights[t]=R,D+=oe+(q?0:e.style.cellBorderWidth),!0}if(!e.dispatchEvent("beforedraw",{})&&(e.isChildGrid||e.height&&e.width)){if(e.isChildGrid&&r)return void requestAnimationFrame(e.parentGrid.draw);if(!1!==e.intf.visible){var M,z,P,H,O,k,L,R,A,D,F,W,N,j,_,G,V,Z,K=e.data||[],q="collapse"===e.style.gridBorderCollapse,Y=[],U=[],X=[],J=[],Q=K.length,$=e.currentCell||{},ee=e.getColumnHeaderCellHeight(),te=e.getRowHeaderCellWidth(),oe=e.style.cellHeight;B+=1,P=performance.now(),e.visibleRowHeights=[],K.length>e.orders.rows.length&&e.createRowOrders(),e.ctx.save(),function(){e.visibleRows=[],_=e.getSchema(),e.visibleCells=[],e.canvasOffsetTop=e.isChildGrid?e.parentNode.offsetTop:0,e.canvasOffsetLeft=e.isChildGrid?e.parentNode.offsetLeft:0,N=e.height,j=e.width;}(),function(){a(0,0,j,N,0),e.ctx.clip(),e.ctx.fillStyle=e.style.gridBackgroundColor,s(0,0,j,N);}(),function(){var t,o=Math.min(K.length,e.frozenRow);for(F=-e.scrollBox.scrollLeft+e.scrollPixelLeft+e.style.cellBorderWidth,D=ee,G=0;G<o&&(t=e.orders.rows[G],C(t,G));G+=1);e.attributes.allowFreezingRows&&(D+=e.style.frozenMarkerBorderWidth+e.style.frozenMarkerWidth-.4999999999),e.lastFrozenRowPixel=D;}(),function(){e.ctx.save(),e.frozenRow>0&&(a(0,e.lastFrozenRowPixel,e.width,e.height-e.lastFrozenRowPixel,0),e.ctx.clip());var t,o,r,n=_.length;for(F=-e.scrollBox.scrollLeft+e.scrollPixelLeft+e.style.cellBorderWidth,e.attributes.snapToRow||(D+=-e.scrollBox.scrollTop+e.scrollPixelTop+e.style.cellBorderWidth),G=e.frozenRow+e.scrollIndexTop;G<Q&&(o=e.orders.rows[G],e.scrollIndexBottom=G,e.scrollPixelBottom=D,C(o,G));G+=1);if(e.attributes.showNewRow){for(e.attributes.showRowHeaders&&(F+=te),R=oe=e.style.cellHeight,L=!1,t=e.scrollIndexLeft;t<n&&(r=e.orders.columns[t],!((F+=g(e.newRow,K.length,K.length)(_[r],r,t))>e.width+e.scrollBox.scrollLeft));t+=1);J.push([e.newRow,K.length,K.length,D,R]);}e.ctx.restore();}(),function(){if(Z){e.ctx.save();var t=e.activeCell.columnIndex+1>e.frozenColumn||e.activeCell.rowIndex+1>e.frozenRow;a(t?e.lastFrozenColumnPixel:0,t?e.lastFrozenRowPixel:0,t?e.width-e.lastFrozenColumnPixel:e.width,t?e.height-e.lastFrozenRowPixel:e.height,0),e.ctx.clip(),"row"===e.attributes.selectionMode?e.activeCell&&e.activeCell.rowIndex===Z.rowIndex&&(e.ctx.lineWidth=e.style.activeCellOverlayBorderWidth,e.ctx.strokeStyle=e.style.activeCellOverlayBorderColor,c(0,Z.y,e.getHeaderWidth()+te,e.visibleRowHeights[Z.rowIndex])):(e.ctx.lineWidth=e.style.activeCellOverlayBorderWidth,e.ctx.strokeStyle=e.style.activeCellOverlayBorderColor,c(Z.x,Z.y,Z.width,Z.height)),e.ctx.restore();}}(),function(){function t(t,a){for(a=Math.min(a,c),n=t;n<a&&(r=e.orders.columns[n],i=_[r],i.hidden||(o={title:i.title,name:i.name,width:i.width||e.style.cellWidth,style:"columnHeaderCell",type:"string",index:n,order:r},l={columnHeaderCell:i.title||i.name},!((F+=g(l,-1,-1)(o,r,n))>e.width+e.scrollBox.scrollLeft)));n+=1);}var o,r,n,l,i,s,c=_.length;J.forEach(function(t,o){D=t[3],oe=t[4],o===e.frozenRow&&(e.ctx.save(),a(0,e.lastFrozenRowPixel,e.width,e.height-e.lastFrozenRowPixel,0),e.ctx.clip()),m(t[0],t[1],t[2]);}),e.ctx.restore(),e.attributes.showColumnHeaders&&(F=-e.scrollBox.scrollLeft+e.scrollPixelLeft+e.style.columnHeaderCellBorderWidth,e.attributes.showRowHeaders&&(F+=te),D=0,oe=e.getColumnHeaderCellHeight(),t(e.scrollIndexLeft,c),s=F,F=e.style.columnHeaderCellBorderWidth,e.attributes.showRowHeaders&&(F+=te),t(0,e.frozenColumn),F=s,F<j&&(W={name:"",width:e.style.scrollBarWidth,style:"columnHeaderCellCap",isColumnHeaderCell:!0,isColumnHeaderCellCap:!0,type:"string",index:_.length},g({endCap:""},-1,-1)(W,-1,-1)),e.attributes.showRowHeaders&&(A={cornerCell:""},F=0,W={name:"cornerCell",width:e.style.rowHeaderCellWidth,style:"cornerCell",type:"string",index:-1},g(A,-1,-1)(W,-1,-1)));}(),function(){var t=e.lastFrozenRowPixel-e.style.frozenMarkerWidth,o=e.lastFrozenColumnPixel-e.style.frozenMarkerBorderWidth,r=e.currentCell&&"frozen-row-marker"===e.currentCell.style,n=e.currentCell&&"frozen-column-marker"===e.currentCell.style;e.ctx.lineWidth=e.style.frozenMarkerBorderWidth,e.attributes.allowFreezingColumns&&(e.ctx.fillStyle=n?e.style.frozenMarkerHoverColor:e.style.frozenMarkerColor,e.ctx.strokeStyle=n?e.style.frozenMarkerHoverBorderColor:e.style.frozenMarkerBorderColor,s(o,0,e.style.frozenMarkerWidth,e.height),c(o,0,e.style.frozenMarkerWidth,e.height),e.visibleCells.unshift({x:o,y:0,height:e.height,width:e.style.frozenMarkerWidth+e.style.frozenMarkerBorderWidth,style:"frozen-column-marker"})),e.attributes.allowFreezingRows&&(e.ctx.fillStyle=r?e.style.frozenMarkerHoverColor:e.style.frozenMarkerColor,e.ctx.strokeStyle=r?e.style.frozenMarkerHoverBorderColor:e.style.frozenMarkerBorderColor,s(0,t,e.width,e.style.frozenMarkerWidth),c(0,t,e.width,e.style.frozenMarkerWidth),e.visibleCells.unshift({x:0,y:t,height:e.style.frozenMarkerWidth+e.style.frozenMarkerBorderWidth,width:e.width,style:"frozen-row-marker"})),e.freezeMarkerPosition&&(e.ctx.fillStyle=e.style.frozenMarkerActiveColor,e.ctx.strokeStyle=e.style.frozenMarkerActiveBorderColor,"frozen-column-marker"===e.dragMode?(s(e.freezeMarkerPosition.x,0,e.style.frozenMarkerWidth,e.height),c(e.freezeMarkerPosition.x,0,e.style.frozenMarkerWidth,e.height)):(s(0,e.freezeMarkerPosition.y,e.width,e.style.frozenMarkerWidth),c(0,e.freezeMarkerPosition.y,e.width,e.style.frozenMarkerWidth)));}(),function(){(e.mobile||e.attributes.allowMovingSelection)&&(e.ctx.lineWidth=e.style.selectionHandleBorderWidth,e.ctx.strokeStyle=e.style.selectionHandleBorderColor,e.ctx.fillStyle=e.style.selectionHandleColor,X.forEach(function(t){p(t[0],t[1]);var o=e.attributes.touchSelectHandleZone/2,r=t[0].x+("tl"===t[1]||"bl"===t[1]?0:t[0].width)-o,n=t[0].y+("bl"===t[1]||"br"===t[1]?t[0].height:0)-o;e.visibleCells.unshift({x:r,y:n,height:e.style.selectionHandleSize+o,width:e.style.selectionHandleSize+o,style:"selection-handle-"+t[1]});}));}(),function(){if(e.reorderObject){var t={height:e.reorderObject.height,width:e.reorderObject.width,x:e.reorderObject.x+e.reorderObject.dragOffset.x,y:e.reorderObject.y+e.reorderObject.dragOffset.y},o={width:j,height:N,x:0,y:0};e.ctx.fillStyle=e.style.reorderMarkerBackgroundColor,e.ctx.lineWidth=e.style.reorderMarkerBorderWidth,e.ctx.strokeStyle=e.style.reorderMarkerBorderColor,"row-reorder"===e.dragMode?(t.width=j,t.x=0,o.width=j,o.height=e.currentCell.height,o.y=e.currentCell.y,s(t.x,t.y,t.width,t.height),c(t.x,t.y,t.width,t.height),e.ctx.lineWidth=e.style.reorderMarkerIndexBorderWidth,e.ctx.strokeStyle=e.style.reorderMarkerIndexBorderColor,e.currentCell.rowIndex!==e.reorderObject.rowIndex&&e.currentCell.rowIndex>-1&&e.currentCell.rowIndex<Q&&x(o,e.reorderTarget.sortRowIndex>e.reorderObject.sortRowIndex?"b":"t")):"column-reorder"===e.dragMode&&e.reorderObject&&(t.height=N,t.y=0,o.height=N,o.width=e.currentCell.width,o.y=0,o.x=e.currentCell.x,s(t.x,t.y,t.width,t.height),c(t.x,t.y,t.width,t.height),e.ctx.lineWidth=e.style.reorderMarkerIndexBorderWidth,e.ctx.strokeStyle=e.style.reorderMarkerIndexBorderColor,e.currentCell.sortColumnIndex!==e.reorderObject.sortColumnIndex&&e.currentCell.sortColumnIndex>-1&&e.currentCell.sortColumnIndex<_.length&&x(o,e.reorderTarget.columnIndex>e.reorderObject.columnIndex?"r":"l"));}}(),function(){e.movingSelection&&(e.ctx.lineWidth=e.style.moveOverlayBorderWidth,e.ctx.strokeStyle=e.style.moveOverlayBorderColor,e.ctx.setLineDash(e.style.moveOverlayBorderSegments),U.forEach(function(e){x(e[0],e[1]);}),e.ctx.setLineDash([]));}(),function(){e.ctx.lineWidth=e.style.gridBorderWidth,e.ctx.strokeStyle=e.style.gridBorderColor,c(0,0,e.width,e.height);}(),function(){function t(e){x(e[0],e[1]);}e.ctx.lineWidth=e.style.selectionOverlayBorderWidth,e.ctx.strokeStyle=e.style.selectionOverlayBorderColor,Y.filter(function(t){return t[0].rowIndex<e.frozenRow&&t[0].columnIndex<e.frozenColumn}).forEach(t),e.ctx.save(),f(0),Y.filter(function(t){return t[0].rowIndex>=e.frozenRow&&t[0].columnIndex>=e.frozenColumn}).forEach(t),e.ctx.restore(),e.ctx.save(),f(1),Y.filter(function(t){return t[0].rowIndex>=e.frozenRow&&t[0].columnIndex<e.frozenColumn}).forEach(t),e.ctx.restore(),e.ctx.save(),f(2),Y.filter(function(t){return t[0].rowIndex<e.frozenRow&&t[0].columnIndex>=e.frozenColumn}).forEach(t),e.ctx.restore();}(),function(){var t,o=e.scrollBox.entities,r=2*e.style.scrollBarBoxMargin;e.ctx.strokeStyle=e.style.scrollBarBorderColor,e.ctx.lineWidth=e.style.scrollBarBorderWidth,o.horizontalBox.x=te+e.style.scrollBarBoxMargin+(o.horizontalBar.width-e.scrollBox.scrollBoxWidth)*(e.scrollBox.scrollLeft/e.scrollBox.scrollWidth),o.verticalBox.y=ee+e.style.scrollBarBoxMargin+(o.verticalBar.height-e.scrollBox.scrollBoxHeight)*(e.scrollBox.scrollTop/e.scrollBox.scrollHeight),e.scrollBox.horizontalBarVisible&&(e.ctx.fillStyle=e.style.scrollBarBackgroundColor,s(o.horizontalBar.x,o.horizontalBar.y,o.horizontalBar.width+r,o.horizontalBar.height),c(o.horizontalBar.x,o.horizontalBar.y,o.horizontalBar.width+r,o.horizontalBar.height),e.ctx.fillStyle=e.style.scrollBarBoxColor,e.scrollBox.horizontalBoxVisible&&(/horizontal/.test($.context)&&(e.ctx.fillStyle=e.style.scrollBarActiveColor),a(o.horizontalBox.x,o.horizontalBox.y,o.horizontalBox.width,o.horizontalBox.height,e.style.scrollBarBoxBorderRadius),e.ctx.stroke(),e.ctx.fill()),t=!0,e.visibleCells.unshift(o.horizontalBar),e.visibleCells.unshift(o.horizontalBox)),e.scrollBox.verticalBarVisible&&(e.ctx.fillStyle=e.style.scrollBarBackgroundColor,s(o.verticalBar.x,o.verticalBar.y,o.verticalBar.width,o.verticalBar.height+r),c(o.verticalBar.x,o.verticalBar.y,o.verticalBar.width,o.verticalBar.height+r),e.scrollBox.verticalBoxVisible&&(e.ctx.fillStyle=e.style.scrollBarBoxColor,/vertical/.test($.context)&&(e.ctx.fillStyle=e.style.scrollBarActiveColor),a(o.verticalBox.x,o.verticalBox.y,o.verticalBox.width,o.verticalBox.height,e.style.scrollBarBoxBorderRadius),e.ctx.stroke(),e.ctx.fill()),t=!0,e.visibleCells.unshift(o.verticalBar),e.visibleCells.unshift(o.verticalBox)),t&&(e.ctx.strokeStyle=e.style.scrollBarCornerBorderColor,e.ctx.fillStyle=e.style.scrollBarCornerBackgroundColor,a(o.corner.x,o.corner.y,o.corner.width,o.corner.height,0),e.ctx.stroke(),e.ctx.fill(),e.visibleCells.unshift(o.corner));}(),M&&e.resize(!0),function(){e.ctx.save();var o;if((e.attributes.showPerformance||e.attributes.debug)&&(0===b.length&&(b=t(0,S,1,0)),b.pop(),b.unshift(performance.now()-P)),!e.attributes.debug)return void e.ctx.restore();e.ctx.font=e.style.debugFont,o={},o.perf=(b.reduce(function(e,t){return e+t},0)/Math.min(B,b.length)).toFixed(1),o.perfDelta=b[0].toFixed(1),o.frozenColumnsWidth=w(),o.htmlImages=Object.keys(e.htmlImageCache).length,o.reorderObject="x: "+(e.reorderObject||{columnIndex:0}).columnIndex+", y: "+(e.reorderObject||{rowIndex:0}).rowIndex,o.reorderTarget="x: "+(e.reorderTarget||{columnIndex:0}).columnIndex+", y: "+(e.reorderTarget||{rowIndex:0}).rowIndex,o.scale=e.scale,o.startScale=e.startScale,o.scaleDelta=e.scaleDelta,o.zoomDeltaStart=e.zoomDeltaStart,o.touchLength=e.touchLength,o.touches="y0: "+(e.touchPosition||{y:0}).y+" y1: "+(e.touchPosition1||{y:0}).y,o.scrollBox=e.scrollBox.toString(),o.scrollIndex="x: "+e.scrollIndexLeft+", y: "+e.scrollIndexTop,o.scrollPixel="x: "+e.scrollPixelLeft+", y: "+e.scrollPixelTop,o.canvasOffset="x: "+e.canvasOffsetLeft+", y: "+e.canvasOffsetTop,o.touchDelta="x: "+e.touchDelta.x+", y: "+e.touchDelta.y,o.touchAnimateTo="x: "+e.touchAnimateTo.x+", y: "+e.touchAnimateTo.y,o.scrollAnimation="x: "+e.scrollAnimation.x+", y: "+e.scrollAnimation.y,o.touchPPS="x: "+e.xPPS+", y: "+e.yPPS,o.touchPPST="x: "+e.xPPST+", y: "+e.yPPST,o.touchDuration=e.touchDuration,o.pointerLockPosition=e.pointerLockPosition?e.pointerLockPosition.x+", "+e.pointerLockPosition.y:"",o.size="w: "+e.width+", h: "+e.height,o.mouse="x: "+e.mouse.x+", y: "+e.mouse.y,o.touch=e.touchStart?"x: "+e.touchStart.x+", y: "+e.touchStart.y:"",o.entities=e.visibleCells.length,o.hasFocus=e.hasFocus,o.dragMode=e.dragMode,e.currentCell&&(o.columnIndex=e.currentCell.columnIndex,o.rowIndex=e.currentCell.rowIndex,o.sortColumnIndex=e.currentCell.sortColumnIndex,o.sortRowIndex=e.currentCell.sortRowIndex,o.context=e.currentCell.context,o.dragContext=e.currentCell.dragContext,o.style=e.currentCell.style,o.type=e.currentCell.type),e.ctx.textAlign="right",e.ctx.fillStyle=e.style.debugBackgroundColor,s(0,0,e.width,e.height),Object.keys(o).forEach(function(t,r){var n=t+": "+o[t];e.ctx.fillStyle=e.style.debugColor,d(n,j-20,(e.attributes.showPerformance?140:24)+14*r);}),e.ctx.restore();}(),function(){function r(t,r,c,u,h,f,g){var m;o(n,a,l,i,r,c,u,h,f),e.ctx.fillStyle=h,s(3+l,i+9+11*g,8,8),e.ctx.fillStyle=e.style.debugPerfChartTextColor,m=void 0!==c?r[0][c]:r[0],d(t+" "+(isNaN(m)?0:m).toFixed(3),14+l,i+16+11*g);}if(e.attributes.showPerformance){var n=250,l=e.width-n-e.style.scrollBarWidth-2*e.style.scrollBarBorderWidth,i=ee,a=100;0===E.length&&(E=t(0,S,1,function(){return [0,0]})),0===T.length&&(T=t(0,S,1,function(){return [0,0]})),0===I.length&&(I=t(0,S,1,0)),e.ctx.lineWidth=.5,e.ctx.textAlign="left",e.ctx.font=e.style.debugFont,e.ctx.fillStyle=e.style.debugPerfChartBackground,s(l,i,n,a),[["Scroll Height",E,0,e.scrollBox.scrollHeight,e.style.debugScrollHeightColor,!1],["Scroll Width",E,1,e.scrollBox.scrollWidth,e.style.debugScrollWidthColor,!1],["Performance",b,void 0,200,e.style.debugPerformanceColor,!1],["Entities",I,void 0,1500,e.style.debugEntitiesColor,!1],["TouchPPSX",T,0,1e3,e.style.debugTouchPPSXColor,!0],["TouchPPSY",T,1,1e3,e.style.debugTouchPPSYColor,!0]].forEach(function(e,t){e.push(t),r.apply(null,e);}),e.ctx.fillStyle=e.style.debugPerfChartBackground,I.pop(),I.unshift(e.visibleCells.length),E.pop(),E.unshift([e.scrollBox.scrollTop,e.scrollBox.scrollLeft]),T.pop(),T.unshift([e.yPPS,e.xPPS]);}}(),e.dispatchEvent("afterdraw",{})||e.ctx.restore();}}};}}.apply(t,r))&&(e.exports=n);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){var t;e.stopPropagation=function(e){e.stopPropagation();},e.addEventListener=function(t,o){e.events[t]=e.events[t]||[],e.events[t].unshift(o);},e.removeEventListener=function(t,o){(e.events[t]||[]).forEach(function(r,n){o===r&&e.events[t].splice(n,1);});},e.dispatchEvent=function(t,o){function r(){n=!0;}o=t.type?t:o||{},t=t.type||t;var n;if(e.events[t])return e.events[t].forEach(function(t){o.ctx=e.ctx,o.preventDefault=r,t.apply(e.intf,[o]);}),n},e.getRatio=function(){return Math.min(e.attributes.maxPixelRatio,(window.devicePixelRatio||1)/(e.ctx.webkitBackingStorePixelRatio||e.ctx.mozBackingStorePixelRatio||e.ctx.msBackingStorePixelRatio||e.ctx.oBackingStorePixelRatio||e.ctx.backingStorePixelRatio||1))},e.resize=function(t){function o(){e.scrollBox.horizontalBarVisible="auto"!==e.style.width&&b>e.scrollBox.width&&"hidden"!==e.style.overflowX||"scroll"===e.style.overflowX,e.scrollBox.horizontalBoxVisible=b>e.scrollBox.width,e.scrollBox.verticalBarVisible="auto"!==e.style.height&&w>e.scrollBox.height&&"hidden"!==e.style.overflowY||"scroll"===e.style.overflowY,e.scrollBox.verticalBoxVisible=w>e.scrollBox.height;}function r(){e.scrollBox.width=e.width-S,e.scrollBox.height=e.height-B;}function n(){e.isChildGrid||(i={height:B+w+y+1,width:b+S+y},["width","height"].forEach(function(t){-1!==["auto",void 0].indexOf(e.style[t])&&-1!==["auto",void 0].indexOf(e.appliedInlineStyles[t])?e.parentNodeStyle[t]=i[t]+"px":(e.parentNodeStyle[t]=e.style[t],e.isComponet&&(e.canvas.style[t]=e.style[t]));}));}if(e.canvas){var l,i,a={x:0,y:0,height:0,width:0,style:"vertical-scroll-bar"},s={x:0,y:0,height:0,width:0,style:"horizontal-scroll-bar"},c={x:0,y:0,height:0,width:0,style:"vertical-scroll-box"},d={x:0,y:0,height:0,width:0,style:"horizontal-scroll-box"},u={x:0,y:0,height:0,width:0,isCorner:!0,isScrollBoxCorner:!0,style:"scroll-box-corner"},h=2*e.style.scrollBarBoxMargin,f=2*e.style.scrollBarBorderWidth,g=.5*e.style.scrollBarBoxMargin,m=e.style.scrollBarWidth+2*e.style.scrollBarBorderWidth,p=e.getRatio(),x="collapse"===e.style.gridBorderCollapse?1:2,y=e.style.cellBorderWidth*x,v=e.style.columnHeaderCellBorderWidth*x,w=0,b=0,C=(e.data||[]).length,B=e.getColumnHeaderCellHeight(),S=e.getRowHeaderCellWidth(),I=e.style.cellHeight,M=e.getSchema();for(e.scrollCache.x=[],e.scrollCache.y=[],l=0;l<C;l+=1)e.scrollCache.y[l]=w,w+=((e.sizes.rows[l]||I)+(e.sizes.trees[l]||0))*e.scale+(e.frozenRow>l?e.sizes.trees[l]||0:0);return C>1&&(e.scrollCache.y[l]=w),b=M.reduce(function(t,o,r){if(o=M[e.orders.columns[r]],o.hidden)return e.scrollCache.x[r]=t,t;var n=t+e.getColummnWidth(e.orders.columns[r]);return e.scrollCache.x[r]=n,n},0)||0,e.attributes.showNewRow&&(w+=I),e.attributes.snapToRow&&(w+=e.style.cellHeight),n(),e.isChildGrid?(e.width=e.parentNode.offsetWidth,e.height=e.parentNode.offsetHeight):e.height===e.canvas.offsetHeight&&e.width===e.canvas.offsetWidth||(e.height=e.canvas.offsetHeight,e.width=e.canvas.offsetWidth,e.canvasOffsetLeft=e.args.canvasOffsetLeft||0,e.canvasOffsetTop=e.args.canvasOffsetTop||0),e.scrollBox.top=B+v,e.scrollBox.left=S,r(),o(),e.scrollBox.horizontalBarVisible&&("auto"!==e.style.height||e.isChildGrid||(e.height+=m),w+=m,n(),r(),o()),e.scrollBox.verticalBarVisible&&("auto"!==e.style.width||e.isChildGrid||(e.width+=m),b+=m,n(),r(),o()),r(),e.scrollBox.scrollWidth=b-e.scrollBox.width,e.scrollBox.scrollHeight=w-e.scrollBox.height,e.scrollBox.widthBoxRatio=e.scrollBox.width/b,e.scrollBox.scrollBoxWidth=e.scrollBox.width*e.scrollBox.widthBoxRatio-e.style.scrollBarWidth-f-g,e.scrollBox.heightBoxRatio=(e.scrollBox.height-B)/w,e.scrollBox.scrollBoxHeight=e.scrollBox.height*e.scrollBox.heightBoxRatio-e.style.scrollBarWidth-f-g,e.scrollBox.scrollBoxWidth=Math.max(e.scrollBox.scrollBoxWidth,e.style.scrollBarBoxMinSize),e.scrollBox.scrollBoxHeight=Math.max(e.scrollBox.scrollBoxHeight,e.style.scrollBarBoxMinSize),s.x+=S,s.y+=e.height-e.style.scrollBarWidth-g,s.width=e.width-e.style.scrollBarWidth-S-g-h,s.height=e.style.scrollBarWidth+e.style.scrollBarBorderWidth+g,d.y=s.y+e.style.scrollBarBoxMargin,d.width=e.scrollBox.scrollBoxWidth,d.height=e.style.scrollBarBoxWidth,a.x+=e.width-e.style.scrollBarWidth-e.style.scrollBarBorderWidth-g,a.y+=B,a.width=e.style.scrollBarWidth+e.style.scrollBarBorderWidth+g,a.height=e.height-B-e.style.scrollBarWidth-g-h,c.x=a.x+e.style.scrollBarBoxMargin,c.width=e.style.scrollBarBoxWidth,c.height=e.scrollBox.scrollBoxHeight,u.x=s.x+s.width+h,u.y=a.y+a.height+h,u.width=e.style.scrollBarWidth+e.style.scrollBarBorderWidth,u.height=e.style.scrollBarWidth+e.style.scrollBarBorderWidth,e.scrollBox.entities={horizontalBar:s,horizontalBox:d,verticalBar:a,verticalBox:c,corner:u},e.scrollBox.bar={v:a,h:s},e.scrollBox.box={v:c,h:d},e.page=Math.max(1,e.visibleRows.length-3-e.attributes.pageUpDownOverlap),e.isChildGrid||(e.canvas.width=e.width*p,e.canvas.height=e.height*p,e.ctx.scale(p,p)),e.resizeEditInput(),e.scroll(!0),t&&e.draw(!0),e.dispatchEvent("resize",{}),!0}},e.scroll=function(t){var o=e.getSchema(),r=(e.data||[]).length,n=e.style.cellHeight;for(e.scrollIndexTop=Math.floor(r*(e.scrollBox.scrollTop/e.scrollBox.scrollHeight)-100),e.scrollIndexTop=Math.max(e.scrollIndexTop,0),e.scrollPixelTop=e.scrollCache.y[e.scrollIndexTop],0===e.scrollBox.scrollHeight&&(e.scrollIndexTop=0),e.scrollPixelTop=0,e.scrollIndexLeft=e.frozenColumn,e.scrollPixelLeft=0;e.scrollPixelTop<e.scrollBox.scrollTop&&e.scrollIndexTop<e.data.length;)e.scrollIndexTop+=1,e.scrollPixelTop=e.scrollCache.y[e.scrollIndexTop];for(;e.scrollPixelLeft<e.scrollBox.scrollLeft+1&&e.scrollIndexLeft<o.length;)e.scrollPixelLeft=e.scrollCache.x[e.scrollIndexLeft],e.scrollIndexLeft+=1;o.length>0&&(e.scrollIndexLeft=Math.max(e.scrollIndexLeft-1,0),e.scrollPixelLeft-=e.getColummnWidth(e.orders.columns[e.scrollIndexLeft])),(e.data||[]).length>0&&(e.scrollIndexTop=Math.max(e.scrollIndexTop-1,0),e.scrollPixelTop=Math.max(e.scrollPixelTop-(e.data[e.scrollIndexTop]?(e.sizes.rows[e.scrollIndexTop]||n)+(e.sizes.trees[e.scrollIndexTop]||0):n)*e.scale,0)),e.ellipsisCache={},t||e.draw(!0),requestAnimationFrame(e.resizeEditInput),e.dispatchEvent("scroll",{top:e.scrollBox.scrollTop,left:e.scrollBox.scrollLeft});},e.mousemove=function(t,o){if(!e.contextMenu&&!e.input){e.mouse=o||e.getLayerPos(t);var r,n,l,i,a=t.ctrlKey||t.metaKey||e.attributes.persistantSelectionMode,s=e.getSchema(),c=e.mouse.x,d=e.mouse.y,u=e.getCellAt(c,d),h={NativeEvent:t,cell:u,x:c,y:d},f=e.currentCell;if(clearTimeout(e.scrollTimer),e.isInGrid({x:c,y:d})||(e.hasFocus=!1),!e.dispatchEvent("mousemove",h)&&(u&&e.currentCell&&(e.rowBoundaryCrossed=e.currentCell.rowIndex!==u.rowIndex,e.columnBoundaryCrossed=e.currentCell.columnIndex!==u.columnIndex,e.cellBoundaryCrossed=e.rowBoundaryCrossed||e.columnBoundaryCrossed,["row","column","cell"].forEach(function(t){e[t+"BoundaryCrossed"]&&(h.cell=f,e.dispatchEvent(t+"mouseout",h),h.cell=u,e.dispatchEvent(t+"mouseover",h));})),e.currentCell=u,e.hasFocus)){if(e.hovers={},!e.draggingItem&&u&&-1===e.scrollModes.indexOf(u.context)&&(e.dragItem=u,e.dragMode=u.dragContext,e.cursor=u.context,"cell"===u.context&&(e.cursor="default",e.hovers={rowIndex:u.rowIndex,columnIndex:u.columnIndex}),(e.selecting||e.reorderObject)&&"cell"===u.context)){if(i={x:Math.abs(e.dragStart.x-c),y:Math.abs(e.dragStart.y-d)},-1!==e.dragStartObject.columnIndex&&t.shiftKey&&(e.dragStartObject={rowIndex:e.activeCell.rowIndex,columnIndex:e.activeCell.columnIndex}),n={top:Math.min(e.dragStartObject.rowIndex,u.rowIndex),left:Math.min(e.dragStartObject.columnIndex,u.columnIndex),bottom:Math.max(e.dragStartObject.rowIndex,u.rowIndex),right:Math.max(e.dragStartObject.columnIndex,u.columnIndex)},-1===e.dragStartObject.columnIndex&&(l=e.getSelectionBounds(),n.left=-1,n.right=s.length-1,n.top=Math.min(l.top,u.rowIndex),n.bottom=Math.max(l.bottom,u.rowIndex)),e.dragStartObject.rowIndex===u.rowIndex&&e.dragStartObject.columnIndex===u.columnIndex||(e.ignoreNextClick=!0),(e.cellBoundaryCrossed||0===i.x&&0===i.y||"row"===e.attributes.selectionMode)&&("row"!==e.attributes.selectionMode&&-1!==e.dragStartObject.columnIndex||!e.rowBoundaryCrossed?"row"!==e.attributes.selectionMode&&(e.dragAddToSelection||void 0===u.rowIndex?(e.selections[u.rowIndex]=e.selections[u.rowIndex]||[],-1===e.selections[u.rowIndex].indexOf(u.columnIndex)&&e.selections[u.rowIndex].push(u.columnIndex)):e.selections[u.rowIndex]&&-1!==e.selections[u.rowIndex].indexOf(u.columnIndex)&&e.selections[u.rowIndex].splice(e.selections[u.rowIndex].indexOf(u.columnIndex),1)):e.selectRow(u.rowIndex,a,null,!0)),!(e.selectionBounds&&n.top===e.selectionBounds.top&&n.left===e.selectionBounds.left&&n.bottom===e.selectionBounds.bottom&&n.right===e.selectionBounds.right||a))if(e.selections=[],l=n,"row"===e.attributes.selectionMode)for(r=l.top;r<=l.bottom;r+=1)e.selectRow(r,!0,null,!0);else-1!==n.top&&e.selectArea(l,!0);e.autoScrollZone(t,c,d,a);}e.cellBoundaryCrossed=!1,e.rowBoundaryCrossed=!1,e.columnBoundaryCrossed=!1,e.draw(!0);}}},e.click=function(t,o){function r(){var t,o=e.getSelectionBounds();l!==JSON.stringify(o)&&(t={selections:e.selections,selectionBounds:e.getSelectionBounds()},Object.defineProperty(t,"selectedData",{get:function(){return e.getSelectedData()}}),e.dispatchEvent("selectionchanged",t));}var n,l=JSON.stringify(e.getSelectionBounds()),i=t.ctrlKey||t.metaKey||e.attributes.persistantSelectionMode,a=o||e.getLayerPos(t);if(e.currentCell=e.getCellAt(a.x,a.y),void 0===e.currentCell.grid){if(e.input&&e.endEdit(),e.ignoreNextClick)return void(e.ignoreNextClick=!1);if(n=e.currentCell,!e.dispatchEvent("click",{NativeEvent:t,cell:e.currentCell})&&e.hasFocus){if(-1!==["rowHeaderCell","columnHeaderCell"].indexOf(e.currentCell.style)||i||e.setActiveCell(n.columnIndex,n.rowIndex),"cell"===e.currentCell.context){if("cornerCell"===e.currentCell.style)return e.selectAll(),e.draw(),void r();if("columnHeaderCell"===e.currentCell.style){if("sort"===e.attributes.columnHeaderClickBehavior)return e.orderBy===n.header.name?e.orderDirection="asc"===e.orderDirection?"desc":"asc":e.orderDirection="asc",e.order(n.header.name,e.orderDirection),void r();if("select"===e.attributes.columnHeaderClickBehavior)return e.selectColumn(n.header.index,i,t.shiftKey),void e.draw()}if(e.selections[n.rowIndex]=e.selections[n.rowIndex]||[],("row"===e.attributes.selectionMode||"rowHeaderCell"===e.currentCell.style)&&"rowHeaderCell"===e.currentCell.style&&e.attributes.tree&&a.x>0&&a.x-e.currentCell.x<e.style.treeArrowWidth+e.style.treeArrowMarginLeft+e.style.treeArrowMarginRight+e.style.treeArrowClickRadius&&a.y-e.currentCell.y<e.style.treeArrowHeight+e.style.treeArrowMarginTop+e.style.treeArrowClickRadius&&a.y>0)return void e.toggleTree(n.rowIndex);t.shiftKey&&!i&&(e.selectionBounds=e.getSelectionBounds(),e.selectArea(void 0,!1));}r(),e.draw(!0);}}},e.dragResizeColumn=function(t){var o,r,n;return o=e.getLayerPos(t),r=e.resizingStartingWidth+o.x-e.dragStart.x,n=e.resizingStartingHeight+o.y-e.dragStart.y,r<e.style.minColumnWidth&&(r=e.style.minColumnWidth),n<e.style.minRowHeight&&(n=e.style.minRowHeight),!e.dispatchEvent("resizecolumn",{x:r,y:n,draggingItem:e.draggingItem})&&(e.scrollBox.scrollLeft>e.scrollBox.scrollWidth-e.attributes.resizeScrollZone&&"ew-resize"===e.dragMode&&(e.resize(!0),e.scrollBox.scrollLeft+=r),"ew-resize"===e.dragMode?(e.sizes.columns["rowHeaderCell"===e.draggingItem.header.style?"cornerCell":e.draggingItem.sortColumnIndex]=r,-1!==["rowHeaderCell","cornerCell"].indexOf(e.draggingItem.header.style)&&e.resize(!0),void e.resizeChildGrids()):"ns-resize"===e.dragMode?(e.draggingItem.rowOpen?e.sizes.trees[e.draggingItem.rowIndex]=n:e.attributes.globalRowResize?e.style.cellHeight=n:e.sizes.rows[e.draggingItem.rowIndex]=n,e.dispatchEvent("resizerow",{row:n}),void e.resizeChildGrids()):void(e.ellipsisCache={}))},e.stopDragResize=function(){e.resize(),document.body.removeEventListener("mousemove",e.dragResizeColumn,!1),document.body.removeEventListener("mouseup",e.stopDragResize,!1),e.setStorageData(),e.draw(!0),e.ignoreNextClick=!0;},e.scrollGrid=function(t){var o=e.getLayerPos(t);return e.attributes.scrollPointerLock&&e.pointerLockPosition&&-1!==["horizontal-scroll-box","vertical-scroll-box"].indexOf(e.scrollStartMode)&&(e.pointerLockPosition.x+=t.movementX,e.pointerLockPosition.y+=t.movementY,e.pointerLockPosition.x=Math.min(e.width-e.style.scrollBarWidth,Math.max(0,e.pointerLockPosition.x)),e.pointerLockPosition.y=Math.min(e.height-e.style.scrollBarWidth,Math.max(0,e.pointerLockPosition.y)),o=e.pointerLockPosition),e.scrollMode=e.getCellAt(o.x,o.y).context,"horizontal-scroll-box"===e.scrollMode&&"horizontal-scroll-box"!==e.scrollStartMode?(e.scrollStartMode="horizontal-scroll-box",e.dragStart=o,e.scrollStart.left=e.scrollBox.scrollLeft,void clearTimeout(e.scrollTimer)):"vertical-scroll-box"===e.scrollMode&&"vertical-scroll-box"!==e.scrollStartMode?(e.scrollStartMode="vertical-scroll-box",e.dragStart=o,e.scrollStart.top=e.scrollBox.scrollTop,void clearTimeout(e.scrollTimer)):("vertical-scroll-box"===e.scrollStartMode&&"vertical-scroll-box"!==e.scrollMode&&(e.scrollMode="vertical-scroll-box"),"horizontal-scroll-box"===e.scrollStartMode&&"horizontal-scroll-box"!==e.scrollMode&&(e.scrollMode="horizontal-scroll-box"),clearTimeout(e.scrollTimer),void(-1!==e.scrollModes.indexOf(e.scrollMode)&&("vertical-scroll-box"===e.scrollMode?e.scrollBox.scrollTop=e.scrollStart.top+(o.y-e.dragStart.y)/e.scrollBox.heightBoxRatio:"vertical-scroll-top"===e.scrollMode?(e.scrollBox.scrollTop-=e.page*e.style.cellHeight,e.scrollTimer=setTimeout(e.scrollGrid,e.attributes.scrollRepeatRate,t)):"vertical-scroll-bottom"===e.scrollMode&&(e.scrollBox.scrollTop+=e.page*e.style.cellHeight,e.scrollTimer=setTimeout(e.scrollGrid,e.attributes.scrollRepeatRate,t)),"horizontal-scroll-box"===e.scrollMode?e.scrollBox.scrollLeft=e.scrollStart.left+(o.x-e.dragStart.x)/e.scrollBox.widthBoxRatio:"horizontal-scroll-right"===e.scrollMode?(e.scrollBox.scrollLeft+=e.attributes.selectionScrollIncrement,e.scrollTimer=setTimeout(e.scrollGrid,e.attributes.scrollRepeatRate,t)):"horizontal-scroll-left"===e.scrollMode&&(e.scrollBox.scrollLeft-=e.attributes.selectionScrollIncrement,e.scrollTimer=setTimeout(e.scrollGrid,e.attributes.scrollRepeatRate,t)))))},e.stopScrollGrid=function(){clearTimeout(e.scrollTimer),document.exitPointerLock&&document.exitPointerLock(),document.removeEventListener("mousemove",e.scrollGrid,!1);},e.dragReorder=function(t){var o,r,n,l="column-reorder"===e.dragMode,i="row-reorder"===e.dragMode;o=e.getLayerPos(t),r=o.x-e.dragStart.x,n=o.y-e.dragStart.y,!e.attributes.allowColumnReordering&&l||!e.attributes.allowRowReordering&&i||e.dispatchEvent("reordering",{NativeEvent:t,source:e.dragStartObject,target:e.currentCell,dragMode:e.dragMode})||(Math.abs(r)>e.attributes.reorderDeadZone||Math.abs(n)>e.attributes.reorderDeadZone)&&(e.reorderObject=e.draggingItem,e.reorderTarget=e.currentCell,e.reorderObject.dragOffset={x:r,y:n},e.autoScrollZone(t,l?o.x:-1,i?o.y:-1,!1));},e.stopDragReorder=function(t){var o,r,n={"row-reorder":e.orders.rows,"column-reorder":e.orders.columns},l={"row-reorder":"rowIndex","column-reorder":"sortColumnIndex"}[e.dragMode];document.body.removeEventListener("mousemove",e.dragReorder,!1),document.body.removeEventListener("mouseup",e.stopDragReorder,!1),e.reorderObject&&e.reorderTarget&&("column-reorder"===e.dragMode&&e.reorderTarget.sortColumnIndex>-1&&e.reorderTarget.sortColumnIndex<e.getSchema().length||"row-reorder"===e.dragMode&&e.reorderTarget.rowIndex>-1&&e.reorderTarget.rowIndex<e.data.length)&&e.reorderObject[l]!==e.reorderTarget[l]&&!e.dispatchEvent("reorder",{NativeEvent:t,source:e.reorderObject,target:e.reorderTarget,dragMode:e.dragMode})&&(e.ignoreNextClick=!0,o=n[e.dragMode].indexOf(e.reorderObject[l]),r=n[e.dragMode].indexOf(e.reorderTarget[l]),n[e.dragMode].splice(o,1),n[e.dragMode].splice(r,0,e.reorderObject[l]),"column-reorder"===e.dragMode?e.orders.columns=n[e.dragMode]:e.orders.rows=n[e.dragMode],e.resize(),e.setStorageData()),e.reorderObject=void 0,e.reorderTarget=void 0,e.draw(!0);},e.dragMove=function(t){if(!e.dispatchEvent("moving",{NativeEvent:t,cell:e.currentCell})){var o=e.getLayerPos(t);e.moveOffset={x:e.currentCell.columnIndex-e.dragStartObject.columnIndex,y:e.currentCell.rowIndex-e.dragStartObject.rowIndex},(Math.abs(o.x)>e.attributes.reorderDeadZone||Math.abs(o.y)>e.attributes.reorderDeadZone)&&setTimeout(function(){e.autoScrollZone(t,o.x,o.y,!1);},1);}},e.stopDragMove=function(t){document.body.removeEventListener("mousemove",e.dragMove,!1),document.body.removeEventListener("mouseup",e.stopDragMove,!1);var o=e.getSelectionBounds();if(e.dispatchEvent("endmove",{NativeEvent:t,cell:e.currentCell}))return e.movingSelection=void 0,e.moveOffset=void 0,void e.draw(!0);e.moveOffset&&(e.moveTo(e.movingSelection,o.left+e.moveOffset.x,o.top+e.moveOffset.y),e.moveSelection(e.moveOffset.x,e.moveOffset.y)),e.movingSelection=void 0,e.moveOffset=void 0,e.draw(!0);},e.freezeMove=function(t){if(!e.dispatchEvent("freezemoving",{NativeEvent:t,cell:e.currentCell})){var o=e.getLayerPos(t);e.ignoreNextClick=!0,e.freezeMarkerPosition=o,e.currentCell&&void 0!==e.currentCell.rowIndex&&"frozen-row-marker"===e.dragMode&&(e.scrollBox.scrollTop=0,e.frozenRow=e.currentCell.rowIndex+1),e.currentCell&&void 0!==e.currentCell.columnIndex&&"frozen-column-marker"===e.dragMode&&(e.scrollBox.scrollLeft=0,e.frozenColumn=e.currentCell.columnIndex+1),(Math.abs(o.x)>e.attributes.reorderDeadZone||Math.abs(o.y)>e.attributes.reorderDeadZone)&&setTimeout(function(){e.autoScrollZone(t,o.x,o.y,!1);},1);}},e.stopFreezeMove=function(t){if(document.body.removeEventListener("mousemove",e.freezeMove,!1),document.body.removeEventListener("mouseup",e.stopFreezeMove,!1),e.freezeMarkerPosition=void 0,e.dispatchEvent("endfreezemove",{NativeEvent:t,cell:e.currentCell}))return e.frozenRow=e.startFreezeMove.x,e.frozenColumn=e.startFreezeMove.y,void e.draw(!0);e.draw(!0);},e.mousedown=function(t,o){if(e.lastMouseDownTarget=t.target,!e.dispatchEvent("mousedown",{NativeEvent:t,cell:e.currentCell})&&e.hasFocus&&2!==t.button&&!e.input){var r=t.ctrlKey||t.metaKey,n=/-move/.test(e.dragMode),l=/frozen-row-marker|frozen-column-marker/.test(e.dragMode),i=/-resize/.test(e.dragMode);if(e.dragStart=o||e.getLayerPos(t),e.scrollStart={left:e.scrollBox.scrollLeft,top:e.scrollBox.scrollTop},e.dragStartObject=e.getCellAt(e.dragStart.x,e.dragStart.y),e.dragAddToSelection=!e.dragStartObject.selected,r||t.shiftKey||/(vertical|horizontal)-scroll-(bar|box)/.test(e.dragStartObject.context)||!e.currentCell||e.currentCell.isColumnHeader||n||l||i||(e.selections=[]),!e.dragStartObject.isGrid){if(-1!==e.scrollModes.indexOf(e.dragStartObject.context))return e.scrollMode=e.dragStartObject.context,e.scrollStartMode=e.dragStartObject.context,e.scrollGrid(t),e.attributes.scrollPointerLock&&-1!==["horizontal-scroll-box","vertical-scroll-box"].indexOf(e.scrollStartMode)&&(e.pointerLockPosition={x:e.dragStart.x,y:e.dragStart.y},e.canvas.requestPointerLock()),document.addEventListener("mousemove",e.scrollGrid,!1),document.addEventListener("mouseup",e.stopScrollGrid,!1),void(e.ignoreNextClick=!0);if("cell"===e.dragMode)return e.selecting=!0,void(("row"===e.attributes.selectionMode||-1===e.dragStartObject.columnIndex)&&e.dragStartObject.rowIndex>-1?e.selectRow(e.dragStartObject.rowIndex,r,null):"row"!==e.attributes.selectionMode&&e.mousemove(t));if(n){if(e.draggingItem=e.dragItem,e.movingSelection=e.selections.concat([]),e.dragging=e.dragStartObject,e.dispatchEvent("beginmove",{NativeEvent:t,cell:e.currentCell}))return;return document.body.addEventListener("mousemove",e.dragMove,!1),document.body.addEventListener("mouseup",e.stopDragMove,!1),e.mousemove(t)}if(l){if(e.draggingItem=e.dragItem,e.startFreezeMove={x:e.frozenRow,y:e.frozenColumn},e.dispatchEvent("beginfreezemove",{NativeEvent:t}))return;return document.body.addEventListener("mousemove",e.freezeMove,!1),document.body.addEventListener("mouseup",e.stopFreezeMove,!1),e.mousemove(t)}return i?(e.draggingItem=e.dragItem,e.draggingItem.rowOpen?e.resizingStartingHeight=e.sizes.trees[e.draggingItem.rowIndex]:e.resizingStartingHeight=e.sizes.rows[e.draggingItem.rowIndex]||e.style.cellHeight,e.resizingStartingWidth=e.sizes.columns["rowHeaderCell"===e.draggingItem.header.style?"cornerCell":e.draggingItem.sortColumnIndex]||e.draggingItem.width,document.body.addEventListener("mousemove",e.dragResizeColumn,!1),void document.body.addEventListener("mouseup",e.stopDragResize,!1)):-1!==["row-reorder","column-reorder"].indexOf(e.dragMode)?(e.draggingItem=e.dragStartObject,document.body.addEventListener("mousemove",e.dragReorder,!1),void document.body.addEventListener("mouseup",e.stopDragReorder,!1)):void 0}}},e.mouseup=function(t){clearTimeout(e.scrollTimer),e.cellBoundaryCrossed=!0,e.rowBoundaryCrossed=!0,e.columnBoundaryCrossed=!0,e.selecting=void 0,e.draggingItem=void 0,e.dragStartObject=void 0,e.dispatchEvent("mouseup",{NativeEvent:t,cell:e.currentCell})||(e.hasFocus||t.target===e.canvas)&&(e.currentCell&&void 0!==e.currentCell.grid||e.contextMenu||e.input||(e.dragStart&&e.isInGrid(e.dragStart)&&e.controlInput.focus(),t.preventDefault()));},e.getAdjacentCells=function(){var t,o,r=e.getSchema(),n={};for(t=0;t<r.length;t+=1)o=e.orders.columns[t],r[o].hidden||(void 0===n.first&&(n.first=t,n.left=t),n.last=t,t>e.activeCell.columnIndex&&void 0===n.right&&(n.right=t),t<e.activeCell.columnIndex&&(n.left=t));return void 0===n.right&&(n.right=n.last),n},e.keydown=function(t){var o,r,n=e.getAdjacentCells(),l=e.activeCell.columnIndex,i=e.activeCell.rowIndex,a=t.ctrlKey||t.metaKey,s=e.data.length-1,c=e.getSchema(),d=c.length-1;if(!e.dispatchEvent("keydown",{NativeEvent:t,cell:e.currentCell})&&e.hasFocus){if(e.attributes.showNewRow&&(s+=1),9===t.keyCode&&t.preventDefault(),27===t.keyCode?(e.selections=[],e.draw(!0)):a&&65===t.keyCode?e.selectAll():40===t.keyCode?i+=1:38===t.keyCode?i-=1:37===t.keyCode||t.shiftKey&&9===t.keyCode?l=n.left:39===t.keyCode||!t.shiftKey&&9===t.keyCode?l=n.right:33===t.keyCode?(i-=e.page,t.preventDefault()):34===t.keyCode?(i+=e.page,t.preventDefault()):36===t.keyCode||a&&38===t.keyCode?i=0:35===t.keyCode||a&&40===t.keyCode?i=e.data.length-1:a&&39===t.keyCode?l=n.last:a&&37===t.keyCode&&(l=n.first),13===t.keyCode)return e.beginEditAt(l,i,t);if(32===t.keyCode){if(e.selections=[],e.selections[Math.max(i,0)]=[],e.selections[Math.max(i,0)].push(l),e.selectionBounds=e.getSelectionBounds(),"row"===e.attributes.selectionMode)for(o=e.selectionBounds.top;o<=e.selectionBounds.bottom;o+=1)e.selectRow(o,a,null,!0);else e.selectArea(void 0,a);return t.preventDefault(),void e.draw(!0)}(l<0||Number.isNaN(l))&&(l=n.first),i>s&&(i=s),(i<0||Number.isNaN(i))&&(i=0),l>d&&(l=n.last),t.shiftKey&&-1!==[37,38,39,40].indexOf(t.keyCode)&&(e.selections[Math.max(i,0)]=e.selections[Math.max(i,0)]||[],e.selections[Math.max(i,0)].push(l),e.selectionBounds=e.getSelectionBounds(),e.selectArea(void 0,a),e.draw(!0)),l===e.activeCell.columnIndex&&i===e.activeCell.rowIndex||(e.scrollIntoView(l!==e.activeCell.columnIndex?l:void 0,i===e.activeCell.rowIndex||Number.isNaN(i)?void 0:i),e.setActiveCell(l,i),!t.shiftKey&&e.attributes.selectionFollowsActiveCell&&(a||(e.selections=[]),e.selections[i]=e.selections[i]||[],e.selections[i].push(l),r={selectedData:e.getSelectedData(),selections:e.selections,selectionBounds:e.getSelectionBounds()},Object.defineProperty(r,"selectedData",{get:function(){return e.getSelectedData()}}),e.dispatchEvent("selectionchanged",r)),e.draw(!0));}},e.keyup=function(t){e.dispatchEvent("keyup",{NativeEvent:t,cell:e.currentCell})||e.hasFocus;},e.keypress=function(t){e.hasFocus&&e.dispatchEvent("keypress",{NativeEvent:t,cell:e.currentCell});},e.dblclick=function(t){e.dispatchEvent("dblclick",{NativeEvent:t,cell:e.currentCell})||e.hasFocus&&("ew-resize"===e.currentCell.context&&"columnHeaderCell"===e.currentCell.style?e.fitColumnToValues(e.currentCell.header.name):"ew-resize"===e.currentCell.context&&"cornerCell"===e.currentCell.style?e.autosize():-1!==["cell","activeCell"].indexOf(e.currentCell.style)&&e.beginEditAt(e.currentCell.columnIndex,e.currentCell.rowIndex));},e.scrollWheel=function(o){var r,n,l=o,i=void 0===o.deltaX?o.NativeEvent.deltaX:o.deltaX,a=void 0===o.deltaY?o.NativeEvent.deltaY:o.deltaY,s=void 0===o.deltaMode?o.NativeEvent.deltaMode:o.deltaMode;if(!t&&!e.dispatchEvent("wheel",{NativeEvent:o})){var o=o.NativeEvent||o;e.touchHaltAnimation=!0,r=e.scrollBox.scrollLeft,n=e.scrollBox.scrollTop,e.hasFocus&&(1===s&&(a*=17),(e.scrollBox.scrollTop<e.scrollBox.scrollHeight&&a>0||e.scrollBox.scrollLeft<e.scrollBox.scrollWidth&&i>0||e.scrollBox.scrollTop>0&&a<0||e.scrollBox.scrollLeft>0&&i<0)&&l.preventDefault(o),t=setTimeout(function(){t=void 0,e.scrollBox.scrollTo(i+r,a+n);},1));}},e.pasteItem=function(t,o,r,n){function l(e,t,o,r,n,l){var i=t;return Array.isArray(e)||null===e||"object"!=typeof e||(e=Object.keys(e).map(function(t){return e[t]})),/^text\/html/.test(n)&&(e=e.substring(4,e.length-5).split("</td><td>")),"string"==typeof e&&(e=[e]),c[l]=[],e.forEach(function(n,a){var s=r[a+o].name;if(void 0===e[a]||null===e[a])return void(i[s]=t[s]);c[l].push(a+o),i[s]=e[a];}),i}var i,a=e.getVisibleSchema(),s=r-1,c=[];if(/^text\/html/.test(n)){if(!/^(<meta[^>]+>)?<table>/.test(t.substring(0,29)))return void console.warn("Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.");t=t.substring(t.indexOf("<table><tr>")+11,t.length-13).split("</tr><tr>"),t=t.filter(function(e){return !/^<th>|^<thead>/.test(e)});}else t=t.split("\n");return i=t.length,t.forEach(function(t){s+=1;var r=e.orders.rows[s];e.data[r]=l(t,e.data[r],o,a,n,r);}),e.selections=c,i},e.getNextVisibleColumnIndex=function(t){var o,r=e.getVisibleSchema();for(o=0;o<r.length;o+=1)if(r[o].columnIndex===t)return r[o+1].columnIndex;return -1},e.getVisibleColumnIndexOf=function(t){var o,r=e.getVisibleSchema();for(o=0;o<r.length;o+=1)if(r[o].columnIndex===t)return o;return -1},e.paste=function(t){var o;if(!(o=Array.prototype.filter.call(t.clipboardData.items,function(e){return "text/html"===e.type})[0]||Array.prototype.filter(function(e){return "text/csv"===e.type})[0]||Array.prototype.filter(function(e){return "text/plain"===e.type})[0]))return void console.warn("Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.");!function(t){var o=t.type;t.getAsString(function(t){e.pasteItem(t,e.getVisibleColumnIndexOf(e.activeCell.columnIndex),e.activeCell.rowIndex,o),e.draw();});}(o);},e.cut=function(t){e.copy(t),e.forEachSelectedCell(function(e,t,o){e[t][o]="";});},e.copy=function(t){function o(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;")}function r(e){return e=null===e||void 0===e?"":e,"<td>"+("string"==typeof e?o(e):e)+"</td>"}function n(r,n){if(!f.length||r.length<2)return "";var l=[];return n&&l.push("<tr>"),f.forEach(function(i,a){if(i=f[e.orders.columns[a]],!i.hidden&&-1!==r.indexOf(i.name)){var s={NativeEvent:t,column:i};e.dispatchEvent("copyonschema",s)&&(i=s.column);var c=i.name||i.title||"";n?l.push("<th>"+o(c)+"</th>"):l.push('"'+c.replace(/"/g,'""')+'"');}}),l.push(n?"</tr>":"\n"),l.join(n?"":",")}function l(e,t,o,n){return null!==e&&!1!==e&&void 0!==e&&e.replace?(t.push(r(e)),void o.push('"'+e.replace(/"/g,'""')+'"')):void 0!==e?(o.push(e),void t.push(r(e))):(o.push(""),void t.push("<td>&nbsp;</td>"))}if(!e.dispatchEvent("copy",{NativeEvent:t})&&e.hasFocus&&t.clipboardData){var i,a,s,c=(e.data,[]),d=[],u={},h=e.getSelectedData(),f=e.getSchema();h.length>0&&(h.forEach(function(t){var o=Object.keys(t);if(t){var r=[],n=[],i=[];f.forEach(function(t,o){i.push(f[e.orders.columns[o]]);}),i.forEach(function(e,i){-1!==o.indexOf(e.name)&&(u[e.name]=!0,l(t[e.name],r,n));}),c.push(r.join("")),d.push(n.join(","));}}),s=Object.keys(u),i=n(s)+d.join("\n"),a="<table>"+n(s,!0)+"<tr>"+c.join("</tr><tr>")+"</tr></table>",1===s.length&&(i=i.substring(1,i.length-1)),t.clipboardData.setData("text/html",a),t.clipboardData.setData("text/plain",i),t.clipboardData.setData("text/csv",i),t.clipboardData.setData("application/json",JSON.stringify(h)),t.preventDefault());}};}}.apply(t,r))&&(e.exports=n);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){function t(t){function o(){var t=e.scrollBox.scrollLeft,n=e.scrollBox.scrollTop;t+=i?e.attributes.selectionScrollIncrement:0,n+=s?e.attributes.selectionScrollIncrement:0,n-=c?e.attributes.selectionScrollIncrement:0,t-=a?e.attributes.selectionScrollIncrement:0,e.scrollBox.scrollTo(t,n),r=setTimeout(o,e.attributes.scrollRepeatRate);}var n,l,i,a,s,c,d,u,h;if(!e.dispatchEvent("beforetouchmove",{NativeEvent:t})){if(clearTimeout(r),t.changedTouches[0]&&(e.touchPosition=e.getTouchPos(t)),t.changedTouches[1]&&(e.touchPosition1=e.getTouchPos(t,1)),Math.abs(e.touchDelta.x)+Math.abs(e.touchDelta.y)>e.attributes.touchDeadZone&&clearTimeout(e.touchContextTimeout),2===t.touches.length&&e.touchPosition&&e.touchPosition1)return u=e.touchPosition.y,h=e.touchPosition1.y,e.zoomDeltaStart||(e.zoomDeltaStart=Math.abs(u-h),e.startScale=e.scale),e.touchLength=2,e.scaleDelta=e.zoomDeltaStart-Math.abs(u-h),e.scale=e.startScale-e.scaleDelta*e.attributes.touchZoomSensitivity,e.scale=Math.min(Math.max(e.scale,e.attributes.touchZoomMin),e.attributes.touchZoomMax),e.zoomAltered=!0,e.resize(!0),void e.resizeChildGrids();if(!e.zoomAltered)return e.touchLength=1,e.touchPosition=e.touchPosition||e.touchPosition1,n=e.getColumnHeaderCellHeight(),l=e.getRowHeaderCellWidth(),i=e.width-e.style.scrollBarWidth-e.touchPosition.x<e.attributes.selectionScrollZone,a=e.touchPosition.x-l<e.attributes.selectionScrollZone,s=e.height-e.style.scrollBarWidth-e.touchPosition.y<e.attributes.selectionScrollZone,c=e.touchPosition.y-n<e.attributes.selectionScrollZone,d=e.style.scrollBarWidth,t.stopPropagation(),e.touchDelta={x:e.touchPosition.x-e.touchStart.x,y:e.touchPosition.y-e.touchStart.y,scrollLeft:e.scrollBox.scrollLeft,scrollTop:e.scrollBox.scrollTop,t:performance.now()},e.currentCell=e.getCellAt(e.touchPosition.x,e.touchPosition.y),e.dispatchEvent("touchmove",{NativeEvent:t,cell:e.currentCell}),e.calculatePPS(),e.touchDuration=performance.now()-e.touchScrollStart.t,e.stopAnimation=!0,e.animationFrames=0,e.touchSelecting&&(i||a||c||s)&&o(),/vertical-scroll-/.test(e.startingCell.style)?void(e.scrollBox.scrollTop=e.scrollBox.scrollHeight*((e.touchPosition.y-n-d)/(e.scrollBox.height-d-n))):/horizontal-scroll-/.test(e.startingCell.style)?void(e.scrollBox.scrollLeft=e.scrollBox.scrollWidth*((e.touchPosition.x-l-d)/(e.scrollBox.width-d-l))):/selection-handle-/.test(e.startingCell.style)?void e.touchSelect(e.currentCell,e.startingCell.style):void e.scrollBox.scrollTo(e.touchScrollStart.x-e.touchDelta.x,e.touchScrollStart.y-e.touchDelta.y)}}var o,r;e.scrollAnimation={},e.touchDelta={},e.touchAnimateTo={},e.animationFrames=0,e.getTouchPos=function(t,o){var r,n=o?t.touches[o]:t.touches[0],l=e.canvas.getBoundingClientRect();if(n)return r={x:n.clientX-l.left,y:n.clientY-l.top},e.isChildGrid&&(r.x-=e.canvasOffsetLeft,r.y-=e.canvasOffsetTop),{x:r.x,y:r.y,rect:l}},e.easingFunctions={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return e*(2-e)},easeInOutQuad:function(e){return e<.5?2*e*e:(4-2*e)*e-1},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return --e*e*e+1},easeInOutCubic:function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1- --e*e*e*e},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-8*--e*e*e*e},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1+--e*e*e*e*e},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1+16*--e*e*e*e*e}},e.easing=function(t,o,r,n){return r*e.easingFunctions[e.attributes.touchEasingMethod](t/n)+o},e.calculatePPSTimed=function(){e.xPPST=-(e.touchDelta.x-e.touchSigmaTimed.x)/(e.touchDelta.t-e.touchSigmaTimed.t),e.yPPST=-(e.touchDelta.y-e.touchSigmaTimed.y)/(e.touchDelta.t-e.touchSigmaTimed.t),e.touchSigmaTimed={x:e.touchDelta.x,y:e.touchDelta.y,t:performance.now()};},e.calculatePPS=function(){e.xPPS=-(e.touchDelta.x-e.touchSigma.x)/(e.touchDelta.t-e.touchSigma.t),e.yPPS=-(e.touchDelta.y-e.touchSigma.y)/(e.touchDelta.t-e.touchSigma.t),e.touchSigma={x:e.touchDelta.x,y:e.touchDelta.y,t:performance.now()};},e.touchEndAnimation=function(){if(!e.canvas||!e.scrollBox.scrollTo)return requestAnimationFrame(e.touchEndAnimation);var t,o=performance.now(),r=e.attributes.touchReleaseAnimationDurationMs;t=o-e.touchDelta.t,e.animationFrames+=1,e.scrollAnimation.x=e.easing(t,e.touchDelta.scrollLeft,e.touchAnimateTo.x,r),e.scrollAnimation.y=e.easing(t,e.touchDelta.scrollTop,e.touchAnimateTo.y,r),t>r||e.scrollAnimation.y===e.scrollBox.scrollTop&&e.scrollAnimation.x===e.scrollBox.scrollLeft||e.stopAnimation||(e.scrollBox.scrollTo(e.scrollAnimation.x,e.scrollAnimation.y),requestAnimationFrame(e.touchEndAnimation));},e.touchEditCell=function(t){e.beginEditAt(t.columnIndex,t.rowIndex);},e.touchCell=function(t){return function(){clearInterval(e.calculatePPSTimer);var o,r=e.getTouchPos(t);if(Math.abs(e.touchDelta.x)+Math.abs(e.touchDelta.y)<e.attributes.touchDeadZone){if(!(o=e.getCellAt(r.x,r.y)))return;if(e.touchingCell&&e.touchingCell.rowIndex===o.rowIndex&&e.touchingCell.columnIndex===o.columnIndex)return void e.touchEditCell(o);e.input&&e.input.editCell&&e.endEdit(),e.touchingCell=o,e.selectArea({top:o.rowIndex,bottom:o.rowIndex,left:o.columnIndex,right:o.columnIndex}),e.draw(!0);}}},e.touchstart=function(t){if(t.changedTouches[0]&&(e.touchStart=e.getTouchPos(t),e.startingCell=e.getCellAt(e.touchStart.x,e.touchStart.y,!0)),!e.dispatchEvent("touchstart",{NativeEvent:t,cell:e.startingCell})){if(e.disposeContextMenu(),clearInterval(e.calculatePPSTimer),clearTimeout(e.touchContextTimeout),e.touchStartEvent=t,e.stopAnimation=!0,e.animationFrames=0,e.stopPropagation(t),t.preventDefault(),1===t.touches.length&&t.changedTouches[0]&&!e.zoomAltered){if(e.touchLength=1,e.touchStart=e.touchStart||e.touchStart1,e.touchScrollStart={x:e.scrollBox.scrollLeft,y:e.scrollBox.scrollTop,t:performance.now()},e.touchDelta={x:0,y:0,scrollLeft:e.scrollBox.scrollLeft,scrollTop:e.scrollBox.scrollTop,t:e.touchScrollStart.t},e.touchSigma={x:e.touchDelta.x,y:e.touchDelta.y,t:e.touchDelta.t},e.touchSigmaTimed={x:e.touchDelta.x,y:e.touchDelta.y,t:e.touchDelta.t},e.touchContextTimeout=setTimeout(function(){e.contextmenuEvent(t,e.touchStart);},e.attributes.touchContextMenuTimeMs),e.calculatePPSTimer=setInterval(e.calculatePPSTimed,50),e.startingCell&&(e.startingCell.isGrid||-1!==["tree","inherit"].indexOf(e.startingCell.context)))return void(e.hasFocus=!1);if(e.hasFocus=!0,e.startingCell.isHeader)return e.startingCell.isRowHeader?(e.selectArea({top:e.startingCell.rowIndex,bottom:e.startingCell.rowIndex,left:0,right:e.getVisibleSchema().length-1}),e.draw(!0)):e.startingCell.isColumnHeader&&("sort"===e.attributes.columnHeaderClickBehavior&&(e.orderBy===e.startingCell.header.name?e.orderDirection="asc"===e.orderDirection?"desc":"asc":e.orderDirection="asc",e.order(e.startingCell.header.name,e.orderDirection)),"select"===e.attributes.columnHeaderClickBehavior&&(e.selectArea({top:0,bottom:e.data.length-1,left:e.startingCell.columnIndex,right:e.startingCell.columnIndex}),e.draw(!0))),void e.touchEndEvents(t)}e.zoomAltered||(document.body.addEventListener("touchmove",e.touchmove,{passive:!1}),document.body.addEventListener("touchend",e.touchend,!1),document.body.addEventListener("touchcancel",e.touchcancel,!1),e.draw(!0));}},e.touchSelect=function(t,o){if(void 0!==t.rowIndex&&void 0!==t.columnIndex){e.touchSelecting=!0;var r=e.getSelectionBounds();"selection-handle-bl"===o&&t.rowIndex>=r.top&&t.columnIndex<=r.right?(r.bottom=t.rowIndex,r.left=t.columnIndex):"selection-handle-tl"===o&&t.rowIndex<=r.bottom&&t.columnIndex<=r.right?(r.top=t.rowIndex,r.left=t.columnIndex):"selection-handle-tr"===o&&t.rowIndex<=r.bottom&&t.columnIndex>=r.left?(r.top=t.rowIndex,r.right=t.columnIndex):"selection-handle-br"===o&&t.rowIndex>=r.top&&t.columnIndex>=r.left&&(r.bottom=t.rowIndex,r.right=t.columnIndex),"row"===e.attributes.selectionMode||-1===t.rowIndex?(r.left=0,r.right=e.getSchema().length-1):r.left=Math.max(0,r.left),e.selectArea(r),e.draw(!0);}},e.touchmove=function(e){o||requestAnimationFrame(function(){o=!0,t(e),o=!1;});},e.touchEndEvents=function(t){e.zoomDeltaStart=void 0,e.touchSelecting=!1,clearInterval(e.touchScrollTimeout),clearInterval(e.touchContextTimeout),clearInterval(e.calculatePPSTimer),t.stopPropagation(),document.body.removeEventListener("touchmove",e.touchmove,{passive:!1}),document.body.removeEventListener("touchend",e.touchend,!1),document.body.removeEventListener("touchcancel",e.touchcancel,!1);},e.touchend=function(t){if(!e.dispatchEvent("touchend",{NativeEvent:t,cell:e.currentCell})){if(e.zoomDeltaStart=void 0,t.changedTouches[0]&&(e.touchPosition=void 0),t.changedTouches[1]&&(e.touchPosition1=void 0),e.zoomAltered)return void(0===t.touches.length&&(e.zoomAltered=!1));var o=Math.abs(e.touchDelta.x)+Math.abs(e.touchDelta.y)<e.attributes.touchDeadZone;isNaN(e.xPPS)&&(e.xPPS=0),isNaN(e.yPPS)&&(e.yPPS=0),isNaN(e.xPPST)&&(e.xPPST=0),isNaN(e.yPPST)&&(e.yPPST=0),e.touchAnimateTo.x=e.xPPS*e.attributes.touchReleaseAcceleration,e.touchAnimateTo.y=e.yPPS*e.attributes.touchReleaseAcceleration,e.calculatePPSTimed(),o&&!e.contextMenu?e.touchCell(e.touchStartEvent)():0!==e.animationFrames||!(Math.abs(e.xPPST)>e.attributes.scrollAnimationPPSThreshold||Math.abs(e.yPPST)>e.attributes.scrollAnimationPPSThreshold)||/-scroll-/.test(e.startingCell.style)||o||(e.stopAnimation=!1,e.touchEndAnimation()),e.touchEndEvents(t);}},e.touchcancel=function(t){e.dispatchEvent("touchcancel",{NativeEvent:t,cell:e.currentCell})||e.touchEndEvents(t);};}}.apply(t,r))&&(e.exports=n);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e,t){function o(e,t){var o,r=[];for(o=e;o<=t;o+=1)r[o]=o;return r}e.scale=1,e.orders={rows:[],columns:[]},e.appliedInlineStyles={},e.cellGridAttributes={},e.treeGridAttributes={},e.visibleRowHeights=[],e.hasFocus=!1,e.activeCell={columnIndex:0,rowIndex:0},e.innerHTML="",e.storageName="canvasDataGrid",e.invalidSearchExpClass="canvas-datagrid-invalid-search-regExp",e.localStyleLibraryStorageKey="canvas-datagrid-user-style-library",e.dataType="application/x-canvas-datagrid",e.orderBy=null,e.orderDirection="asc",e.orderings={columns:[],add:function(t,o,r){e.orderings.columns=e.orderings.columns.filter(function(e){return e.orderBy!==t}),e.orderings.columns.push({orderBy:t,orderDirection:o,sortFunction:r});},sort:function(){e.orderings.columns.forEach(function(t){e.data.sort(t.sortFunction(t.orderBy,t.orderDirection));});}},e.columnFilters={},e.filters={},e.frozenRow=0,e.frozenColumn=0,e.ellipsisCache={},e.scrollCache={x:[],y:[]},e.scrollBox={},e.visibleRows=[],e.visibleCells=[],e.sizes={rows:{},columns:{},trees:{}},e.currentFilter=function(){return !0},e.selections=[],e.hovers={},e.attributes={},e.style={},e.formatters={},e.sorters={},e.parsers={},e.schemaHashes={},e.events={},e.changes=[],e.scrollIndexTop=0,e.scrollPixelTop=0,e.scrollIndexLeft=0,e.scrollPixelLeft=0,e.childGrids={},e.openChildren={},e.scrollModes=["vertical-scroll-box","vertical-scroll-top","vertical-scroll-bottom","horizontal-scroll-box","horizontal-scroll-right","horizontal-scroll-left"],e.componentL1Events={},e.eventNames=["afterdraw","afterrendercell","attributechanged","beforebeginedit","beforecreatecellgrid","beforedraw","beforeendedit","beforerendercell","beforerendercellgrid","beginedit","cellmouseout","cellmouseover","click","collapsetree","contextmenu","copy","datachanged","dblclick","endedit","expandtree","formatcellvalue","keydown","keypress","keyup","mousedown","mousemove","mouseup","newrow","ordercolumn","rendercell","rendercellgrid","renderorderbyarrow","rendertext","rendertreearrow","reorder","reordering","resize","resizecolumn","resizerow","schemachanged","scroll","selectionchanged","stylechanged","touchcancel","touchend","touchmove","touchstart","wheel"],e.mouse={x:0,y:0},e.getSelectedData=function(t){var o=[],r=e.getSchema(),n=e.data.length;return 0===n?[]:(e.selections.forEach(function(l,i){if(l&&i!==n){if(0===l.length)return void(o[i]=null);o[i]={},l.forEach(function(n){var l;-1!==n&&r[n]&&(l=e.orders.columns[n],!t&&r[l].hidden||e.data[i]&&(o[i][r[l].name]=e.data[i][r[l].name]));});}}),o)},e.getColumnHeaderCellHeight=function(){return e.attributes.showColumnHeaders?(e.sizes.rows[-1]||e.style.columnHeaderCellHeight)*e.scale:0},e.getRowHeaderCellWidth=function(){return e.attributes.showRowHeaders?(e.sizes.columns[-1]||e.style.rowHeaderCellWidth)*e.scale:0},e.setStorageData=function(){if(e.attributes.saveAppearance&&e.attributes.name){var t={};e.getSchema().forEach(function(e){t[e.name]=!e.hidden;}),localStorage.setItem(e.storageName+"-"+e.attributes.name,JSON.stringify({sizes:{rows:e.sizes.rows,columns:e.sizes.columns},orders:{rows:e.orders.rows,columns:e.orders.columns},orderBy:e.orderBy,orderDirection:e.orderDirection,visibility:t}));}},e.getSchema=function(){return e.schema||e.tempSchema||[]},e.createColumnOrders=function(){var t=e.getSchema();e.orders.columns=o(0,t.length-1);},e.createRowOrders=function(){e.orders.rows=o(0,e.data.length-1);},e.getVisibleSchema=function(){return e.getSchema().filter(function(e){return !e.hidden})},e.applyDefaultValue=function(t,o){var r=o.defaultValue||"";"function"==typeof r&&(r=r.apply(e.intf,[o])),t[o.name]=r;},e.createNewRowData=function(){e.newRow={},e.getSchema().forEach(function(t){e.applyDefaultValue(e.newRow,t);});},e.getSchemaNameHash=function(t){for(var o=0;e.schemaHashes[t];)o+=1,t+=o;return t},e.filter=function(t){var o=e.filters[t];return o||void 0===t||(console.warn("Cannot find filter for type %s, falling back to substring match.",t),o=e.filters.string),o},e.applyFilter=function(){e.refreshFromOrigialData(),Object.keys(e.columnFilters).forEach(function(t){var o=e.getHeaderByName(t);o&&(e.currentFilter=o.filter||e.filter(o.type||"string"),e.data=e.data.filter(function(o){return e.currentFilter(o[t],e.columnFilters[t])}));}),e.resize(),e.draw(!0);},e.applyDataTransforms=function(){e.applyFilter(),e.orderings.sort();},e.getBestGuessDataType=function(e,t){var o,r,n=t.length;for(r=0;r<n;r+=1)if(void 0!==t[r]&&null!==t[r]&&-1!==[null,void 0].indexOf(t[r][e]))return o=typeof t[r],"object"===o?"string":o;return "string"},e.drawChildGrids=function(){Object.keys(e.childGrids).forEach(function(t){e.childGrids[t].draw();});},e.resizeChildGrids=function(){Object.keys(e.childGrids).forEach(function(t){e.childGrids[t].resize();});},e.autoScrollZone=function(t,o,r,n){var l,i=e.getRowHeaderCellWidth(),a=e.getColumnHeaderCellHeight();-1!==r&&(o>e.width-e.attributes.selectionScrollZone&&o<e.width&&(e.scrollBox.scrollLeft+=e.attributes.selectionScrollIncrement,l=!0),o-e.attributes.selectionScrollZone-i<0&&(e.scrollBox.scrollLeft-=e.attributes.selectionScrollIncrement,l=!0)),-1!==r&&(r>e.height-e.attributes.selectionScrollZone&&r<e.height&&(e.scrollBox.scrollTop+=e.attributes.selectionScrollIncrement,l=!0),r-e.attributes.selectionScrollZone-a<0&&(e.scrollBox.scrollTop-=e.attributes.selectionScrollIncrement,l=!0)),l&&!n&&e.currentCell&&-1!==e.currentCell.columnIndex&&(e.scrollTimer=setTimeout(e.mousemove,e.attributes.scrollRepeatRate,t));},e.refreshFromOrigialData=function(){e.data=e.originalData.filter(function(e){return !0});},e.validateColumn=function(e,t){if(!e.name)throw new Error("A column must contain at least a name.");if(t.filter(function(t){return t.name===e.name}).length>0)throw new Error("A column with the name "+e.name+" already exists and cannot be added again.");return !0},e.setDefaults=function(e,t,o,r){e[o]=void 0===t[o]?r:t[o];},e.setAttributes=function(){e.defaults.attributes.forEach(function(t){e.setDefaults(e.attributes,e.args,t[0],t[1]);});},e.setStyle=function(){e.defaults.styles.forEach(function(t){e.setDefaults(e.style,e.args.style||{},t[0],t[1]);});},e.autosize=function(t){e.getVisibleSchema().forEach(function(o,r){o.name!==t&&void 0!==t||(e.sizes.columns[r]=Math.max(e.findColumnMaxTextLength(o.name),e.style.minColumnWidth));}),e.sizes.columns[-1]=e.findColumnMaxTextLength("cornerCell");},e.dispose=function(){!e.isChildGrid&&e.canvas&&e.canvas.parentNode&&e.canvas.parentNode.removeChild(e.canvas),e.isChildGrid||document.body.removeChild(e.controlInput),e.eventParent.removeEventListener("mouseup",e.mouseup,!1),e.eventParent.removeEventListener("mousedown",e.mousedown,!1),e.eventParent.removeEventListener("dblclick",e.dblclick,!1),e.eventParent.removeEventListener("click",e.click,!1),e.eventParent.removeEventListener("mousemove",e.mousemove),e.eventParent.removeEventListener("wheel",e.scrollWheel,!1),e.canvas.removeEventListener("contextmenu",e.contextmenu,!1),e.canvas.removeEventListener("copy",e.copy),e.controlInput.removeEventListener("copy",e.copy),e.controlInput.removeEventListener("cut",e.cut),e.controlInput.removeEventListener("paste",e.paste),e.controlInput.removeEventListener("keypress",e.keypress,!1),e.controlInput.removeEventListener("keyup",e.keyup,!1),e.controlInput.removeEventListener("keydown",e.keydown,!1),window.removeEventListener("resize",e.resize),e.observer&&e.observer.disconnect&&e.observer.disconnect();},e.tryLoadStoredSettings=function(){var t;e.reloadStoredValues(),e.storedSettings&&"object"==typeof e.storedSettings.orders&&null!==e.storedSettings.orders&&(e.storedSettings.orders.rows.length>=(e.data||[]).length&&(e.orders.rows=e.storedSettings.orders.rows),t=e.getSchema(),e.storedSettings.orders.columns.length===t.length&&(e.orders.columns=e.storedSettings.orders.columns),e.orderBy=void 0===e.storedSettings.orderBy?t[0].name:e.storedSettings.orderBy,e.orderDirection=void 0===e.storedSettings.orderDirection?"asc":e.storedSettings.orderDirection,void 0!==e.storedSettings.orderBy&&e.getHeaderByName(e.orderBy)&&e.orderDirection&&e.order(e.orderBy,e.orderDirection));},e.getDomRoot=function(){return e.shadowRoot?e.shadowRoot.host:e.parentNode},e.getFontName=function(e){return e.replace(/\d+\.?\d*px/,"")},e.getFontHeight=function(e){return parseFloat(e,10)},e.parseStyleValue=function(t){if(/Font/.test(t))return e.style[t+"Height"]=e.getFontHeight(e.style[t]),void(e.style[t+"Name"]=e.getFontName(e.style[t]));"moveOverlayBorderSegments"===t&&"string"==typeof e.style[t]&&(e.style[t]=e.style[t].split(",").map(function(e){return parseInt(e,10)}));},e.initProp=function(t){e.args[t]&&Object.keys(e.args[t]).forEach(function(o){e[t][o]=e.args[t][o];});},e.getStyleProperty=function(t){return -1===e.styleKeys.indexOf(t)?e.parentNodeStyle[t]:e.style[t]},e.setStyleProperty=function(t,o,r){var n=-1!==["height","width","minHeight","minWidth","maxHeight","maxWidth"].indexOf(t);-1===e.styleKeys.indexOf(t)?e.parentNodeStyle[t]=o:(/-/.test(t)&&(t=e.dehyphenateProperty(t)),e.style[t]=o,e.parseStyleValue(t)),n&&e.resize(),r||(e.draw(!0),e.dispatchEvent("stylechanged",{name:"style",value:o}));},e.reloadStoredValues=function(){if(e.attributes.name&&e.attributes.saveAppearance){try{e.storedSettings=localStorage.getItem(e.storageName+"-"+e.attributes.name);}catch(t){console.warn("Error loading stored values. "+t.message),e.storedSettings=void 0;}if(e.storedSettings)try{e.storedSettings=JSON.parse(e.storedSettings);}catch(t){console.warn("could not read settings from localStore",t),e.storedSettings=void 0;}e.storedSettings&&("object"==typeof e.storedSettings.sizes&&null!==e.storedSettings.sizes&&(e.sizes.rows=e.storedSettings.sizes.rows,e.sizes.columns=e.storedSettings.sizes.columns,["trees","columns","rows"].forEach(function(t){e.sizes[t]||(e.sizes[t]={});})),"object"==typeof e.storedSettings.visibility&&e.getSchema().forEach(function(t){e.storedSettings.visibility&&void 0!==e.storedSettings.visibility[t.name]&&(t.hidden=!e.storedSettings.visibility[t.name]);}));}},e.init=function(){function t(t){-1===e.styleKeys.indexOf(t)&&e.styleKeys.push(t);}if(!e.initialized){var o={};return e.setAttributes(),e.setStyle(),e.initScrollBox(),e.setDom(),e.nodeType="canvas-datagrid",e.ie=/Trident/.test(window.navigator.userAgent),e.edge=/Edge/.test(window.navigator.userAgent),e.webKit=/WebKit/.test(window.navigator.userAgent),e.moz=/Gecko/.test(window.navigator.userAgent),e.mobile=/Mobile/i.test(window.navigator.userAgent),e.cursorGrab="grab",e.cursorGrabing="grabbing",e.cursorGrab=e.webKit?"-webkit-grab":e.cursorGrab,e.cursorGrabing=e.moz?"-webkit-grabbing":e.cursorGrabbing,e.pointerLockPosition={x:0,y:0},Object.keys(e.style).forEach(e.parseStyleValue),e.intf.moveSelection=e.moveSelection,e.intf.moveTo=e.moveTo,e.intf.addEventListener=e.addEventListener,e.intf.removeEventListener=e.removeEventListener,e.intf.dispatchEvent=e.dispatchEvent,e.intf.dispose=e.dispose,e.intf.appendTo=e.appendTo,e.intf.getVisibleCellByIndex=e.getVisibleCellByIndex,e.intf.filters=e.filters,e.intf.sorters=e.sorters,e.intf.autosize=e.autosize,e.intf.beginEditAt=e.beginEditAt,e.intf.endEdit=e.endEdit,e.intf.setActiveCell=e.setActiveCell,e.intf.forEachSelectedCell=e.forEachSelectedCell,e.intf.scrollIntoView=e.scrollIntoView,e.intf.clearChangeLog=e.clearChangeLog,e.intf.gotoCell=e.gotoCell,e.intf.gotoRow=e.gotoRow,e.intf.getHeaderByName=e.getHeaderByName,e.intf.findColumnScrollLeft=e.findColumnScrollLeft,e.intf.findRowScrollTop=e.findRowScrollTop,e.intf.fitColumnToValues=e.fitColumnToValues,e.intf.findColumnMaxTextLength=e.findColumnMaxTextLength,e.intf.disposeContextMenu=e.disposeContextMenu,e.intf.getCellAt=e.getCellAt,e.intf.isCellVisible=e.isCellVisible,e.intf.isRowVisible=e.isRowVisible,e.intf.isColumnVisible=e.isColumnVisible,e.intf.order=e.order,e.intf.draw=e.draw,e.intf.isComponent=e.isComponent,e.intf.selectArea=e.selectArea,e.intf.clipElement=e.clipElement,e.intf.getSchemaFromData=e.getSchemaFromData,e.intf.setFilter=e.setFilter,e.intf.selectRow=e.selectRow,e.intf.parentGrid=e.parentGrid,e.intf.toggleTree=e.toggleTree,e.intf.expandTree=e.expandTree,e.intf.collapseTree=e.collapseTree,e.intf.canvas=e.canvas,e.intf.context=e.ctx,e.intf.insertRow=e.insertRow,e.intf.deleteRow=e.deleteRow,e.intf.addRow=e.addRow,e.intf.insertColumn=e.insertColumn,e.intf.deleteColumn=e.deleteColumn,e.intf.addColumn=e.addColumn,e.intf.getClippingRect=e.getClippingRect,e.intf.setRowHeight=e.setRowHeight,e.intf.setColumnWidth=e.setColumnWidth,e.intf.resetColumnWidths=e.resetColumnWidths,e.intf.resetRowHeights=e.resetRowHeights,e.intf.resize=e.resize,e.intf.selectColumn=e.selectColumn,e.intf.selectRow=e.selectRow,e.intf.selectAll=e.selectAll,e.intf.selectNone=e.selectNone,e.intf.drawChildGrids=e.drawChildGrids,e.intf.assertPxColor=e.assertPxColor,e.intf.clearPxColorAssertions=e.clearPxColorAssertions,e.intf.integerToAlpha=e.integerToAlpha,e.intf.copy=e.copy,e.intf.setStyleProperty=e.setStyleProperty,Object.defineProperty(e.intf,"defaults",{get:function(){return {styles:e.defaults.styles.reduce(function(e,t){return e[t[0]]=t[1],e},{}),attributes:e.defaults.attributes.reduce(function(e,t){return e[t[0]]=t[1],e},{})}}}),e.styleKeys=Object.keys(e.intf.defaults.styles),e.styleKeys.map(function(t){return e.hyphenateProperty(t,!1)}).forEach(t),e.styleKeys.map(function(t){return e.hyphenateProperty(t,!0)}).forEach(t),e.DOMStyles=window.getComputedStyle(document.body,null),e.styleKeys.concat(Object.keys(e.DOMStyles)).forEach(function(t){o[t]=void 0,Object.defineProperty(o,t,{get:function(){return e.getStyleProperty(t)},set:function(o){e.initialized&&(e.appliedInlineStyles[t]=o),e.setStyleProperty(t,o);}});}),Object.defineProperty(e.intf,"shadowRoot",{get:function(){return e.shadowRoot}}),Object.defineProperty(e.intf,"activeCell",{get:function(){return e.activeCell}}),Object.defineProperty(e.intf,"hasFocus",{get:function(){return e.hasFocus}}),Object.defineProperty(e.intf,"style",{get:function(){return o},set:function(t){Object.keys(t).forEach(function(o){e.setStyleProperty(o,t[o],!0);}),e.draw(!0),e.dispatchEvent("stylechanged",{name:"style",value:t});}}),Object.defineProperty(e.intf,"attributes",{value:{}}),Object.keys(e.attributes).forEach(function(t){Object.defineProperty(e.intf.attributes,t,{get:function(){return e.attributes[t]},set:function(o){e.attributes[t]=o,"name"===t&&e.tryLoadStoredSettings(),e.draw(!0),e.dispatchEvent("attributechanged",{name:t,value:o[t]});}});}),e.filters.string=function(t,o){t=String(t);var r,n=/\/(i|g|m)*$/,l=n.exec(o),i=l?l[0].substring(1):"",a=i.length;if(e.invalidFilterRegEx=void 0,"/"===o.substring(0,1)&&l){try{r=new RegExp(o.substring(1,o.length-(a+1)),i);}catch(t){return void(e.invalidFilterRegEx=t)}return r.test(t)}return !!t.toString&&-1!==t.toString().toLocaleUpperCase().indexOf(o.toLocaleUpperCase())},e.filters.number=function(e,t){return !t||e===t},["formatters","filters","sorters"].forEach(e.initProp),e.applyComponentStyle(!1,e.intf),e.reloadStoredValues(),e.args.data&&(e.intf.data=e.args.data),(e.intf.innerText||e.intf.textContent)&&("application/x-canvas-datagrid"===e.intf.dataType&&(e.intf.dataType="application/json+x-canvas-datagrid"),e.intf.data=e.intf.innerText||e.intf.textContent),e.args.schema&&(e.intf.schema=e.args.schema),e.isChildGrid||!e.isComponent?requestAnimationFrame(function(){e.resize(!0);}):e.resize(!0),e.initialized=!0,e}},e.intf.blur=function(t){e.hasFocus=!1;},e.intf.focus=function(){e.hasFocus=!0,e.controlInput.focus();},(e.shadowRoot||e.isChildGrid)&&(Object.defineProperty(e.intf,"height",{get:function(){return e.shadowRoot?e.shadowRoot.height:e.parentNode.height},set:function(t){e.shadowRoot?e.shadowRoot.height=t:e.parentNode.height=t,e.resize(!0);}}),Object.defineProperty(e.intf,"width",{get:function(){return e.shadowRoot?e.shadowRoot.width:e.parentNode.width},set:function(t){e.shadowRoot?e.shadowRoot.width=t:e.parentNode.width=t,e.resize(!0);}}),Object.defineProperty(e.intf,"parentNode",{get:function(){return e.parentNode},set:function(t){if(!e.isChildGrid)throw new TypeError("Cannot set property parentNode which has only a getter");e.parentNode=t;}})),Object.defineProperty(e.intf,"visibleRowHeights",{get:function(){return e.visibleRowHeights}}),Object.defineProperty(e.intf,"openChildren",{get:function(){return e.openChildren}}),Object.defineProperty(e.intf,"childGrids",{get:function(){return Object.keys(e.childGrids).map(function(t){return e.childGrids[t]})}}),Object.defineProperty(e.intf,"isChildGrid",{get:function(){return e.isChildGrid}}),Object.defineProperty(e,"cursor",{get:function(){return e.parentNodeStyle.cursor},set:function(t){"cell"===t&&(t="default"),e.currentCursor!==t&&(e.parentNodeStyle.cursor=t,e.currentCursor=t);}}),Object.defineProperty(e.intf,"orderDirection",{get:function(){return e.orderDirection},set:function(t){"desc"!==t&&(t="asc"),e.orderDirection=t,e.order(e.orderBy,e.orderDirection);}}),Object.defineProperty(e.intf,"orderBy",{get:function(){return e.orderBy},set:function(t){if(void 0===e.getSchema().find(function(e){return e.name===t}))throw new Error("Cannot sort by unknown column name.");e.orderBy=t,e.order(e.orderBy,e.orderDirection);}}),e.isComponent&&(Object.defineProperty(e.intf,"offsetHeight",{get:function(){return e.canvas.offsetHeight}}),Object.defineProperty(e.intf,"offsetWidth",{get:function(){return e.canvas.offsetWidth}})),Object.defineProperty(e.intf,"scrollHeight",{get:function(){return e.scrollBox.scrollHeight}}),Object.defineProperty(e.intf,"scrollWidth",{get:function(){return e.scrollBox.scrollWidth}}),Object.defineProperty(e.intf,"scrollTop",{get:function(){return e.scrollBox.scrollTop},set:function(t){e.scrollBox.scrollTop=t;}}),Object.defineProperty(e.intf,"scrollLeft",{get:function(){return e.scrollBox.scrollLeft},set:function(t){e.scrollBox.scrollLeft=t;}}),Object.defineProperty(e.intf,"sizes",{get:function(){return e.sizes}}),Object.defineProperty(e.intf,"parentDOMNode",{get:function(){return e.parentDOMNode}}),Object.defineProperty(e.intf,"input",{get:function(){return e.input}}),Object.defineProperty(e.intf,"controlInput",{get:function(){return e.controlInput}}),Object.defineProperty(e.intf,"currentCell",{get:function(){return e.currentCell}}),Object.defineProperty(e.intf,"visibleCells",{get:function(){return e.visibleCells}}),Object.defineProperty(e.intf,"visibleRows",{get:function(){return e.visibleRows}}),Object.defineProperty(e.intf,"selections",{get:function(){return e.selections}}),Object.defineProperty(e.intf,"dragMode",{get:function(){return e.dragMode}}),Object.defineProperty(e.intf,"changes",{get:function(){return e.changes}}),e.intf.formatters=e.formatters,Object.defineProperty(e.intf,"dataType",{get:function(){return e.dataType},set:function(t){if(!e.parsers[t])throw new Error("No parser for MIME type "+t);e.dataType=t;}}),e.eventNames.forEach(function(t){Object.defineProperty(e.intf,"on"+t,{get:function(){return e.componentL1Events[t]},set:function(o){e.events[t]=[],e.componentL1Events[t]=o,o&&e.addEventListener(t,o);}});}),Object.defineProperty(e.intf,"frozenRow",{get:function(){return e.frozenRow},set:function(t){if(isNaN(t))throw new TypeError("Expected value for frozenRow to be a number.");if(e.visibleRows.length<t)throw new RangeError("Cannot set a value larger than the number of visible rows.");e.frozenRow=t;}}),Object.defineProperty(e.intf,"frozenColumn",{get:function(){return e.frozenColumn},set:function(t){if(isNaN(t))throw new TypeError("Expected value for frozenRow to be a number.");if(e.getVisibleSchema().length<t)throw new RangeError("Cannot set a value larger than the number of visible columns.");e.frozenColumn=t;}}),Object.defineProperty(e.intf,"scrollIndexRect",{get:function(){return {top:e.scrollIndexTop,right:e.scrollIndexRight,bottom:e.scrollIndexBottom,left:e.scrollIndexLeft}}}),Object.defineProperty(e.intf,"scrollPixelRect",{get:function(){return {top:e.scrollPixelTop,right:e.scrollPixelRight,bottom:e.scrollPixelBottom,left:e.scrollPixelLeft}}}),Object.defineProperty(e.intf,"rowOrder",{get:function(){return e.orders.rows},set:function(t){if(!Array.isArray(t))throw new TypeError("Value must be an array.");if(!e.data||t.length<e.data.length)throw new RangeError("Array length must be equal to or greater than number of rows.");e.orders.rows=t;}}),Object.defineProperty(e.intf,"columnOrder",{get:function(){return e.orders.columns},set:function(t){if(!Array.isArray(t))throw new TypeError("Value must be an array.");if(t.length<e.getSchema().length)throw new RangeError("Array length must be equal to or greater than number of columns.");e.orders.columns=t;}}),Object.defineProperty(e.intf,"selectionBounds",{get:function(){return e.getSelectionBounds()}}),Object.defineProperty(e.intf,"selectedRows",{get:function(){return e.getSelectedData(!0)}}),Object.defineProperty(e.intf,"selectedCells",{get:function(){return e.getSelectedData()}}),Object.defineProperty(e.intf,"visibleSchema",{get:function(){return e.getVisibleSchema().map(function(e){return e})}}),Object.defineProperty(e.intf,"treeGridAttributes",{get:function(){return e.treeGridAttributes},set:function(t){e.treeGridAttributes=t;}}),Object.defineProperty(e.intf,"cellGridAttributes",{get:function(){return e.cellGridAttributes},set:function(t){e.cellGridAttributes=t;}}),Object.defineProperty(e.intf,"ctx",{get:function(){return e.ctx}}),Object.defineProperty(e.intf,"schema",{get:function(){return e.getSchema()},set:function(t){if(void 0===t)return e.schema=void 0,e.tempSchema=void 0,void e.dispatchEvent("schemachanged",{schema:void 0});if(!Array.isArray(t)||"object"!=typeof t[0])throw new Error("Schema must be an array of objects.");if(void 0===t[0].name)throw new Error("Expected schema to contain an object with at least a name property.");e.schema=t.map(function(t,o){return t.width=t.width||e.style.cellWidth,t.filter=t.filter||e.filter(t.type),t.type=t.type||"string",t.index=o,t.columnIndex=o,t.rowIndex=-1,t}),e.tempSchema=void 0,e.createNewRowData(),e.createColumnOrders(),e.tryLoadStoredSettings(),e.storedSettings&&"object"==typeof e.storedSettings.visibility&&e.schema.forEach(function(t,o){e.storedSettings&&void 0!==e.storedSettings.visibility[t.name]&&(t.hidden=!e.storedSettings.visibility[t.name]);}),e.resize(!0),e.dispatchEvent("schemachanged",{schema:e.schema});}}),e.intf.getTypes=function(){return Object.keys(e.parsers)},e.parseInnerHtml=function(e){if(!e||/^ +$/.test(e))return [];try{e=JSON.parse(e);}catch(e){console.warn(Error("Cannot parse application/json+x-canvas-datagrid formated data. "+e.message+"  \nNote: canvas-datagrid.innerHTML is for string data only.  Use the canvas-datagrid.data property to set object data."));}return e},e.parsers["application/json+x-canvas-datagrid"]=function(t,o){e.parsers["application/x-canvas-datagrid"](e.parseInnerHtml(t),function(e,t){return o(e,t)});},e.parsers["application/x-canvas-datagrid"]=function(e,t){return t(e)},e.intf.parsers=e.parsers,e.etl=function(t,o){if(!e.intf.parsers[e.dataType])throw new Error("Unsupported data type.");e.intf.parsers[e.dataType](t,function(t,r){Array.isArray(r)&&(e.schema=r),e.attributes.autoGenerateSchema&&(e.schema=e.getSchemaFromData(t)),e.schema||(e.tempSchema=e.getSchemaFromData(t)),e.getSchema()&&e.createColumnOrders(),e.originalData=t,e.applyDataTransforms(),e.schema||0!==(e.data||[]).length||(e.tempSchema=[{name:""}]),e.fitColumnToValues("cornerCell",!0),(e.tempSchema&&!e.schema||e.attributes.autoGenerateSchema)&&(e.createColumnOrders(),e.dispatchEvent("schemachanged",{schema:e.tempSchema})),o();});},Object.defineProperty(e.intf,"data",{get:function(){return e.data},set:function(t){e.etl(t,function(){e.changes=[],e.createNewRowData(),e.attributes.autoResizeColumns&&e.data.length>0&&void 0===e.storedSettings&&e.autosize(),e.fitColumnToValues("cornerCell",!0),e.createRowOrders(),e.tryLoadStoredSettings(),e.dispatchEvent("datachanged",{data:e.data}),e.resize(!0);});}}),e.initScrollBox=function(){function t(t,o){if(isNaN(t))throw new Error("ScrollTop value must be a number");t<0&&(t=0),t>a&&(t=a),a<0&&(t=0),l=t,o||e.scroll();}function o(t,o){if(isNaN(t))throw new Error("ScrollLeft value must be a number");t<0&&(t=0),t>s&&(t=s),s<0&&(t=0),i=t,o||e.scroll();}var r=0,n=0,l=0,i=0,a=0,s=0,c=20,d=20;e.scrollBox.toString=function(){return '{"width": '+s.toFixed(2)+', "height": '+a.toFixed(2)+', "left": '+i.toFixed(2)+', "top": '+l.toFixed(2)+', "widthRatio": '+e.scrollBox.widthBoxRatio.toFixed(5)+', "heightRatio": '+e.scrollBox.heightBoxRatio.toFixed(5)+"}"},e.scrollBox.scrollTo=function(e,r,n){o(e,!0),t(r,n);},Object.defineProperty(e.scrollBox,"scrollBoxHeight",{get:function(){return c},set:function(e){c=e;}}),Object.defineProperty(e.scrollBox,"scrollBoxWidth",{get:function(){return d},set:function(e){d=e;}}),Object.defineProperty(e.scrollBox,"height",{get:function(){return r},set:function(e){r=e;}}),Object.defineProperty(e.scrollBox,"width",{get:function(){return n},set:function(e){n=e;}}),Object.defineProperty(e.scrollBox,"scrollTop",{get:function(){return l},set:t}),Object.defineProperty(e.scrollBox,"scrollLeft",{get:function(){return i},set:o}),Object.defineProperty(e.scrollBox,"scrollHeight",{get:function(){return a},set:function(e){l>e&&(l=Math.max(e,0)),a=e;}}),Object.defineProperty(e.scrollBox,"scrollWidth",{get:function(){return s},set:function(e){i>e&&(i=Math.max(e,0)),s=e;}});};}}.apply(t,r))&&(e.exports=n);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){function t(t){e.createInlineStyle(t,"canvas-datagrid-context-menu-item"+(e.mobile?"-mobile":"")),t.addEventListener("mouseover",function(){e.createInlineStyle(t,"canvas-datagrid-context-menu-item:hover");}),t.addEventListener("mouseout",function(){e.createInlineStyle(t,"canvas-datagrid-context-menu-item");});}function o(r,n,a,s){function c(){a.forEach(function(n){function l(e){e.relatedTarget===m||n.contextMenu.container===e.relatedTarget||s===e.relatedTarget||c===e.relatedTarget||n.contextMenu.container.contains(e.relatedTarget)||(n.contextMenu.dispose(),y.splice(y.indexOf(n.contextMenu),1),n.contextMenu=void 0,c.removeEventListener("mouseout",l),m.removeEventListener("mouseout",l),c.setAttribute("contextOpen","0"),c.setAttribute("opening","0"));}function i(t){if("1"===c.getAttribute("opening")&&"1"!==c.getAttribute("contextOpen")){var i=c.getBoundingClientRect();i={left:i.left+e.style.childContextMenuMarginLeft+m.offsetWidth,top:i.top+e.style.childContextMenuMarginTop,bottom:i.bottom,right:i.right},n.contextMenu=o(r,i,t,w),c.setAttribute("contextOpen","1"),c.addEventListener("mouseout",l),m.addEventListener("mouseout",l),y.push(n.contextMenu);}}function a(){var e;if("1"!==c.getAttribute("contextOpen")){if(c.setAttribute("opening","1"),"function"==typeof n.items)return void(void 0!==(e=n.items.apply(w,[function(e){i(e);}]))&&Array.isArray(e)&&i(e));i(n.items);}}var s,c=document.createElement("div");!function(o){function n(e){if(null!==e){if("function"==typeof e)return n(e(r));if("object"==typeof e)return void c.appendChild(e);t(c),c.innerHTML=e;}}n(o.title),o.contextItemContainer=c,(o.items&&o.items.length>0||"function"==typeof o.items)&&(s=document.createElement("div"),e.createInlineStyle(s,"canvas-datagrid-context-child-arrow"),s.innerHTML=e.style.childContextMenuArrowHTML,c.appendChild(s),c.addEventListener("mouseover",a),c.addEventListener("mouseout",function(){c.setAttribute("opening","0");})),o.click&&c.addEventListener("click",function(t){o.click.apply(e,[t]);});}(n),m.appendChild(c);});}function d(e){a[e].contextItemContainer.dispatchEvent(new Event("click"));}function u(){m.scrollTop>0?e.parentDOMNode.appendChild(p):p.parentNode&&p.parentNode.removeChild(p),m.scrollTop>=m.scrollHeight-m.offsetHeight&&x.parentNode?x.parentNode.removeChild(x):m.scrollHeight-m.offsetHeight>0&&!(m.scrollTop>=m.scrollHeight-m.offsetHeight)&&e.parentDOMNode.appendChild(x);}function h(t){return function o(){var r=e.attributes.contextHoverScrollAmount;"up"===t&&0===m.scrollTop||"down"===t&&m.scrollTop===m.scrollHeight||(m.scrollTop+="up"===t?-r:r,i=setTimeout(o,e.attributes.contextHoverScrollRateMs,t));}}function f(e){return function(){clearTimeout(i);}}var g,m=document.createElement("div"),p=document.createElement("div"),x=document.createElement("div"),y=[],v=-1,w={};if(!Array.isArray(a))throw new Error("createContextMenu expects an array.");return w.parentGrid=e.intf,w.parentContextMenu=s,w.container=m,function(){var t={},o=e.scrollOffset(e.canvas);void 0===l&&(l=e.style.contextMenuZIndex),c(),e.createInlineStyle(m,"canvas-datagrid-context-menu"+(e.mobile?"-mobile":"")),t.x=n.left-o.left,t.y=n.top-o.top,t.height=0,l+=1,m.style.position="absolute",p.style.color=e.style.contextMenuArrowColor,x.style.color=e.style.contextMenuArrowColor,[p,x].forEach(function(e){e.style.textAlign="center",e.style.position="absolute",e.style.zIndex=l+1;}),m.style.zIndex=l,s&&s.inputDropdown&&(m.style.maxHeight=window.innerHeight-t.y-e.style.autocompleteBottomMargin+"px",m.style.minWidth=n.width+"px",t.y+=n.height),e.mobile&&(m.style.width=n.width+"px"),m.style.left=t.x+"px",m.style.top=t.y+"px",m.addEventListener("scroll",u),m.addEventListener("wheel",function(t){e.hasFocus&&(m.scrollTop+=t.deltaY,m.scrollLeft+=t.deltaX),u();}),p.innerHTML=e.style.contextMenuArrowUpHTML,x.innerHTML=e.style.contextMenuArrowDownHTML,m.appendChild(p),document.body.appendChild(x),document.body.appendChild(m),g=m.getBoundingClientRect(),g.bottom>window.innerHeight&&(s&&s.inputDropdown||(t.y-=g.bottom+e.style.contextMenuWindowMargin-window.innerHeight),t.y<0&&(t.y=e.style.contextMenuWindowMargin),m.offsetHeight>window.innerHeight-e.style.contextMenuWindowMargin&&(m.style.height=window.innerHeight-2*e.style.contextMenuWindowMargin+"px")),g.right>window.innerWidth&&(t.x-=g.right-window.innerWidth+e.style.contextMenuWindowMargin),t.x<0&&(t.x=e.style.contextMenuWindowMargin),t.y<0&&(t.y=e.style.contextMenuWindowMargin),m.style.left=t.x+"px",m.style.top=t.y+"px",g=m.getBoundingClientRect(),p.style.top=g.top+"px",x.style.top=g.top+g.height-x.offsetHeight+"px",p.style.left=g.left+"px",x.style.left=g.left+"px",x.style.width=m.offsetWidth+"px",p.style.width=m.offsetWidth+"px",x.addEventListener("mouseover",h("down")),x.addEventListener("mouseout",f()),p.addEventListener("mouseover",h("up")),p.addEventListener("mouseout",f()),u();}(),w.clickIndex=d,w.rect=g,w.items=a,w.upArrow=p,w.downArrow=x,w.dispose=function(){clearTimeout(i),y.forEach(function(e){e.dispose();}),[x,p,m].forEach(function(e){e.parentNode&&e.parentNode.removeChild(e);});},Object.defineProperty(w,"selectedIndex",{get:function(){return v},set:function(t){if("number"!=typeof t||isNaN(t||!isFinite(t)))throw new Error("Context menu selected index must be a sane number.");v=t,v>a.length-1&&(v=a.length-1),v<0&&(v=0),a.forEach(function(t,o){if(o===v)return e.createInlineStyle(t.contextItemContainer,"canvas-datagrid-context-menu-item:hover");e.createInlineStyle(t.contextItemContainer,"canvas-datagrid-context-menu-item");});}}),w}function r(t){function r(){h.style.background=e.style.contextFilterInputBackground,h.style.color=e.style.contextFilterInputColor,e.invalidFilterRegEx&&(h.style.background=e.style.contextFilterInvalidRegExpBackground,h.style.color=e.style.contextFilterInvalidRegExpColor);}function n(){var o=0;i={},e.data.forEach(function(r){var n=r[t.cell.header.name];i[n]||o>e.attributes.maxAutoCompleteItems||(o+=1,i[n]={title:e.formatters[t.cell.header.type||"string"]({cell:{value:n}}),click:function(t){h.value=n,t.stopPropagation(),h.dispatchEvent(new Event("keyup")),e.disposeAutocomplete();}});}),i=Object.keys(i).map(function(e){return i[e]});}function l(e){e&&-1!==[40,38,13,9].indexOf(e.keyCode)||(n(),s=h.getBoundingClientRect(),a&&(a.dispose(),a=void 0),a=o(t,{left:s.left,top:s.top,right:s.right,bottom:s.bottom,height:s.height,width:s.width},i,{inputDropdown:!0}),a.selectedIndex=0);}var i,s,c=document.createElement("div"),d=document.createElement("div"),u=document.createElement("button"),h=document.createElement("input"),f=t.cell&&t.cell.header?t.cell.header.title||t.cell.header.name:"";e.createInlineStyle(d,"canvas-datagrid-context-menu-label"),e.createInlineStyle(u,"canvas-datagrid-context-menu-filter-button"),e.createInlineStyle(h,"canvas-datagrid-context-menu-filter-input"),r(),h.onclick=e.disposeAutocomplete,h.addEventListener("keydown",function(t){40===t.keyCode&&(a.selectedIndex+=1),38===t.keyCode&&(a.selectedIndex-=1),13===t.keyCode&&(a.clickIndex(a.selectedIndex),e.disposeContextMenu()),9===t.keyCode&&(a.clickIndex(a.selectedIndex),t.preventDefault()),27===t.keyCode&&e.disposeContextMenu();}),h.addEventListener("keyup",function(){e.setFilter(t.cell.header.name,h.value);}),h.addEventListener("keyup",l),["focus","blur","keydown","keyup","change"].forEach(function(e){h.addEventListener(e,r);}),h.value=t.cell.header?e.columnFilters[t.cell.header.name]||"":"",d.innerHTML=e.attributes.filterOptionText.replace(/%s/g,f),u.onclick=function(){if(a)return e.disposeAutocomplete();l();},u.innerHTML=e.style.contextFilterButtonHTML,c.addEventListener("click",function(e){return e.stopPropagation()}),c.appendChild(d),c.appendChild(h),c.appendChild(u),t.items.push({title:c}),Object.keys(e.columnFilters).length&&Object.keys(e.columnFilters).forEach(function(o){var r=e.getHeaderByName(o);t.items.push({title:e.attributes.removeFilterOptionText.replace(/%s/g,r.title||r.name),click:function(t){t.preventDefault(),e.setFilter(o,""),e.controlInput.focus();}});});}function n(o){var n=!(o.cell.isBackground||o.cell.isColumnHeaderCellCap||o.cell.isScrollBar||o.cell.isCorner||o.cell.isRowHeader)&&o.cell.header;e.attributes.showFilter&&n&&r(o),e.attributes.showCopy&&e.selections.reduce(function(e,t){return e+t.length},0)>0&&o.items.push({title:e.attributes.copyText,click:function(){document.execCommand("copy"),e.disposeContextMenu(),e.controlInput.focus();}}),e.attributes.showPaste&&e.clipBoardData&&o.items.push({title:e.attributes.pasteText,click:function(){e.paste(e.clipBoardData,o.cell.columnIndex,o.cell.rowIndex),e.draw();}}),e.attributes.showColumnSelector&&(o.items.push({title:e.attributes.columnSelectorText,items:function(){var o=[];return e.getSchema().forEach(function(r){function n(t){r.hidden=!r.hidden,e.dispatchEvent("togglecolumn",{column:r,hidden:r.hidden}),t.preventDefault(),e.stopPropagation(t),e.disposeContextMenu(),e.resize(!0),e.setStorageData();}var l=document.createElement("div");t(l),l.addEventListener("touchstart",n),l.addEventListener("click",n),l.innerHTML=(r.hidden?e.attributes.columnSelectorHiddenText:e.attributes.columnSelectorVisibleText)+(r.title||r.name),o.push({title:l});}),o}}),o.cell&&o.cell.header&&o.cell.columnIndex>-1&&o.items.push({title:e.attributes.hideColumnText.replace(/%s/gi,o.cell.header.title||o.cell.header.name),click:function(t){e.getSchema()[o.cell.columnIndex].hidden=!0,t.preventDefault(),e.stopPropagation(t),e.disposeContextMenu(),e.setStorageData(),setTimeout(function(){e.resize(!0);},10);}})),e.attributes.saveAppearance&&e.attributes.showClearSettingsOption&&(Object.keys(e.sizes.rows).length>0||Object.keys(e.sizes.columns).length>0)&&o.items.push({title:e.attributes.clearSettingsOptionText,click:function(t){t.preventDefault(),e.sizes.rows={},e.sizes.columns={},e.createRowOrders(),e.createColumnOrders(),e.storedSettings=void 0,e.dispatchEvent("resizecolumn",{columnWidth:e.style.cellWidth}),e.dispatchEvent("resizerow",{cellHeight:e.style.cellHeight}),e.setStorageData(),e.resize(!0),e.disposeContextMenu(),e.controlInput.focus();}}),e.attributes.allowSorting&&e.attributes.showOrderByOption&&n&&(o.items.push({title:e.attributes.showOrderByOptionTextAsc.replace("%s",o.cell.header.title||o.cell.header.name),click:function(t){t.preventDefault(),e.order(o.cell.header.name,"asc"),e.controlInput.focus();}}),o.items.push({title:e.attributes.showOrderByOptionTextDesc.replace("%s",o.cell.header.title||o.cell.header.name),click:function(t){t.preventDefault(),e.order(o.cell.header.name,"desc"),e.disposeContextMenu(),e.controlInput.focus();}}));}var l,i,a;e.disposeAutocomplete=function(){a&&(a.dispose(),a=void 0);},e.disposeContextMenu=function(){document.removeEventListener("click",e.disposeContextMenu),l=e.style.contextMenuZIndex,e.disposeAutocomplete(),e.contextMenu&&e.contextMenu.dispose(),e.contextMenu=void 0;},e.contextmenuEvent=function(t,r){function l(){requestAnimationFrame(function(){document.addEventListener("click",e.disposeContextMenu),document.removeEventListener("mouseup",l);});}if(e.hasFocus||t.target===e.canvas){var i,a=[],s=r||e.getLayerPos(t),c={NativeEvent:t,cell:e.getCellAt(s.x,s.y),items:a};c.cell.isGrid||n(c),e.dispatchEvent("contextmenu",c)||c.cell.isGrid||(e.contextMenu&&e.disposeContextMenu(),i={left:s.x+s.rect.left+e.style.contextMenuMarginLeft+e.canvasOffsetLeft,top:s.y+s.rect.top+e.style.contextMenuMarginTop+e.canvasOffsetTop,right:c.cell.width+c.cell.x+s.rect.left,bottom:c.cell.height+c.cell.y+s.rect.top,height:c.cell.height,width:c.cell.width},e.mobile&&(i.left=e.style.mobileContextMenuMargin+"px",i.width=e.width-2*e.style.mobileContextMenuMargin+"px"),e.contextMenu=o(c,i,a),document.addEventListener("mouseup",l),t.preventDefault());}};}}.apply(t,r))&&(e.exports=n);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){e.getClippingRect=function(t){var o=e.position(e.parentNode),r=e.position(t),n=e.scrollOffset(e.canvas),l={x:0,y:0,h:0,w:0},i={x:-1/0,y:-1/0,h:1/0,w:1/0},a=e.getColumnHeaderCellHeight(),s=e.getRowHeaderCellWidth();return o.top-=n.top,o.left-=n.left,r.top-=n.top,r.left-=n.left,l.h=o.top+o.height-t.offsetTop-e.style.scrollBarWidth,l.w=o.left+o.width-t.offsetLeft-e.style.scrollBarWidth,l.x=o.left+-1*r.left+s,l.y=o.top+-1*r.top+a,{x:l.x>i.x?l.x:i.x,y:l.y>i.y?l.y:i.y,h:l.h<i.h?l.h:i.h,w:l.w<i.w?l.w:i.w}},e.clipElement=function(t){var o=e.getClippingRect(t);o.w<0&&(o.w=0),o.h<0&&(o.h=0),t.style.clip="rect("+o.y+"px,"+o.w+"px,"+o.h+"px,"+o.x+"px)";},e.scrollOffset=function(t){for(var o=0,r=0,n=document.scrollingElement||{scrollLeft:0,scrollTop:0};t.parentNode&&"CANVAS-DATAGRID"!==t.nodeName&&t!==e.intf;)"canvas-datagrid-tree"!==t.nodeType&&"canvas-datagrid-cell"!==t.nodeType&&(o-=t.scrollLeft,r-=t.scrollTop),t=t.parentNode;return {left:o-n.scrollLeft,top:r-n.scrollTop}},e.resizeEditInput=function(){if(e.input&&e.input.editCell){var t=e.canvas.getBoundingClientRect(),o=e.scrollOffset(e.intf),r="collapse"===e.style.gridBorderCollapse?1:2,n=e.style.cellBorderWidth*r,l=e.getVisibleCellByIndex(e.input.editCell.columnIndex,e.input.editCell.rowIndex)||{x:-100,y:-100,height:0,width:0};if(e.mobile)return e.input.style.left="0",e.input.style.top=e.height-e.style.mobileEditInputHeight-n-1+"px",e.input.style.height=e.style.mobileEditInputHeight+"px",void(e.input.style.width=e.width-n-1+"px");e.input.style.left=t.left+l.x+e.canvasOffsetLeft-o.left+"px",e.input.style.top=t.top+l.y-e.style.cellBorderWidth+e.canvasOffsetTop-o.top+"px",e.input.style.height=l.height-n+"px",e.input.style.width=l.width-e.style.cellPaddingLeft+"px",e.clipElement(e.input);}},e.position=function(t,o){for(var r,n,l=0,i=0,a=t;t.offsetParent&&"CANVAS-DATAGRID"!==t.nodeName;)l+=t.offsetLeft,i+=t.offsetTop,r=t.offsetHeight,n=t.offsetWidth,t=t.offsetParent;return o?{left:l,top:i,height:r,width:n}:(t=a,a=e.scrollOffset(t),{left:l+a.left,top:i+a.top,height:r,width:n})},e.getLayerPos=function(t){var o=e.canvas.getBoundingClientRect(),r={x:t.clientX-o.left,y:t.clientY-o.top};return e.isChildGrid&&(r.x-=e.canvasOffsetLeft,r.y-=e.canvasOffsetTop),{x:r.x,y:r.y,rect:o}},e.endEdit=function(t){function o(){t=!0;}var r=e.input.editCell,n=r.rowIndex;if(e.dispatchEvent("beforeendedit",{cell:r,newValue:e.input.value,oldValue:r.value,abort:o,input:e.input}))return !1;if(e.input.value!==r.value&&!t){if(e.changes[n]=e.changes[n]||{},e.changes[n][r.header.name]=e.input.value,r.data||(e.data[r.rowIndex]={},r.data=e.data[r.rowIndex]),r.data[r.header.name]=e.input.value,n===e.data.length){if(e.dispatchEvent("newrow",{value:e.input.value,defaultValue:r.value,aborted:t,cell:r,input:e.input}))return !1;e.addRow(r.data),e.createNewRowData();}e.draw(!0);}return e.input.parentNode&&e.input.parentNode.removeChild(e.input),e.intf.focus(),e.dispatchEvent("endedit",{cell:r,value:e.input.value,aborted:t,input:e.input}),e.input=void 0,!0},e.beginEditAt=function(t,o,r){if(e.attributes.editable){e.input&&e.endEdit();var n,l,i,a,s,c=e.getVisibleCellByIndex(t,o);e.getSchema();if(c&&c.header){if(i=c.header.enum,e.dispatchEvent("beforebeginedit",{cell:c,NativeEvent:r}))return !1;e.scrollIntoView(t,o),e.setActiveCell(t,o),n=e.getAdjacentCells(),e.input=i?document.createElement("select"):document.createElement(e.attributes.multiLine?"textarea":"input"),c=e.getVisibleCellByIndex(t,o),c&&(i&&("function"==typeof i?l=i.apply(e.intf,[{cell:c}]):Array.isArray(i)&&(l=i),l.forEach(function(t){var o,r,n=document.createElement("option");Array.isArray(t)?(o=t[0],r=t[1]):(o=t,r=t),o===c.value&&(s=!0),n.value=o,n.innerHTML=r,e.input.appendChild(n);}),s||(a=document.createElement("option"),a.value=c.value,a.innerHTML=c.value,e.input.appendChild(a)),e.input.addEventListener("change",function(){e.endEdit(),e.draw(!0);})),e.dispatchEvent("appendeditinput",{cell:c,input:e.input})||document.body.appendChild(e.input),e.createInlineStyle(e.input,e.mobile?"canvas-datagrid-edit-mobile-input":"canvas-datagrid-edit-input"),e.input.style.position="absolute",e.input.editCell=c,e.resizeEditInput(),e.input.style.zIndex=e.style.editCellZIndex,e.input.style.fontSize=parseInt(e.style.editCellFontSize,10)*e.scale+"px",e.input.value=-1!==[null,void 0].indexOf(c.value)?"":c.value,e.input.focus(),e.input.addEventListener("click",e.stopPropagation),e.input.addEventListener("dblclick",e.stopPropagation),e.input.addEventListener("mouseup",e.stopPropagation),e.input.addEventListener("mousedown",e.stopPropagation),e.input.addEventListener("keydown",function(o){var r=c.columnIndex,l=c.rowIndex;if(27===o.keyCode)e.endEdit(!0),e.draw(!0);else if(13===o.keyCode&&(!e.attributes.multiLine||e.attributes.multiLine&&o.shiftKey))e.endEdit(),e.draw(!0);else if(9===o.keyCode){if(o.preventDefault(),!e.endEdit())return;r=o.shiftKey?n.left:n.right,n.left===t&&o.shiftKey&&(r=n.last,l-=1),n.right!==t||o.shiftKey||(r=n.first,l+=1),l<0&&(l=e.data.length-1),l>e.data.length-1&&(l=0),e.scrollIntoView(r,l),e.beginEditAt(r,l,o);}}),e.dispatchEvent("beginedit",{cell:c,input:e.input}));}}},e.createInlineStyle=function(t,o){var r={"canvas-datagrid-context-menu-filter-input":{height:"19px",verticalAlign:"bottom",marginLeft:"2px",padding:"0",background:e.style.contextFilterInputBackground,color:e.style.contextFilterInputColor,border:e.style.contextFilterInputBorder,borderRadius:e.style.contextFilterInputBorderRadius,lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextFilterInputFontFamily,fontSize:e.style.contextFilterInputFontSize},"canvas-datagrid-context-menu-filter-button":{height:"19px",verticalAlign:"bottom",marginLeft:"2px",padding:"0",background:e.style.contextMenuBackground,color:e.style.contextMenuColor,border:e.style.contextFilterButtonBorder,borderRadius:e.style.contextFilterButtonBorderRadius,lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextMenuFilterButtonFontFamily,fontSize:e.style.contextMenuFilterButtonFontSize},"canvas-datagrid-context-child-arrow":{cssFloat:"right",color:e.style.childContextMenuArrowColor,fontSize:e.style.contextMenuChildArrowFontSize,fontFamily:e.style.contextMenuFontFamily,verticalAlign:"middle"},"canvas-datagrid-autocomplete":{fontFamily:e.style.contextMenuFontFamily,fontSize:e.style.contextMenuFontSize,background:e.style.contextMenuBackground,color:e.style.contextMenuColor,border:e.style.contextMenuBorder,padding:e.style.contextMenuPadding,borderRadius:e.style.contextMenuBorderRadius,opacity:e.style.contextMenuOpacity,position:"absolute",zIndex:9999,overflow:"hidden"},"canvas-datagrid-autocomplete-item":{background:e.style.contextMenuBackground,color:e.style.contextMenuColor},"canvas-datagrid-autocomplete-item:hover":{background:e.style.contextMenuHoverBackground,color:e.style.contextMenuHoverColor},"canvas-datagrid-canvas":{position:"absolute",zIndex:"-1"},"canvas-datagrid":{display:"block"},"canvas-datagrid-control-input":{position:"fixed",top:"-5px",left:"-5px",border:"none",opacity:"0",cursor:"pointer",width:"1px",height:"1px",lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextMenuFontFamily,fontSize:e.style.contextMenuFontSize},"canvas-datagrid-edit-mobile-input":{boxSizing:"content-box",outline:"none",margin:"0",padding:"0 0 0 0",lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.mobileEditFontFamily,fontSize:e.style.mobileEditFontSize,border:e.style.editCellBorder,color:e.style.editCellColor,background:e.style.editCellBackgroundColor,appearance:"none",webkitAppearance:"none",mozAppearance:"none",borderRadius:"0"},"canvas-datagrid-edit-input":{boxSizing:"content-box",outline:"none",margin:"0",padding:"0 0 0 "+e.style.editCellPaddingLeft+"px",lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.editCellFontFamily,fontSize:e.style.editCellFontSize,boxShadow:e.style.editCellBoxShadow,border:e.style.editCellBorder,color:e.style.editCellColor,background:e.style.editCellBackgroundColor,appearance:"none",webkitAppearance:"none",mozAppearance:"none",borderRadius:"0"},"canvas-datagrid-context-menu-item-mobile":{lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextMenuFontFamily,fontSize:e.style.contextMenuFontSize,color:"inherit",background:"inherit",margin:e.style.contextMenuItemMargin,borderRadius:e.style.contextMenuItemBorderRadius,verticalAlign:"middle"},"canvas-datagrid-context-menu-item":{lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextMenuFontFamily,fontSize:e.style.contextMenuFontSize,color:"inherit",background:"inherit",margin:e.style.contextMenuItemMargin,borderRadius:e.style.contextMenuItemBorderRadius,verticalAlign:"middle"},"canvas-datagrid-context-menu-item:hover":{background:e.style.contextMenuHoverBackground,color:e.style.contextMenuHoverColor},"canvas-datagrid-context-menu-label":{margin:e.style.contextMenuLabelMargin,display:e.style.contextMenuLabelDisplay,minWidth:e.style.contextMenuLabelMinWidth,maxWidth:e.style.contextMenuLabelMaxWidth},"canvas-datagrid-context-menu-mobile":{lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextMenuFontFamily,fontSize:e.style.contextMenuFontSize,background:e.style.contextMenuBackground,color:e.style.contextMenuColor,border:e.style.contextMenuBorder,padding:e.style.contextMenuPadding,borderRadius:e.style.contextMenuBorderRadius,opacity:e.style.contextMenuOpacity,overflow:"hidden",whiteSpace:"nowrap"},"canvas-datagrid-context-menu":{lineHeight:"normal",fontWeight:"normal",fontFamily:e.style.contextMenuFontFamily,fontSize:e.style.contextMenuFontSize,background:e.style.contextMenuBackground,color:e.style.contextMenuColor,border:e.style.contextMenuBorder,padding:e.style.contextMenuPadding,borderRadius:e.style.contextMenuBorderRadius,opacity:e.style.contextMenuOpacity,overflow:"hidden",whiteSpace:"nowrap",cursor:e.style.contextMenuCursor},"canvas-datagrid-invalid-search-regExp":{background:e.style.contextMenuFilterInvalidExpresion}};r[o]&&Object.keys(r[o]).map(function(e){t.style[e]=r[o][e];});},e.appendTo=function(t){e.parentNode=t,e.setDom();},e.setDom=function(){e.isChildGrid?(e.parentGrid=e.parentNode.parentGrid,e.ctx=e.parentGrid.context,e.canvas=e.parentGrid.canvas,e.controlInput=e.parentGrid.controlInput,e.eventParent=e.canvas):(e.controlInput=e.controlInput||document.createElement("input"),e.controlInput.onblur=e.intf.blur,e.createInlineStyle(e.controlInput,"canvas-datagrid-control-input"),e.isChildGrid=!1,e.parentDOMNode=e.parentNode,e.parentIsCanvas=/^canvas$/i.test(e.parentDOMNode.tagName),e.parentIsCanvas?e.canvas=e.parentDOMNode:(e.canvas=document.createElement("canvas"),e.parentDOMNode.appendChild(e.canvas)),document.body.appendChild(e.controlInput),e.createInlineStyle(e.canvas,"canvas-datagrid"),e.ctx=e.canvas.getContext("2d"),e.ctx.textBaseline="alphabetic",e.eventParent=e.canvas),e.parentNodeStyle=e.canvas.style,e.controlInput.setAttribute("readonly",!0),e.controlInput.addEventListener("blur",function(t){t.target!==e.canvas&&(e.hasFocus=!1);}),e.eventParent.addEventListener("scroll",e.resize,!1),e.eventParent.addEventListener("touchstart",e.touchstart,!1),e.eventParent.addEventListener("mouseup",e.mouseup,!1),e.eventParent.addEventListener("mousedown",e.mousedown,!1),e.eventParent.addEventListener("dblclick",e.dblclick,!1),e.eventParent.addEventListener("click",e.click,!1),e.eventParent.addEventListener("mousemove",e.mousemove),e[e.isChildGrid?"parentGrid":"eventParent"].addEventListener("wheel",e.scrollWheel,!1),e.canvas.addEventListener("contextmenu",e.contextmenuEvent,!1),e.controlInput.addEventListener("copy",e.copy),e.controlInput.addEventListener("cut",e.cut),e.controlInput.addEventListener("paste",e.paste),e.controlInput.addEventListener("keypress",e.keypress,!1),e.controlInput.addEventListener("keyup",e.keyup,!1),e.controlInput.addEventListener("keydown",e.keydown,!1),window.addEventListener("resize",e.resize);};}}.apply(t,r))&&(e.exports=n);},function(e,t,o){var r,n;r=[],void 0!==(n=function(){return function(e){e.integerToAlpha=function(e){for(var t="a".charCodeAt(0),o="z".charCodeAt(0),r=o-t+1,n="";e>=0;)n=String.fromCharCode(e%r+t)+n,e=Math.floor(e/r)-1;return n},e.insertColumn=function(t,o){var r=e.getSchema();if(r.length<o)throw new Error("Index is beyond the length of the schema.");e.validateColumn(t,r),r.splice(o,0,t),e.data.forEach(function(o){e.applyDefaultValue(o,t);}),e.intf.schema=r;},e.deleteColumn=function(t){var o=e.getSchema();e.data.forEach(function(e){delete e[o[t].name];}),o.splice(t,1),e.intf.schema=o;},e.addColumn=function(t){var o=e.getSchema();e.validateColumn(t,o),o.push(t),e.data.forEach(function(o){e.applyDefaultValue(o,t);}),e.intf.schema=o;},e.deleteRow=function(t){e.originalData.splice(t,1),e.setFilter(),e.resize(!0);},e.insertRow=function(t,o){if(e.originalData.length<o)throw new Error("Index is beyond the length of the dataset.");e.originalData.splice(o,0,t),e.getSchema().forEach(function(r){void 0===t[r.name]&&e.applyDefaultValue(e.originalData[o],r);}),e.setFilter(),e.resize(!0);},e.addRow=function(t){e.originalData.push(t),e.getSchema().forEach(function(o){void 0===t[o.name]&&e.applyDefaultValue(e.originalData[e.originalData.length-1],o);}),e.setFilter(),e.resize(!0);},e.setRowHeight=function(t,o){e.sizes.rows[t]=o,e.draw(!0);},e.setColumnWidth=function(t,o){e.sizes.columns[t]=o,e.draw(!0);},e.resetColumnWidths=function(){e.sizes.columns={},e.draw(!0);},e.resetRowHeights=function(){e.sizes.rows={},e.draw(!0);},e.setFilter=function(t,o){void 0===t&&void 0===o?e.columnFilters={}:!t||""!==o&&void 0!==o?e.columnFilters[t]=o:delete e.columnFilters[t],e.applyDataTransforms();},e.findRowScrollTop=function(t){if(void 0===e.scrollCache.y[t])throw new RangeError("Row index out of range.");return e.scrollCache.y[t]},e.findColumnScrollLeft=function(t){var o=Math.max(t-1,0);if(void 0===e.scrollCache.x[o])throw new Error("Column index out of range.");return e.scrollCache.x[o]-e.getColummnWidth(e.orders.columns[t])},e.gotoCell=function(t,o,r,n){var l,i=void 0===t?void 0:e.findColumnScrollLeft(t),a=void 0===o?void 0:e.findRowScrollTop(o),s=e.scrollBox.width-(e.scrollBox.verticalBarVisible?e.style.scrollBarWidth:0),c=e.scrollBox.height-(e.scrollBox.horizontalBarVisible?e.style.scrollBarWidth:0);r=void 0===r?0:r,n=void 0===n?0:n,i-=s*r,a-=c*n,void 0!==t&&void 0!==o?(e.scrollBox.scrollTo(i,a),requestAnimationFrame(function(){(l=e.getVisibleCellByIndex(t,o))&&(i+=l.width*r,a+=l.height*n,e.scrollBox.scrollTo(i,a));})):void 0!==t?e.scrollBox.scrollLeft=i:void 0!==o&&(e.scrollBox.scrollTop=a);},e.gotoRow=function(t){e.gotoCell(0,t);},e.scrollIntoView=function(t,o,r,n){0===e.visibleCells.filter(function(r){return (r.rowIndex===o||void 0===o)&&(r.columnIndex===t||void 0===t)&&r.x>0&&r.y>0&&r.x+r.width<e.width&&r.y+r.height<e.height}).length&&e.gotoCell(t,o,r,n);},e.setActiveCell=function(t,o){t<0&&(t=0),o<0&&(o=0),e.activeCell={rowIndex:o,columnIndex:t};},e.selectNone=function(t){e.selections=[],e.dispatchEvent("selectionchanged",{selectedData:e.getSelectedData(),selections:e.selections,selectionBounds:e.selectionBounds}),t||e.draw();},e.selectAll=function(t){e.selectArea({top:0,left:-1,right:e.getSchema().length-1,bottom:e.data.length-1}),t||e.draw();},e.isColumnSelected=function(t){var o=!0;return e.data.forEach(function(r,n){e.selections[n]&&-1!==e.selections[n].indexOf(e.orders.columns[t])||(o=!1);}),o},e.forEachSelectedCell=function(t,o){var r=[],n=o?e.getSchema():e.getVisibleSchema(),l=e.data.length;e.selections.forEach(function(o,i){if(i!==l){if(0===o.length)return void(r[i]=null);r[i]={},o.forEach(function(o){-1!==o&&n[o]&&t(e.data,i,n[o].name);});}});},e.selectColumn=function(t,o,r,n){function l(t){e.data.forEach(function(o,r){e.selections[r]=e.selections[r]||[],-1===e.selections[r].indexOf(t)&&e.selections[r].push(t);});}var i,a,s;if(r){if(!e.activeCell)return;for(i=Math.min(e.activeCell.columnIndex,t),a=Math.max(e.activeCell.columnIndex,t),s=i;a>s;s+=1)l(s);}o||r||(e.selections=[],e.activeCell.columnIndex=t,e.activeCell.rowIndex=e.scrollIndexTop),o&&e.isColumnSelected(t)?function(t){e.data.forEach(function(o,r){e.selections[r]=e.selections[r]||[],-1!==e.selections[r].indexOf(t)&&e.selections[r].splice(e.selections[r].indexOf(t),1);});}(t):l(t),n||e.dispatchEvent("selectionchanged",{selectedData:e.getSelectedData(),selections:e.selections,selectionBounds:e.getSelectionBounds()});},e.selectRow=function(t,o,r,n){function l(){n||e.dispatchEvent("selectionchanged",{selectedData:e.getSelectedData(),selections:e.selections,selectionBounds:e.selectionBounds});}function i(t){e.selections[t]=[],e.selections[t].push(-1),d.forEach(function(o,r){e.selections[t].push(e.orders.columns.indexOf(o.index));});}var a,s,c,d=e.getVisibleSchema();if((!1===e.dragAddToSelection||void 0===e.dragObject)&&e.selections[t]&&e.selections[t].length-1===d.length&&o)return e.selections[t]=[],void l();if(!0===e.dragAddToSelection||void 0===e.dragObject)if(r&&void 0===e.dragObject){if(!e.activeCell)return;for(s=Math.min(e.activeCell.rowIndex,t),c=Math.max(e.activeCell.rowIndex,t),a=s;c>=a;a+=1)i(a);}else i(t);l();},e.collapseTree=function(t){e.dispatchEvent("collapsetree",{childGrid:e.childGrids[t],data:e.data[t],rowIndex:t}),e.openChildren[t].blur(),e.openChildren[t].dispose(),delete e.openChildren[t],delete e.sizes.trees[t],delete e.childGrids[t],e.dispatchEvent("resizerow",{cellHeight:e.style.cellHeight}),e.resize(!0),e.draw(!0);},e.expandTree=function(t){var o,r=e.args.treeGridAttributes||{},n=e.getColumnHeaderCellHeight(),l=e.sizes.columns.cornerCell||e.style.rowHeaderCellWidth,i=e.sizes.trees[t]||e.style.treeGridHeight;e.childGrids[t]||(r.debug=e.attributes.debug,r.name=e.attributes.saveAppearance?e.attributes.name+"tree"+t:void 0,r.style=r.style||e.style,r.parentNode={parentGrid:e.intf,nodeType:"canvas-datagrid-tree",offsetHeight:i,offsetWidth:e.width-l,header:{width:e.width-l},offsetLeft:l,offsetTop:n,offsetParent:e.intf.parentNode,parentNode:e.intf.parentNode,style:"tree",data:e.data[t]},o=e.createGrid(r),e.childGrids[t]=o),o=e.childGrids[t],o.visible=!0,e.dispatchEvent("expandtree",{treeGrid:o,data:e.data[t],rowIndex:t}),e.openChildren[t]=o,e.sizes.trees[t]=i,e.dispatchEvent("resizerow",{height:e.style.cellHeight}),e.resize(!0);},e.toggleTree=function(t){if(e.openChildren[t])return e.collapseTree(t);e.expandTree(t);},e.getHeaderByName=function(t){var o,r=e.getSchema();for(o=0;o<r.length;o+=1)if(r[o].name===t)return r[o]},e.fitColumnToValues=function(t,o){e.canvas&&(e.sizes.columns["cornerCell"===t?-1:e.getHeaderByName(t).index]=Math.max(e.findColumnMaxTextLength(t),e.style.minColumnWidth),o||(e.resize(),e.draw(!0)));},e.isCellVisible=function(t,o){if(void 0!==o)return e.visibleCells.filter(function(e){return e.columnIndex===t&&e.rowIndex===o}).length>0;var r,n=e.visibleCells.length;for(r=0;r<n;r+=1)if(t.x===e.visibleCells[r].x&&t.y===e.visibleCells[r].y)return !0;return !1},e.order=function(t,o,r,n){var l,i=e.getSchema().filter(function(e){return e.name===t});if(!e.dispatchEvent("beforesortcolumn",{name:t,direction:o})&&(e.orderBy=t,e.orderDirection=o,e.data&&0!==e.data.length)){if(0===i.length)throw new Error("Cannot sort.  No such column name");l=r||i[0].sorter||e.sorters[i[0].type],l||void 0===i[0].type||console.warn('Cannot sort type "%s" falling back to string sort.',i[0].type),e.orderings.add(t,o,"function"==typeof l?l:e.sorters.string),e.orderings.sort(),e.dispatchEvent("sortcolumn",{name:t,direction:o}),e.draw(!0),n||e.setStorageData();}},e.isInGrid=function(t){return !(t.x<0||t.x>e.width||t.y<0||t.y>e.height)},e.moveSelection=function(t,o){var r=[];e.selections.forEach(function(e,n){r[n+o]=[],e.forEach(function(e){r[n+o].push(e+t);});}),e.selections=r;},e.moveTo=function(t,o,r){var n,l=e.getSelectedData(),i=e.getVisibleSchema(),a=t.length,s=-1/0,c=1/0,d=r-1;t.forEach(function(t,r){r!==a&&0!==t.length&&(c=Math.min(e.getVisibleColumnIndexOf(o),c),s=Math.max(s,t.length),t.forEach(function(t){t=e.getVisibleColumnIndexOf(t),i[t]&&(e.data[r]||(e.data[r]={}),e.data[r][i[t].name]=null);}));}),t.forEach(function(t,r){var a;d+=1,n=e.getVisibleColumnIndexOf(o),t.forEach(function(t,o){t=e.getVisibleColumnIndexOf(t),o>0&&(n+=t-a),a=t,-1===t||!i[n]||!i[t]||e.data.length-1<d||d<0||(e.data[d]||(e.data[d]={}),e.data[d][i[n].name]=l[r][i[t].name]);});});},e.isColumnVisible=function(t){return e.visibleCells.filter(function(e){return e.columnIndex===t}).length>0},e.isRowVisible=function(t){return e.visibleCells.filter(function(e){return e.rowIndex===t}).length>0},e.getVisibleCellByIndex=function(t,o){return e.visibleCells.filter(function(e){return e.columnIndex===t&&e.rowIndex===o})[0]},e.getCellAt=function(t,o,r){if(e.visibleCells){var n,l,i,a,s,c=r?e.attributes.touchScrollZone:0,d="move"===e.attributes.borderDragBehavior,u=e.visibleCells.length,h=d?e.cursorGrab:"ew-resize",f=d?e.cursorGrab:"ns-resize";if(e.visibleCells&&e.visibleCells.length){if(e.hasFocus=!0,!(o<e.height&&o>0&&t<e.width&&t>0))return e.hasFocus=!1,{dragContext:"inherit",context:"inherit"};for(l=0;l<u;l+=1)if(a=e.visibleCells[l],s={x:a.x,y:a.y,height:a.height,width:a.width},r&&/(vertical|horizontal)-scroll-/.test(a.style)&&(s.x-=c,s.y-=c,s.height+=c,s.width+=c),s.x-e.style.cellBorderWidth<t&&s.x+s.width+e.style.cellBorderWidth>t&&s.y-e.style.cellBorderWidth<o&&s.y+s.height+e.style.cellBorderWidth>o){if(/frozen-row-marker/.test(a.style))return a.dragContext=a.style,a.context="row-resize",a;if(/frozen-column-marker/.test(a.style))return a.dragContext=a.style,a.context="col-resize",a;if(/selection-handle-/.test(a.style))return a.dragContext=a.style,a.context="crosshair",a;if(/vertical-scroll-(bar|box)/.test(a.style))return a.dragContext="vertical-scroll-box",a.context="vertical-scroll-box",a.isScrollBar=!0,a.isVerticalScrollBar=!0,o>e.scrollBox.box.v.y+e.scrollBox.scrollBoxHeight?(a.dragContext="vertical-scroll-bottom",a.context="vertical-scroll-bottom"):o<e.scrollBox.box.v.y&&(a.dragContext="vertical-scroll-top",a.context="vertical-scroll-top"),e.cursor="default",a;if(/horizontal-scroll-(bar|box)/.test(a.style))return a.dragContext="horizontal-scroll-box",a.context="horizontal-scroll-box",a.isScrollBar=!0,a.isHorizontalScrollBar=!0,t>e.scrollBox.box.h.x+e.scrollBox.scrollBoxWidth?(a.dragContext="horizontal-scroll-right",a.context="horizontal-scroll-right"):t<e.scrollBox.box.h.x&&(a.dragContext="horizontal-scroll-left",a.context="horizontal-scroll-left"),e.cursor="default",a;if(n=function(r){return r.x+r.width-.4*e.attributes.borderResizeZone<t&&r.x+r.width+.6*e.attributes.borderResizeZone>t?"r":r.x-.4*e.attributes.borderResizeZone<t&&r.x+.6*e.attributes.borderResizeZone>t?"l":r.y+r.height-.4*e.attributes.borderResizeZone<o&&r.y+r.height+.6*e.attributes.borderResizeZone>o?"b":r.y-.4*e.attributes.borderResizeZone<o&&r.y+.6*e.attributes.borderResizeZone>o?"t":void 0}(s),i=d&&a.selectionBorder&&-1!==a.selectionBorder.indexOf(n),-1!==["l","r"].indexOf(n)&&(e.attributes.allowColumnResize||i)&&(e.attributes.allowColumnResizeFromCell&&a.isNormal||!a.isNormal||i)&&(e.attributes.allowRowHeaderResize&&(a.isRowHeader||a.isCorner)||!a.isRowHeader||!a.isCorner)){if((a.isColumnHeader||a.isCorner||e.attributes.allowColumnResizeFromCell&&a.isNormal)&&"r"===n)return a.context="ew-resize",a.dragContext="ew-resize",a;if(!a.isColumnHeader&&!a.isCorner&&i)return a.context=h,a.dragContext=n+"-move",a}if(-1!==["t","b"].indexOf(n)&&a.rowIndex>-1&&(e.attributes.allowRowResize||i)&&(e.attributes.allowRowResizeFromCell&&a.isNormal||!a.isNormal||i)&&!a.isColumnHeader){if((a.isRowHeader||a.isCorner||e.attributes.allowRowResizeFromCell&&a.isNormal)&&"b"===n)return a.context="ns-resize",a.dragContext="ns-resize",a;if(!a.isRowHeader&&!a.isCorner&&i)return a.context=f,a.dragContext=n+"-move",a}return "columnHeaderCell"===a.style?(a.context="cell",a.dragContext="column-reorder",a):"rowHeaderCell"===a.style?(e.attributes.rowGrabZoneSize+(a.y-e.style.cellBorderWidth)<o||!e.attributes.allowRowReordering?(a.dragContext="cell",a.context="cell"):(a.context=e.cursorGrab,a.dragContext="row-reorder"),a):a.isGrid?(e.hasFocus=!1,a.dragContext="cell-grid",a.context="cell-grid",a):"tree-grid"===a.style?(e.hasFocus=!1,a.dragContext="tree",a.context="tree",a):(a.dragContext="cell",a.context="cell",a)}return e.hasFocus=!0,e.cursor="default",{dragContext:"background",context:"background",style:"background",isBackground:!0}}}},e.getSelectionBounds=function(){var t={x:1/0,y:1/0},o={x:-1/0,y:-1/0};return e.selections.forEach(function(e,r){var n,l;t.y=r<t.y?r:t.y,o.y=r>o.y?r:o.y,n=Math.max.apply(null,e),l=Math.min.apply(null,e),t.x=l<t.x?l:t.x,o.x=n>o.x?n:o.x;}),{top:t.y,left:t.x,bottom:o.y,right:o.x}},e.getSchemaFromData=function(t){return t=t||e.data,Object.keys(t[0]||{" ":""}).map(function(o,r){var n=e.getBestGuessDataType(o,t),l={name:o,title:isNaN(parseInt(o,10))?o:e.integerToAlpha(o).toUpperCase(),index:r,type:n,filter:e.filter(n)};return e.storedSettings&&e.storedSettings.visibility&&void 0!==e.storedSettings.visibility[l.name]&&(l.hidden=!e.storedSettings.visibility[l.name]),l})},e.clearChangeLog=function(){e.changes=[];},e.selectArea=function(t,o){e.selectionBounds=t||e.selectionBounds;var r,n,l,i=e.getSchema();if(o||(e.selections=[]),e.selectionBounds.top<-1||e.selectionBounds.bottom>e.data.length||e.selectionBounds.left<-1||e.selectionBounds.right>i.length)throw new Error("Impossible selection area");for(n=e.selectionBounds.top;n<=e.selectionBounds.bottom;n+=1)for(e.selections[n]=[],l=e.selectionBounds.left;l<=e.selectionBounds.right;l+=1)-1===e.selections[n].indexOf(l)&&e.selections[n].push(l);r={selections:e.selections,selectionBounds:e.selectionBounds},Object.defineProperty(r,"selectedData",{get:function(){return e.getSelectedData()}}),e.dispatchEvent("selectionchanged",r);},e.findColumnMaxTextLength=function(t){var o=-1/0;return "cornerCell"===t?(e.ctx.font=e.style.rowHeaderCellFont,e.ctx.measureText((e.data.length+(e.attributes.showNewRow?1:0)).toString()).width+e.style.autosizePadding+e.style.autosizeHeaderCellPadding+e.style.rowHeaderCellPaddingRight+e.style.rowHeaderCellPaddingLeft+(e.attributes.tree?e.style.treeArrowWidth+e.style.treeArrowMarginLeft+e.style.treeArrowMarginRight:0)):(e.getSchema().forEach(function(r){if(r.name===t){e.ctx.font=e.style.columnHeaderCellFont;var n=e.ctx.measureText(r.title||r.name).width+e.style.headerCellPaddingRight+e.style.headerCellPaddingLeft;o=n>o?n:o;}}),e.data.forEach(function(r){e.ctx.font=e.style.cellFont;var n=e.ctx.measureText(r[t]).width+e.style.cellPaddingRight+e.style.cellPaddingLeft+e.style.cellAutoResizePadding;o=n>o?n:o;}),o)},e.getHeaderWidth=function(){return e.getVisibleSchema().reduce(function(t,o){return t+(o.width||e.style.cellWidth)},0)},e.getRowHeight=function(t){return (e.sizes.rows[t]||e.style.cellHeight)*e.scale},e.getColummnWidth=function(t){return (e.sizes.columns[t]||e.getSchema()[t].width||e.style.cellWidth)*e.scale},e.formatters.string=function(e){return void 0!==e.cell.value?e.cell.value:""},e.formatters.rowHeaderCell=e.formatters.string,e.formatters.headerCell=e.formatters.string,e.formatters.number=e.formatters.string,e.formatters.int=e.formatters.string,e.formatters.html=e.formatters.string,e.sorters.string=function(e,t){var o="asc"===t;return function(t,r){return void 0===t[e]||null===t[e]?1:void 0===r[e]||null===r[e]?0:o?t[e].localeCompare?t[e].localeCompare(r[e]):1:r[e].localeCompare?r[e].localeCompare(t[e]):1}},e.sorters.number=function(e,t){var o="asc"===t;return function(t,r){return o?t[e]-r[e]:r[e]-t[e]}},e.sorters.date=function(e,t){var o="asc"===t;return function(t,r){return o?new Date(t[e]).getTime()-new Date(r[e]).getTime():new Date(r[e]).getTime()-new Date(t[e]).getTime()}};}}.apply(t,r))&&(e.exports=n);}])});

    });

    var canvasDatagrid$1 = unwrapExports(canvasDatagrid);
    var canvasDatagrid_1 = canvasDatagrid.canvasDatagrid;

    var collectionUtils = createCommonjsModule(function (module) {

    var utils = module.exports = {};

    /**
     * Loops through the collection and calls the callback for each element. if the callback returns truthy, the loop is broken and returns the same value.
     * @public
     * @param {*} collection The collection to loop through. Needs to have a length property set and have indices set from 0 to length - 1.
     * @param {function} callback The callback to be called for each element. The element will be given as a parameter to the callback. If this callback returns truthy, the loop is broken and the same value is returned.
     * @returns {*} The value that a callback has returned (if truthy). Otherwise nothing.
     */
    utils.forEach = function(collection, callback) {
        for(var i = 0; i < collection.length; i++) {
            var result = callback(collection[i]);
            if(result) {
                return result;
            }
        }
    };
    });

    var elementUtils = function(options) {
        var getState = options.stateHandler.getState;

        /**
         * Tells if the element has been made detectable and ready to be listened for resize events.
         * @public
         * @param {element} The element to check.
         * @returns {boolean} True or false depending on if the element is detectable or not.
         */
        function isDetectable(element) {
            var state = getState(element);
            return state && !!state.isDetectable;
        }

        /**
         * Marks the element that it has been made detectable and ready to be listened for resize events.
         * @public
         * @param {element} The element to mark.
         */
        function markAsDetectable(element) {
            getState(element).isDetectable = true;
        }

        /**
         * Tells if the element is busy or not.
         * @public
         * @param {element} The element to check.
         * @returns {boolean} True or false depending on if the element is busy or not.
         */
        function isBusy(element) {
            return !!getState(element).busy;
        }

        /**
         * Marks the object is busy and should not be made detectable.
         * @public
         * @param {element} element The element to mark.
         * @param {boolean} busy If the element is busy or not.
         */
        function markBusy(element, busy) {
            getState(element).busy = !!busy;
        }

        return {
            isDetectable: isDetectable,
            markAsDetectable: markAsDetectable,
            isBusy: isBusy,
            markBusy: markBusy
        };
    };

    var listenerHandler = function(idHandler) {
        var eventListeners = {};

        /**
         * Gets all listeners for the given element.
         * @public
         * @param {element} element The element to get all listeners for.
         * @returns All listeners for the given element.
         */
        function getListeners(element) {
            var id = idHandler.get(element);

            if (id === undefined) {
                return [];
            }

            return eventListeners[id] || [];
        }

        /**
         * Stores the given listener for the given element. Will not actually add the listener to the element.
         * @public
         * @param {element} element The element that should have the listener added.
         * @param {function} listener The callback that the element has added.
         */
        function addListener(element, listener) {
            var id = idHandler.get(element);

            if(!eventListeners[id]) {
                eventListeners[id] = [];
            }

            eventListeners[id].push(listener);
        }

        function removeListener(element, listener) {
            var listeners = getListeners(element);
            for (var i = 0, len = listeners.length; i < len; ++i) {
                if (listeners[i] === listener) {
                  listeners.splice(i, 1);
                  break;
                }
            }
        }

        function removeAllListeners(element) {
          var listeners = getListeners(element);
          if (!listeners) { return; }
          listeners.length = 0;
        }

        return {
            get: getListeners,
            add: addListener,
            removeListener: removeListener,
            removeAllListeners: removeAllListeners
        };
    };

    var idGenerator = function() {
        var idCount = 1;

        /**
         * Generates a new unique id in the context.
         * @public
         * @returns {number} A unique id in the context.
         */
        function generate() {
            return idCount++;
        }

        return {
            generate: generate
        };
    };

    var idHandler = function(options) {
        var idGenerator     = options.idGenerator;
        var getState        = options.stateHandler.getState;

        /**
         * Gets the resize detector id of the element.
         * @public
         * @param {element} element The target element to get the id of.
         * @returns {string|number|null} The id of the element. Null if it has no id.
         */
        function getId(element) {
            var state = getState(element);

            if (state && state.id !== undefined) {
                return state.id;
            }

            return null;
        }

        /**
         * Sets the resize detector id of the element. Requires the element to have a resize detector state initialized.
         * @public
         * @param {element} element The target element to set the id of.
         * @returns {string|number|null} The id of the element.
         */
        function setId(element) {
            var state = getState(element);

            if (!state) {
                throw new Error("setId required the element to have a resize detection state.");
            }

            var id = idGenerator.generate();

            state.id = id;

            return id;
        }

        return {
            get: getId,
            set: setId
        };
    };

    /* global console: false */

    /**
     * Reporter that handles the reporting of logs, warnings and errors.
     * @public
     * @param {boolean} quiet Tells if the reporter should be quiet or not.
     */
    var reporter = function(quiet) {
        function noop() {
            //Does nothing.
        }

        var reporter = {
            log: noop,
            warn: noop,
            error: noop
        };

        if(!quiet && window.console) {
            var attachFunction = function(reporter, name) {
                //The proxy is needed to be able to call the method with the console context,
                //since we cannot use bind.
                reporter[name] = function reporterProxy() {
                    var f = console[name];
                    if (f.apply) { //IE9 does not support console.log.apply :)
                        f.apply(console, arguments);
                    } else {
                        for (var i = 0; i < arguments.length; i++) {
                            f(arguments[i]);
                        }
                    }
                };
            };

            attachFunction(reporter, "log");
            attachFunction(reporter, "warn");
            attachFunction(reporter, "error");
        }

        return reporter;
    };

    var browserDetector = createCommonjsModule(function (module) {

    var detector = module.exports = {};

    detector.isIE = function(version) {
        function isAnyIeVersion() {
            var agent = navigator.userAgent.toLowerCase();
            return agent.indexOf("msie") !== -1 || agent.indexOf("trident") !== -1 || agent.indexOf(" edge/") !== -1;
        }

        if(!isAnyIeVersion()) {
            return false;
        }

        if(!version) {
            return true;
        }

        //Shamelessly stolen from https://gist.github.com/padolsey/527683
        var ieVersion = (function(){
            var undef,
                v = 3,
                div = document.createElement("div"),
                all = div.getElementsByTagName("i");

            do {
                div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->";
            }
            while (all[0]);

            return v > 4 ? v : undef;
        }());

        return version === ieVersion;
    };

    detector.isLegacyOpera = function() {
        return !!window.opera;
    };
    });

    var utils_1$1 = createCommonjsModule(function (module) {

    var utils = module.exports = {};

    utils.getOption = getOption;

    function getOption(options, name, defaultValue) {
        var value = options[name];

        if((value === undefined || value === null) && defaultValue !== undefined) {
            return defaultValue;
        }

        return value;
    }
    });

    var batchProcessor = function batchProcessorMaker(options) {
        options             = options || {};
        var reporter        = options.reporter;
        var asyncProcess    = utils_1$1.getOption(options, "async", true);
        var autoProcess     = utils_1$1.getOption(options, "auto", true);

        if(autoProcess && !asyncProcess) {
            reporter && reporter.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true.");
            asyncProcess = true;
        }

        var batch = Batch();
        var asyncFrameHandler;
        var isProcessing = false;

        function addFunction(level, fn) {
            if(!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {
                // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.
                // This needs to be done before, since we're checking the size of the batch to be 0.
                processBatchAsync();
            }

            batch.add(level, fn);
        }

        function processBatch() {
            // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.
            // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).
            isProcessing = true;
            while (batch.size()) {
                var processingBatch = batch;
                batch = Batch();
                processingBatch.process();
            }
            isProcessing = false;
        }

        function forceProcessBatch(localAsyncProcess) {
            if (isProcessing) {
                return;
            }

            if(localAsyncProcess === undefined) {
                localAsyncProcess = asyncProcess;
            }

            if(asyncFrameHandler) {
                cancelFrame(asyncFrameHandler);
                asyncFrameHandler = null;
            }

            if(localAsyncProcess) {
                processBatchAsync();
            } else {
                processBatch();
            }
        }

        function processBatchAsync() {
            asyncFrameHandler = requestFrame(processBatch);
        }

        function cancelFrame(listener) {
            // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
            var cancel = clearTimeout;
            return cancel(listener);
        }

        function requestFrame(callback) {
            // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };
            var raf = function(fn) { return setTimeout(fn, 0); };
            return raf(callback);
        }

        return {
            add: addFunction,
            force: forceProcessBatch
        };
    };

    function Batch() {
        var batch       = {};
        var size        = 0;
        var topLevel    = 0;
        var bottomLevel = 0;

        function add(level, fn) {
            if(!fn) {
                fn = level;
                level = 0;
            }

            if(level > topLevel) {
                topLevel = level;
            } else if(level < bottomLevel) {
                bottomLevel = level;
            }

            if(!batch[level]) {
                batch[level] = [];
            }

            batch[level].push(fn);
            size++;
        }

        function process() {
            for(var level = bottomLevel; level <= topLevel; level++) {
                var fns = batch[level];

                for(var i = 0; i < fns.length; i++) {
                    var fn = fns[i];
                    fn();
                }
            }
        }

        function getSize() {
            return size;
        }

        return {
            add: add,
            process: process,
            size: getSize
        };
    }

    var prop$1 = "_erd";

    function initState(element) {
        element[prop$1] = {};
        return getState(element);
    }

    function getState(element) {
        return element[prop$1];
    }

    function cleanState(element) {
        delete element[prop$1];
    }

    var stateHandler = {
        initState: initState,
        getState: getState,
        cleanState: cleanState
    };

    var object$1 = function(options) {
        options             = options || {};
        var reporter        = options.reporter;
        var batchProcessor  = options.batchProcessor;
        var getState        = options.stateHandler.getState;

        if(!reporter) {
            throw new Error("Missing required dependency: reporter.");
        }

        /**
         * Adds a resize event listener to the element.
         * @public
         * @param {element} element The element that should have the listener added.
         * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
         */
        function addListener(element, listener) {
            function listenerProxy() {
                listener(element);
            }

            if(browserDetector.isIE(8)) {
                //IE 8 does not support object, but supports the resize event directly on elements.
                getState(element).object = {
                    proxy: listenerProxy
                };
                element.attachEvent("onresize", listenerProxy);
            } else {
                var object = getObject(element);

                if(!object) {
                    throw new Error("Element is not detectable by this strategy.");
                }

                object.contentDocument.defaultView.addEventListener("resize", listenerProxy);
            }
        }

        function buildCssTextString(rules) {
            var seperator = options.important ? " !important; " : "; ";

            return (rules.join(seperator) + seperator).trim();
        }

        /**
         * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
         * @private
         * @param {object} options Optional options object.
         * @param {element} element The element to make detectable
         * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
         */
        function makeDetectable(options, element, callback) {
            if (!callback) {
                callback = element;
                element = options;
                options = null;
            }

            options = options || {};
            var debug = options.debug;

            function injectObject(element, callback) {
                var OBJECT_STYLE = buildCssTextString(["display: block", "position: absolute", "top: 0", "left: 0", "width: 100%", "height: 100%", "border: none", "padding: 0", "margin: 0", "opacity: 0", "z-index: -1000", "pointer-events: none"]);

                //The target element needs to be positioned (everything except static) so the absolute positioned object will be positioned relative to the target element.

                // Position altering may be performed directly or on object load, depending on if style resolution is possible directly or not.
                var positionCheckPerformed = false;

                // The element may not yet be attached to the DOM, and therefore the style object may be empty in some browsers.
                // Since the style object is a reference, it will be updated as soon as the element is attached to the DOM.
                var style = window.getComputedStyle(element);
                var width = element.offsetWidth;
                var height = element.offsetHeight;

                getState(element).startSize = {
                    width: width,
                    height: height
                };

                function mutateDom() {
                    function alterPositionStyles() {
                        if(style.position === "static") {
                            element.style.setProperty("position", "relative", options.important ? "important" : "");

                            var removeRelativeStyles = function(reporter, element, style, property) {
                                function getNumericalValue(value) {
                                    return value.replace(/[^-\d\.]/g, "");
                                }

                                var value = style[property];

                                if(value !== "auto" && getNumericalValue(value) !== "0") {
                                    reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                                    element.style.setProperty(property, "0", options.important ? "important" : "");
                                }
                            };

                            //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
                            //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
                            removeRelativeStyles(reporter, element, style, "top");
                            removeRelativeStyles(reporter, element, style, "right");
                            removeRelativeStyles(reporter, element, style, "bottom");
                            removeRelativeStyles(reporter, element, style, "left");
                        }
                    }

                    function onObjectLoad() {
                        // The object has been loaded, which means that the element now is guaranteed to be attached to the DOM.
                        if (!positionCheckPerformed) {
                            alterPositionStyles();
                        }

                        /*jshint validthis: true */

                        function getDocument(element, callback) {
                            //Opera 12 seem to call the object.onload before the actual document has been created.
                            //So if it is not present, poll it with an timeout until it is present.
                            //TODO: Could maybe be handled better with object.onreadystatechange or similar.
                            if(!element.contentDocument) {
                                var state = getState(element);
                                if (state.checkForObjectDocumentTimeoutId) {
                                    window.clearTimeout(state.checkForObjectDocumentTimeoutId);
                                }
                                state.checkForObjectDocumentTimeoutId = setTimeout(function checkForObjectDocument() {
                                    state.checkForObjectDocumentTimeoutId = 0;
                                    getDocument(element, callback);
                                }, 100);

                                return;
                            }

                            callback(element.contentDocument);
                        }

                        //Mutating the object element here seems to fire another load event.
                        //Mutating the inner document of the object element is fine though.
                        var objectElement = this;

                        //Create the style element to be added to the object.
                        getDocument(objectElement, function onObjectDocumentReady(objectDocument) {
                            //Notify that the element is ready to be listened to.
                            callback(element);
                        });
                    }

                    // The element may be detached from the DOM, and some browsers does not support style resolving of detached elements.
                    // The alterPositionStyles needs to be delayed until we know the element has been attached to the DOM (which we are sure of when the onObjectLoad has been fired), if style resolution is not possible.
                    if (style.position !== "") {
                        alterPositionStyles();
                        positionCheckPerformed = true;
                    }

                    //Add an object element as a child to the target element that will be listened to for resize events.
                    var object = document.createElement("object");
                    object.style.cssText = OBJECT_STYLE;
                    object.tabIndex = -1;
                    object.type = "text/html";
                    object.setAttribute("aria-hidden", "true");
                    object.onload = onObjectLoad;

                    //Safari: This must occur before adding the object to the DOM.
                    //IE: Does not like that this happens before, even if it is also added after.
                    if(!browserDetector.isIE()) {
                        object.data = "about:blank";
                    }

                    if (!getState(element)) {
                        // The element has been uninstalled before the actual loading happened.
                        return;
                    }

                    element.appendChild(object);
                    getState(element).object = object;

                    //IE: This must occur after adding the object to the DOM.
                    if(browserDetector.isIE()) {
                        object.data = "about:blank";
                    }
                }

                if(batchProcessor) {
                    batchProcessor.add(mutateDom);
                } else {
                    mutateDom();
                }
            }

            if(browserDetector.isIE(8)) {
                //IE 8 does not support objects properly. Luckily they do support the resize event.
                //So do not inject the object and notify that the element is already ready to be listened to.
                //The event handler for the resize event is attached in the utils.addListener instead.
                callback(element);
            } else {
                injectObject(element, callback);
            }
        }

        /**
         * Returns the child object of the target element.
         * @private
         * @param {element} element The target element.
         * @returns The object element of the target.
         */
        function getObject(element) {
            return getState(element).object;
        }

        function uninstall(element) {
            if (!getState(element)) {
                return;
            }

            var object = getObject(element);

            if (!object) {
                return;
            }

            if (browserDetector.isIE(8)) {
                element.detachEvent("onresize", object.proxy);
            } else {
                element.removeChild(object);
            }

            if (getState(element).checkForObjectDocumentTimeoutId) {
                window.clearTimeout(getState(element).checkForObjectDocumentTimeoutId);
            }

            delete getState(element).object;
        }

        return {
            makeDetectable: makeDetectable,
            addListener: addListener,
            uninstall: uninstall
        };
    };

    var forEach = collectionUtils.forEach;

    var scroll = function(options) {
        options             = options || {};
        var reporter        = options.reporter;
        var batchProcessor  = options.batchProcessor;
        var getState        = options.stateHandler.getState;
        var hasState        = options.stateHandler.hasState;
        var idHandler       = options.idHandler;

        if (!batchProcessor) {
            throw new Error("Missing required dependency: batchProcessor");
        }

        if (!reporter) {
            throw new Error("Missing required dependency: reporter.");
        }

        //TODO: Could this perhaps be done at installation time?
        var scrollbarSizes = getScrollbarSizes();

        var styleId = "erd_scroll_detection_scrollbar_style";
        var detectionContainerClass = "erd_scroll_detection_container";

        function initDocument(targetDocument) {
            // Inject the scrollbar styling that prevents them from appearing sometimes in Chrome.
            // The injected container needs to have a class, so that it may be styled with CSS (pseudo elements).
            injectScrollStyle(targetDocument, styleId, detectionContainerClass);
        }

        initDocument(window.document);

        function buildCssTextString(rules) {
            var seperator = options.important ? " !important; " : "; ";

            return (rules.join(seperator) + seperator).trim();
        }

        function getScrollbarSizes() {
            var width = 500;
            var height = 500;

            var child = document.createElement("div");
            child.style.cssText = buildCssTextString(["position: absolute", "width: " + width*2 + "px", "height: " + height*2 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);

            var container = document.createElement("div");
            container.style.cssText = buildCssTextString(["position: absolute", "width: " + width + "px", "height: " + height + "px", "overflow: scroll", "visibility: none", "top: " + -width*3 + "px", "left: " + -height*3 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);

            container.appendChild(child);

            document.body.insertBefore(container, document.body.firstChild);

            var widthSize = width - container.clientWidth;
            var heightSize = height - container.clientHeight;

            document.body.removeChild(container);

            return {
                width: widthSize,
                height: heightSize
            };
        }

        function injectScrollStyle(targetDocument, styleId, containerClass) {
            function injectStyle(style, method) {
                method = method || function (element) {
                    targetDocument.head.appendChild(element);
                };

                var styleElement = targetDocument.createElement("style");
                styleElement.innerHTML = style;
                styleElement.id = styleId;
                method(styleElement);
                return styleElement;
            }

            if (!targetDocument.getElementById(styleId)) {
                var containerAnimationClass = containerClass + "_animation";
                var containerAnimationActiveClass = containerClass + "_animation_active";
                var style = "/* Created by the element-resize-detector library. */\n";
                style += "." + containerClass + " > div::-webkit-scrollbar { " + buildCssTextString(["display: none"]) + " }\n\n";
                style += "." + containerAnimationActiveClass + " { " + buildCssTextString(["-webkit-animation-duration: 0.1s", "animation-duration: 0.1s", "-webkit-animation-name: " + containerAnimationClass, "animation-name: " + containerAnimationClass]) + " }\n";
                style += "@-webkit-keyframes " + containerAnimationClass +  " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n";
                style += "@keyframes " + containerAnimationClass +          " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }";
                injectStyle(style);
            }
        }

        function addAnimationClass(element) {
            element.className += " " + detectionContainerClass + "_animation_active";
        }

        function addEvent(el, name, cb) {
            if (el.addEventListener) {
                el.addEventListener(name, cb);
            } else if(el.attachEvent) {
                el.attachEvent("on" + name, cb);
            } else {
                return reporter.error("[scroll] Don't know how to add event listeners.");
            }
        }

        function removeEvent(el, name, cb) {
            if (el.removeEventListener) {
                el.removeEventListener(name, cb);
            } else if(el.detachEvent) {
                el.detachEvent("on" + name, cb);
            } else {
                return reporter.error("[scroll] Don't know how to remove event listeners.");
            }
        }

        function getExpandElement(element) {
            return getState(element).container.childNodes[0].childNodes[0].childNodes[0];
        }

        function getShrinkElement(element) {
            return getState(element).container.childNodes[0].childNodes[0].childNodes[1];
        }

        /**
         * Adds a resize event listener to the element.
         * @public
         * @param {element} element The element that should have the listener added.
         * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
         */
        function addListener(element, listener) {
            var listeners = getState(element).listeners;

            if (!listeners.push) {
                throw new Error("Cannot add listener to an element that is not detectable.");
            }

            getState(element).listeners.push(listener);
        }

        /**
         * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
         * @private
         * @param {object} options Optional options object.
         * @param {element} element The element to make detectable
         * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
         */
        function makeDetectable(options, element, callback) {
            if (!callback) {
                callback = element;
                element = options;
                options = null;
            }

            options = options || {};

            function debug() {
                if (options.debug) {
                    var args = Array.prototype.slice.call(arguments);
                    args.unshift(idHandler.get(element), "Scroll: ");
                    if (reporter.log.apply) {
                        reporter.log.apply(null, args);
                    } else {
                        for (var i = 0; i < args.length; i++) {
                            reporter.log(args[i]);
                        }
                    }
                }
            }

            function isDetached(element) {
                function isInDocument(element) {
                    return element === element.ownerDocument.body || element.ownerDocument.body.contains(element);
                }

                if (!isInDocument(element)) {
                    return true;
                }

                // FireFox returns null style in hidden iframes. See https://github.com/wnr/element-resize-detector/issues/68 and https://bugzilla.mozilla.org/show_bug.cgi?id=795520
                if (window.getComputedStyle(element) === null) {
                    return true;
                }

                return false;
            }

            function isUnrendered(element) {
                // Check the absolute positioned container since the top level container is display: inline.
                var container = getState(element).container.childNodes[0];
                var style = window.getComputedStyle(container);
                return !style.width || style.width.indexOf("px") === -1; //Can only compute pixel value when rendered.
            }

            function getStyle() {
                // Some browsers only force layouts when actually reading the style properties of the style object, so make sure that they are all read here,
                // so that the user of the function can be sure that it will perform the layout here, instead of later (important for batching).
                var elementStyle            = window.getComputedStyle(element);
                var style                   = {};
                style.position              = elementStyle.position;
                style.width                 = element.offsetWidth;
                style.height                = element.offsetHeight;
                style.top                   = elementStyle.top;
                style.right                 = elementStyle.right;
                style.bottom                = elementStyle.bottom;
                style.left                  = elementStyle.left;
                style.widthCSS              = elementStyle.width;
                style.heightCSS             = elementStyle.height;
                return style;
            }

            function storeStartSize() {
                var style = getStyle();
                getState(element).startSize = {
                    width: style.width,
                    height: style.height
                };
                debug("Element start size", getState(element).startSize);
            }

            function initListeners() {
                getState(element).listeners = [];
            }

            function storeStyle() {
                debug("storeStyle invoked.");
                if (!getState(element)) {
                    debug("Aborting because element has been uninstalled");
                    return;
                }

                var style = getStyle();
                getState(element).style = style;
            }

            function storeCurrentSize(element, width, height) {
                getState(element).lastWidth = width;
                getState(element).lastHeight  = height;
            }

            function getExpandChildElement(element) {
                return getExpandElement(element).childNodes[0];
            }

            function getWidthOffset() {
                return 2 * scrollbarSizes.width + 1;
            }

            function getHeightOffset() {
                return 2 * scrollbarSizes.height + 1;
            }

            function getExpandWidth(width) {
                return width + 10 + getWidthOffset();
            }

            function getExpandHeight(height) {
                return height + 10 + getHeightOffset();
            }

            function getShrinkWidth(width) {
                return width * 2 + getWidthOffset();
            }

            function getShrinkHeight(height) {
                return height * 2 + getHeightOffset();
            }

            function positionScrollbars(element, width, height) {
                var expand          = getExpandElement(element);
                var shrink          = getShrinkElement(element);
                var expandWidth     = getExpandWidth(width);
                var expandHeight    = getExpandHeight(height);
                var shrinkWidth     = getShrinkWidth(width);
                var shrinkHeight    = getShrinkHeight(height);
                expand.scrollLeft   = expandWidth;
                expand.scrollTop    = expandHeight;
                shrink.scrollLeft   = shrinkWidth;
                shrink.scrollTop    = shrinkHeight;
            }

            function injectContainerElement() {
                var container = getState(element).container;

                if (!container) {
                    container                   = document.createElement("div");
                    container.className         = detectionContainerClass;
                    container.style.cssText     = buildCssTextString(["visibility: hidden", "display: inline", "width: 0px", "height: 0px", "z-index: -1", "overflow: hidden", "margin: 0", "padding: 0"]);
                    getState(element).container = container;
                    addAnimationClass(container);
                    element.appendChild(container);

                    var onAnimationStart = function () {
                        getState(element).onRendered && getState(element).onRendered();
                    };

                    addEvent(container, "animationstart", onAnimationStart);

                    // Store the event handler here so that they may be removed when uninstall is called.
                    // See uninstall function for an explanation why it is needed.
                    getState(element).onAnimationStart = onAnimationStart;
                }

                return container;
            }

            function injectScrollElements() {
                function alterPositionStyles() {
                    var style = getState(element).style;

                    if(style.position === "static") {
                        element.style.setProperty("position", "relative",options.important ? "important" : "");

                        var removeRelativeStyles = function(reporter, element, style, property) {
                            function getNumericalValue(value) {
                                return value.replace(/[^-\d\.]/g, "");
                            }

                            var value = style[property];

                            if(value !== "auto" && getNumericalValue(value) !== "0") {
                                reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                                element.style[property] = 0;
                            }
                        };

                        //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
                        //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
                        removeRelativeStyles(reporter, element, style, "top");
                        removeRelativeStyles(reporter, element, style, "right");
                        removeRelativeStyles(reporter, element, style, "bottom");
                        removeRelativeStyles(reporter, element, style, "left");
                    }
                }

                function getLeftTopBottomRightCssText(left, top, bottom, right) {
                    left = (!left ? "0" : (left + "px"));
                    top = (!top ? "0" : (top + "px"));
                    bottom = (!bottom ? "0" : (bottom + "px"));
                    right = (!right ? "0" : (right + "px"));

                    return ["left: " + left, "top: " + top, "right: " + right, "bottom: " + bottom];
                }

                debug("Injecting elements");

                if (!getState(element)) {
                    debug("Aborting because element has been uninstalled");
                    return;
                }

                alterPositionStyles();

                var rootContainer = getState(element).container;

                if (!rootContainer) {
                    rootContainer = injectContainerElement();
                }

                // Due to this WebKit bug https://bugs.webkit.org/show_bug.cgi?id=80808 (currently fixed in Blink, but still present in WebKit browsers such as Safari),
                // we need to inject two containers, one that is width/height 100% and another that is left/top -1px so that the final container always is 1x1 pixels bigger than
                // the targeted element.
                // When the bug is resolved, "containerContainer" may be removed.

                // The outer container can occasionally be less wide than the targeted when inside inline elements element in WebKit (see https://bugs.webkit.org/show_bug.cgi?id=152980).
                // This should be no problem since the inner container either way makes sure the injected scroll elements are at least 1x1 px.

                var scrollbarWidth          = scrollbarSizes.width;
                var scrollbarHeight         = scrollbarSizes.height;
                var containerContainerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%", "left: 0px", "top: 0px"]);
                var containerStyle          = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden"].concat(getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth)));
                var expandStyle             = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
                var shrinkStyle             = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
                var expandChildStyle        = buildCssTextString(["position: absolute", "left: 0", "top: 0"]);
                var shrinkChildStyle        = buildCssTextString(["position: absolute", "width: 200%", "height: 200%"]);

                var containerContainer      = document.createElement("div");
                var container               = document.createElement("div");
                var expand                  = document.createElement("div");
                var expandChild             = document.createElement("div");
                var shrink                  = document.createElement("div");
                var shrinkChild             = document.createElement("div");

                // Some browsers choke on the resize system being rtl, so force it to ltr. https://github.com/wnr/element-resize-detector/issues/56
                // However, dir should not be set on the top level container as it alters the dimensions of the target element in some browsers.
                containerContainer.dir              = "ltr";

                containerContainer.style.cssText    = containerContainerStyle;
                containerContainer.className        = detectionContainerClass;
                container.className                 = detectionContainerClass;
                container.style.cssText             = containerStyle;
                expand.style.cssText                = expandStyle;
                expandChild.style.cssText           = expandChildStyle;
                shrink.style.cssText                = shrinkStyle;
                shrinkChild.style.cssText           = shrinkChildStyle;

                expand.appendChild(expandChild);
                shrink.appendChild(shrinkChild);
                container.appendChild(expand);
                container.appendChild(shrink);
                containerContainer.appendChild(container);
                rootContainer.appendChild(containerContainer);

                function onExpandScroll() {
                    getState(element).onExpand && getState(element).onExpand();
                }

                function onShrinkScroll() {
                    getState(element).onShrink && getState(element).onShrink();
                }

                addEvent(expand, "scroll", onExpandScroll);
                addEvent(shrink, "scroll", onShrinkScroll);

                // Store the event handlers here so that they may be removed when uninstall is called.
                // See uninstall function for an explanation why it is needed.
                getState(element).onExpandScroll = onExpandScroll;
                getState(element).onShrinkScroll = onShrinkScroll;
            }

            function registerListenersAndPositionElements() {
                function updateChildSizes(element, width, height) {
                    var expandChild             = getExpandChildElement(element);
                    var expandWidth             = getExpandWidth(width);
                    var expandHeight            = getExpandHeight(height);
                    expandChild.style.setProperty("width", expandWidth + "px", options.important ? "important" : "");
                    expandChild.style.setProperty("height", expandHeight + "px", options.important ? "important" : "");
                }

                function updateDetectorElements(done) {
                    var width           = element.offsetWidth;
                    var height          = element.offsetHeight;

                    // Check whether the size has actually changed since last time the algorithm ran. If not, some steps may be skipped.
                    var sizeChanged = width !== getState(element).lastWidth || height !== getState(element).lastHeight;

                    debug("Storing current size", width, height);

                    // Store the size of the element sync here, so that multiple scroll events may be ignored in the event listeners.
                    // Otherwise the if-check in handleScroll is useless.
                    storeCurrentSize(element, width, height);

                    // Since we delay the processing of the batch, there is a risk that uninstall has been called before the batch gets to execute.
                    // Since there is no way to cancel the fn executions, we need to add an uninstall guard to all fns of the batch.

                    batchProcessor.add(0, function performUpdateChildSizes() {
                        if (!sizeChanged) {
                            return;
                        }

                        if (!getState(element)) {
                            debug("Aborting because element has been uninstalled");
                            return;
                        }

                        if (!areElementsInjected()) {
                            debug("Aborting because element container has not been initialized");
                            return;
                        }

                        if (options.debug) {
                            var w = element.offsetWidth;
                            var h = element.offsetHeight;

                            if (w !== width || h !== height) {
                                reporter.warn(idHandler.get(element), "Scroll: Size changed before updating detector elements.");
                            }
                        }

                        updateChildSizes(element, width, height);
                    });

                    batchProcessor.add(1, function updateScrollbars() {
                        // This function needs to be invoked event though the size is unchanged. The element could have been resized very quickly and then
                        // been restored to the original size, which will have changed the scrollbar positions.

                        if (!getState(element)) {
                            debug("Aborting because element has been uninstalled");
                            return;
                        }

                        if (!areElementsInjected()) {
                            debug("Aborting because element container has not been initialized");
                            return;
                        }

                        positionScrollbars(element, width, height);
                    });

                    if (sizeChanged && done) {
                        batchProcessor.add(2, function () {
                            if (!getState(element)) {
                                debug("Aborting because element has been uninstalled");
                                return;
                            }

                            if (!areElementsInjected()) {
                              debug("Aborting because element container has not been initialized");
                              return;
                            }

                            done();
                        });
                    }
                }

                function areElementsInjected() {
                    return !!getState(element).container;
                }

                function notifyListenersIfNeeded() {
                    function isFirstNotify() {
                        return getState(element).lastNotifiedWidth === undefined;
                    }

                    debug("notifyListenersIfNeeded invoked");

                    var state = getState(element);

                    // Don't notify if the current size is the start size, and this is the first notification.
                    if (isFirstNotify() && state.lastWidth === state.startSize.width && state.lastHeight === state.startSize.height) {
                        return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");
                    }

                    // Don't notify if the size already has been notified.
                    if (state.lastWidth === state.lastNotifiedWidth && state.lastHeight === state.lastNotifiedHeight) {
                        return debug("Not notifying: Size already notified");
                    }


                    debug("Current size not notified, notifying...");
                    state.lastNotifiedWidth = state.lastWidth;
                    state.lastNotifiedHeight = state.lastHeight;
                    forEach(getState(element).listeners, function (listener) {
                        listener(element);
                    });
                }

                function handleRender() {
                    debug("startanimation triggered.");

                    if (isUnrendered(element)) {
                        debug("Ignoring since element is still unrendered...");
                        return;
                    }

                    debug("Element rendered.");
                    var expand = getExpandElement(element);
                    var shrink = getShrinkElement(element);
                    if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {
                        debug("Scrollbars out of sync. Updating detector elements...");
                        updateDetectorElements(notifyListenersIfNeeded);
                    }
                }

                function handleScroll() {
                    debug("Scroll detected.");

                    if (isUnrendered(element)) {
                        // Element is still unrendered. Skip this scroll event.
                        debug("Scroll event fired while unrendered. Ignoring...");
                        return;
                    }

                    updateDetectorElements(notifyListenersIfNeeded);
                }

                debug("registerListenersAndPositionElements invoked.");

                if (!getState(element)) {
                    debug("Aborting because element has been uninstalled");
                    return;
                }

                getState(element).onRendered = handleRender;
                getState(element).onExpand = handleScroll;
                getState(element).onShrink = handleScroll;

                var style = getState(element).style;
                updateChildSizes(element, style.width, style.height);
            }

            function finalizeDomMutation() {
                debug("finalizeDomMutation invoked.");

                if (!getState(element)) {
                    debug("Aborting because element has been uninstalled");
                    return;
                }

                var style = getState(element).style;
                storeCurrentSize(element, style.width, style.height);
                positionScrollbars(element, style.width, style.height);
            }

            function ready() {
                callback(element);
            }

            function install() {
                debug("Installing...");
                initListeners();
                storeStartSize();

                batchProcessor.add(0, storeStyle);
                batchProcessor.add(1, injectScrollElements);
                batchProcessor.add(2, registerListenersAndPositionElements);
                batchProcessor.add(3, finalizeDomMutation);
                batchProcessor.add(4, ready);
            }

            debug("Making detectable...");

            if (isDetached(element)) {
                debug("Element is detached");

                injectContainerElement();

                debug("Waiting until element is attached...");

                getState(element).onRendered = function () {
                    debug("Element is now attached");
                    install();
                };
            } else {
                install();
            }
        }

        function uninstall(element) {
            var state = getState(element);

            if (!state) {
                // Uninstall has been called on a non-erd element.
                return;
            }

            // Uninstall may have been called in the following scenarios:
            // (1) Right between the sync code and async batch (here state.busy = true, but nothing have been registered or injected).
            // (2) In the ready callback of the last level of the batch by another element (here, state.busy = true, but all the stuff has been injected).
            // (3) After the installation process (here, state.busy = false and all the stuff has been injected).
            // So to be on the safe side, let's check for each thing before removing.

            // We need to remove the event listeners, because otherwise the event might fire on an uninstall element which results in an error when trying to get the state of the element.
            state.onExpandScroll && removeEvent(getExpandElement(element), "scroll", state.onExpandScroll);
            state.onShrinkScroll && removeEvent(getShrinkElement(element), "scroll", state.onShrinkScroll);
            state.onAnimationStart && removeEvent(state.container, "animationstart", state.onAnimationStart);

            state.container && element.removeChild(state.container);
        }

        return {
            makeDetectable: makeDetectable,
            addListener: addListener,
            uninstall: uninstall,
            initDocument: initDocument
        };
    };

    var forEach$1                 = collectionUtils.forEach;









    //Detection strategies.



    function isCollection(obj) {
        return Array.isArray(obj) || obj.length !== undefined;
    }

    function toArray(collection) {
        if (!Array.isArray(collection)) {
            var array = [];
            forEach$1(collection, function (obj) {
                array.push(obj);
            });
            return array;
        } else {
            return collection;
        }
    }

    function isElement(obj) {
        return obj && obj.nodeType === 1;
    }

    /**
     * @typedef idHandler
     * @type {object}
     * @property {function} get Gets the resize detector id of the element.
     * @property {function} set Generate and sets the resize detector id of the element.
     */

    /**
     * @typedef Options
     * @type {object}
     * @property {boolean} callOnAdd    Determines if listeners should be called when they are getting added.
                                        Default is true. If true, the listener is guaranteed to be called when it has been added.
                                        If false, the listener will not be guarenteed to be called when it has been added (does not prevent it from being called).
     * @property {idHandler} idHandler  A custom id handler that is responsible for generating, setting and retrieving id's for elements.
                                        If not provided, a default id handler will be used.
     * @property {reporter} reporter    A custom reporter that handles reporting logs, warnings and errors.
                                        If not provided, a default id handler will be used.
                                        If set to false, then nothing will be reported.
     * @property {boolean} debug        If set to true, the the system will report debug messages as default for the listenTo method.
     */

    /**
     * Creates an element resize detector instance.
     * @public
     * @param {Options?} options Optional global options object that will decide how this instance will work.
     */
    var elementResizeDetector = function(options) {
        options = options || {};

        //idHandler is currently not an option to the listenTo function, so it should not be added to globalOptions.
        var idHandler$1;

        if (options.idHandler) {
            // To maintain compatability with idHandler.get(element, readonly), make sure to wrap the given idHandler
            // so that readonly flag always is true when it's used here. This may be removed next major version bump.
            idHandler$1 = {
                get: function (element) { return options.idHandler.get(element, true); },
                set: options.idHandler.set
            };
        } else {
            var idGenerator$1 = idGenerator();
            var defaultIdHandler = idHandler({
                idGenerator: idGenerator$1,
                stateHandler: stateHandler
            });
            idHandler$1 = defaultIdHandler;
        }

        //reporter is currently not an option to the listenTo function, so it should not be added to globalOptions.
        var reporter$1 = options.reporter;

        if(!reporter$1) {
            //If options.reporter is false, then the reporter should be quiet.
            var quiet = reporter$1 === false;
            reporter$1 = reporter(quiet);
        }

        //batchProcessor is currently not an option to the listenTo function, so it should not be added to globalOptions.
        var batchProcessor$1 = getOption$1(options, "batchProcessor", batchProcessor({ reporter: reporter$1 }));

        //Options to be used as default for the listenTo function.
        var globalOptions = {};
        globalOptions.callOnAdd     = !!getOption$1(options, "callOnAdd", true);
        globalOptions.debug         = !!getOption$1(options, "debug", false);

        var eventListenerHandler    = listenerHandler(idHandler$1);
        var elementUtils$1            = elementUtils({
            stateHandler: stateHandler
        });

        //The detection strategy to be used.
        var detectionStrategy;
        var desiredStrategy = getOption$1(options, "strategy", "object");
        var importantCssRules = getOption$1(options, "important", false);
        var strategyOptions = {
            reporter: reporter$1,
            batchProcessor: batchProcessor$1,
            stateHandler: stateHandler,
            idHandler: idHandler$1,
            important: importantCssRules
        };

        if(desiredStrategy === "scroll") {
            if (browserDetector.isLegacyOpera()) {
                reporter$1.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy.");
                desiredStrategy = "object";
            } else if (browserDetector.isIE(9)) {
                reporter$1.warn("Scroll strategy is not supported on IE9. Changing to object strategy.");
                desiredStrategy = "object";
            }
        }

        if(desiredStrategy === "scroll") {
            detectionStrategy = scroll(strategyOptions);
        } else if(desiredStrategy === "object") {
            detectionStrategy = object$1(strategyOptions);
        } else {
            throw new Error("Invalid strategy name: " + desiredStrategy);
        }

        //Calls can be made to listenTo with elements that are still being installed.
        //Also, same elements can occur in the elements list in the listenTo function.
        //With this map, the ready callbacks can be synchronized between the calls
        //so that the ready callback can always be called when an element is ready - even if
        //it wasn't installed from the function itself.
        var onReadyCallbacks = {};

        /**
         * Makes the given elements resize-detectable and starts listening to resize events on the elements. Calls the event callback for each event for each element.
         * @public
         * @param {Options?} options Optional options object. These options will override the global options. Some options may not be overriden, such as idHandler.
         * @param {element[]|element} elements The given array of elements to detect resize events of. Single element is also valid.
         * @param {function} listener The callback to be executed for each resize event for each element.
         */
        function listenTo(options, elements, listener) {
            function onResizeCallback(element) {
                var listeners = eventListenerHandler.get(element);
                forEach$1(listeners, function callListenerProxy(listener) {
                    listener(element);
                });
            }

            function addListener(callOnAdd, element, listener) {
                eventListenerHandler.add(element, listener);

                if(callOnAdd) {
                    listener(element);
                }
            }

            //Options object may be omitted.
            if(!listener) {
                listener = elements;
                elements = options;
                options = {};
            }

            if(!elements) {
                throw new Error("At least one element required.");
            }

            if(!listener) {
                throw new Error("Listener required.");
            }

            if (isElement(elements)) {
                // A single element has been passed in.
                elements = [elements];
            } else if (isCollection(elements)) {
                // Convert collection to array for plugins.
                // TODO: May want to check so that all the elements in the collection are valid elements.
                elements = toArray(elements);
            } else {
                return reporter$1.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
            }

            var elementsReady = 0;

            var callOnAdd = getOption$1(options, "callOnAdd", globalOptions.callOnAdd);
            var onReadyCallback = getOption$1(options, "onReady", function noop() {});
            var debug = getOption$1(options, "debug", globalOptions.debug);

            forEach$1(elements, function attachListenerToElement(element) {
                if (!stateHandler.getState(element)) {
                    stateHandler.initState(element);
                    idHandler$1.set(element);
                }

                var id = idHandler$1.get(element);

                debug && reporter$1.log("Attaching listener to element", id, element);

                if(!elementUtils$1.isDetectable(element)) {
                    debug && reporter$1.log(id, "Not detectable.");
                    if(elementUtils$1.isBusy(element)) {
                        debug && reporter$1.log(id, "System busy making it detectable");

                        //The element is being prepared to be detectable. Do not make it detectable.
                        //Just add the listener, because the element will soon be detectable.
                        addListener(callOnAdd, element, listener);
                        onReadyCallbacks[id] = onReadyCallbacks[id] || [];
                        onReadyCallbacks[id].push(function onReady() {
                            elementsReady++;

                            if(elementsReady === elements.length) {
                                onReadyCallback();
                            }
                        });
                        return;
                    }

                    debug && reporter$1.log(id, "Making detectable...");
                    //The element is not prepared to be detectable, so do prepare it and add a listener to it.
                    elementUtils$1.markBusy(element, true);
                    return detectionStrategy.makeDetectable({ debug: debug, important: importantCssRules }, element, function onElementDetectable(element) {
                        debug && reporter$1.log(id, "onElementDetectable");

                        if (stateHandler.getState(element)) {
                            elementUtils$1.markAsDetectable(element);
                            elementUtils$1.markBusy(element, false);
                            detectionStrategy.addListener(element, onResizeCallback);
                            addListener(callOnAdd, element, listener);

                            // Since the element size might have changed since the call to "listenTo", we need to check for this change,
                            // so that a resize event may be emitted.
                            // Having the startSize object is optional (since it does not make sense in some cases such as unrendered elements), so check for its existance before.
                            // Also, check the state existance before since the element may have been uninstalled in the installation process.
                            var state = stateHandler.getState(element);
                            if (state && state.startSize) {
                                var width = element.offsetWidth;
                                var height = element.offsetHeight;
                                if (state.startSize.width !== width || state.startSize.height !== height) {
                                    onResizeCallback(element);
                                }
                            }

                            if(onReadyCallbacks[id]) {
                                forEach$1(onReadyCallbacks[id], function(callback) {
                                    callback();
                                });
                            }
                        } else {
                            // The element has been unisntalled before being detectable.
                            debug && reporter$1.log(id, "Element uninstalled before being detectable.");
                        }

                        delete onReadyCallbacks[id];

                        elementsReady++;
                        if(elementsReady === elements.length) {
                            onReadyCallback();
                        }
                    });
                }

                debug && reporter$1.log(id, "Already detecable, adding listener.");

                //The element has been prepared to be detectable and is ready to be listened to.
                addListener(callOnAdd, element, listener);
                elementsReady++;
            });

            if(elementsReady === elements.length) {
                onReadyCallback();
            }
        }

        function uninstall(elements) {
            if(!elements) {
                return reporter$1.error("At least one element is required.");
            }

            if (isElement(elements)) {
                // A single element has been passed in.
                elements = [elements];
            } else if (isCollection(elements)) {
                // Convert collection to array for plugins.
                // TODO: May want to check so that all the elements in the collection are valid elements.
                elements = toArray(elements);
            } else {
                return reporter$1.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
            }

            forEach$1(elements, function (element) {
                eventListenerHandler.removeAllListeners(element);
                detectionStrategy.uninstall(element);
                stateHandler.cleanState(element);
            });
        }

        function initDocument(targetDocument) {
            detectionStrategy.initDocument && detectionStrategy.initDocument(targetDocument);
        }

        return {
            listenTo: listenTo,
            removeListener: eventListenerHandler.removeListener,
            removeAllListeners: eventListenerHandler.removeAllListeners,
            uninstall: uninstall,
            initDocument: initDocument
        };
    };

    function getOption$1(options, name, defaultValue) {
        var value = options[name];

        if((value === undefined || value === null) && defaultValue !== undefined) {
            return defaultValue;
        }

        return value;
    }

    var jsQR = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 3);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var BitMatrix = /** @class */ (function () {
        function BitMatrix(data, width) {
            this.width = width;
            this.height = data.length / width;
            this.data = data;
        }
        BitMatrix.createEmpty = function (width, height) {
            return new BitMatrix(new Uint8ClampedArray(width * height), width);
        };
        BitMatrix.prototype.get = function (x, y) {
            if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
                return false;
            }
            return !!this.data[y * this.width + x];
        };
        BitMatrix.prototype.set = function (x, y, v) {
            this.data[y * this.width + x] = v ? 1 : 0;
        };
        BitMatrix.prototype.setRegion = function (left, top, width, height, v) {
            for (var y = top; y < top + height; y++) {
                for (var x = left; x < left + width; x++) {
                    this.set(x, y, !!v);
                }
            }
        };
        return BitMatrix;
    }());
    exports.BitMatrix = BitMatrix;


    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var GenericGFPoly_1 = __webpack_require__(2);
    function addOrSubtractGF(a, b) {
        return a ^ b; // tslint:disable-line:no-bitwise
    }
    exports.addOrSubtractGF = addOrSubtractGF;
    var GenericGF = /** @class */ (function () {
        function GenericGF(primitive, size, genBase) {
            this.primitive = primitive;
            this.size = size;
            this.generatorBase = genBase;
            this.expTable = new Array(this.size);
            this.logTable = new Array(this.size);
            var x = 1;
            for (var i = 0; i < this.size; i++) {
                this.expTable[i] = x;
                x = x * 2;
                if (x >= this.size) {
                    x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise
                }
            }
            for (var i = 0; i < this.size - 1; i++) {
                this.logTable[this.expTable[i]] = i;
            }
            this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([0]));
            this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([1]));
        }
        GenericGF.prototype.multiply = function (a, b) {
            if (a === 0 || b === 0) {
                return 0;
            }
            return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
        };
        GenericGF.prototype.inverse = function (a) {
            if (a === 0) {
                throw new Error("Can't invert 0");
            }
            return this.expTable[this.size - this.logTable[a] - 1];
        };
        GenericGF.prototype.buildMonomial = function (degree, coefficient) {
            if (degree < 0) {
                throw new Error("Invalid monomial degree less than 0");
            }
            if (coefficient === 0) {
                return this.zero;
            }
            var coefficients = new Uint8ClampedArray(degree + 1);
            coefficients[0] = coefficient;
            return new GenericGFPoly_1.default(this, coefficients);
        };
        GenericGF.prototype.log = function (a) {
            if (a === 0) {
                throw new Error("Can't take log(0)");
            }
            return this.logTable[a];
        };
        GenericGF.prototype.exp = function (a) {
            return this.expTable[a];
        };
        return GenericGF;
    }());
    exports.default = GenericGF;


    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var GenericGF_1 = __webpack_require__(1);
    var GenericGFPoly = /** @class */ (function () {
        function GenericGFPoly(field, coefficients) {
            if (coefficients.length === 0) {
                throw new Error("No coefficients.");
            }
            this.field = field;
            var coefficientsLength = coefficients.length;
            if (coefficientsLength > 1 && coefficients[0] === 0) {
                // Leading term must be non-zero for anything except the constant polynomial "0"
                var firstNonZero = 1;
                while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
                    firstNonZero++;
                }
                if (firstNonZero === coefficientsLength) {
                    this.coefficients = field.zero.coefficients;
                }
                else {
                    this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);
                    for (var i = 0; i < this.coefficients.length; i++) {
                        this.coefficients[i] = coefficients[firstNonZero + i];
                    }
                }
            }
            else {
                this.coefficients = coefficients;
            }
        }
        GenericGFPoly.prototype.degree = function () {
            return this.coefficients.length - 1;
        };
        GenericGFPoly.prototype.isZero = function () {
            return this.coefficients[0] === 0;
        };
        GenericGFPoly.prototype.getCoefficient = function (degree) {
            return this.coefficients[this.coefficients.length - 1 - degree];
        };
        GenericGFPoly.prototype.addOrSubtract = function (other) {
            if (this.isZero()) {
                return other;
            }
            if (other.isZero()) {
                return this;
            }
            var smallerCoefficients = this.coefficients;
            var largerCoefficients = other.coefficients;
            if (smallerCoefficients.length > largerCoefficients.length) {
                _a = [largerCoefficients, smallerCoefficients], smallerCoefficients = _a[0], largerCoefficients = _a[1];
            }
            var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
            var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
            for (var i = 0; i < lengthDiff; i++) {
                sumDiff[i] = largerCoefficients[i];
            }
            for (var i = lengthDiff; i < largerCoefficients.length; i++) {
                sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
            }
            return new GenericGFPoly(this.field, sumDiff);
            var _a;
        };
        GenericGFPoly.prototype.multiply = function (scalar) {
            if (scalar === 0) {
                return this.field.zero;
            }
            if (scalar === 1) {
                return this;
            }
            var size = this.coefficients.length;
            var product = new Uint8ClampedArray(size);
            for (var i = 0; i < size; i++) {
                product[i] = this.field.multiply(this.coefficients[i], scalar);
            }
            return new GenericGFPoly(this.field, product);
        };
        GenericGFPoly.prototype.multiplyPoly = function (other) {
            if (this.isZero() || other.isZero()) {
                return this.field.zero;
            }
            var aCoefficients = this.coefficients;
            var aLength = aCoefficients.length;
            var bCoefficients = other.coefficients;
            var bLength = bCoefficients.length;
            var product = new Uint8ClampedArray(aLength + bLength - 1);
            for (var i = 0; i < aLength; i++) {
                var aCoeff = aCoefficients[i];
                for (var j = 0; j < bLength; j++) {
                    product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
                }
            }
            return new GenericGFPoly(this.field, product);
        };
        GenericGFPoly.prototype.multiplyByMonomial = function (degree, coefficient) {
            if (degree < 0) {
                throw new Error("Invalid degree less than 0");
            }
            if (coefficient === 0) {
                return this.field.zero;
            }
            var size = this.coefficients.length;
            var product = new Uint8ClampedArray(size + degree);
            for (var i = 0; i < size; i++) {
                product[i] = this.field.multiply(this.coefficients[i], coefficient);
            }
            return new GenericGFPoly(this.field, product);
        };
        GenericGFPoly.prototype.evaluateAt = function (a) {
            var result = 0;
            if (a === 0) {
                // Just return the x^0 coefficient
                return this.getCoefficient(0);
            }
            var size = this.coefficients.length;
            if (a === 1) {
                // Just the sum of the coefficients
                this.coefficients.forEach(function (coefficient) {
                    result = GenericGF_1.addOrSubtractGF(result, coefficient);
                });
                return result;
            }
            result = this.coefficients[0];
            for (var i = 1; i < size; i++) {
                result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
            }
            return result;
        };
        return GenericGFPoly;
    }());
    exports.default = GenericGFPoly;


    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var binarizer_1 = __webpack_require__(4);
    var decoder_1 = __webpack_require__(5);
    var extractor_1 = __webpack_require__(11);
    var locator_1 = __webpack_require__(12);
    function scan(matrix) {
        var location = locator_1.locate(matrix);
        if (!location) {
            return null;
        }
        var extracted = extractor_1.extract(matrix, location);
        var decoded = decoder_1.decode(extracted.matrix);
        if (!decoded) {
            return null;
        }
        return {
            binaryData: decoded.bytes,
            data: decoded.text,
            chunks: decoded.chunks,
            location: {
                topRightCorner: extracted.mappingFunction(location.dimension, 0),
                topLeftCorner: extracted.mappingFunction(0, 0),
                bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),
                bottomLeftCorner: extracted.mappingFunction(0, location.dimension),
                topRightFinderPattern: location.topRight,
                topLeftFinderPattern: location.topLeft,
                bottomLeftFinderPattern: location.bottomLeft,
                bottomRightAlignmentPattern: location.alignmentPattern,
            },
        };
    }
    var defaultOptions = {
        inversionAttempts: "attemptBoth",
    };
    function jsQR(data, width, height, providedOptions) {
        if (providedOptions === void 0) { providedOptions = {}; }
        var options = defaultOptions;
        Object.keys(options || {}).forEach(function (opt) {
            options[opt] = providedOptions[opt] || options[opt];
        });
        var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
        var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";
        var _a = binarizer_1.binarize(data, width, height, shouldInvert), binarized = _a.binarized, inverted = _a.inverted;
        var result = scan(tryInvertedFirst ? inverted : binarized);
        if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) {
            result = scan(tryInvertedFirst ? binarized : inverted);
        }
        return result;
    }
    jsQR.default = jsQR;
    exports.default = jsQR;


    /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var BitMatrix_1 = __webpack_require__(0);
    var REGION_SIZE = 8;
    var MIN_DYNAMIC_RANGE = 24;
    function numBetween(value, min, max) {
        return value < min ? min : value > max ? max : value;
    }
    // Like BitMatrix but accepts arbitry Uint8 values
    var Matrix = /** @class */ (function () {
        function Matrix(width, height) {
            this.width = width;
            this.data = new Uint8ClampedArray(width * height);
        }
        Matrix.prototype.get = function (x, y) {
            return this.data[y * this.width + x];
        };
        Matrix.prototype.set = function (x, y, value) {
            this.data[y * this.width + x] = value;
        };
        return Matrix;
    }());
    function binarize(data, width, height, returnInverted) {
        if (data.length !== width * height * 4) {
            throw new Error("Malformed data passed to binarizer.");
        }
        // Convert image to greyscale
        var greyscalePixels = new Matrix(width, height);
        for (var x = 0; x < width; x++) {
            for (var y = 0; y < height; y++) {
                var r = data[((y * width + x) * 4) + 0];
                var g = data[((y * width + x) * 4) + 1];
                var b = data[((y * width + x) * 4) + 2];
                greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
            }
        }
        var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
        var verticalRegionCount = Math.ceil(height / REGION_SIZE);
        var blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);
        for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
            for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
                var sum = 0;
                var min = Infinity;
                var max = 0;
                for (var y = 0; y < REGION_SIZE; y++) {
                    for (var x = 0; x < REGION_SIZE; x++) {
                        var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
                        sum += pixelLumosity;
                        min = Math.min(min, pixelLumosity);
                        max = Math.max(max, pixelLumosity);
                    }
                }
                var average = sum / (Math.pow(REGION_SIZE, 2));
                if (max - min <= MIN_DYNAMIC_RANGE) {
                    // If variation within the block is low, assume this is a block with only light or only
                    // dark pixels. In that case we do not want to use the average, as it would divide this
                    // low contrast area into black and white pixels, essentially creating data out of noise.
                    //
                    // Default the blackpoint for these blocks to be half the min - effectively white them out
                    average = min / 2;
                    if (verticalRegion > 0 && hortizontalRegion > 0) {
                        // Correct the "white background" assumption for blocks that have neighbors by comparing
                        // the pixels in this block to the previously calculated black points. This is based on
                        // the fact that dark barcode symbology is always surrounded by some amount of light
                        // background for which reasonable black point estimates were made. The bp estimated at
                        // the boundaries is used for the interior.
                        // The (min < bp) is arbitrary but works better than other heuristics that were tried.
                        var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +
                            (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +
                            blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;
                        if (min < averageNeighborBlackPoint) {
                            average = averageNeighborBlackPoint;
                        }
                    }
                }
                blackPoints.set(hortizontalRegion, verticalRegion, average);
            }
        }
        var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
        var inverted = null;
        if (returnInverted) {
            inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
        }
        for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
            for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
                var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
                var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
                var sum = 0;
                for (var xRegion = -2; xRegion <= 2; xRegion++) {
                    for (var yRegion = -2; yRegion <= 2; yRegion++) {
                        sum += blackPoints.get(left + xRegion, top_1 + yRegion);
                    }
                }
                var threshold = sum / 25;
                for (var xRegion = 0; xRegion < REGION_SIZE; xRegion++) {
                    for (var yRegion = 0; yRegion < REGION_SIZE; yRegion++) {
                        var x = hortizontalRegion * REGION_SIZE + xRegion;
                        var y = verticalRegion * REGION_SIZE + yRegion;
                        var lum = greyscalePixels.get(x, y);
                        binarized.set(x, y, lum <= threshold);
                        if (returnInverted) {
                            inverted.set(x, y, !(lum <= threshold));
                        }
                    }
                }
            }
        }
        if (returnInverted) {
            return { binarized: binarized, inverted: inverted };
        }
        return { binarized: binarized };
    }
    exports.binarize = binarize;


    /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var BitMatrix_1 = __webpack_require__(0);
    var decodeData_1 = __webpack_require__(6);
    var reedsolomon_1 = __webpack_require__(9);
    var version_1 = __webpack_require__(10);
    // tslint:disable:no-bitwise
    function numBitsDiffering(x, y) {
        var z = x ^ y;
        var bitCount = 0;
        while (z) {
            bitCount++;
            z &= z - 1;
        }
        return bitCount;
    }
    function pushBit(bit, byte) {
        return (byte << 1) | bit;
    }
    // tslint:enable:no-bitwise
    var FORMAT_INFO_TABLE = [
        { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },
        { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },
        { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },
        { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },
        { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },
        { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },
        { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },
        { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },
        { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },
        { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },
        { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },
        { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },
        { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },
        { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },
        { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },
        { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },
        { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },
        { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },
        { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },
        { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },
        { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },
        { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },
        { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },
        { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },
        { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },
        { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },
        { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },
        { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },
        { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },
        { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },
        { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },
        { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },
    ];
    var DATA_MASKS = [
        function (p) { return ((p.y + p.x) % 2) === 0; },
        function (p) { return (p.y % 2) === 0; },
        function (p) { return p.x % 3 === 0; },
        function (p) { return (p.y + p.x) % 3 === 0; },
        function (p) { return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0; },
        function (p) { return ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0; },
        function (p) { return ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0; },
        function (p) { return ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0; },
    ];
    function buildFunctionPatternMask(version) {
        var dimension = 17 + 4 * version.versionNumber;
        var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
        matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
        matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
        matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
        // Alignment patterns
        for (var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++) {
            var x = _a[_i];
            for (var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++) {
                var y = _c[_b];
                if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {
                    matrix.setRegion(x - 2, y - 2, 5, 5, true);
                }
            }
        }
        matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
        matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
        if (version.versionNumber > 6) {
            matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
            matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
        }
        return matrix;
    }
    function readCodewords(matrix, version, formatInfo) {
        var dataMask = DATA_MASKS[formatInfo.dataMask];
        var dimension = matrix.height;
        var functionPatternMask = buildFunctionPatternMask(version);
        var codewords = [];
        var currentByte = 0;
        var bitsRead = 0;
        // Read columns in pairs, from right to left
        var readingUp = true;
        for (var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {
            if (columnIndex === 6) {
                columnIndex--;
            }
            for (var i = 0; i < dimension; i++) {
                var y = readingUp ? dimension - 1 - i : i;
                for (var columnOffset = 0; columnOffset < 2; columnOffset++) {
                    var x = columnIndex - columnOffset;
                    if (!functionPatternMask.get(x, y)) {
                        bitsRead++;
                        var bit = matrix.get(x, y);
                        if (dataMask({ y: y, x: x })) {
                            bit = !bit;
                        }
                        currentByte = pushBit(bit, currentByte);
                        if (bitsRead === 8) {
                            codewords.push(currentByte);
                            bitsRead = 0;
                            currentByte = 0;
                        }
                    }
                }
            }
            readingUp = !readingUp;
        }
        return codewords;
    }
    function readVersion(matrix) {
        var dimension = matrix.height;
        var provisionalVersion = Math.floor((dimension - 17) / 4);
        if (provisionalVersion <= 6) {
            return version_1.VERSIONS[provisionalVersion - 1];
        }
        var topRightVersionBits = 0;
        for (var y = 5; y >= 0; y--) {
            for (var x = dimension - 9; x >= dimension - 11; x--) {
                topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
            }
        }
        var bottomLeftVersionBits = 0;
        for (var x = 5; x >= 0; x--) {
            for (var y = dimension - 9; y >= dimension - 11; y--) {
                bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
            }
        }
        var bestDifference = Infinity;
        var bestVersion;
        for (var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++) {
            var version = VERSIONS_1[_i];
            if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {
                return version;
            }
            var difference = numBitsDiffering(topRightVersionBits, version.infoBits);
            if (difference < bestDifference) {
                bestVersion = version;
                bestDifference = difference;
            }
            difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
            if (difference < bestDifference) {
                bestVersion = version;
                bestDifference = difference;
            }
        }
        // We can tolerate up to 3 bits of error since no two version info codewords will
        // differ in less than 8 bits.
        if (bestDifference <= 3) {
            return bestVersion;
        }
    }
    function readFormatInformation(matrix) {
        var topLeftFormatInfoBits = 0;
        for (var x = 0; x <= 8; x++) {
            if (x !== 6) {
                topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
            }
        }
        for (var y = 7; y >= 0; y--) {
            if (y !== 6) {
                topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
            }
        }
        var dimension = matrix.height;
        var topRightBottomRightFormatInfoBits = 0;
        for (var y = dimension - 1; y >= dimension - 7; y--) {
            topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
        }
        for (var x = dimension - 8; x < dimension; x++) {
            topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
        }
        var bestDifference = Infinity;
        var bestFormatInfo = null;
        for (var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++) {
            var _a = FORMAT_INFO_TABLE_1[_i], bits = _a.bits, formatInfo = _a.formatInfo;
            if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {
                return formatInfo;
            }
            var difference = numBitsDiffering(topLeftFormatInfoBits, bits);
            if (difference < bestDifference) {
                bestFormatInfo = formatInfo;
                bestDifference = difference;
            }
            if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {
                difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
                if (difference < bestDifference) {
                    bestFormatInfo = formatInfo;
                    bestDifference = difference;
                }
            }
        }
        // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
        if (bestDifference <= 3) {
            return bestFormatInfo;
        }
        return null;
    }
    function getDataBlocks(codewords, version, ecLevel) {
        var ecInfo = version.errorCorrectionLevels[ecLevel];
        var dataBlocks = [];
        var totalCodewords = 0;
        ecInfo.ecBlocks.forEach(function (block) {
            for (var i = 0; i < block.numBlocks; i++) {
                dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });
                totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
            }
        });
        // In some cases the QR code will be malformed enough that we pull off more or less than we should.
        // If we pull off less there's nothing we can do.
        // If we pull off more we can safely truncate
        if (codewords.length < totalCodewords) {
            return null;
        }
        codewords = codewords.slice(0, totalCodewords);
        var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
        // Pull codewords to fill the blocks up to the minimum size
        for (var i = 0; i < shortBlockSize; i++) {
            for (var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++) {
                var dataBlock = dataBlocks_1[_i];
                dataBlock.codewords.push(codewords.shift());
            }
        }
        // If there are any large blocks, pull codewords to fill the last element of those
        if (ecInfo.ecBlocks.length > 1) {
            var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
            var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
            for (var i = 0; i < largeBlockCount; i++) {
                dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
            }
        }
        // Add the rest of the codewords to the blocks. These are the error correction codewords.
        while (codewords.length > 0) {
            for (var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++) {
                var dataBlock = dataBlocks_2[_a];
                dataBlock.codewords.push(codewords.shift());
            }
        }
        return dataBlocks;
    }
    function decodeMatrix(matrix) {
        var version = readVersion(matrix);
        if (!version) {
            return null;
        }
        var formatInfo = readFormatInformation(matrix);
        if (!formatInfo) {
            return null;
        }
        var codewords = readCodewords(matrix, version, formatInfo);
        var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
        if (!dataBlocks) {
            return null;
        }
        // Count total number of data bytes
        var totalBytes = dataBlocks.reduce(function (a, b) { return a + b.numDataCodewords; }, 0);
        var resultBytes = new Uint8ClampedArray(totalBytes);
        var resultIndex = 0;
        for (var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++) {
            var dataBlock = dataBlocks_3[_i];
            var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
            if (!correctedBytes) {
                return null;
            }
            for (var i = 0; i < dataBlock.numDataCodewords; i++) {
                resultBytes[resultIndex++] = correctedBytes[i];
            }
        }
        try {
            return decodeData_1.decode(resultBytes, version.versionNumber);
        }
        catch (_a) {
            return null;
        }
    }
    function decode(matrix) {
        if (matrix == null) {
            return null;
        }
        var result = decodeMatrix(matrix);
        if (result) {
            return result;
        }
        // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
        for (var x = 0; x < matrix.width; x++) {
            for (var y = x + 1; y < matrix.height; y++) {
                if (matrix.get(x, y) !== matrix.get(y, x)) {
                    matrix.set(x, y, !matrix.get(x, y));
                    matrix.set(y, x, !matrix.get(y, x));
                }
            }
        }
        return decodeMatrix(matrix);
    }
    exports.decode = decode;


    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    // tslint:disable:no-bitwise
    var BitStream_1 = __webpack_require__(7);
    var shiftJISTable_1 = __webpack_require__(8);
    var Mode;
    (function (Mode) {
        Mode["Numeric"] = "numeric";
        Mode["Alphanumeric"] = "alphanumeric";
        Mode["Byte"] = "byte";
        Mode["Kanji"] = "kanji";
        Mode["ECI"] = "eci";
    })(Mode = exports.Mode || (exports.Mode = {}));
    var ModeByte;
    (function (ModeByte) {
        ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
        ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
        ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
        ModeByte[ModeByte["Byte"] = 4] = "Byte";
        ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
        ModeByte[ModeByte["ECI"] = 7] = "ECI";
        // StructuredAppend = 0x3,
        // FNC1FirstPosition = 0x5,
        // FNC1SecondPosition = 0x9,
    })(ModeByte || (ModeByte = {}));
    function decodeNumeric(stream, size) {
        var bytes = [];
        var text = "";
        var characterCountSize = [10, 12, 14][size];
        var length = stream.readBits(characterCountSize);
        // Read digits in groups of 3
        while (length >= 3) {
            var num = stream.readBits(10);
            if (num >= 1000) {
                throw new Error("Invalid numeric value above 999");
            }
            var a = Math.floor(num / 100);
            var b = Math.floor(num / 10) % 10;
            var c = num % 10;
            bytes.push(48 + a, 48 + b, 48 + c);
            text += a.toString() + b.toString() + c.toString();
            length -= 3;
        }
        // If the number of digits aren't a multiple of 3, the remaining digits are special cased.
        if (length === 2) {
            var num = stream.readBits(7);
            if (num >= 100) {
                throw new Error("Invalid numeric value above 99");
            }
            var a = Math.floor(num / 10);
            var b = num % 10;
            bytes.push(48 + a, 48 + b);
            text += a.toString() + b.toString();
        }
        else if (length === 1) {
            var num = stream.readBits(4);
            if (num >= 10) {
                throw new Error("Invalid numeric value above 9");
            }
            bytes.push(48 + num);
            text += num.toString();
        }
        return { bytes: bytes, text: text };
    }
    var AlphanumericCharacterCodes = [
        "0", "1", "2", "3", "4", "5", "6", "7", "8",
        "9", "A", "B", "C", "D", "E", "F", "G", "H",
        "I", "J", "K", "L", "M", "N", "O", "P", "Q",
        "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
        " ", "$", "%", "*", "+", "-", ".", "/", ":",
    ];
    function decodeAlphanumeric(stream, size) {
        var bytes = [];
        var text = "";
        var characterCountSize = [9, 11, 13][size];
        var length = stream.readBits(characterCountSize);
        while (length >= 2) {
            var v = stream.readBits(11);
            var a = Math.floor(v / 45);
            var b = v % 45;
            bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
            text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
            length -= 2;
        }
        if (length === 1) {
            var a = stream.readBits(6);
            bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
            text += AlphanumericCharacterCodes[a];
        }
        return { bytes: bytes, text: text };
    }
    function decodeByte(stream, size) {
        var bytes = [];
        var text = "";
        var characterCountSize = [8, 16, 16][size];
        var length = stream.readBits(characterCountSize);
        for (var i = 0; i < length; i++) {
            var b = stream.readBits(8);
            bytes.push(b);
        }
        try {
            text += decodeURIComponent(bytes.map(function (b) { return "%" + ("0" + b.toString(16)).substr(-2); }).join(""));
        }
        catch (_a) {
            // failed to decode
        }
        return { bytes: bytes, text: text };
    }
    function decodeKanji(stream, size) {
        var bytes = [];
        var text = "";
        var characterCountSize = [8, 10, 12][size];
        var length = stream.readBits(characterCountSize);
        for (var i = 0; i < length; i++) {
            var k = stream.readBits(13);
            var c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);
            if (c < 0x1F00) {
                c += 0x8140;
            }
            else {
                c += 0xC140;
            }
            bytes.push(c >> 8, c & 0xFF);
            text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
        }
        return { bytes: bytes, text: text };
    }
    function decode(data, version) {
        var stream = new BitStream_1.BitStream(data);
        // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).
        var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
        var result = {
            text: "",
            bytes: [],
            chunks: [],
        };
        while (stream.available() >= 4) {
            var mode = stream.readBits(4);
            if (mode === ModeByte.Terminator) {
                return result;
            }
            else if (mode === ModeByte.ECI) {
                if (stream.readBits(1) === 0) {
                    result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: stream.readBits(7),
                    });
                }
                else if (stream.readBits(1) === 0) {
                    result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: stream.readBits(14),
                    });
                }
                else if (stream.readBits(1) === 0) {
                    result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: stream.readBits(21),
                    });
                }
                else {
                    // ECI data seems corrupted
                    result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: -1,
                    });
                }
            }
            else if (mode === ModeByte.Numeric) {
                var numericResult = decodeNumeric(stream, size);
                result.text += numericResult.text;
                (_a = result.bytes).push.apply(_a, numericResult.bytes);
                result.chunks.push({
                    type: Mode.Numeric,
                    text: numericResult.text,
                });
            }
            else if (mode === ModeByte.Alphanumeric) {
                var alphanumericResult = decodeAlphanumeric(stream, size);
                result.text += alphanumericResult.text;
                (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);
                result.chunks.push({
                    type: Mode.Alphanumeric,
                    text: alphanumericResult.text,
                });
            }
            else if (mode === ModeByte.Byte) {
                var byteResult = decodeByte(stream, size);
                result.text += byteResult.text;
                (_c = result.bytes).push.apply(_c, byteResult.bytes);
                result.chunks.push({
                    type: Mode.Byte,
                    bytes: byteResult.bytes,
                    text: byteResult.text,
                });
            }
            else if (mode === ModeByte.Kanji) {
                var kanjiResult = decodeKanji(stream, size);
                result.text += kanjiResult.text;
                (_d = result.bytes).push.apply(_d, kanjiResult.bytes);
                result.chunks.push({
                    type: Mode.Kanji,
                    bytes: kanjiResult.bytes,
                    text: kanjiResult.text,
                });
            }
        }
        var _a, _b, _c, _d;
    }
    exports.decode = decode;


    /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {

    // tslint:disable:no-bitwise
    Object.defineProperty(exports, "__esModule", { value: true });
    var BitStream = /** @class */ (function () {
        function BitStream(bytes) {
            this.byteOffset = 0;
            this.bitOffset = 0;
            this.bytes = bytes;
        }
        BitStream.prototype.readBits = function (numBits) {
            if (numBits < 1 || numBits > 32 || numBits > this.available()) {
                throw new Error("Cannot read " + numBits.toString() + " bits");
            }
            var result = 0;
            // First, read remainder from current byte
            if (this.bitOffset > 0) {
                var bitsLeft = 8 - this.bitOffset;
                var toRead = numBits < bitsLeft ? numBits : bitsLeft;
                var bitsToNotRead = bitsLeft - toRead;
                var mask = (0xFF >> (8 - toRead)) << bitsToNotRead;
                result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                numBits -= toRead;
                this.bitOffset += toRead;
                if (this.bitOffset === 8) {
                    this.bitOffset = 0;
                    this.byteOffset++;
                }
            }
            // Next read whole bytes
            if (numBits > 0) {
                while (numBits >= 8) {
                    result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);
                    this.byteOffset++;
                    numBits -= 8;
                }
                // Finally read a partial byte
                if (numBits > 0) {
                    var bitsToNotRead = 8 - numBits;
                    var mask = (0xFF >> bitsToNotRead) << bitsToNotRead;
                    result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);
                    this.bitOffset += numBits;
                }
            }
            return result;
        };
        BitStream.prototype.available = function () {
            return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
        };
        return BitStream;
    }());
    exports.BitStream = BitStream;


    /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shiftJISTable = {
        0x20: 0x0020,
        0x21: 0x0021,
        0x22: 0x0022,
        0x23: 0x0023,
        0x24: 0x0024,
        0x25: 0x0025,
        0x26: 0x0026,
        0x27: 0x0027,
        0x28: 0x0028,
        0x29: 0x0029,
        0x2A: 0x002A,
        0x2B: 0x002B,
        0x2C: 0x002C,
        0x2D: 0x002D,
        0x2E: 0x002E,
        0x2F: 0x002F,
        0x30: 0x0030,
        0x31: 0x0031,
        0x32: 0x0032,
        0x33: 0x0033,
        0x34: 0x0034,
        0x35: 0x0035,
        0x36: 0x0036,
        0x37: 0x0037,
        0x38: 0x0038,
        0x39: 0x0039,
        0x3A: 0x003A,
        0x3B: 0x003B,
        0x3C: 0x003C,
        0x3D: 0x003D,
        0x3E: 0x003E,
        0x3F: 0x003F,
        0x40: 0x0040,
        0x41: 0x0041,
        0x42: 0x0042,
        0x43: 0x0043,
        0x44: 0x0044,
        0x45: 0x0045,
        0x46: 0x0046,
        0x47: 0x0047,
        0x48: 0x0048,
        0x49: 0x0049,
        0x4A: 0x004A,
        0x4B: 0x004B,
        0x4C: 0x004C,
        0x4D: 0x004D,
        0x4E: 0x004E,
        0x4F: 0x004F,
        0x50: 0x0050,
        0x51: 0x0051,
        0x52: 0x0052,
        0x53: 0x0053,
        0x54: 0x0054,
        0x55: 0x0055,
        0x56: 0x0056,
        0x57: 0x0057,
        0x58: 0x0058,
        0x59: 0x0059,
        0x5A: 0x005A,
        0x5B: 0x005B,
        0x5C: 0x00A5,
        0x5D: 0x005D,
        0x5E: 0x005E,
        0x5F: 0x005F,
        0x60: 0x0060,
        0x61: 0x0061,
        0x62: 0x0062,
        0x63: 0x0063,
        0x64: 0x0064,
        0x65: 0x0065,
        0x66: 0x0066,
        0x67: 0x0067,
        0x68: 0x0068,
        0x69: 0x0069,
        0x6A: 0x006A,
        0x6B: 0x006B,
        0x6C: 0x006C,
        0x6D: 0x006D,
        0x6E: 0x006E,
        0x6F: 0x006F,
        0x70: 0x0070,
        0x71: 0x0071,
        0x72: 0x0072,
        0x73: 0x0073,
        0x74: 0x0074,
        0x75: 0x0075,
        0x76: 0x0076,
        0x77: 0x0077,
        0x78: 0x0078,
        0x79: 0x0079,
        0x7A: 0x007A,
        0x7B: 0x007B,
        0x7C: 0x007C,
        0x7D: 0x007D,
        0x7E: 0x203E,
        0x8140: 0x3000,
        0x8141: 0x3001,
        0x8142: 0x3002,
        0x8143: 0xFF0C,
        0x8144: 0xFF0E,
        0x8145: 0x30FB,
        0x8146: 0xFF1A,
        0x8147: 0xFF1B,
        0x8148: 0xFF1F,
        0x8149: 0xFF01,
        0x814A: 0x309B,
        0x814B: 0x309C,
        0x814C: 0x00B4,
        0x814D: 0xFF40,
        0x814E: 0x00A8,
        0x814F: 0xFF3E,
        0x8150: 0xFFE3,
        0x8151: 0xFF3F,
        0x8152: 0x30FD,
        0x8153: 0x30FE,
        0x8154: 0x309D,
        0x8155: 0x309E,
        0x8156: 0x3003,
        0x8157: 0x4EDD,
        0x8158: 0x3005,
        0x8159: 0x3006,
        0x815A: 0x3007,
        0x815B: 0x30FC,
        0x815C: 0x2015,
        0x815D: 0x2010,
        0x815E: 0xFF0F,
        0x815F: 0x005C,
        0x8160: 0x301C,
        0x8161: 0x2016,
        0x8162: 0xFF5C,
        0x8163: 0x2026,
        0x8164: 0x2025,
        0x8165: 0x2018,
        0x8166: 0x2019,
        0x8167: 0x201C,
        0x8168: 0x201D,
        0x8169: 0xFF08,
        0x816A: 0xFF09,
        0x816B: 0x3014,
        0x816C: 0x3015,
        0x816D: 0xFF3B,
        0x816E: 0xFF3D,
        0x816F: 0xFF5B,
        0x8170: 0xFF5D,
        0x8171: 0x3008,
        0x8172: 0x3009,
        0x8173: 0x300A,
        0x8174: 0x300B,
        0x8175: 0x300C,
        0x8176: 0x300D,
        0x8177: 0x300E,
        0x8178: 0x300F,
        0x8179: 0x3010,
        0x817A: 0x3011,
        0x817B: 0xFF0B,
        0x817C: 0x2212,
        0x817D: 0x00B1,
        0x817E: 0x00D7,
        0x8180: 0x00F7,
        0x8181: 0xFF1D,
        0x8182: 0x2260,
        0x8183: 0xFF1C,
        0x8184: 0xFF1E,
        0x8185: 0x2266,
        0x8186: 0x2267,
        0x8187: 0x221E,
        0x8188: 0x2234,
        0x8189: 0x2642,
        0x818A: 0x2640,
        0x818B: 0x00B0,
        0x818C: 0x2032,
        0x818D: 0x2033,
        0x818E: 0x2103,
        0x818F: 0xFFE5,
        0x8190: 0xFF04,
        0x8191: 0x00A2,
        0x8192: 0x00A3,
        0x8193: 0xFF05,
        0x8194: 0xFF03,
        0x8195: 0xFF06,
        0x8196: 0xFF0A,
        0x8197: 0xFF20,
        0x8198: 0x00A7,
        0x8199: 0x2606,
        0x819A: 0x2605,
        0x819B: 0x25CB,
        0x819C: 0x25CF,
        0x819D: 0x25CE,
        0x819E: 0x25C7,
        0x819F: 0x25C6,
        0x81A0: 0x25A1,
        0x81A1: 0x25A0,
        0x81A2: 0x25B3,
        0x81A3: 0x25B2,
        0x81A4: 0x25BD,
        0x81A5: 0x25BC,
        0x81A6: 0x203B,
        0x81A7: 0x3012,
        0x81A8: 0x2192,
        0x81A9: 0x2190,
        0x81AA: 0x2191,
        0x81AB: 0x2193,
        0x81AC: 0x3013,
        0x81B8: 0x2208,
        0x81B9: 0x220B,
        0x81BA: 0x2286,
        0x81BB: 0x2287,
        0x81BC: 0x2282,
        0x81BD: 0x2283,
        0x81BE: 0x222A,
        0x81BF: 0x2229,
        0x81C8: 0x2227,
        0x81C9: 0x2228,
        0x81CA: 0x00AC,
        0x81CB: 0x21D2,
        0x81CC: 0x21D4,
        0x81CD: 0x2200,
        0x81CE: 0x2203,
        0x81DA: 0x2220,
        0x81DB: 0x22A5,
        0x81DC: 0x2312,
        0x81DD: 0x2202,
        0x81DE: 0x2207,
        0x81DF: 0x2261,
        0x81E0: 0x2252,
        0x81E1: 0x226A,
        0x81E2: 0x226B,
        0x81E3: 0x221A,
        0x81E4: 0x223D,
        0x81E5: 0x221D,
        0x81E6: 0x2235,
        0x81E7: 0x222B,
        0x81E8: 0x222C,
        0x81F0: 0x212B,
        0x81F1: 0x2030,
        0x81F2: 0x266F,
        0x81F3: 0x266D,
        0x81F4: 0x266A,
        0x81F5: 0x2020,
        0x81F6: 0x2021,
        0x81F7: 0x00B6,
        0x81FC: 0x25EF,
        0x824F: 0xFF10,
        0x8250: 0xFF11,
        0x8251: 0xFF12,
        0x8252: 0xFF13,
        0x8253: 0xFF14,
        0x8254: 0xFF15,
        0x8255: 0xFF16,
        0x8256: 0xFF17,
        0x8257: 0xFF18,
        0x8258: 0xFF19,
        0x8260: 0xFF21,
        0x8261: 0xFF22,
        0x8262: 0xFF23,
        0x8263: 0xFF24,
        0x8264: 0xFF25,
        0x8265: 0xFF26,
        0x8266: 0xFF27,
        0x8267: 0xFF28,
        0x8268: 0xFF29,
        0x8269: 0xFF2A,
        0x826A: 0xFF2B,
        0x826B: 0xFF2C,
        0x826C: 0xFF2D,
        0x826D: 0xFF2E,
        0x826E: 0xFF2F,
        0x826F: 0xFF30,
        0x8270: 0xFF31,
        0x8271: 0xFF32,
        0x8272: 0xFF33,
        0x8273: 0xFF34,
        0x8274: 0xFF35,
        0x8275: 0xFF36,
        0x8276: 0xFF37,
        0x8277: 0xFF38,
        0x8278: 0xFF39,
        0x8279: 0xFF3A,
        0x8281: 0xFF41,
        0x8282: 0xFF42,
        0x8283: 0xFF43,
        0x8284: 0xFF44,
        0x8285: 0xFF45,
        0x8286: 0xFF46,
        0x8287: 0xFF47,
        0x8288: 0xFF48,
        0x8289: 0xFF49,
        0x828A: 0xFF4A,
        0x828B: 0xFF4B,
        0x828C: 0xFF4C,
        0x828D: 0xFF4D,
        0x828E: 0xFF4E,
        0x828F: 0xFF4F,
        0x8290: 0xFF50,
        0x8291: 0xFF51,
        0x8292: 0xFF52,
        0x8293: 0xFF53,
        0x8294: 0xFF54,
        0x8295: 0xFF55,
        0x8296: 0xFF56,
        0x8297: 0xFF57,
        0x8298: 0xFF58,
        0x8299: 0xFF59,
        0x829A: 0xFF5A,
        0x829F: 0x3041,
        0x82A0: 0x3042,
        0x82A1: 0x3043,
        0x82A2: 0x3044,
        0x82A3: 0x3045,
        0x82A4: 0x3046,
        0x82A5: 0x3047,
        0x82A6: 0x3048,
        0x82A7: 0x3049,
        0x82A8: 0x304A,
        0x82A9: 0x304B,
        0x82AA: 0x304C,
        0x82AB: 0x304D,
        0x82AC: 0x304E,
        0x82AD: 0x304F,
        0x82AE: 0x3050,
        0x82AF: 0x3051,
        0x82B0: 0x3052,
        0x82B1: 0x3053,
        0x82B2: 0x3054,
        0x82B3: 0x3055,
        0x82B4: 0x3056,
        0x82B5: 0x3057,
        0x82B6: 0x3058,
        0x82B7: 0x3059,
        0x82B8: 0x305A,
        0x82B9: 0x305B,
        0x82BA: 0x305C,
        0x82BB: 0x305D,
        0x82BC: 0x305E,
        0x82BD: 0x305F,
        0x82BE: 0x3060,
        0x82BF: 0x3061,
        0x82C0: 0x3062,
        0x82C1: 0x3063,
        0x82C2: 0x3064,
        0x82C3: 0x3065,
        0x82C4: 0x3066,
        0x82C5: 0x3067,
        0x82C6: 0x3068,
        0x82C7: 0x3069,
        0x82C8: 0x306A,
        0x82C9: 0x306B,
        0x82CA: 0x306C,
        0x82CB: 0x306D,
        0x82CC: 0x306E,
        0x82CD: 0x306F,
        0x82CE: 0x3070,
        0x82CF: 0x3071,
        0x82D0: 0x3072,
        0x82D1: 0x3073,
        0x82D2: 0x3074,
        0x82D3: 0x3075,
        0x82D4: 0x3076,
        0x82D5: 0x3077,
        0x82D6: 0x3078,
        0x82D7: 0x3079,
        0x82D8: 0x307A,
        0x82D9: 0x307B,
        0x82DA: 0x307C,
        0x82DB: 0x307D,
        0x82DC: 0x307E,
        0x82DD: 0x307F,
        0x82DE: 0x3080,
        0x82DF: 0x3081,
        0x82E0: 0x3082,
        0x82E1: 0x3083,
        0x82E2: 0x3084,
        0x82E3: 0x3085,
        0x82E4: 0x3086,
        0x82E5: 0x3087,
        0x82E6: 0x3088,
        0x82E7: 0x3089,
        0x82E8: 0x308A,
        0x82E9: 0x308B,
        0x82EA: 0x308C,
        0x82EB: 0x308D,
        0x82EC: 0x308E,
        0x82ED: 0x308F,
        0x82EE: 0x3090,
        0x82EF: 0x3091,
        0x82F0: 0x3092,
        0x82F1: 0x3093,
        0x8340: 0x30A1,
        0x8341: 0x30A2,
        0x8342: 0x30A3,
        0x8343: 0x30A4,
        0x8344: 0x30A5,
        0x8345: 0x30A6,
        0x8346: 0x30A7,
        0x8347: 0x30A8,
        0x8348: 0x30A9,
        0x8349: 0x30AA,
        0x834A: 0x30AB,
        0x834B: 0x30AC,
        0x834C: 0x30AD,
        0x834D: 0x30AE,
        0x834E: 0x30AF,
        0x834F: 0x30B0,
        0x8350: 0x30B1,
        0x8351: 0x30B2,
        0x8352: 0x30B3,
        0x8353: 0x30B4,
        0x8354: 0x30B5,
        0x8355: 0x30B6,
        0x8356: 0x30B7,
        0x8357: 0x30B8,
        0x8358: 0x30B9,
        0x8359: 0x30BA,
        0x835A: 0x30BB,
        0x835B: 0x30BC,
        0x835C: 0x30BD,
        0x835D: 0x30BE,
        0x835E: 0x30BF,
        0x835F: 0x30C0,
        0x8360: 0x30C1,
        0x8361: 0x30C2,
        0x8362: 0x30C3,
        0x8363: 0x30C4,
        0x8364: 0x30C5,
        0x8365: 0x30C6,
        0x8366: 0x30C7,
        0x8367: 0x30C8,
        0x8368: 0x30C9,
        0x8369: 0x30CA,
        0x836A: 0x30CB,
        0x836B: 0x30CC,
        0x836C: 0x30CD,
        0x836D: 0x30CE,
        0x836E: 0x30CF,
        0x836F: 0x30D0,
        0x8370: 0x30D1,
        0x8371: 0x30D2,
        0x8372: 0x30D3,
        0x8373: 0x30D4,
        0x8374: 0x30D5,
        0x8375: 0x30D6,
        0x8376: 0x30D7,
        0x8377: 0x30D8,
        0x8378: 0x30D9,
        0x8379: 0x30DA,
        0x837A: 0x30DB,
        0x837B: 0x30DC,
        0x837C: 0x30DD,
        0x837D: 0x30DE,
        0x837E: 0x30DF,
        0x8380: 0x30E0,
        0x8381: 0x30E1,
        0x8382: 0x30E2,
        0x8383: 0x30E3,
        0x8384: 0x30E4,
        0x8385: 0x30E5,
        0x8386: 0x30E6,
        0x8387: 0x30E7,
        0x8388: 0x30E8,
        0x8389: 0x30E9,
        0x838A: 0x30EA,
        0x838B: 0x30EB,
        0x838C: 0x30EC,
        0x838D: 0x30ED,
        0x838E: 0x30EE,
        0x838F: 0x30EF,
        0x8390: 0x30F0,
        0x8391: 0x30F1,
        0x8392: 0x30F2,
        0x8393: 0x30F3,
        0x8394: 0x30F4,
        0x8395: 0x30F5,
        0x8396: 0x30F6,
        0x839F: 0x0391,
        0x83A0: 0x0392,
        0x83A1: 0x0393,
        0x83A2: 0x0394,
        0x83A3: 0x0395,
        0x83A4: 0x0396,
        0x83A5: 0x0397,
        0x83A6: 0x0398,
        0x83A7: 0x0399,
        0x83A8: 0x039A,
        0x83A9: 0x039B,
        0x83AA: 0x039C,
        0x83AB: 0x039D,
        0x83AC: 0x039E,
        0x83AD: 0x039F,
        0x83AE: 0x03A0,
        0x83AF: 0x03A1,
        0x83B0: 0x03A3,
        0x83B1: 0x03A4,
        0x83B2: 0x03A5,
        0x83B3: 0x03A6,
        0x83B4: 0x03A7,
        0x83B5: 0x03A8,
        0x83B6: 0x03A9,
        0x83BF: 0x03B1,
        0x83C0: 0x03B2,
        0x83C1: 0x03B3,
        0x83C2: 0x03B4,
        0x83C3: 0x03B5,
        0x83C4: 0x03B6,
        0x83C5: 0x03B7,
        0x83C6: 0x03B8,
        0x83C7: 0x03B9,
        0x83C8: 0x03BA,
        0x83C9: 0x03BB,
        0x83CA: 0x03BC,
        0x83CB: 0x03BD,
        0x83CC: 0x03BE,
        0x83CD: 0x03BF,
        0x83CE: 0x03C0,
        0x83CF: 0x03C1,
        0x83D0: 0x03C3,
        0x83D1: 0x03C4,
        0x83D2: 0x03C5,
        0x83D3: 0x03C6,
        0x83D4: 0x03C7,
        0x83D5: 0x03C8,
        0x83D6: 0x03C9,
        0x8440: 0x0410,
        0x8441: 0x0411,
        0x8442: 0x0412,
        0x8443: 0x0413,
        0x8444: 0x0414,
        0x8445: 0x0415,
        0x8446: 0x0401,
        0x8447: 0x0416,
        0x8448: 0x0417,
        0x8449: 0x0418,
        0x844A: 0x0419,
        0x844B: 0x041A,
        0x844C: 0x041B,
        0x844D: 0x041C,
        0x844E: 0x041D,
        0x844F: 0x041E,
        0x8450: 0x041F,
        0x8451: 0x0420,
        0x8452: 0x0421,
        0x8453: 0x0422,
        0x8454: 0x0423,
        0x8455: 0x0424,
        0x8456: 0x0425,
        0x8457: 0x0426,
        0x8458: 0x0427,
        0x8459: 0x0428,
        0x845A: 0x0429,
        0x845B: 0x042A,
        0x845C: 0x042B,
        0x845D: 0x042C,
        0x845E: 0x042D,
        0x845F: 0x042E,
        0x8460: 0x042F,
        0x8470: 0x0430,
        0x8471: 0x0431,
        0x8472: 0x0432,
        0x8473: 0x0433,
        0x8474: 0x0434,
        0x8475: 0x0435,
        0x8476: 0x0451,
        0x8477: 0x0436,
        0x8478: 0x0437,
        0x8479: 0x0438,
        0x847A: 0x0439,
        0x847B: 0x043A,
        0x847C: 0x043B,
        0x847D: 0x043C,
        0x847E: 0x043D,
        0x8480: 0x043E,
        0x8481: 0x043F,
        0x8482: 0x0440,
        0x8483: 0x0441,
        0x8484: 0x0442,
        0x8485: 0x0443,
        0x8486: 0x0444,
        0x8487: 0x0445,
        0x8488: 0x0446,
        0x8489: 0x0447,
        0x848A: 0x0448,
        0x848B: 0x0449,
        0x848C: 0x044A,
        0x848D: 0x044B,
        0x848E: 0x044C,
        0x848F: 0x044D,
        0x8490: 0x044E,
        0x8491: 0x044F,
        0x849F: 0x2500,
        0x84A0: 0x2502,
        0x84A1: 0x250C,
        0x84A2: 0x2510,
        0x84A3: 0x2518,
        0x84A4: 0x2514,
        0x84A5: 0x251C,
        0x84A6: 0x252C,
        0x84A7: 0x2524,
        0x84A8: 0x2534,
        0x84A9: 0x253C,
        0x84AA: 0x2501,
        0x84AB: 0x2503,
        0x84AC: 0x250F,
        0x84AD: 0x2513,
        0x84AE: 0x251B,
        0x84AF: 0x2517,
        0x84B0: 0x2523,
        0x84B1: 0x2533,
        0x84B2: 0x252B,
        0x84B3: 0x253B,
        0x84B4: 0x254B,
        0x84B5: 0x2520,
        0x84B6: 0x252F,
        0x84B7: 0x2528,
        0x84B8: 0x2537,
        0x84B9: 0x253F,
        0x84BA: 0x251D,
        0x84BB: 0x2530,
        0x84BC: 0x2525,
        0x84BD: 0x2538,
        0x84BE: 0x2542,
        0x889F: 0x4E9C,
        0x88A0: 0x5516,
        0x88A1: 0x5A03,
        0x88A2: 0x963F,
        0x88A3: 0x54C0,
        0x88A4: 0x611B,
        0x88A5: 0x6328,
        0x88A6: 0x59F6,
        0x88A7: 0x9022,
        0x88A8: 0x8475,
        0x88A9: 0x831C,
        0x88AA: 0x7A50,
        0x88AB: 0x60AA,
        0x88AC: 0x63E1,
        0x88AD: 0x6E25,
        0x88AE: 0x65ED,
        0x88AF: 0x8466,
        0x88B0: 0x82A6,
        0x88B1: 0x9BF5,
        0x88B2: 0x6893,
        0x88B3: 0x5727,
        0x88B4: 0x65A1,
        0x88B5: 0x6271,
        0x88B6: 0x5B9B,
        0x88B7: 0x59D0,
        0x88B8: 0x867B,
        0x88B9: 0x98F4,
        0x88BA: 0x7D62,
        0x88BB: 0x7DBE,
        0x88BC: 0x9B8E,
        0x88BD: 0x6216,
        0x88BE: 0x7C9F,
        0x88BF: 0x88B7,
        0x88C0: 0x5B89,
        0x88C1: 0x5EB5,
        0x88C2: 0x6309,
        0x88C3: 0x6697,
        0x88C4: 0x6848,
        0x88C5: 0x95C7,
        0x88C6: 0x978D,
        0x88C7: 0x674F,
        0x88C8: 0x4EE5,
        0x88C9: 0x4F0A,
        0x88CA: 0x4F4D,
        0x88CB: 0x4F9D,
        0x88CC: 0x5049,
        0x88CD: 0x56F2,
        0x88CE: 0x5937,
        0x88CF: 0x59D4,
        0x88D0: 0x5A01,
        0x88D1: 0x5C09,
        0x88D2: 0x60DF,
        0x88D3: 0x610F,
        0x88D4: 0x6170,
        0x88D5: 0x6613,
        0x88D6: 0x6905,
        0x88D7: 0x70BA,
        0x88D8: 0x754F,
        0x88D9: 0x7570,
        0x88DA: 0x79FB,
        0x88DB: 0x7DAD,
        0x88DC: 0x7DEF,
        0x88DD: 0x80C3,
        0x88DE: 0x840E,
        0x88DF: 0x8863,
        0x88E0: 0x8B02,
        0x88E1: 0x9055,
        0x88E2: 0x907A,
        0x88E3: 0x533B,
        0x88E4: 0x4E95,
        0x88E5: 0x4EA5,
        0x88E6: 0x57DF,
        0x88E7: 0x80B2,
        0x88E8: 0x90C1,
        0x88E9: 0x78EF,
        0x88EA: 0x4E00,
        0x88EB: 0x58F1,
        0x88EC: 0x6EA2,
        0x88ED: 0x9038,
        0x88EE: 0x7A32,
        0x88EF: 0x8328,
        0x88F0: 0x828B,
        0x88F1: 0x9C2F,
        0x88F2: 0x5141,
        0x88F3: 0x5370,
        0x88F4: 0x54BD,
        0x88F5: 0x54E1,
        0x88F6: 0x56E0,
        0x88F7: 0x59FB,
        0x88F8: 0x5F15,
        0x88F9: 0x98F2,
        0x88FA: 0x6DEB,
        0x88FB: 0x80E4,
        0x88FC: 0x852D,
        0x8940: 0x9662,
        0x8941: 0x9670,
        0x8942: 0x96A0,
        0x8943: 0x97FB,
        0x8944: 0x540B,
        0x8945: 0x53F3,
        0x8946: 0x5B87,
        0x8947: 0x70CF,
        0x8948: 0x7FBD,
        0x8949: 0x8FC2,
        0x894A: 0x96E8,
        0x894B: 0x536F,
        0x894C: 0x9D5C,
        0x894D: 0x7ABA,
        0x894E: 0x4E11,
        0x894F: 0x7893,
        0x8950: 0x81FC,
        0x8951: 0x6E26,
        0x8952: 0x5618,
        0x8953: 0x5504,
        0x8954: 0x6B1D,
        0x8955: 0x851A,
        0x8956: 0x9C3B,
        0x8957: 0x59E5,
        0x8958: 0x53A9,
        0x8959: 0x6D66,
        0x895A: 0x74DC,
        0x895B: 0x958F,
        0x895C: 0x5642,
        0x895D: 0x4E91,
        0x895E: 0x904B,
        0x895F: 0x96F2,
        0x8960: 0x834F,
        0x8961: 0x990C,
        0x8962: 0x53E1,
        0x8963: 0x55B6,
        0x8964: 0x5B30,
        0x8965: 0x5F71,
        0x8966: 0x6620,
        0x8967: 0x66F3,
        0x8968: 0x6804,
        0x8969: 0x6C38,
        0x896A: 0x6CF3,
        0x896B: 0x6D29,
        0x896C: 0x745B,
        0x896D: 0x76C8,
        0x896E: 0x7A4E,
        0x896F: 0x9834,
        0x8970: 0x82F1,
        0x8971: 0x885B,
        0x8972: 0x8A60,
        0x8973: 0x92ED,
        0x8974: 0x6DB2,
        0x8975: 0x75AB,
        0x8976: 0x76CA,
        0x8977: 0x99C5,
        0x8978: 0x60A6,
        0x8979: 0x8B01,
        0x897A: 0x8D8A,
        0x897B: 0x95B2,
        0x897C: 0x698E,
        0x897D: 0x53AD,
        0x897E: 0x5186,
        0x8980: 0x5712,
        0x8981: 0x5830,
        0x8982: 0x5944,
        0x8983: 0x5BB4,
        0x8984: 0x5EF6,
        0x8985: 0x6028,
        0x8986: 0x63A9,
        0x8987: 0x63F4,
        0x8988: 0x6CBF,
        0x8989: 0x6F14,
        0x898A: 0x708E,
        0x898B: 0x7114,
        0x898C: 0x7159,
        0x898D: 0x71D5,
        0x898E: 0x733F,
        0x898F: 0x7E01,
        0x8990: 0x8276,
        0x8991: 0x82D1,
        0x8992: 0x8597,
        0x8993: 0x9060,
        0x8994: 0x925B,
        0x8995: 0x9D1B,
        0x8996: 0x5869,
        0x8997: 0x65BC,
        0x8998: 0x6C5A,
        0x8999: 0x7525,
        0x899A: 0x51F9,
        0x899B: 0x592E,
        0x899C: 0x5965,
        0x899D: 0x5F80,
        0x899E: 0x5FDC,
        0x899F: 0x62BC,
        0x89A0: 0x65FA,
        0x89A1: 0x6A2A,
        0x89A2: 0x6B27,
        0x89A3: 0x6BB4,
        0x89A4: 0x738B,
        0x89A5: 0x7FC1,
        0x89A6: 0x8956,
        0x89A7: 0x9D2C,
        0x89A8: 0x9D0E,
        0x89A9: 0x9EC4,
        0x89AA: 0x5CA1,
        0x89AB: 0x6C96,
        0x89AC: 0x837B,
        0x89AD: 0x5104,
        0x89AE: 0x5C4B,
        0x89AF: 0x61B6,
        0x89B0: 0x81C6,
        0x89B1: 0x6876,
        0x89B2: 0x7261,
        0x89B3: 0x4E59,
        0x89B4: 0x4FFA,
        0x89B5: 0x5378,
        0x89B6: 0x6069,
        0x89B7: 0x6E29,
        0x89B8: 0x7A4F,
        0x89B9: 0x97F3,
        0x89BA: 0x4E0B,
        0x89BB: 0x5316,
        0x89BC: 0x4EEE,
        0x89BD: 0x4F55,
        0x89BE: 0x4F3D,
        0x89BF: 0x4FA1,
        0x89C0: 0x4F73,
        0x89C1: 0x52A0,
        0x89C2: 0x53EF,
        0x89C3: 0x5609,
        0x89C4: 0x590F,
        0x89C5: 0x5AC1,
        0x89C6: 0x5BB6,
        0x89C7: 0x5BE1,
        0x89C8: 0x79D1,
        0x89C9: 0x6687,
        0x89CA: 0x679C,
        0x89CB: 0x67B6,
        0x89CC: 0x6B4C,
        0x89CD: 0x6CB3,
        0x89CE: 0x706B,
        0x89CF: 0x73C2,
        0x89D0: 0x798D,
        0x89D1: 0x79BE,
        0x89D2: 0x7A3C,
        0x89D3: 0x7B87,
        0x89D4: 0x82B1,
        0x89D5: 0x82DB,
        0x89D6: 0x8304,
        0x89D7: 0x8377,
        0x89D8: 0x83EF,
        0x89D9: 0x83D3,
        0x89DA: 0x8766,
        0x89DB: 0x8AB2,
        0x89DC: 0x5629,
        0x89DD: 0x8CA8,
        0x89DE: 0x8FE6,
        0x89DF: 0x904E,
        0x89E0: 0x971E,
        0x89E1: 0x868A,
        0x89E2: 0x4FC4,
        0x89E3: 0x5CE8,
        0x89E4: 0x6211,
        0x89E5: 0x7259,
        0x89E6: 0x753B,
        0x89E7: 0x81E5,
        0x89E8: 0x82BD,
        0x89E9: 0x86FE,
        0x89EA: 0x8CC0,
        0x89EB: 0x96C5,
        0x89EC: 0x9913,
        0x89ED: 0x99D5,
        0x89EE: 0x4ECB,
        0x89EF: 0x4F1A,
        0x89F0: 0x89E3,
        0x89F1: 0x56DE,
        0x89F2: 0x584A,
        0x89F3: 0x58CA,
        0x89F4: 0x5EFB,
        0x89F5: 0x5FEB,
        0x89F6: 0x602A,
        0x89F7: 0x6094,
        0x89F8: 0x6062,
        0x89F9: 0x61D0,
        0x89FA: 0x6212,
        0x89FB: 0x62D0,
        0x89FC: 0x6539,
        0x8A40: 0x9B41,
        0x8A41: 0x6666,
        0x8A42: 0x68B0,
        0x8A43: 0x6D77,
        0x8A44: 0x7070,
        0x8A45: 0x754C,
        0x8A46: 0x7686,
        0x8A47: 0x7D75,
        0x8A48: 0x82A5,
        0x8A49: 0x87F9,
        0x8A4A: 0x958B,
        0x8A4B: 0x968E,
        0x8A4C: 0x8C9D,
        0x8A4D: 0x51F1,
        0x8A4E: 0x52BE,
        0x8A4F: 0x5916,
        0x8A50: 0x54B3,
        0x8A51: 0x5BB3,
        0x8A52: 0x5D16,
        0x8A53: 0x6168,
        0x8A54: 0x6982,
        0x8A55: 0x6DAF,
        0x8A56: 0x788D,
        0x8A57: 0x84CB,
        0x8A58: 0x8857,
        0x8A59: 0x8A72,
        0x8A5A: 0x93A7,
        0x8A5B: 0x9AB8,
        0x8A5C: 0x6D6C,
        0x8A5D: 0x99A8,
        0x8A5E: 0x86D9,
        0x8A5F: 0x57A3,
        0x8A60: 0x67FF,
        0x8A61: 0x86CE,
        0x8A62: 0x920E,
        0x8A63: 0x5283,
        0x8A64: 0x5687,
        0x8A65: 0x5404,
        0x8A66: 0x5ED3,
        0x8A67: 0x62E1,
        0x8A68: 0x64B9,
        0x8A69: 0x683C,
        0x8A6A: 0x6838,
        0x8A6B: 0x6BBB,
        0x8A6C: 0x7372,
        0x8A6D: 0x78BA,
        0x8A6E: 0x7A6B,
        0x8A6F: 0x899A,
        0x8A70: 0x89D2,
        0x8A71: 0x8D6B,
        0x8A72: 0x8F03,
        0x8A73: 0x90ED,
        0x8A74: 0x95A3,
        0x8A75: 0x9694,
        0x8A76: 0x9769,
        0x8A77: 0x5B66,
        0x8A78: 0x5CB3,
        0x8A79: 0x697D,
        0x8A7A: 0x984D,
        0x8A7B: 0x984E,
        0x8A7C: 0x639B,
        0x8A7D: 0x7B20,
        0x8A7E: 0x6A2B,
        0x8A80: 0x6A7F,
        0x8A81: 0x68B6,
        0x8A82: 0x9C0D,
        0x8A83: 0x6F5F,
        0x8A84: 0x5272,
        0x8A85: 0x559D,
        0x8A86: 0x6070,
        0x8A87: 0x62EC,
        0x8A88: 0x6D3B,
        0x8A89: 0x6E07,
        0x8A8A: 0x6ED1,
        0x8A8B: 0x845B,
        0x8A8C: 0x8910,
        0x8A8D: 0x8F44,
        0x8A8E: 0x4E14,
        0x8A8F: 0x9C39,
        0x8A90: 0x53F6,
        0x8A91: 0x691B,
        0x8A92: 0x6A3A,
        0x8A93: 0x9784,
        0x8A94: 0x682A,
        0x8A95: 0x515C,
        0x8A96: 0x7AC3,
        0x8A97: 0x84B2,
        0x8A98: 0x91DC,
        0x8A99: 0x938C,
        0x8A9A: 0x565B,
        0x8A9B: 0x9D28,
        0x8A9C: 0x6822,
        0x8A9D: 0x8305,
        0x8A9E: 0x8431,
        0x8A9F: 0x7CA5,
        0x8AA0: 0x5208,
        0x8AA1: 0x82C5,
        0x8AA2: 0x74E6,
        0x8AA3: 0x4E7E,
        0x8AA4: 0x4F83,
        0x8AA5: 0x51A0,
        0x8AA6: 0x5BD2,
        0x8AA7: 0x520A,
        0x8AA8: 0x52D8,
        0x8AA9: 0x52E7,
        0x8AAA: 0x5DFB,
        0x8AAB: 0x559A,
        0x8AAC: 0x582A,
        0x8AAD: 0x59E6,
        0x8AAE: 0x5B8C,
        0x8AAF: 0x5B98,
        0x8AB0: 0x5BDB,
        0x8AB1: 0x5E72,
        0x8AB2: 0x5E79,
        0x8AB3: 0x60A3,
        0x8AB4: 0x611F,
        0x8AB5: 0x6163,
        0x8AB6: 0x61BE,
        0x8AB7: 0x63DB,
        0x8AB8: 0x6562,
        0x8AB9: 0x67D1,
        0x8ABA: 0x6853,
        0x8ABB: 0x68FA,
        0x8ABC: 0x6B3E,
        0x8ABD: 0x6B53,
        0x8ABE: 0x6C57,
        0x8ABF: 0x6F22,
        0x8AC0: 0x6F97,
        0x8AC1: 0x6F45,
        0x8AC2: 0x74B0,
        0x8AC3: 0x7518,
        0x8AC4: 0x76E3,
        0x8AC5: 0x770B,
        0x8AC6: 0x7AFF,
        0x8AC7: 0x7BA1,
        0x8AC8: 0x7C21,
        0x8AC9: 0x7DE9,
        0x8ACA: 0x7F36,
        0x8ACB: 0x7FF0,
        0x8ACC: 0x809D,
        0x8ACD: 0x8266,
        0x8ACE: 0x839E,
        0x8ACF: 0x89B3,
        0x8AD0: 0x8ACC,
        0x8AD1: 0x8CAB,
        0x8AD2: 0x9084,
        0x8AD3: 0x9451,
        0x8AD4: 0x9593,
        0x8AD5: 0x9591,
        0x8AD6: 0x95A2,
        0x8AD7: 0x9665,
        0x8AD8: 0x97D3,
        0x8AD9: 0x9928,
        0x8ADA: 0x8218,
        0x8ADB: 0x4E38,
        0x8ADC: 0x542B,
        0x8ADD: 0x5CB8,
        0x8ADE: 0x5DCC,
        0x8ADF: 0x73A9,
        0x8AE0: 0x764C,
        0x8AE1: 0x773C,
        0x8AE2: 0x5CA9,
        0x8AE3: 0x7FEB,
        0x8AE4: 0x8D0B,
        0x8AE5: 0x96C1,
        0x8AE6: 0x9811,
        0x8AE7: 0x9854,
        0x8AE8: 0x9858,
        0x8AE9: 0x4F01,
        0x8AEA: 0x4F0E,
        0x8AEB: 0x5371,
        0x8AEC: 0x559C,
        0x8AED: 0x5668,
        0x8AEE: 0x57FA,
        0x8AEF: 0x5947,
        0x8AF0: 0x5B09,
        0x8AF1: 0x5BC4,
        0x8AF2: 0x5C90,
        0x8AF3: 0x5E0C,
        0x8AF4: 0x5E7E,
        0x8AF5: 0x5FCC,
        0x8AF6: 0x63EE,
        0x8AF7: 0x673A,
        0x8AF8: 0x65D7,
        0x8AF9: 0x65E2,
        0x8AFA: 0x671F,
        0x8AFB: 0x68CB,
        0x8AFC: 0x68C4,
        0x8B40: 0x6A5F,
        0x8B41: 0x5E30,
        0x8B42: 0x6BC5,
        0x8B43: 0x6C17,
        0x8B44: 0x6C7D,
        0x8B45: 0x757F,
        0x8B46: 0x7948,
        0x8B47: 0x5B63,
        0x8B48: 0x7A00,
        0x8B49: 0x7D00,
        0x8B4A: 0x5FBD,
        0x8B4B: 0x898F,
        0x8B4C: 0x8A18,
        0x8B4D: 0x8CB4,
        0x8B4E: 0x8D77,
        0x8B4F: 0x8ECC,
        0x8B50: 0x8F1D,
        0x8B51: 0x98E2,
        0x8B52: 0x9A0E,
        0x8B53: 0x9B3C,
        0x8B54: 0x4E80,
        0x8B55: 0x507D,
        0x8B56: 0x5100,
        0x8B57: 0x5993,
        0x8B58: 0x5B9C,
        0x8B59: 0x622F,
        0x8B5A: 0x6280,
        0x8B5B: 0x64EC,
        0x8B5C: 0x6B3A,
        0x8B5D: 0x72A0,
        0x8B5E: 0x7591,
        0x8B5F: 0x7947,
        0x8B60: 0x7FA9,
        0x8B61: 0x87FB,
        0x8B62: 0x8ABC,
        0x8B63: 0x8B70,
        0x8B64: 0x63AC,
        0x8B65: 0x83CA,
        0x8B66: 0x97A0,
        0x8B67: 0x5409,
        0x8B68: 0x5403,
        0x8B69: 0x55AB,
        0x8B6A: 0x6854,
        0x8B6B: 0x6A58,
        0x8B6C: 0x8A70,
        0x8B6D: 0x7827,
        0x8B6E: 0x6775,
        0x8B6F: 0x9ECD,
        0x8B70: 0x5374,
        0x8B71: 0x5BA2,
        0x8B72: 0x811A,
        0x8B73: 0x8650,
        0x8B74: 0x9006,
        0x8B75: 0x4E18,
        0x8B76: 0x4E45,
        0x8B77: 0x4EC7,
        0x8B78: 0x4F11,
        0x8B79: 0x53CA,
        0x8B7A: 0x5438,
        0x8B7B: 0x5BAE,
        0x8B7C: 0x5F13,
        0x8B7D: 0x6025,
        0x8B7E: 0x6551,
        0x8B80: 0x673D,
        0x8B81: 0x6C42,
        0x8B82: 0x6C72,
        0x8B83: 0x6CE3,
        0x8B84: 0x7078,
        0x8B85: 0x7403,
        0x8B86: 0x7A76,
        0x8B87: 0x7AAE,
        0x8B88: 0x7B08,
        0x8B89: 0x7D1A,
        0x8B8A: 0x7CFE,
        0x8B8B: 0x7D66,
        0x8B8C: 0x65E7,
        0x8B8D: 0x725B,
        0x8B8E: 0x53BB,
        0x8B8F: 0x5C45,
        0x8B90: 0x5DE8,
        0x8B91: 0x62D2,
        0x8B92: 0x62E0,
        0x8B93: 0x6319,
        0x8B94: 0x6E20,
        0x8B95: 0x865A,
        0x8B96: 0x8A31,
        0x8B97: 0x8DDD,
        0x8B98: 0x92F8,
        0x8B99: 0x6F01,
        0x8B9A: 0x79A6,
        0x8B9B: 0x9B5A,
        0x8B9C: 0x4EA8,
        0x8B9D: 0x4EAB,
        0x8B9E: 0x4EAC,
        0x8B9F: 0x4F9B,
        0x8BA0: 0x4FA0,
        0x8BA1: 0x50D1,
        0x8BA2: 0x5147,
        0x8BA3: 0x7AF6,
        0x8BA4: 0x5171,
        0x8BA5: 0x51F6,
        0x8BA6: 0x5354,
        0x8BA7: 0x5321,
        0x8BA8: 0x537F,
        0x8BA9: 0x53EB,
        0x8BAA: 0x55AC,
        0x8BAB: 0x5883,
        0x8BAC: 0x5CE1,
        0x8BAD: 0x5F37,
        0x8BAE: 0x5F4A,
        0x8BAF: 0x602F,
        0x8BB0: 0x6050,
        0x8BB1: 0x606D,
        0x8BB2: 0x631F,
        0x8BB3: 0x6559,
        0x8BB4: 0x6A4B,
        0x8BB5: 0x6CC1,
        0x8BB6: 0x72C2,
        0x8BB7: 0x72ED,
        0x8BB8: 0x77EF,
        0x8BB9: 0x80F8,
        0x8BBA: 0x8105,
        0x8BBB: 0x8208,
        0x8BBC: 0x854E,
        0x8BBD: 0x90F7,
        0x8BBE: 0x93E1,
        0x8BBF: 0x97FF,
        0x8BC0: 0x9957,
        0x8BC1: 0x9A5A,
        0x8BC2: 0x4EF0,
        0x8BC3: 0x51DD,
        0x8BC4: 0x5C2D,
        0x8BC5: 0x6681,
        0x8BC6: 0x696D,
        0x8BC7: 0x5C40,
        0x8BC8: 0x66F2,
        0x8BC9: 0x6975,
        0x8BCA: 0x7389,
        0x8BCB: 0x6850,
        0x8BCC: 0x7C81,
        0x8BCD: 0x50C5,
        0x8BCE: 0x52E4,
        0x8BCF: 0x5747,
        0x8BD0: 0x5DFE,
        0x8BD1: 0x9326,
        0x8BD2: 0x65A4,
        0x8BD3: 0x6B23,
        0x8BD4: 0x6B3D,
        0x8BD5: 0x7434,
        0x8BD6: 0x7981,
        0x8BD7: 0x79BD,
        0x8BD8: 0x7B4B,
        0x8BD9: 0x7DCA,
        0x8BDA: 0x82B9,
        0x8BDB: 0x83CC,
        0x8BDC: 0x887F,
        0x8BDD: 0x895F,
        0x8BDE: 0x8B39,
        0x8BDF: 0x8FD1,
        0x8BE0: 0x91D1,
        0x8BE1: 0x541F,
        0x8BE2: 0x9280,
        0x8BE3: 0x4E5D,
        0x8BE4: 0x5036,
        0x8BE5: 0x53E5,
        0x8BE6: 0x533A,
        0x8BE7: 0x72D7,
        0x8BE8: 0x7396,
        0x8BE9: 0x77E9,
        0x8BEA: 0x82E6,
        0x8BEB: 0x8EAF,
        0x8BEC: 0x99C6,
        0x8BED: 0x99C8,
        0x8BEE: 0x99D2,
        0x8BEF: 0x5177,
        0x8BF0: 0x611A,
        0x8BF1: 0x865E,
        0x8BF2: 0x55B0,
        0x8BF3: 0x7A7A,
        0x8BF4: 0x5076,
        0x8BF5: 0x5BD3,
        0x8BF6: 0x9047,
        0x8BF7: 0x9685,
        0x8BF8: 0x4E32,
        0x8BF9: 0x6ADB,
        0x8BFA: 0x91E7,
        0x8BFB: 0x5C51,
        0x8BFC: 0x5C48,
        0x8C40: 0x6398,
        0x8C41: 0x7A9F,
        0x8C42: 0x6C93,
        0x8C43: 0x9774,
        0x8C44: 0x8F61,
        0x8C45: 0x7AAA,
        0x8C46: 0x718A,
        0x8C47: 0x9688,
        0x8C48: 0x7C82,
        0x8C49: 0x6817,
        0x8C4A: 0x7E70,
        0x8C4B: 0x6851,
        0x8C4C: 0x936C,
        0x8C4D: 0x52F2,
        0x8C4E: 0x541B,
        0x8C4F: 0x85AB,
        0x8C50: 0x8A13,
        0x8C51: 0x7FA4,
        0x8C52: 0x8ECD,
        0x8C53: 0x90E1,
        0x8C54: 0x5366,
        0x8C55: 0x8888,
        0x8C56: 0x7941,
        0x8C57: 0x4FC2,
        0x8C58: 0x50BE,
        0x8C59: 0x5211,
        0x8C5A: 0x5144,
        0x8C5B: 0x5553,
        0x8C5C: 0x572D,
        0x8C5D: 0x73EA,
        0x8C5E: 0x578B,
        0x8C5F: 0x5951,
        0x8C60: 0x5F62,
        0x8C61: 0x5F84,
        0x8C62: 0x6075,
        0x8C63: 0x6176,
        0x8C64: 0x6167,
        0x8C65: 0x61A9,
        0x8C66: 0x63B2,
        0x8C67: 0x643A,
        0x8C68: 0x656C,
        0x8C69: 0x666F,
        0x8C6A: 0x6842,
        0x8C6B: 0x6E13,
        0x8C6C: 0x7566,
        0x8C6D: 0x7A3D,
        0x8C6E: 0x7CFB,
        0x8C6F: 0x7D4C,
        0x8C70: 0x7D99,
        0x8C71: 0x7E4B,
        0x8C72: 0x7F6B,
        0x8C73: 0x830E,
        0x8C74: 0x834A,
        0x8C75: 0x86CD,
        0x8C76: 0x8A08,
        0x8C77: 0x8A63,
        0x8C78: 0x8B66,
        0x8C79: 0x8EFD,
        0x8C7A: 0x981A,
        0x8C7B: 0x9D8F,
        0x8C7C: 0x82B8,
        0x8C7D: 0x8FCE,
        0x8C7E: 0x9BE8,
        0x8C80: 0x5287,
        0x8C81: 0x621F,
        0x8C82: 0x6483,
        0x8C83: 0x6FC0,
        0x8C84: 0x9699,
        0x8C85: 0x6841,
        0x8C86: 0x5091,
        0x8C87: 0x6B20,
        0x8C88: 0x6C7A,
        0x8C89: 0x6F54,
        0x8C8A: 0x7A74,
        0x8C8B: 0x7D50,
        0x8C8C: 0x8840,
        0x8C8D: 0x8A23,
        0x8C8E: 0x6708,
        0x8C8F: 0x4EF6,
        0x8C90: 0x5039,
        0x8C91: 0x5026,
        0x8C92: 0x5065,
        0x8C93: 0x517C,
        0x8C94: 0x5238,
        0x8C95: 0x5263,
        0x8C96: 0x55A7,
        0x8C97: 0x570F,
        0x8C98: 0x5805,
        0x8C99: 0x5ACC,
        0x8C9A: 0x5EFA,
        0x8C9B: 0x61B2,
        0x8C9C: 0x61F8,
        0x8C9D: 0x62F3,
        0x8C9E: 0x6372,
        0x8C9F: 0x691C,
        0x8CA0: 0x6A29,
        0x8CA1: 0x727D,
        0x8CA2: 0x72AC,
        0x8CA3: 0x732E,
        0x8CA4: 0x7814,
        0x8CA5: 0x786F,
        0x8CA6: 0x7D79,
        0x8CA7: 0x770C,
        0x8CA8: 0x80A9,
        0x8CA9: 0x898B,
        0x8CAA: 0x8B19,
        0x8CAB: 0x8CE2,
        0x8CAC: 0x8ED2,
        0x8CAD: 0x9063,
        0x8CAE: 0x9375,
        0x8CAF: 0x967A,
        0x8CB0: 0x9855,
        0x8CB1: 0x9A13,
        0x8CB2: 0x9E78,
        0x8CB3: 0x5143,
        0x8CB4: 0x539F,
        0x8CB5: 0x53B3,
        0x8CB6: 0x5E7B,
        0x8CB7: 0x5F26,
        0x8CB8: 0x6E1B,
        0x8CB9: 0x6E90,
        0x8CBA: 0x7384,
        0x8CBB: 0x73FE,
        0x8CBC: 0x7D43,
        0x8CBD: 0x8237,
        0x8CBE: 0x8A00,
        0x8CBF: 0x8AFA,
        0x8CC0: 0x9650,
        0x8CC1: 0x4E4E,
        0x8CC2: 0x500B,
        0x8CC3: 0x53E4,
        0x8CC4: 0x547C,
        0x8CC5: 0x56FA,
        0x8CC6: 0x59D1,
        0x8CC7: 0x5B64,
        0x8CC8: 0x5DF1,
        0x8CC9: 0x5EAB,
        0x8CCA: 0x5F27,
        0x8CCB: 0x6238,
        0x8CCC: 0x6545,
        0x8CCD: 0x67AF,
        0x8CCE: 0x6E56,
        0x8CCF: 0x72D0,
        0x8CD0: 0x7CCA,
        0x8CD1: 0x88B4,
        0x8CD2: 0x80A1,
        0x8CD3: 0x80E1,
        0x8CD4: 0x83F0,
        0x8CD5: 0x864E,
        0x8CD6: 0x8A87,
        0x8CD7: 0x8DE8,
        0x8CD8: 0x9237,
        0x8CD9: 0x96C7,
        0x8CDA: 0x9867,
        0x8CDB: 0x9F13,
        0x8CDC: 0x4E94,
        0x8CDD: 0x4E92,
        0x8CDE: 0x4F0D,
        0x8CDF: 0x5348,
        0x8CE0: 0x5449,
        0x8CE1: 0x543E,
        0x8CE2: 0x5A2F,
        0x8CE3: 0x5F8C,
        0x8CE4: 0x5FA1,
        0x8CE5: 0x609F,
        0x8CE6: 0x68A7,
        0x8CE7: 0x6A8E,
        0x8CE8: 0x745A,
        0x8CE9: 0x7881,
        0x8CEA: 0x8A9E,
        0x8CEB: 0x8AA4,
        0x8CEC: 0x8B77,
        0x8CED: 0x9190,
        0x8CEE: 0x4E5E,
        0x8CEF: 0x9BC9,
        0x8CF0: 0x4EA4,
        0x8CF1: 0x4F7C,
        0x8CF2: 0x4FAF,
        0x8CF3: 0x5019,
        0x8CF4: 0x5016,
        0x8CF5: 0x5149,
        0x8CF6: 0x516C,
        0x8CF7: 0x529F,
        0x8CF8: 0x52B9,
        0x8CF9: 0x52FE,
        0x8CFA: 0x539A,
        0x8CFB: 0x53E3,
        0x8CFC: 0x5411,
        0x8D40: 0x540E,
        0x8D41: 0x5589,
        0x8D42: 0x5751,
        0x8D43: 0x57A2,
        0x8D44: 0x597D,
        0x8D45: 0x5B54,
        0x8D46: 0x5B5D,
        0x8D47: 0x5B8F,
        0x8D48: 0x5DE5,
        0x8D49: 0x5DE7,
        0x8D4A: 0x5DF7,
        0x8D4B: 0x5E78,
        0x8D4C: 0x5E83,
        0x8D4D: 0x5E9A,
        0x8D4E: 0x5EB7,
        0x8D4F: 0x5F18,
        0x8D50: 0x6052,
        0x8D51: 0x614C,
        0x8D52: 0x6297,
        0x8D53: 0x62D8,
        0x8D54: 0x63A7,
        0x8D55: 0x653B,
        0x8D56: 0x6602,
        0x8D57: 0x6643,
        0x8D58: 0x66F4,
        0x8D59: 0x676D,
        0x8D5A: 0x6821,
        0x8D5B: 0x6897,
        0x8D5C: 0x69CB,
        0x8D5D: 0x6C5F,
        0x8D5E: 0x6D2A,
        0x8D5F: 0x6D69,
        0x8D60: 0x6E2F,
        0x8D61: 0x6E9D,
        0x8D62: 0x7532,
        0x8D63: 0x7687,
        0x8D64: 0x786C,
        0x8D65: 0x7A3F,
        0x8D66: 0x7CE0,
        0x8D67: 0x7D05,
        0x8D68: 0x7D18,
        0x8D69: 0x7D5E,
        0x8D6A: 0x7DB1,
        0x8D6B: 0x8015,
        0x8D6C: 0x8003,
        0x8D6D: 0x80AF,
        0x8D6E: 0x80B1,
        0x8D6F: 0x8154,
        0x8D70: 0x818F,
        0x8D71: 0x822A,
        0x8D72: 0x8352,
        0x8D73: 0x884C,
        0x8D74: 0x8861,
        0x8D75: 0x8B1B,
        0x8D76: 0x8CA2,
        0x8D77: 0x8CFC,
        0x8D78: 0x90CA,
        0x8D79: 0x9175,
        0x8D7A: 0x9271,
        0x8D7B: 0x783F,
        0x8D7C: 0x92FC,
        0x8D7D: 0x95A4,
        0x8D7E: 0x964D,
        0x8D80: 0x9805,
        0x8D81: 0x9999,
        0x8D82: 0x9AD8,
        0x8D83: 0x9D3B,
        0x8D84: 0x525B,
        0x8D85: 0x52AB,
        0x8D86: 0x53F7,
        0x8D87: 0x5408,
        0x8D88: 0x58D5,
        0x8D89: 0x62F7,
        0x8D8A: 0x6FE0,
        0x8D8B: 0x8C6A,
        0x8D8C: 0x8F5F,
        0x8D8D: 0x9EB9,
        0x8D8E: 0x514B,
        0x8D8F: 0x523B,
        0x8D90: 0x544A,
        0x8D91: 0x56FD,
        0x8D92: 0x7A40,
        0x8D93: 0x9177,
        0x8D94: 0x9D60,
        0x8D95: 0x9ED2,
        0x8D96: 0x7344,
        0x8D97: 0x6F09,
        0x8D98: 0x8170,
        0x8D99: 0x7511,
        0x8D9A: 0x5FFD,
        0x8D9B: 0x60DA,
        0x8D9C: 0x9AA8,
        0x8D9D: 0x72DB,
        0x8D9E: 0x8FBC,
        0x8D9F: 0x6B64,
        0x8DA0: 0x9803,
        0x8DA1: 0x4ECA,
        0x8DA2: 0x56F0,
        0x8DA3: 0x5764,
        0x8DA4: 0x58BE,
        0x8DA5: 0x5A5A,
        0x8DA6: 0x6068,
        0x8DA7: 0x61C7,
        0x8DA8: 0x660F,
        0x8DA9: 0x6606,
        0x8DAA: 0x6839,
        0x8DAB: 0x68B1,
        0x8DAC: 0x6DF7,
        0x8DAD: 0x75D5,
        0x8DAE: 0x7D3A,
        0x8DAF: 0x826E,
        0x8DB0: 0x9B42,
        0x8DB1: 0x4E9B,
        0x8DB2: 0x4F50,
        0x8DB3: 0x53C9,
        0x8DB4: 0x5506,
        0x8DB5: 0x5D6F,
        0x8DB6: 0x5DE6,
        0x8DB7: 0x5DEE,
        0x8DB8: 0x67FB,
        0x8DB9: 0x6C99,
        0x8DBA: 0x7473,
        0x8DBB: 0x7802,
        0x8DBC: 0x8A50,
        0x8DBD: 0x9396,
        0x8DBE: 0x88DF,
        0x8DBF: 0x5750,
        0x8DC0: 0x5EA7,
        0x8DC1: 0x632B,
        0x8DC2: 0x50B5,
        0x8DC3: 0x50AC,
        0x8DC4: 0x518D,
        0x8DC5: 0x6700,
        0x8DC6: 0x54C9,
        0x8DC7: 0x585E,
        0x8DC8: 0x59BB,
        0x8DC9: 0x5BB0,
        0x8DCA: 0x5F69,
        0x8DCB: 0x624D,
        0x8DCC: 0x63A1,
        0x8DCD: 0x683D,
        0x8DCE: 0x6B73,
        0x8DCF: 0x6E08,
        0x8DD0: 0x707D,
        0x8DD1: 0x91C7,
        0x8DD2: 0x7280,
        0x8DD3: 0x7815,
        0x8DD4: 0x7826,
        0x8DD5: 0x796D,
        0x8DD6: 0x658E,
        0x8DD7: 0x7D30,
        0x8DD8: 0x83DC,
        0x8DD9: 0x88C1,
        0x8DDA: 0x8F09,
        0x8DDB: 0x969B,
        0x8DDC: 0x5264,
        0x8DDD: 0x5728,
        0x8DDE: 0x6750,
        0x8DDF: 0x7F6A,
        0x8DE0: 0x8CA1,
        0x8DE1: 0x51B4,
        0x8DE2: 0x5742,
        0x8DE3: 0x962A,
        0x8DE4: 0x583A,
        0x8DE5: 0x698A,
        0x8DE6: 0x80B4,
        0x8DE7: 0x54B2,
        0x8DE8: 0x5D0E,
        0x8DE9: 0x57FC,
        0x8DEA: 0x7895,
        0x8DEB: 0x9DFA,
        0x8DEC: 0x4F5C,
        0x8DED: 0x524A,
        0x8DEE: 0x548B,
        0x8DEF: 0x643E,
        0x8DF0: 0x6628,
        0x8DF1: 0x6714,
        0x8DF2: 0x67F5,
        0x8DF3: 0x7A84,
        0x8DF4: 0x7B56,
        0x8DF5: 0x7D22,
        0x8DF6: 0x932F,
        0x8DF7: 0x685C,
        0x8DF8: 0x9BAD,
        0x8DF9: 0x7B39,
        0x8DFA: 0x5319,
        0x8DFB: 0x518A,
        0x8DFC: 0x5237,
        0x8E40: 0x5BDF,
        0x8E41: 0x62F6,
        0x8E42: 0x64AE,
        0x8E43: 0x64E6,
        0x8E44: 0x672D,
        0x8E45: 0x6BBA,
        0x8E46: 0x85A9,
        0x8E47: 0x96D1,
        0x8E48: 0x7690,
        0x8E49: 0x9BD6,
        0x8E4A: 0x634C,
        0x8E4B: 0x9306,
        0x8E4C: 0x9BAB,
        0x8E4D: 0x76BF,
        0x8E4E: 0x6652,
        0x8E4F: 0x4E09,
        0x8E50: 0x5098,
        0x8E51: 0x53C2,
        0x8E52: 0x5C71,
        0x8E53: 0x60E8,
        0x8E54: 0x6492,
        0x8E55: 0x6563,
        0x8E56: 0x685F,
        0x8E57: 0x71E6,
        0x8E58: 0x73CA,
        0x8E59: 0x7523,
        0x8E5A: 0x7B97,
        0x8E5B: 0x7E82,
        0x8E5C: 0x8695,
        0x8E5D: 0x8B83,
        0x8E5E: 0x8CDB,
        0x8E5F: 0x9178,
        0x8E60: 0x9910,
        0x8E61: 0x65AC,
        0x8E62: 0x66AB,
        0x8E63: 0x6B8B,
        0x8E64: 0x4ED5,
        0x8E65: 0x4ED4,
        0x8E66: 0x4F3A,
        0x8E67: 0x4F7F,
        0x8E68: 0x523A,
        0x8E69: 0x53F8,
        0x8E6A: 0x53F2,
        0x8E6B: 0x55E3,
        0x8E6C: 0x56DB,
        0x8E6D: 0x58EB,
        0x8E6E: 0x59CB,
        0x8E6F: 0x59C9,
        0x8E70: 0x59FF,
        0x8E71: 0x5B50,
        0x8E72: 0x5C4D,
        0x8E73: 0x5E02,
        0x8E74: 0x5E2B,
        0x8E75: 0x5FD7,
        0x8E76: 0x601D,
        0x8E77: 0x6307,
        0x8E78: 0x652F,
        0x8E79: 0x5B5C,
        0x8E7A: 0x65AF,
        0x8E7B: 0x65BD,
        0x8E7C: 0x65E8,
        0x8E7D: 0x679D,
        0x8E7E: 0x6B62,
        0x8E80: 0x6B7B,
        0x8E81: 0x6C0F,
        0x8E82: 0x7345,
        0x8E83: 0x7949,
        0x8E84: 0x79C1,
        0x8E85: 0x7CF8,
        0x8E86: 0x7D19,
        0x8E87: 0x7D2B,
        0x8E88: 0x80A2,
        0x8E89: 0x8102,
        0x8E8A: 0x81F3,
        0x8E8B: 0x8996,
        0x8E8C: 0x8A5E,
        0x8E8D: 0x8A69,
        0x8E8E: 0x8A66,
        0x8E8F: 0x8A8C,
        0x8E90: 0x8AEE,
        0x8E91: 0x8CC7,
        0x8E92: 0x8CDC,
        0x8E93: 0x96CC,
        0x8E94: 0x98FC,
        0x8E95: 0x6B6F,
        0x8E96: 0x4E8B,
        0x8E97: 0x4F3C,
        0x8E98: 0x4F8D,
        0x8E99: 0x5150,
        0x8E9A: 0x5B57,
        0x8E9B: 0x5BFA,
        0x8E9C: 0x6148,
        0x8E9D: 0x6301,
        0x8E9E: 0x6642,
        0x8E9F: 0x6B21,
        0x8EA0: 0x6ECB,
        0x8EA1: 0x6CBB,
        0x8EA2: 0x723E,
        0x8EA3: 0x74BD,
        0x8EA4: 0x75D4,
        0x8EA5: 0x78C1,
        0x8EA6: 0x793A,
        0x8EA7: 0x800C,
        0x8EA8: 0x8033,
        0x8EA9: 0x81EA,
        0x8EAA: 0x8494,
        0x8EAB: 0x8F9E,
        0x8EAC: 0x6C50,
        0x8EAD: 0x9E7F,
        0x8EAE: 0x5F0F,
        0x8EAF: 0x8B58,
        0x8EB0: 0x9D2B,
        0x8EB1: 0x7AFA,
        0x8EB2: 0x8EF8,
        0x8EB3: 0x5B8D,
        0x8EB4: 0x96EB,
        0x8EB5: 0x4E03,
        0x8EB6: 0x53F1,
        0x8EB7: 0x57F7,
        0x8EB8: 0x5931,
        0x8EB9: 0x5AC9,
        0x8EBA: 0x5BA4,
        0x8EBB: 0x6089,
        0x8EBC: 0x6E7F,
        0x8EBD: 0x6F06,
        0x8EBE: 0x75BE,
        0x8EBF: 0x8CEA,
        0x8EC0: 0x5B9F,
        0x8EC1: 0x8500,
        0x8EC2: 0x7BE0,
        0x8EC3: 0x5072,
        0x8EC4: 0x67F4,
        0x8EC5: 0x829D,
        0x8EC6: 0x5C61,
        0x8EC7: 0x854A,
        0x8EC8: 0x7E1E,
        0x8EC9: 0x820E,
        0x8ECA: 0x5199,
        0x8ECB: 0x5C04,
        0x8ECC: 0x6368,
        0x8ECD: 0x8D66,
        0x8ECE: 0x659C,
        0x8ECF: 0x716E,
        0x8ED0: 0x793E,
        0x8ED1: 0x7D17,
        0x8ED2: 0x8005,
        0x8ED3: 0x8B1D,
        0x8ED4: 0x8ECA,
        0x8ED5: 0x906E,
        0x8ED6: 0x86C7,
        0x8ED7: 0x90AA,
        0x8ED8: 0x501F,
        0x8ED9: 0x52FA,
        0x8EDA: 0x5C3A,
        0x8EDB: 0x6753,
        0x8EDC: 0x707C,
        0x8EDD: 0x7235,
        0x8EDE: 0x914C,
        0x8EDF: 0x91C8,
        0x8EE0: 0x932B,
        0x8EE1: 0x82E5,
        0x8EE2: 0x5BC2,
        0x8EE3: 0x5F31,
        0x8EE4: 0x60F9,
        0x8EE5: 0x4E3B,
        0x8EE6: 0x53D6,
        0x8EE7: 0x5B88,
        0x8EE8: 0x624B,
        0x8EE9: 0x6731,
        0x8EEA: 0x6B8A,
        0x8EEB: 0x72E9,
        0x8EEC: 0x73E0,
        0x8EED: 0x7A2E,
        0x8EEE: 0x816B,
        0x8EEF: 0x8DA3,
        0x8EF0: 0x9152,
        0x8EF1: 0x9996,
        0x8EF2: 0x5112,
        0x8EF3: 0x53D7,
        0x8EF4: 0x546A,
        0x8EF5: 0x5BFF,
        0x8EF6: 0x6388,
        0x8EF7: 0x6A39,
        0x8EF8: 0x7DAC,
        0x8EF9: 0x9700,
        0x8EFA: 0x56DA,
        0x8EFB: 0x53CE,
        0x8EFC: 0x5468,
        0x8F40: 0x5B97,
        0x8F41: 0x5C31,
        0x8F42: 0x5DDE,
        0x8F43: 0x4FEE,
        0x8F44: 0x6101,
        0x8F45: 0x62FE,
        0x8F46: 0x6D32,
        0x8F47: 0x79C0,
        0x8F48: 0x79CB,
        0x8F49: 0x7D42,
        0x8F4A: 0x7E4D,
        0x8F4B: 0x7FD2,
        0x8F4C: 0x81ED,
        0x8F4D: 0x821F,
        0x8F4E: 0x8490,
        0x8F4F: 0x8846,
        0x8F50: 0x8972,
        0x8F51: 0x8B90,
        0x8F52: 0x8E74,
        0x8F53: 0x8F2F,
        0x8F54: 0x9031,
        0x8F55: 0x914B,
        0x8F56: 0x916C,
        0x8F57: 0x96C6,
        0x8F58: 0x919C,
        0x8F59: 0x4EC0,
        0x8F5A: 0x4F4F,
        0x8F5B: 0x5145,
        0x8F5C: 0x5341,
        0x8F5D: 0x5F93,
        0x8F5E: 0x620E,
        0x8F5F: 0x67D4,
        0x8F60: 0x6C41,
        0x8F61: 0x6E0B,
        0x8F62: 0x7363,
        0x8F63: 0x7E26,
        0x8F64: 0x91CD,
        0x8F65: 0x9283,
        0x8F66: 0x53D4,
        0x8F67: 0x5919,
        0x8F68: 0x5BBF,
        0x8F69: 0x6DD1,
        0x8F6A: 0x795D,
        0x8F6B: 0x7E2E,
        0x8F6C: 0x7C9B,
        0x8F6D: 0x587E,
        0x8F6E: 0x719F,
        0x8F6F: 0x51FA,
        0x8F70: 0x8853,
        0x8F71: 0x8FF0,
        0x8F72: 0x4FCA,
        0x8F73: 0x5CFB,
        0x8F74: 0x6625,
        0x8F75: 0x77AC,
        0x8F76: 0x7AE3,
        0x8F77: 0x821C,
        0x8F78: 0x99FF,
        0x8F79: 0x51C6,
        0x8F7A: 0x5FAA,
        0x8F7B: 0x65EC,
        0x8F7C: 0x696F,
        0x8F7D: 0x6B89,
        0x8F7E: 0x6DF3,
        0x8F80: 0x6E96,
        0x8F81: 0x6F64,
        0x8F82: 0x76FE,
        0x8F83: 0x7D14,
        0x8F84: 0x5DE1,
        0x8F85: 0x9075,
        0x8F86: 0x9187,
        0x8F87: 0x9806,
        0x8F88: 0x51E6,
        0x8F89: 0x521D,
        0x8F8A: 0x6240,
        0x8F8B: 0x6691,
        0x8F8C: 0x66D9,
        0x8F8D: 0x6E1A,
        0x8F8E: 0x5EB6,
        0x8F8F: 0x7DD2,
        0x8F90: 0x7F72,
        0x8F91: 0x66F8,
        0x8F92: 0x85AF,
        0x8F93: 0x85F7,
        0x8F94: 0x8AF8,
        0x8F95: 0x52A9,
        0x8F96: 0x53D9,
        0x8F97: 0x5973,
        0x8F98: 0x5E8F,
        0x8F99: 0x5F90,
        0x8F9A: 0x6055,
        0x8F9B: 0x92E4,
        0x8F9C: 0x9664,
        0x8F9D: 0x50B7,
        0x8F9E: 0x511F,
        0x8F9F: 0x52DD,
        0x8FA0: 0x5320,
        0x8FA1: 0x5347,
        0x8FA2: 0x53EC,
        0x8FA3: 0x54E8,
        0x8FA4: 0x5546,
        0x8FA5: 0x5531,
        0x8FA6: 0x5617,
        0x8FA7: 0x5968,
        0x8FA8: 0x59BE,
        0x8FA9: 0x5A3C,
        0x8FAA: 0x5BB5,
        0x8FAB: 0x5C06,
        0x8FAC: 0x5C0F,
        0x8FAD: 0x5C11,
        0x8FAE: 0x5C1A,
        0x8FAF: 0x5E84,
        0x8FB0: 0x5E8A,
        0x8FB1: 0x5EE0,
        0x8FB2: 0x5F70,
        0x8FB3: 0x627F,
        0x8FB4: 0x6284,
        0x8FB5: 0x62DB,
        0x8FB6: 0x638C,
        0x8FB7: 0x6377,
        0x8FB8: 0x6607,
        0x8FB9: 0x660C,
        0x8FBA: 0x662D,
        0x8FBB: 0x6676,
        0x8FBC: 0x677E,
        0x8FBD: 0x68A2,
        0x8FBE: 0x6A1F,
        0x8FBF: 0x6A35,
        0x8FC0: 0x6CBC,
        0x8FC1: 0x6D88,
        0x8FC2: 0x6E09,
        0x8FC3: 0x6E58,
        0x8FC4: 0x713C,
        0x8FC5: 0x7126,
        0x8FC6: 0x7167,
        0x8FC7: 0x75C7,
        0x8FC8: 0x7701,
        0x8FC9: 0x785D,
        0x8FCA: 0x7901,
        0x8FCB: 0x7965,
        0x8FCC: 0x79F0,
        0x8FCD: 0x7AE0,
        0x8FCE: 0x7B11,
        0x8FCF: 0x7CA7,
        0x8FD0: 0x7D39,
        0x8FD1: 0x8096,
        0x8FD2: 0x83D6,
        0x8FD3: 0x848B,
        0x8FD4: 0x8549,
        0x8FD5: 0x885D,
        0x8FD6: 0x88F3,
        0x8FD7: 0x8A1F,
        0x8FD8: 0x8A3C,
        0x8FD9: 0x8A54,
        0x8FDA: 0x8A73,
        0x8FDB: 0x8C61,
        0x8FDC: 0x8CDE,
        0x8FDD: 0x91A4,
        0x8FDE: 0x9266,
        0x8FDF: 0x937E,
        0x8FE0: 0x9418,
        0x8FE1: 0x969C,
        0x8FE2: 0x9798,
        0x8FE3: 0x4E0A,
        0x8FE4: 0x4E08,
        0x8FE5: 0x4E1E,
        0x8FE6: 0x4E57,
        0x8FE7: 0x5197,
        0x8FE8: 0x5270,
        0x8FE9: 0x57CE,
        0x8FEA: 0x5834,
        0x8FEB: 0x58CC,
        0x8FEC: 0x5B22,
        0x8FED: 0x5E38,
        0x8FEE: 0x60C5,
        0x8FEF: 0x64FE,
        0x8FF0: 0x6761,
        0x8FF1: 0x6756,
        0x8FF2: 0x6D44,
        0x8FF3: 0x72B6,
        0x8FF4: 0x7573,
        0x8FF5: 0x7A63,
        0x8FF6: 0x84B8,
        0x8FF7: 0x8B72,
        0x8FF8: 0x91B8,
        0x8FF9: 0x9320,
        0x8FFA: 0x5631,
        0x8FFB: 0x57F4,
        0x8FFC: 0x98FE,
        0x9040: 0x62ED,
        0x9041: 0x690D,
        0x9042: 0x6B96,
        0x9043: 0x71ED,
        0x9044: 0x7E54,
        0x9045: 0x8077,
        0x9046: 0x8272,
        0x9047: 0x89E6,
        0x9048: 0x98DF,
        0x9049: 0x8755,
        0x904A: 0x8FB1,
        0x904B: 0x5C3B,
        0x904C: 0x4F38,
        0x904D: 0x4FE1,
        0x904E: 0x4FB5,
        0x904F: 0x5507,
        0x9050: 0x5A20,
        0x9051: 0x5BDD,
        0x9052: 0x5BE9,
        0x9053: 0x5FC3,
        0x9054: 0x614E,
        0x9055: 0x632F,
        0x9056: 0x65B0,
        0x9057: 0x664B,
        0x9058: 0x68EE,
        0x9059: 0x699B,
        0x905A: 0x6D78,
        0x905B: 0x6DF1,
        0x905C: 0x7533,
        0x905D: 0x75B9,
        0x905E: 0x771F,
        0x905F: 0x795E,
        0x9060: 0x79E6,
        0x9061: 0x7D33,
        0x9062: 0x81E3,
        0x9063: 0x82AF,
        0x9064: 0x85AA,
        0x9065: 0x89AA,
        0x9066: 0x8A3A,
        0x9067: 0x8EAB,
        0x9068: 0x8F9B,
        0x9069: 0x9032,
        0x906A: 0x91DD,
        0x906B: 0x9707,
        0x906C: 0x4EBA,
        0x906D: 0x4EC1,
        0x906E: 0x5203,
        0x906F: 0x5875,
        0x9070: 0x58EC,
        0x9071: 0x5C0B,
        0x9072: 0x751A,
        0x9073: 0x5C3D,
        0x9074: 0x814E,
        0x9075: 0x8A0A,
        0x9076: 0x8FC5,
        0x9077: 0x9663,
        0x9078: 0x976D,
        0x9079: 0x7B25,
        0x907A: 0x8ACF,
        0x907B: 0x9808,
        0x907C: 0x9162,
        0x907D: 0x56F3,
        0x907E: 0x53A8,
        0x9080: 0x9017,
        0x9081: 0x5439,
        0x9082: 0x5782,
        0x9083: 0x5E25,
        0x9084: 0x63A8,
        0x9085: 0x6C34,
        0x9086: 0x708A,
        0x9087: 0x7761,
        0x9088: 0x7C8B,
        0x9089: 0x7FE0,
        0x908A: 0x8870,
        0x908B: 0x9042,
        0x908C: 0x9154,
        0x908D: 0x9310,
        0x908E: 0x9318,
        0x908F: 0x968F,
        0x9090: 0x745E,
        0x9091: 0x9AC4,
        0x9092: 0x5D07,
        0x9093: 0x5D69,
        0x9094: 0x6570,
        0x9095: 0x67A2,
        0x9096: 0x8DA8,
        0x9097: 0x96DB,
        0x9098: 0x636E,
        0x9099: 0x6749,
        0x909A: 0x6919,
        0x909B: 0x83C5,
        0x909C: 0x9817,
        0x909D: 0x96C0,
        0x909E: 0x88FE,
        0x909F: 0x6F84,
        0x90A0: 0x647A,
        0x90A1: 0x5BF8,
        0x90A2: 0x4E16,
        0x90A3: 0x702C,
        0x90A4: 0x755D,
        0x90A5: 0x662F,
        0x90A6: 0x51C4,
        0x90A7: 0x5236,
        0x90A8: 0x52E2,
        0x90A9: 0x59D3,
        0x90AA: 0x5F81,
        0x90AB: 0x6027,
        0x90AC: 0x6210,
        0x90AD: 0x653F,
        0x90AE: 0x6574,
        0x90AF: 0x661F,
        0x90B0: 0x6674,
        0x90B1: 0x68F2,
        0x90B2: 0x6816,
        0x90B3: 0x6B63,
        0x90B4: 0x6E05,
        0x90B5: 0x7272,
        0x90B6: 0x751F,
        0x90B7: 0x76DB,
        0x90B8: 0x7CBE,
        0x90B9: 0x8056,
        0x90BA: 0x58F0,
        0x90BB: 0x88FD,
        0x90BC: 0x897F,
        0x90BD: 0x8AA0,
        0x90BE: 0x8A93,
        0x90BF: 0x8ACB,
        0x90C0: 0x901D,
        0x90C1: 0x9192,
        0x90C2: 0x9752,
        0x90C3: 0x9759,
        0x90C4: 0x6589,
        0x90C5: 0x7A0E,
        0x90C6: 0x8106,
        0x90C7: 0x96BB,
        0x90C8: 0x5E2D,
        0x90C9: 0x60DC,
        0x90CA: 0x621A,
        0x90CB: 0x65A5,
        0x90CC: 0x6614,
        0x90CD: 0x6790,
        0x90CE: 0x77F3,
        0x90CF: 0x7A4D,
        0x90D0: 0x7C4D,
        0x90D1: 0x7E3E,
        0x90D2: 0x810A,
        0x90D3: 0x8CAC,
        0x90D4: 0x8D64,
        0x90D5: 0x8DE1,
        0x90D6: 0x8E5F,
        0x90D7: 0x78A9,
        0x90D8: 0x5207,
        0x90D9: 0x62D9,
        0x90DA: 0x63A5,
        0x90DB: 0x6442,
        0x90DC: 0x6298,
        0x90DD: 0x8A2D,
        0x90DE: 0x7A83,
        0x90DF: 0x7BC0,
        0x90E0: 0x8AAC,
        0x90E1: 0x96EA,
        0x90E2: 0x7D76,
        0x90E3: 0x820C,
        0x90E4: 0x8749,
        0x90E5: 0x4ED9,
        0x90E6: 0x5148,
        0x90E7: 0x5343,
        0x90E8: 0x5360,
        0x90E9: 0x5BA3,
        0x90EA: 0x5C02,
        0x90EB: 0x5C16,
        0x90EC: 0x5DDD,
        0x90ED: 0x6226,
        0x90EE: 0x6247,
        0x90EF: 0x64B0,
        0x90F0: 0x6813,
        0x90F1: 0x6834,
        0x90F2: 0x6CC9,
        0x90F3: 0x6D45,
        0x90F4: 0x6D17,
        0x90F5: 0x67D3,
        0x90F6: 0x6F5C,
        0x90F7: 0x714E,
        0x90F8: 0x717D,
        0x90F9: 0x65CB,
        0x90FA: 0x7A7F,
        0x90FB: 0x7BAD,
        0x90FC: 0x7DDA,
        0x9140: 0x7E4A,
        0x9141: 0x7FA8,
        0x9142: 0x817A,
        0x9143: 0x821B,
        0x9144: 0x8239,
        0x9145: 0x85A6,
        0x9146: 0x8A6E,
        0x9147: 0x8CCE,
        0x9148: 0x8DF5,
        0x9149: 0x9078,
        0x914A: 0x9077,
        0x914B: 0x92AD,
        0x914C: 0x9291,
        0x914D: 0x9583,
        0x914E: 0x9BAE,
        0x914F: 0x524D,
        0x9150: 0x5584,
        0x9151: 0x6F38,
        0x9152: 0x7136,
        0x9153: 0x5168,
        0x9154: 0x7985,
        0x9155: 0x7E55,
        0x9156: 0x81B3,
        0x9157: 0x7CCE,
        0x9158: 0x564C,
        0x9159: 0x5851,
        0x915A: 0x5CA8,
        0x915B: 0x63AA,
        0x915C: 0x66FE,
        0x915D: 0x66FD,
        0x915E: 0x695A,
        0x915F: 0x72D9,
        0x9160: 0x758F,
        0x9161: 0x758E,
        0x9162: 0x790E,
        0x9163: 0x7956,
        0x9164: 0x79DF,
        0x9165: 0x7C97,
        0x9166: 0x7D20,
        0x9167: 0x7D44,
        0x9168: 0x8607,
        0x9169: 0x8A34,
        0x916A: 0x963B,
        0x916B: 0x9061,
        0x916C: 0x9F20,
        0x916D: 0x50E7,
        0x916E: 0x5275,
        0x916F: 0x53CC,
        0x9170: 0x53E2,
        0x9171: 0x5009,
        0x9172: 0x55AA,
        0x9173: 0x58EE,
        0x9174: 0x594F,
        0x9175: 0x723D,
        0x9176: 0x5B8B,
        0x9177: 0x5C64,
        0x9178: 0x531D,
        0x9179: 0x60E3,
        0x917A: 0x60F3,
        0x917B: 0x635C,
        0x917C: 0x6383,
        0x917D: 0x633F,
        0x917E: 0x63BB,
        0x9180: 0x64CD,
        0x9181: 0x65E9,
        0x9182: 0x66F9,
        0x9183: 0x5DE3,
        0x9184: 0x69CD,
        0x9185: 0x69FD,
        0x9186: 0x6F15,
        0x9187: 0x71E5,
        0x9188: 0x4E89,
        0x9189: 0x75E9,
        0x918A: 0x76F8,
        0x918B: 0x7A93,
        0x918C: 0x7CDF,
        0x918D: 0x7DCF,
        0x918E: 0x7D9C,
        0x918F: 0x8061,
        0x9190: 0x8349,
        0x9191: 0x8358,
        0x9192: 0x846C,
        0x9193: 0x84BC,
        0x9194: 0x85FB,
        0x9195: 0x88C5,
        0x9196: 0x8D70,
        0x9197: 0x9001,
        0x9198: 0x906D,
        0x9199: 0x9397,
        0x919A: 0x971C,
        0x919B: 0x9A12,
        0x919C: 0x50CF,
        0x919D: 0x5897,
        0x919E: 0x618E,
        0x919F: 0x81D3,
        0x91A0: 0x8535,
        0x91A1: 0x8D08,
        0x91A2: 0x9020,
        0x91A3: 0x4FC3,
        0x91A4: 0x5074,
        0x91A5: 0x5247,
        0x91A6: 0x5373,
        0x91A7: 0x606F,
        0x91A8: 0x6349,
        0x91A9: 0x675F,
        0x91AA: 0x6E2C,
        0x91AB: 0x8DB3,
        0x91AC: 0x901F,
        0x91AD: 0x4FD7,
        0x91AE: 0x5C5E,
        0x91AF: 0x8CCA,
        0x91B0: 0x65CF,
        0x91B1: 0x7D9A,
        0x91B2: 0x5352,
        0x91B3: 0x8896,
        0x91B4: 0x5176,
        0x91B5: 0x63C3,
        0x91B6: 0x5B58,
        0x91B7: 0x5B6B,
        0x91B8: 0x5C0A,
        0x91B9: 0x640D,
        0x91BA: 0x6751,
        0x91BB: 0x905C,
        0x91BC: 0x4ED6,
        0x91BD: 0x591A,
        0x91BE: 0x592A,
        0x91BF: 0x6C70,
        0x91C0: 0x8A51,
        0x91C1: 0x553E,
        0x91C2: 0x5815,
        0x91C3: 0x59A5,
        0x91C4: 0x60F0,
        0x91C5: 0x6253,
        0x91C6: 0x67C1,
        0x91C7: 0x8235,
        0x91C8: 0x6955,
        0x91C9: 0x9640,
        0x91CA: 0x99C4,
        0x91CB: 0x9A28,
        0x91CC: 0x4F53,
        0x91CD: 0x5806,
        0x91CE: 0x5BFE,
        0x91CF: 0x8010,
        0x91D0: 0x5CB1,
        0x91D1: 0x5E2F,
        0x91D2: 0x5F85,
        0x91D3: 0x6020,
        0x91D4: 0x614B,
        0x91D5: 0x6234,
        0x91D6: 0x66FF,
        0x91D7: 0x6CF0,
        0x91D8: 0x6EDE,
        0x91D9: 0x80CE,
        0x91DA: 0x817F,
        0x91DB: 0x82D4,
        0x91DC: 0x888B,
        0x91DD: 0x8CB8,
        0x91DE: 0x9000,
        0x91DF: 0x902E,
        0x91E0: 0x968A,
        0x91E1: 0x9EDB,
        0x91E2: 0x9BDB,
        0x91E3: 0x4EE3,
        0x91E4: 0x53F0,
        0x91E5: 0x5927,
        0x91E6: 0x7B2C,
        0x91E7: 0x918D,
        0x91E8: 0x984C,
        0x91E9: 0x9DF9,
        0x91EA: 0x6EDD,
        0x91EB: 0x7027,
        0x91EC: 0x5353,
        0x91ED: 0x5544,
        0x91EE: 0x5B85,
        0x91EF: 0x6258,
        0x91F0: 0x629E,
        0x91F1: 0x62D3,
        0x91F2: 0x6CA2,
        0x91F3: 0x6FEF,
        0x91F4: 0x7422,
        0x91F5: 0x8A17,
        0x91F6: 0x9438,
        0x91F7: 0x6FC1,
        0x91F8: 0x8AFE,
        0x91F9: 0x8338,
        0x91FA: 0x51E7,
        0x91FB: 0x86F8,
        0x91FC: 0x53EA,
        0x9240: 0x53E9,
        0x9241: 0x4F46,
        0x9242: 0x9054,
        0x9243: 0x8FB0,
        0x9244: 0x596A,
        0x9245: 0x8131,
        0x9246: 0x5DFD,
        0x9247: 0x7AEA,
        0x9248: 0x8FBF,
        0x9249: 0x68DA,
        0x924A: 0x8C37,
        0x924B: 0x72F8,
        0x924C: 0x9C48,
        0x924D: 0x6A3D,
        0x924E: 0x8AB0,
        0x924F: 0x4E39,
        0x9250: 0x5358,
        0x9251: 0x5606,
        0x9252: 0x5766,
        0x9253: 0x62C5,
        0x9254: 0x63A2,
        0x9255: 0x65E6,
        0x9256: 0x6B4E,
        0x9257: 0x6DE1,
        0x9258: 0x6E5B,
        0x9259: 0x70AD,
        0x925A: 0x77ED,
        0x925B: 0x7AEF,
        0x925C: 0x7BAA,
        0x925D: 0x7DBB,
        0x925E: 0x803D,
        0x925F: 0x80C6,
        0x9260: 0x86CB,
        0x9261: 0x8A95,
        0x9262: 0x935B,
        0x9263: 0x56E3,
        0x9264: 0x58C7,
        0x9265: 0x5F3E,
        0x9266: 0x65AD,
        0x9267: 0x6696,
        0x9268: 0x6A80,
        0x9269: 0x6BB5,
        0x926A: 0x7537,
        0x926B: 0x8AC7,
        0x926C: 0x5024,
        0x926D: 0x77E5,
        0x926E: 0x5730,
        0x926F: 0x5F1B,
        0x9270: 0x6065,
        0x9271: 0x667A,
        0x9272: 0x6C60,
        0x9273: 0x75F4,
        0x9274: 0x7A1A,
        0x9275: 0x7F6E,
        0x9276: 0x81F4,
        0x9277: 0x8718,
        0x9278: 0x9045,
        0x9279: 0x99B3,
        0x927A: 0x7BC9,
        0x927B: 0x755C,
        0x927C: 0x7AF9,
        0x927D: 0x7B51,
        0x927E: 0x84C4,
        0x9280: 0x9010,
        0x9281: 0x79E9,
        0x9282: 0x7A92,
        0x9283: 0x8336,
        0x9284: 0x5AE1,
        0x9285: 0x7740,
        0x9286: 0x4E2D,
        0x9287: 0x4EF2,
        0x9288: 0x5B99,
        0x9289: 0x5FE0,
        0x928A: 0x62BD,
        0x928B: 0x663C,
        0x928C: 0x67F1,
        0x928D: 0x6CE8,
        0x928E: 0x866B,
        0x928F: 0x8877,
        0x9290: 0x8A3B,
        0x9291: 0x914E,
        0x9292: 0x92F3,
        0x9293: 0x99D0,
        0x9294: 0x6A17,
        0x9295: 0x7026,
        0x9296: 0x732A,
        0x9297: 0x82E7,
        0x9298: 0x8457,
        0x9299: 0x8CAF,
        0x929A: 0x4E01,
        0x929B: 0x5146,
        0x929C: 0x51CB,
        0x929D: 0x558B,
        0x929E: 0x5BF5,
        0x929F: 0x5E16,
        0x92A0: 0x5E33,
        0x92A1: 0x5E81,
        0x92A2: 0x5F14,
        0x92A3: 0x5F35,
        0x92A4: 0x5F6B,
        0x92A5: 0x5FB4,
        0x92A6: 0x61F2,
        0x92A7: 0x6311,
        0x92A8: 0x66A2,
        0x92A9: 0x671D,
        0x92AA: 0x6F6E,
        0x92AB: 0x7252,
        0x92AC: 0x753A,
        0x92AD: 0x773A,
        0x92AE: 0x8074,
        0x92AF: 0x8139,
        0x92B0: 0x8178,
        0x92B1: 0x8776,
        0x92B2: 0x8ABF,
        0x92B3: 0x8ADC,
        0x92B4: 0x8D85,
        0x92B5: 0x8DF3,
        0x92B6: 0x929A,
        0x92B7: 0x9577,
        0x92B8: 0x9802,
        0x92B9: 0x9CE5,
        0x92BA: 0x52C5,
        0x92BB: 0x6357,
        0x92BC: 0x76F4,
        0x92BD: 0x6715,
        0x92BE: 0x6C88,
        0x92BF: 0x73CD,
        0x92C0: 0x8CC3,
        0x92C1: 0x93AE,
        0x92C2: 0x9673,
        0x92C3: 0x6D25,
        0x92C4: 0x589C,
        0x92C5: 0x690E,
        0x92C6: 0x69CC,
        0x92C7: 0x8FFD,
        0x92C8: 0x939A,
        0x92C9: 0x75DB,
        0x92CA: 0x901A,
        0x92CB: 0x585A,
        0x92CC: 0x6802,
        0x92CD: 0x63B4,
        0x92CE: 0x69FB,
        0x92CF: 0x4F43,
        0x92D0: 0x6F2C,
        0x92D1: 0x67D8,
        0x92D2: 0x8FBB,
        0x92D3: 0x8526,
        0x92D4: 0x7DB4,
        0x92D5: 0x9354,
        0x92D6: 0x693F,
        0x92D7: 0x6F70,
        0x92D8: 0x576A,
        0x92D9: 0x58F7,
        0x92DA: 0x5B2C,
        0x92DB: 0x7D2C,
        0x92DC: 0x722A,
        0x92DD: 0x540A,
        0x92DE: 0x91E3,
        0x92DF: 0x9DB4,
        0x92E0: 0x4EAD,
        0x92E1: 0x4F4E,
        0x92E2: 0x505C,
        0x92E3: 0x5075,
        0x92E4: 0x5243,
        0x92E5: 0x8C9E,
        0x92E6: 0x5448,
        0x92E7: 0x5824,
        0x92E8: 0x5B9A,
        0x92E9: 0x5E1D,
        0x92EA: 0x5E95,
        0x92EB: 0x5EAD,
        0x92EC: 0x5EF7,
        0x92ED: 0x5F1F,
        0x92EE: 0x608C,
        0x92EF: 0x62B5,
        0x92F0: 0x633A,
        0x92F1: 0x63D0,
        0x92F2: 0x68AF,
        0x92F3: 0x6C40,
        0x92F4: 0x7887,
        0x92F5: 0x798E,
        0x92F6: 0x7A0B,
        0x92F7: 0x7DE0,
        0x92F8: 0x8247,
        0x92F9: 0x8A02,
        0x92FA: 0x8AE6,
        0x92FB: 0x8E44,
        0x92FC: 0x9013,
        0x9340: 0x90B8,
        0x9341: 0x912D,
        0x9342: 0x91D8,
        0x9343: 0x9F0E,
        0x9344: 0x6CE5,
        0x9345: 0x6458,
        0x9346: 0x64E2,
        0x9347: 0x6575,
        0x9348: 0x6EF4,
        0x9349: 0x7684,
        0x934A: 0x7B1B,
        0x934B: 0x9069,
        0x934C: 0x93D1,
        0x934D: 0x6EBA,
        0x934E: 0x54F2,
        0x934F: 0x5FB9,
        0x9350: 0x64A4,
        0x9351: 0x8F4D,
        0x9352: 0x8FED,
        0x9353: 0x9244,
        0x9354: 0x5178,
        0x9355: 0x586B,
        0x9356: 0x5929,
        0x9357: 0x5C55,
        0x9358: 0x5E97,
        0x9359: 0x6DFB,
        0x935A: 0x7E8F,
        0x935B: 0x751C,
        0x935C: 0x8CBC,
        0x935D: 0x8EE2,
        0x935E: 0x985B,
        0x935F: 0x70B9,
        0x9360: 0x4F1D,
        0x9361: 0x6BBF,
        0x9362: 0x6FB1,
        0x9363: 0x7530,
        0x9364: 0x96FB,
        0x9365: 0x514E,
        0x9366: 0x5410,
        0x9367: 0x5835,
        0x9368: 0x5857,
        0x9369: 0x59AC,
        0x936A: 0x5C60,
        0x936B: 0x5F92,
        0x936C: 0x6597,
        0x936D: 0x675C,
        0x936E: 0x6E21,
        0x936F: 0x767B,
        0x9370: 0x83DF,
        0x9371: 0x8CED,
        0x9372: 0x9014,
        0x9373: 0x90FD,
        0x9374: 0x934D,
        0x9375: 0x7825,
        0x9376: 0x783A,
        0x9377: 0x52AA,
        0x9378: 0x5EA6,
        0x9379: 0x571F,
        0x937A: 0x5974,
        0x937B: 0x6012,
        0x937C: 0x5012,
        0x937D: 0x515A,
        0x937E: 0x51AC,
        0x9380: 0x51CD,
        0x9381: 0x5200,
        0x9382: 0x5510,
        0x9383: 0x5854,
        0x9384: 0x5858,
        0x9385: 0x5957,
        0x9386: 0x5B95,
        0x9387: 0x5CF6,
        0x9388: 0x5D8B,
        0x9389: 0x60BC,
        0x938A: 0x6295,
        0x938B: 0x642D,
        0x938C: 0x6771,
        0x938D: 0x6843,
        0x938E: 0x68BC,
        0x938F: 0x68DF,
        0x9390: 0x76D7,
        0x9391: 0x6DD8,
        0x9392: 0x6E6F,
        0x9393: 0x6D9B,
        0x9394: 0x706F,
        0x9395: 0x71C8,
        0x9396: 0x5F53,
        0x9397: 0x75D8,
        0x9398: 0x7977,
        0x9399: 0x7B49,
        0x939A: 0x7B54,
        0x939B: 0x7B52,
        0x939C: 0x7CD6,
        0x939D: 0x7D71,
        0x939E: 0x5230,
        0x939F: 0x8463,
        0x93A0: 0x8569,
        0x93A1: 0x85E4,
        0x93A2: 0x8A0E,
        0x93A3: 0x8B04,
        0x93A4: 0x8C46,
        0x93A5: 0x8E0F,
        0x93A6: 0x9003,
        0x93A7: 0x900F,
        0x93A8: 0x9419,
        0x93A9: 0x9676,
        0x93AA: 0x982D,
        0x93AB: 0x9A30,
        0x93AC: 0x95D8,
        0x93AD: 0x50CD,
        0x93AE: 0x52D5,
        0x93AF: 0x540C,
        0x93B0: 0x5802,
        0x93B1: 0x5C0E,
        0x93B2: 0x61A7,
        0x93B3: 0x649E,
        0x93B4: 0x6D1E,
        0x93B5: 0x77B3,
        0x93B6: 0x7AE5,
        0x93B7: 0x80F4,
        0x93B8: 0x8404,
        0x93B9: 0x9053,
        0x93BA: 0x9285,
        0x93BB: 0x5CE0,
        0x93BC: 0x9D07,
        0x93BD: 0x533F,
        0x93BE: 0x5F97,
        0x93BF: 0x5FB3,
        0x93C0: 0x6D9C,
        0x93C1: 0x7279,
        0x93C2: 0x7763,
        0x93C3: 0x79BF,
        0x93C4: 0x7BE4,
        0x93C5: 0x6BD2,
        0x93C6: 0x72EC,
        0x93C7: 0x8AAD,
        0x93C8: 0x6803,
        0x93C9: 0x6A61,
        0x93CA: 0x51F8,
        0x93CB: 0x7A81,
        0x93CC: 0x6934,
        0x93CD: 0x5C4A,
        0x93CE: 0x9CF6,
        0x93CF: 0x82EB,
        0x93D0: 0x5BC5,
        0x93D1: 0x9149,
        0x93D2: 0x701E,
        0x93D3: 0x5678,
        0x93D4: 0x5C6F,
        0x93D5: 0x60C7,
        0x93D6: 0x6566,
        0x93D7: 0x6C8C,
        0x93D8: 0x8C5A,
        0x93D9: 0x9041,
        0x93DA: 0x9813,
        0x93DB: 0x5451,
        0x93DC: 0x66C7,
        0x93DD: 0x920D,
        0x93DE: 0x5948,
        0x93DF: 0x90A3,
        0x93E0: 0x5185,
        0x93E1: 0x4E4D,
        0x93E2: 0x51EA,
        0x93E3: 0x8599,
        0x93E4: 0x8B0E,
        0x93E5: 0x7058,
        0x93E6: 0x637A,
        0x93E7: 0x934B,
        0x93E8: 0x6962,
        0x93E9: 0x99B4,
        0x93EA: 0x7E04,
        0x93EB: 0x7577,
        0x93EC: 0x5357,
        0x93ED: 0x6960,
        0x93EE: 0x8EDF,
        0x93EF: 0x96E3,
        0x93F0: 0x6C5D,
        0x93F1: 0x4E8C,
        0x93F2: 0x5C3C,
        0x93F3: 0x5F10,
        0x93F4: 0x8FE9,
        0x93F5: 0x5302,
        0x93F6: 0x8CD1,
        0x93F7: 0x8089,
        0x93F8: 0x8679,
        0x93F9: 0x5EFF,
        0x93FA: 0x65E5,
        0x93FB: 0x4E73,
        0x93FC: 0x5165,
        0x9440: 0x5982,
        0x9441: 0x5C3F,
        0x9442: 0x97EE,
        0x9443: 0x4EFB,
        0x9444: 0x598A,
        0x9445: 0x5FCD,
        0x9446: 0x8A8D,
        0x9447: 0x6FE1,
        0x9448: 0x79B0,
        0x9449: 0x7962,
        0x944A: 0x5BE7,
        0x944B: 0x8471,
        0x944C: 0x732B,
        0x944D: 0x71B1,
        0x944E: 0x5E74,
        0x944F: 0x5FF5,
        0x9450: 0x637B,
        0x9451: 0x649A,
        0x9452: 0x71C3,
        0x9453: 0x7C98,
        0x9454: 0x4E43,
        0x9455: 0x5EFC,
        0x9456: 0x4E4B,
        0x9457: 0x57DC,
        0x9458: 0x56A2,
        0x9459: 0x60A9,
        0x945A: 0x6FC3,
        0x945B: 0x7D0D,
        0x945C: 0x80FD,
        0x945D: 0x8133,
        0x945E: 0x81BF,
        0x945F: 0x8FB2,
        0x9460: 0x8997,
        0x9461: 0x86A4,
        0x9462: 0x5DF4,
        0x9463: 0x628A,
        0x9464: 0x64AD,
        0x9465: 0x8987,
        0x9466: 0x6777,
        0x9467: 0x6CE2,
        0x9468: 0x6D3E,
        0x9469: 0x7436,
        0x946A: 0x7834,
        0x946B: 0x5A46,
        0x946C: 0x7F75,
        0x946D: 0x82AD,
        0x946E: 0x99AC,
        0x946F: 0x4FF3,
        0x9470: 0x5EC3,
        0x9471: 0x62DD,
        0x9472: 0x6392,
        0x9473: 0x6557,
        0x9474: 0x676F,
        0x9475: 0x76C3,
        0x9476: 0x724C,
        0x9477: 0x80CC,
        0x9478: 0x80BA,
        0x9479: 0x8F29,
        0x947A: 0x914D,
        0x947B: 0x500D,
        0x947C: 0x57F9,
        0x947D: 0x5A92,
        0x947E: 0x6885,
        0x9480: 0x6973,
        0x9481: 0x7164,
        0x9482: 0x72FD,
        0x9483: 0x8CB7,
        0x9484: 0x58F2,
        0x9485: 0x8CE0,
        0x9486: 0x966A,
        0x9487: 0x9019,
        0x9488: 0x877F,
        0x9489: 0x79E4,
        0x948A: 0x77E7,
        0x948B: 0x8429,
        0x948C: 0x4F2F,
        0x948D: 0x5265,
        0x948E: 0x535A,
        0x948F: 0x62CD,
        0x9490: 0x67CF,
        0x9491: 0x6CCA,
        0x9492: 0x767D,
        0x9493: 0x7B94,
        0x9494: 0x7C95,
        0x9495: 0x8236,
        0x9496: 0x8584,
        0x9497: 0x8FEB,
        0x9498: 0x66DD,
        0x9499: 0x6F20,
        0x949A: 0x7206,
        0x949B: 0x7E1B,
        0x949C: 0x83AB,
        0x949D: 0x99C1,
        0x949E: 0x9EA6,
        0x949F: 0x51FD,
        0x94A0: 0x7BB1,
        0x94A1: 0x7872,
        0x94A2: 0x7BB8,
        0x94A3: 0x8087,
        0x94A4: 0x7B48,
        0x94A5: 0x6AE8,
        0x94A6: 0x5E61,
        0x94A7: 0x808C,
        0x94A8: 0x7551,
        0x94A9: 0x7560,
        0x94AA: 0x516B,
        0x94AB: 0x9262,
        0x94AC: 0x6E8C,
        0x94AD: 0x767A,
        0x94AE: 0x9197,
        0x94AF: 0x9AEA,
        0x94B0: 0x4F10,
        0x94B1: 0x7F70,
        0x94B2: 0x629C,
        0x94B3: 0x7B4F,
        0x94B4: 0x95A5,
        0x94B5: 0x9CE9,
        0x94B6: 0x567A,
        0x94B7: 0x5859,
        0x94B8: 0x86E4,
        0x94B9: 0x96BC,
        0x94BA: 0x4F34,
        0x94BB: 0x5224,
        0x94BC: 0x534A,
        0x94BD: 0x53CD,
        0x94BE: 0x53DB,
        0x94BF: 0x5E06,
        0x94C0: 0x642C,
        0x94C1: 0x6591,
        0x94C2: 0x677F,
        0x94C3: 0x6C3E,
        0x94C4: 0x6C4E,
        0x94C5: 0x7248,
        0x94C6: 0x72AF,
        0x94C7: 0x73ED,
        0x94C8: 0x7554,
        0x94C9: 0x7E41,
        0x94CA: 0x822C,
        0x94CB: 0x85E9,
        0x94CC: 0x8CA9,
        0x94CD: 0x7BC4,
        0x94CE: 0x91C6,
        0x94CF: 0x7169,
        0x94D0: 0x9812,
        0x94D1: 0x98EF,
        0x94D2: 0x633D,
        0x94D3: 0x6669,
        0x94D4: 0x756A,
        0x94D5: 0x76E4,
        0x94D6: 0x78D0,
        0x94D7: 0x8543,
        0x94D8: 0x86EE,
        0x94D9: 0x532A,
        0x94DA: 0x5351,
        0x94DB: 0x5426,
        0x94DC: 0x5983,
        0x94DD: 0x5E87,
        0x94DE: 0x5F7C,
        0x94DF: 0x60B2,
        0x94E0: 0x6249,
        0x94E1: 0x6279,
        0x94E2: 0x62AB,
        0x94E3: 0x6590,
        0x94E4: 0x6BD4,
        0x94E5: 0x6CCC,
        0x94E6: 0x75B2,
        0x94E7: 0x76AE,
        0x94E8: 0x7891,
        0x94E9: 0x79D8,
        0x94EA: 0x7DCB,
        0x94EB: 0x7F77,
        0x94EC: 0x80A5,
        0x94ED: 0x88AB,
        0x94EE: 0x8AB9,
        0x94EF: 0x8CBB,
        0x94F0: 0x907F,
        0x94F1: 0x975E,
        0x94F2: 0x98DB,
        0x94F3: 0x6A0B,
        0x94F4: 0x7C38,
        0x94F5: 0x5099,
        0x94F6: 0x5C3E,
        0x94F7: 0x5FAE,
        0x94F8: 0x6787,
        0x94F9: 0x6BD8,
        0x94FA: 0x7435,
        0x94FB: 0x7709,
        0x94FC: 0x7F8E,
        0x9540: 0x9F3B,
        0x9541: 0x67CA,
        0x9542: 0x7A17,
        0x9543: 0x5339,
        0x9544: 0x758B,
        0x9545: 0x9AED,
        0x9546: 0x5F66,
        0x9547: 0x819D,
        0x9548: 0x83F1,
        0x9549: 0x8098,
        0x954A: 0x5F3C,
        0x954B: 0x5FC5,
        0x954C: 0x7562,
        0x954D: 0x7B46,
        0x954E: 0x903C,
        0x954F: 0x6867,
        0x9550: 0x59EB,
        0x9551: 0x5A9B,
        0x9552: 0x7D10,
        0x9553: 0x767E,
        0x9554: 0x8B2C,
        0x9555: 0x4FF5,
        0x9556: 0x5F6A,
        0x9557: 0x6A19,
        0x9558: 0x6C37,
        0x9559: 0x6F02,
        0x955A: 0x74E2,
        0x955B: 0x7968,
        0x955C: 0x8868,
        0x955D: 0x8A55,
        0x955E: 0x8C79,
        0x955F: 0x5EDF,
        0x9560: 0x63CF,
        0x9561: 0x75C5,
        0x9562: 0x79D2,
        0x9563: 0x82D7,
        0x9564: 0x9328,
        0x9565: 0x92F2,
        0x9566: 0x849C,
        0x9567: 0x86ED,
        0x9568: 0x9C2D,
        0x9569: 0x54C1,
        0x956A: 0x5F6C,
        0x956B: 0x658C,
        0x956C: 0x6D5C,
        0x956D: 0x7015,
        0x956E: 0x8CA7,
        0x956F: 0x8CD3,
        0x9570: 0x983B,
        0x9571: 0x654F,
        0x9572: 0x74F6,
        0x9573: 0x4E0D,
        0x9574: 0x4ED8,
        0x9575: 0x57E0,
        0x9576: 0x592B,
        0x9577: 0x5A66,
        0x9578: 0x5BCC,
        0x9579: 0x51A8,
        0x957A: 0x5E03,
        0x957B: 0x5E9C,
        0x957C: 0x6016,
        0x957D: 0x6276,
        0x957E: 0x6577,
        0x9580: 0x65A7,
        0x9581: 0x666E,
        0x9582: 0x6D6E,
        0x9583: 0x7236,
        0x9584: 0x7B26,
        0x9585: 0x8150,
        0x9586: 0x819A,
        0x9587: 0x8299,
        0x9588: 0x8B5C,
        0x9589: 0x8CA0,
        0x958A: 0x8CE6,
        0x958B: 0x8D74,
        0x958C: 0x961C,
        0x958D: 0x9644,
        0x958E: 0x4FAE,
        0x958F: 0x64AB,
        0x9590: 0x6B66,
        0x9591: 0x821E,
        0x9592: 0x8461,
        0x9593: 0x856A,
        0x9594: 0x90E8,
        0x9595: 0x5C01,
        0x9596: 0x6953,
        0x9597: 0x98A8,
        0x9598: 0x847A,
        0x9599: 0x8557,
        0x959A: 0x4F0F,
        0x959B: 0x526F,
        0x959C: 0x5FA9,
        0x959D: 0x5E45,
        0x959E: 0x670D,
        0x959F: 0x798F,
        0x95A0: 0x8179,
        0x95A1: 0x8907,
        0x95A2: 0x8986,
        0x95A3: 0x6DF5,
        0x95A4: 0x5F17,
        0x95A5: 0x6255,
        0x95A6: 0x6CB8,
        0x95A7: 0x4ECF,
        0x95A8: 0x7269,
        0x95A9: 0x9B92,
        0x95AA: 0x5206,
        0x95AB: 0x543B,
        0x95AC: 0x5674,
        0x95AD: 0x58B3,
        0x95AE: 0x61A4,
        0x95AF: 0x626E,
        0x95B0: 0x711A,
        0x95B1: 0x596E,
        0x95B2: 0x7C89,
        0x95B3: 0x7CDE,
        0x95B4: 0x7D1B,
        0x95B5: 0x96F0,
        0x95B6: 0x6587,
        0x95B7: 0x805E,
        0x95B8: 0x4E19,
        0x95B9: 0x4F75,
        0x95BA: 0x5175,
        0x95BB: 0x5840,
        0x95BC: 0x5E63,
        0x95BD: 0x5E73,
        0x95BE: 0x5F0A,
        0x95BF: 0x67C4,
        0x95C0: 0x4E26,
        0x95C1: 0x853D,
        0x95C2: 0x9589,
        0x95C3: 0x965B,
        0x95C4: 0x7C73,
        0x95C5: 0x9801,
        0x95C6: 0x50FB,
        0x95C7: 0x58C1,
        0x95C8: 0x7656,
        0x95C9: 0x78A7,
        0x95CA: 0x5225,
        0x95CB: 0x77A5,
        0x95CC: 0x8511,
        0x95CD: 0x7B86,
        0x95CE: 0x504F,
        0x95CF: 0x5909,
        0x95D0: 0x7247,
        0x95D1: 0x7BC7,
        0x95D2: 0x7DE8,
        0x95D3: 0x8FBA,
        0x95D4: 0x8FD4,
        0x95D5: 0x904D,
        0x95D6: 0x4FBF,
        0x95D7: 0x52C9,
        0x95D8: 0x5A29,
        0x95D9: 0x5F01,
        0x95DA: 0x97AD,
        0x95DB: 0x4FDD,
        0x95DC: 0x8217,
        0x95DD: 0x92EA,
        0x95DE: 0x5703,
        0x95DF: 0x6355,
        0x95E0: 0x6B69,
        0x95E1: 0x752B,
        0x95E2: 0x88DC,
        0x95E3: 0x8F14,
        0x95E4: 0x7A42,
        0x95E5: 0x52DF,
        0x95E6: 0x5893,
        0x95E7: 0x6155,
        0x95E8: 0x620A,
        0x95E9: 0x66AE,
        0x95EA: 0x6BCD,
        0x95EB: 0x7C3F,
        0x95EC: 0x83E9,
        0x95ED: 0x5023,
        0x95EE: 0x4FF8,
        0x95EF: 0x5305,
        0x95F0: 0x5446,
        0x95F1: 0x5831,
        0x95F2: 0x5949,
        0x95F3: 0x5B9D,
        0x95F4: 0x5CF0,
        0x95F5: 0x5CEF,
        0x95F6: 0x5D29,
        0x95F7: 0x5E96,
        0x95F8: 0x62B1,
        0x95F9: 0x6367,
        0x95FA: 0x653E,
        0x95FB: 0x65B9,
        0x95FC: 0x670B,
        0x9640: 0x6CD5,
        0x9641: 0x6CE1,
        0x9642: 0x70F9,
        0x9643: 0x7832,
        0x9644: 0x7E2B,
        0x9645: 0x80DE,
        0x9646: 0x82B3,
        0x9647: 0x840C,
        0x9648: 0x84EC,
        0x9649: 0x8702,
        0x964A: 0x8912,
        0x964B: 0x8A2A,
        0x964C: 0x8C4A,
        0x964D: 0x90A6,
        0x964E: 0x92D2,
        0x964F: 0x98FD,
        0x9650: 0x9CF3,
        0x9651: 0x9D6C,
        0x9652: 0x4E4F,
        0x9653: 0x4EA1,
        0x9654: 0x508D,
        0x9655: 0x5256,
        0x9656: 0x574A,
        0x9657: 0x59A8,
        0x9658: 0x5E3D,
        0x9659: 0x5FD8,
        0x965A: 0x5FD9,
        0x965B: 0x623F,
        0x965C: 0x66B4,
        0x965D: 0x671B,
        0x965E: 0x67D0,
        0x965F: 0x68D2,
        0x9660: 0x5192,
        0x9661: 0x7D21,
        0x9662: 0x80AA,
        0x9663: 0x81A8,
        0x9664: 0x8B00,
        0x9665: 0x8C8C,
        0x9666: 0x8CBF,
        0x9667: 0x927E,
        0x9668: 0x9632,
        0x9669: 0x5420,
        0x966A: 0x982C,
        0x966B: 0x5317,
        0x966C: 0x50D5,
        0x966D: 0x535C,
        0x966E: 0x58A8,
        0x966F: 0x64B2,
        0x9670: 0x6734,
        0x9671: 0x7267,
        0x9672: 0x7766,
        0x9673: 0x7A46,
        0x9674: 0x91E6,
        0x9675: 0x52C3,
        0x9676: 0x6CA1,
        0x9677: 0x6B86,
        0x9678: 0x5800,
        0x9679: 0x5E4C,
        0x967A: 0x5954,
        0x967B: 0x672C,
        0x967C: 0x7FFB,
        0x967D: 0x51E1,
        0x967E: 0x76C6,
        0x9680: 0x6469,
        0x9681: 0x78E8,
        0x9682: 0x9B54,
        0x9683: 0x9EBB,
        0x9684: 0x57CB,
        0x9685: 0x59B9,
        0x9686: 0x6627,
        0x9687: 0x679A,
        0x9688: 0x6BCE,
        0x9689: 0x54E9,
        0x968A: 0x69D9,
        0x968B: 0x5E55,
        0x968C: 0x819C,
        0x968D: 0x6795,
        0x968E: 0x9BAA,
        0x968F: 0x67FE,
        0x9690: 0x9C52,
        0x9691: 0x685D,
        0x9692: 0x4EA6,
        0x9693: 0x4FE3,
        0x9694: 0x53C8,
        0x9695: 0x62B9,
        0x9696: 0x672B,
        0x9697: 0x6CAB,
        0x9698: 0x8FC4,
        0x9699: 0x4FAD,
        0x969A: 0x7E6D,
        0x969B: 0x9EBF,
        0x969C: 0x4E07,
        0x969D: 0x6162,
        0x969E: 0x6E80,
        0x969F: 0x6F2B,
        0x96A0: 0x8513,
        0x96A1: 0x5473,
        0x96A2: 0x672A,
        0x96A3: 0x9B45,
        0x96A4: 0x5DF3,
        0x96A5: 0x7B95,
        0x96A6: 0x5CAC,
        0x96A7: 0x5BC6,
        0x96A8: 0x871C,
        0x96A9: 0x6E4A,
        0x96AA: 0x84D1,
        0x96AB: 0x7A14,
        0x96AC: 0x8108,
        0x96AD: 0x5999,
        0x96AE: 0x7C8D,
        0x96AF: 0x6C11,
        0x96B0: 0x7720,
        0x96B1: 0x52D9,
        0x96B2: 0x5922,
        0x96B3: 0x7121,
        0x96B4: 0x725F,
        0x96B5: 0x77DB,
        0x96B6: 0x9727,
        0x96B7: 0x9D61,
        0x96B8: 0x690B,
        0x96B9: 0x5A7F,
        0x96BA: 0x5A18,
        0x96BB: 0x51A5,
        0x96BC: 0x540D,
        0x96BD: 0x547D,
        0x96BE: 0x660E,
        0x96BF: 0x76DF,
        0x96C0: 0x8FF7,
        0x96C1: 0x9298,
        0x96C2: 0x9CF4,
        0x96C3: 0x59EA,
        0x96C4: 0x725D,
        0x96C5: 0x6EC5,
        0x96C6: 0x514D,
        0x96C7: 0x68C9,
        0x96C8: 0x7DBF,
        0x96C9: 0x7DEC,
        0x96CA: 0x9762,
        0x96CB: 0x9EBA,
        0x96CC: 0x6478,
        0x96CD: 0x6A21,
        0x96CE: 0x8302,
        0x96CF: 0x5984,
        0x96D0: 0x5B5F,
        0x96D1: 0x6BDB,
        0x96D2: 0x731B,
        0x96D3: 0x76F2,
        0x96D4: 0x7DB2,
        0x96D5: 0x8017,
        0x96D6: 0x8499,
        0x96D7: 0x5132,
        0x96D8: 0x6728,
        0x96D9: 0x9ED9,
        0x96DA: 0x76EE,
        0x96DB: 0x6762,
        0x96DC: 0x52FF,
        0x96DD: 0x9905,
        0x96DE: 0x5C24,
        0x96DF: 0x623B,
        0x96E0: 0x7C7E,
        0x96E1: 0x8CB0,
        0x96E2: 0x554F,
        0x96E3: 0x60B6,
        0x96E4: 0x7D0B,
        0x96E5: 0x9580,
        0x96E6: 0x5301,
        0x96E7: 0x4E5F,
        0x96E8: 0x51B6,
        0x96E9: 0x591C,
        0x96EA: 0x723A,
        0x96EB: 0x8036,
        0x96EC: 0x91CE,
        0x96ED: 0x5F25,
        0x96EE: 0x77E2,
        0x96EF: 0x5384,
        0x96F0: 0x5F79,
        0x96F1: 0x7D04,
        0x96F2: 0x85AC,
        0x96F3: 0x8A33,
        0x96F4: 0x8E8D,
        0x96F5: 0x9756,
        0x96F6: 0x67F3,
        0x96F7: 0x85AE,
        0x96F8: 0x9453,
        0x96F9: 0x6109,
        0x96FA: 0x6108,
        0x96FB: 0x6CB9,
        0x96FC: 0x7652,
        0x9740: 0x8AED,
        0x9741: 0x8F38,
        0x9742: 0x552F,
        0x9743: 0x4F51,
        0x9744: 0x512A,
        0x9745: 0x52C7,
        0x9746: 0x53CB,
        0x9747: 0x5BA5,
        0x9748: 0x5E7D,
        0x9749: 0x60A0,
        0x974A: 0x6182,
        0x974B: 0x63D6,
        0x974C: 0x6709,
        0x974D: 0x67DA,
        0x974E: 0x6E67,
        0x974F: 0x6D8C,
        0x9750: 0x7336,
        0x9751: 0x7337,
        0x9752: 0x7531,
        0x9753: 0x7950,
        0x9754: 0x88D5,
        0x9755: 0x8A98,
        0x9756: 0x904A,
        0x9757: 0x9091,
        0x9758: 0x90F5,
        0x9759: 0x96C4,
        0x975A: 0x878D,
        0x975B: 0x5915,
        0x975C: 0x4E88,
        0x975D: 0x4F59,
        0x975E: 0x4E0E,
        0x975F: 0x8A89,
        0x9760: 0x8F3F,
        0x9761: 0x9810,
        0x9762: 0x50AD,
        0x9763: 0x5E7C,
        0x9764: 0x5996,
        0x9765: 0x5BB9,
        0x9766: 0x5EB8,
        0x9767: 0x63DA,
        0x9768: 0x63FA,
        0x9769: 0x64C1,
        0x976A: 0x66DC,
        0x976B: 0x694A,
        0x976C: 0x69D8,
        0x976D: 0x6D0B,
        0x976E: 0x6EB6,
        0x976F: 0x7194,
        0x9770: 0x7528,
        0x9771: 0x7AAF,
        0x9772: 0x7F8A,
        0x9773: 0x8000,
        0x9774: 0x8449,
        0x9775: 0x84C9,
        0x9776: 0x8981,
        0x9777: 0x8B21,
        0x9778: 0x8E0A,
        0x9779: 0x9065,
        0x977A: 0x967D,
        0x977B: 0x990A,
        0x977C: 0x617E,
        0x977D: 0x6291,
        0x977E: 0x6B32,
        0x9780: 0x6C83,
        0x9781: 0x6D74,
        0x9782: 0x7FCC,
        0x9783: 0x7FFC,
        0x9784: 0x6DC0,
        0x9785: 0x7F85,
        0x9786: 0x87BA,
        0x9787: 0x88F8,
        0x9788: 0x6765,
        0x9789: 0x83B1,
        0x978A: 0x983C,
        0x978B: 0x96F7,
        0x978C: 0x6D1B,
        0x978D: 0x7D61,
        0x978E: 0x843D,
        0x978F: 0x916A,
        0x9790: 0x4E71,
        0x9791: 0x5375,
        0x9792: 0x5D50,
        0x9793: 0x6B04,
        0x9794: 0x6FEB,
        0x9795: 0x85CD,
        0x9796: 0x862D,
        0x9797: 0x89A7,
        0x9798: 0x5229,
        0x9799: 0x540F,
        0x979A: 0x5C65,
        0x979B: 0x674E,
        0x979C: 0x68A8,
        0x979D: 0x7406,
        0x979E: 0x7483,
        0x979F: 0x75E2,
        0x97A0: 0x88CF,
        0x97A1: 0x88E1,
        0x97A2: 0x91CC,
        0x97A3: 0x96E2,
        0x97A4: 0x9678,
        0x97A5: 0x5F8B,
        0x97A6: 0x7387,
        0x97A7: 0x7ACB,
        0x97A8: 0x844E,
        0x97A9: 0x63A0,
        0x97AA: 0x7565,
        0x97AB: 0x5289,
        0x97AC: 0x6D41,
        0x97AD: 0x6E9C,
        0x97AE: 0x7409,
        0x97AF: 0x7559,
        0x97B0: 0x786B,
        0x97B1: 0x7C92,
        0x97B2: 0x9686,
        0x97B3: 0x7ADC,
        0x97B4: 0x9F8D,
        0x97B5: 0x4FB6,
        0x97B6: 0x616E,
        0x97B7: 0x65C5,
        0x97B8: 0x865C,
        0x97B9: 0x4E86,
        0x97BA: 0x4EAE,
        0x97BB: 0x50DA,
        0x97BC: 0x4E21,
        0x97BD: 0x51CC,
        0x97BE: 0x5BEE,
        0x97BF: 0x6599,
        0x97C0: 0x6881,
        0x97C1: 0x6DBC,
        0x97C2: 0x731F,
        0x97C3: 0x7642,
        0x97C4: 0x77AD,
        0x97C5: 0x7A1C,
        0x97C6: 0x7CE7,
        0x97C7: 0x826F,
        0x97C8: 0x8AD2,
        0x97C9: 0x907C,
        0x97CA: 0x91CF,
        0x97CB: 0x9675,
        0x97CC: 0x9818,
        0x97CD: 0x529B,
        0x97CE: 0x7DD1,
        0x97CF: 0x502B,
        0x97D0: 0x5398,
        0x97D1: 0x6797,
        0x97D2: 0x6DCB,
        0x97D3: 0x71D0,
        0x97D4: 0x7433,
        0x97D5: 0x81E8,
        0x97D6: 0x8F2A,
        0x97D7: 0x96A3,
        0x97D8: 0x9C57,
        0x97D9: 0x9E9F,
        0x97DA: 0x7460,
        0x97DB: 0x5841,
        0x97DC: 0x6D99,
        0x97DD: 0x7D2F,
        0x97DE: 0x985E,
        0x97DF: 0x4EE4,
        0x97E0: 0x4F36,
        0x97E1: 0x4F8B,
        0x97E2: 0x51B7,
        0x97E3: 0x52B1,
        0x97E4: 0x5DBA,
        0x97E5: 0x601C,
        0x97E6: 0x73B2,
        0x97E7: 0x793C,
        0x97E8: 0x82D3,
        0x97E9: 0x9234,
        0x97EA: 0x96B7,
        0x97EB: 0x96F6,
        0x97EC: 0x970A,
        0x97ED: 0x9E97,
        0x97EE: 0x9F62,
        0x97EF: 0x66A6,
        0x97F0: 0x6B74,
        0x97F1: 0x5217,
        0x97F2: 0x52A3,
        0x97F3: 0x70C8,
        0x97F4: 0x88C2,
        0x97F5: 0x5EC9,
        0x97F6: 0x604B,
        0x97F7: 0x6190,
        0x97F8: 0x6F23,
        0x97F9: 0x7149,
        0x97FA: 0x7C3E,
        0x97FB: 0x7DF4,
        0x97FC: 0x806F,
        0x9840: 0x84EE,
        0x9841: 0x9023,
        0x9842: 0x932C,
        0x9843: 0x5442,
        0x9844: 0x9B6F,
        0x9845: 0x6AD3,
        0x9846: 0x7089,
        0x9847: 0x8CC2,
        0x9848: 0x8DEF,
        0x9849: 0x9732,
        0x984A: 0x52B4,
        0x984B: 0x5A41,
        0x984C: 0x5ECA,
        0x984D: 0x5F04,
        0x984E: 0x6717,
        0x984F: 0x697C,
        0x9850: 0x6994,
        0x9851: 0x6D6A,
        0x9852: 0x6F0F,
        0x9853: 0x7262,
        0x9854: 0x72FC,
        0x9855: 0x7BED,
        0x9856: 0x8001,
        0x9857: 0x807E,
        0x9858: 0x874B,
        0x9859: 0x90CE,
        0x985A: 0x516D,
        0x985B: 0x9E93,
        0x985C: 0x7984,
        0x985D: 0x808B,
        0x985E: 0x9332,
        0x985F: 0x8AD6,
        0x9860: 0x502D,
        0x9861: 0x548C,
        0x9862: 0x8A71,
        0x9863: 0x6B6A,
        0x9864: 0x8CC4,
        0x9865: 0x8107,
        0x9866: 0x60D1,
        0x9867: 0x67A0,
        0x9868: 0x9DF2,
        0x9869: 0x4E99,
        0x986A: 0x4E98,
        0x986B: 0x9C10,
        0x986C: 0x8A6B,
        0x986D: 0x85C1,
        0x986E: 0x8568,
        0x986F: 0x6900,
        0x9870: 0x6E7E,
        0x9871: 0x7897,
        0x9872: 0x8155,
        0x989F: 0x5F0C,
        0x98A0: 0x4E10,
        0x98A1: 0x4E15,
        0x98A2: 0x4E2A,
        0x98A3: 0x4E31,
        0x98A4: 0x4E36,
        0x98A5: 0x4E3C,
        0x98A6: 0x4E3F,
        0x98A7: 0x4E42,
        0x98A8: 0x4E56,
        0x98A9: 0x4E58,
        0x98AA: 0x4E82,
        0x98AB: 0x4E85,
        0x98AC: 0x8C6B,
        0x98AD: 0x4E8A,
        0x98AE: 0x8212,
        0x98AF: 0x5F0D,
        0x98B0: 0x4E8E,
        0x98B1: 0x4E9E,
        0x98B2: 0x4E9F,
        0x98B3: 0x4EA0,
        0x98B4: 0x4EA2,
        0x98B5: 0x4EB0,
        0x98B6: 0x4EB3,
        0x98B7: 0x4EB6,
        0x98B8: 0x4ECE,
        0x98B9: 0x4ECD,
        0x98BA: 0x4EC4,
        0x98BB: 0x4EC6,
        0x98BC: 0x4EC2,
        0x98BD: 0x4ED7,
        0x98BE: 0x4EDE,
        0x98BF: 0x4EED,
        0x98C0: 0x4EDF,
        0x98C1: 0x4EF7,
        0x98C2: 0x4F09,
        0x98C3: 0x4F5A,
        0x98C4: 0x4F30,
        0x98C5: 0x4F5B,
        0x98C6: 0x4F5D,
        0x98C7: 0x4F57,
        0x98C8: 0x4F47,
        0x98C9: 0x4F76,
        0x98CA: 0x4F88,
        0x98CB: 0x4F8F,
        0x98CC: 0x4F98,
        0x98CD: 0x4F7B,
        0x98CE: 0x4F69,
        0x98CF: 0x4F70,
        0x98D0: 0x4F91,
        0x98D1: 0x4F6F,
        0x98D2: 0x4F86,
        0x98D3: 0x4F96,
        0x98D4: 0x5118,
        0x98D5: 0x4FD4,
        0x98D6: 0x4FDF,
        0x98D7: 0x4FCE,
        0x98D8: 0x4FD8,
        0x98D9: 0x4FDB,
        0x98DA: 0x4FD1,
        0x98DB: 0x4FDA,
        0x98DC: 0x4FD0,
        0x98DD: 0x4FE4,
        0x98DE: 0x4FE5,
        0x98DF: 0x501A,
        0x98E0: 0x5028,
        0x98E1: 0x5014,
        0x98E2: 0x502A,
        0x98E3: 0x5025,
        0x98E4: 0x5005,
        0x98E5: 0x4F1C,
        0x98E6: 0x4FF6,
        0x98E7: 0x5021,
        0x98E8: 0x5029,
        0x98E9: 0x502C,
        0x98EA: 0x4FFE,
        0x98EB: 0x4FEF,
        0x98EC: 0x5011,
        0x98ED: 0x5006,
        0x98EE: 0x5043,
        0x98EF: 0x5047,
        0x98F0: 0x6703,
        0x98F1: 0x5055,
        0x98F2: 0x5050,
        0x98F3: 0x5048,
        0x98F4: 0x505A,
        0x98F5: 0x5056,
        0x98F6: 0x506C,
        0x98F7: 0x5078,
        0x98F8: 0x5080,
        0x98F9: 0x509A,
        0x98FA: 0x5085,
        0x98FB: 0x50B4,
        0x98FC: 0x50B2,
        0x9940: 0x50C9,
        0x9941: 0x50CA,
        0x9942: 0x50B3,
        0x9943: 0x50C2,
        0x9944: 0x50D6,
        0x9945: 0x50DE,
        0x9946: 0x50E5,
        0x9947: 0x50ED,
        0x9948: 0x50E3,
        0x9949: 0x50EE,
        0x994A: 0x50F9,
        0x994B: 0x50F5,
        0x994C: 0x5109,
        0x994D: 0x5101,
        0x994E: 0x5102,
        0x994F: 0x5116,
        0x9950: 0x5115,
        0x9951: 0x5114,
        0x9952: 0x511A,
        0x9953: 0x5121,
        0x9954: 0x513A,
        0x9955: 0x5137,
        0x9956: 0x513C,
        0x9957: 0x513B,
        0x9958: 0x513F,
        0x9959: 0x5140,
        0x995A: 0x5152,
        0x995B: 0x514C,
        0x995C: 0x5154,
        0x995D: 0x5162,
        0x995E: 0x7AF8,
        0x995F: 0x5169,
        0x9960: 0x516A,
        0x9961: 0x516E,
        0x9962: 0x5180,
        0x9963: 0x5182,
        0x9964: 0x56D8,
        0x9965: 0x518C,
        0x9966: 0x5189,
        0x9967: 0x518F,
        0x9968: 0x5191,
        0x9969: 0x5193,
        0x996A: 0x5195,
        0x996B: 0x5196,
        0x996C: 0x51A4,
        0x996D: 0x51A6,
        0x996E: 0x51A2,
        0x996F: 0x51A9,
        0x9970: 0x51AA,
        0x9971: 0x51AB,
        0x9972: 0x51B3,
        0x9973: 0x51B1,
        0x9974: 0x51B2,
        0x9975: 0x51B0,
        0x9976: 0x51B5,
        0x9977: 0x51BD,
        0x9978: 0x51C5,
        0x9979: 0x51C9,
        0x997A: 0x51DB,
        0x997B: 0x51E0,
        0x997C: 0x8655,
        0x997D: 0x51E9,
        0x997E: 0x51ED,
        0x9980: 0x51F0,
        0x9981: 0x51F5,
        0x9982: 0x51FE,
        0x9983: 0x5204,
        0x9984: 0x520B,
        0x9985: 0x5214,
        0x9986: 0x520E,
        0x9987: 0x5227,
        0x9988: 0x522A,
        0x9989: 0x522E,
        0x998A: 0x5233,
        0x998B: 0x5239,
        0x998C: 0x524F,
        0x998D: 0x5244,
        0x998E: 0x524B,
        0x998F: 0x524C,
        0x9990: 0x525E,
        0x9991: 0x5254,
        0x9992: 0x526A,
        0x9993: 0x5274,
        0x9994: 0x5269,
        0x9995: 0x5273,
        0x9996: 0x527F,
        0x9997: 0x527D,
        0x9998: 0x528D,
        0x9999: 0x5294,
        0x999A: 0x5292,
        0x999B: 0x5271,
        0x999C: 0x5288,
        0x999D: 0x5291,
        0x999E: 0x8FA8,
        0x999F: 0x8FA7,
        0x99A0: 0x52AC,
        0x99A1: 0x52AD,
        0x99A2: 0x52BC,
        0x99A3: 0x52B5,
        0x99A4: 0x52C1,
        0x99A5: 0x52CD,
        0x99A6: 0x52D7,
        0x99A7: 0x52DE,
        0x99A8: 0x52E3,
        0x99A9: 0x52E6,
        0x99AA: 0x98ED,
        0x99AB: 0x52E0,
        0x99AC: 0x52F3,
        0x99AD: 0x52F5,
        0x99AE: 0x52F8,
        0x99AF: 0x52F9,
        0x99B0: 0x5306,
        0x99B1: 0x5308,
        0x99B2: 0x7538,
        0x99B3: 0x530D,
        0x99B4: 0x5310,
        0x99B5: 0x530F,
        0x99B6: 0x5315,
        0x99B7: 0x531A,
        0x99B8: 0x5323,
        0x99B9: 0x532F,
        0x99BA: 0x5331,
        0x99BB: 0x5333,
        0x99BC: 0x5338,
        0x99BD: 0x5340,
        0x99BE: 0x5346,
        0x99BF: 0x5345,
        0x99C0: 0x4E17,
        0x99C1: 0x5349,
        0x99C2: 0x534D,
        0x99C3: 0x51D6,
        0x99C4: 0x535E,
        0x99C5: 0x5369,
        0x99C6: 0x536E,
        0x99C7: 0x5918,
        0x99C8: 0x537B,
        0x99C9: 0x5377,
        0x99CA: 0x5382,
        0x99CB: 0x5396,
        0x99CC: 0x53A0,
        0x99CD: 0x53A6,
        0x99CE: 0x53A5,
        0x99CF: 0x53AE,
        0x99D0: 0x53B0,
        0x99D1: 0x53B6,
        0x99D2: 0x53C3,
        0x99D3: 0x7C12,
        0x99D4: 0x96D9,
        0x99D5: 0x53DF,
        0x99D6: 0x66FC,
        0x99D7: 0x71EE,
        0x99D8: 0x53EE,
        0x99D9: 0x53E8,
        0x99DA: 0x53ED,
        0x99DB: 0x53FA,
        0x99DC: 0x5401,
        0x99DD: 0x543D,
        0x99DE: 0x5440,
        0x99DF: 0x542C,
        0x99E0: 0x542D,
        0x99E1: 0x543C,
        0x99E2: 0x542E,
        0x99E3: 0x5436,
        0x99E4: 0x5429,
        0x99E5: 0x541D,
        0x99E6: 0x544E,
        0x99E7: 0x548F,
        0x99E8: 0x5475,
        0x99E9: 0x548E,
        0x99EA: 0x545F,
        0x99EB: 0x5471,
        0x99EC: 0x5477,
        0x99ED: 0x5470,
        0x99EE: 0x5492,
        0x99EF: 0x547B,
        0x99F0: 0x5480,
        0x99F1: 0x5476,
        0x99F2: 0x5484,
        0x99F3: 0x5490,
        0x99F4: 0x5486,
        0x99F5: 0x54C7,
        0x99F6: 0x54A2,
        0x99F7: 0x54B8,
        0x99F8: 0x54A5,
        0x99F9: 0x54AC,
        0x99FA: 0x54C4,
        0x99FB: 0x54C8,
        0x99FC: 0x54A8,
        0x9A40: 0x54AB,
        0x9A41: 0x54C2,
        0x9A42: 0x54A4,
        0x9A43: 0x54BE,
        0x9A44: 0x54BC,
        0x9A45: 0x54D8,
        0x9A46: 0x54E5,
        0x9A47: 0x54E6,
        0x9A48: 0x550F,
        0x9A49: 0x5514,
        0x9A4A: 0x54FD,
        0x9A4B: 0x54EE,
        0x9A4C: 0x54ED,
        0x9A4D: 0x54FA,
        0x9A4E: 0x54E2,
        0x9A4F: 0x5539,
        0x9A50: 0x5540,
        0x9A51: 0x5563,
        0x9A52: 0x554C,
        0x9A53: 0x552E,
        0x9A54: 0x555C,
        0x9A55: 0x5545,
        0x9A56: 0x5556,
        0x9A57: 0x5557,
        0x9A58: 0x5538,
        0x9A59: 0x5533,
        0x9A5A: 0x555D,
        0x9A5B: 0x5599,
        0x9A5C: 0x5580,
        0x9A5D: 0x54AF,
        0x9A5E: 0x558A,
        0x9A5F: 0x559F,
        0x9A60: 0x557B,
        0x9A61: 0x557E,
        0x9A62: 0x5598,
        0x9A63: 0x559E,
        0x9A64: 0x55AE,
        0x9A65: 0x557C,
        0x9A66: 0x5583,
        0x9A67: 0x55A9,
        0x9A68: 0x5587,
        0x9A69: 0x55A8,
        0x9A6A: 0x55DA,
        0x9A6B: 0x55C5,
        0x9A6C: 0x55DF,
        0x9A6D: 0x55C4,
        0x9A6E: 0x55DC,
        0x9A6F: 0x55E4,
        0x9A70: 0x55D4,
        0x9A71: 0x5614,
        0x9A72: 0x55F7,
        0x9A73: 0x5616,
        0x9A74: 0x55FE,
        0x9A75: 0x55FD,
        0x9A76: 0x561B,
        0x9A77: 0x55F9,
        0x9A78: 0x564E,
        0x9A79: 0x5650,
        0x9A7A: 0x71DF,
        0x9A7B: 0x5634,
        0x9A7C: 0x5636,
        0x9A7D: 0x5632,
        0x9A7E: 0x5638,
        0x9A80: 0x566B,
        0x9A81: 0x5664,
        0x9A82: 0x562F,
        0x9A83: 0x566C,
        0x9A84: 0x566A,
        0x9A85: 0x5686,
        0x9A86: 0x5680,
        0x9A87: 0x568A,
        0x9A88: 0x56A0,
        0x9A89: 0x5694,
        0x9A8A: 0x568F,
        0x9A8B: 0x56A5,
        0x9A8C: 0x56AE,
        0x9A8D: 0x56B6,
        0x9A8E: 0x56B4,
        0x9A8F: 0x56C2,
        0x9A90: 0x56BC,
        0x9A91: 0x56C1,
        0x9A92: 0x56C3,
        0x9A93: 0x56C0,
        0x9A94: 0x56C8,
        0x9A95: 0x56CE,
        0x9A96: 0x56D1,
        0x9A97: 0x56D3,
        0x9A98: 0x56D7,
        0x9A99: 0x56EE,
        0x9A9A: 0x56F9,
        0x9A9B: 0x5700,
        0x9A9C: 0x56FF,
        0x9A9D: 0x5704,
        0x9A9E: 0x5709,
        0x9A9F: 0x5708,
        0x9AA0: 0x570B,
        0x9AA1: 0x570D,
        0x9AA2: 0x5713,
        0x9AA3: 0x5718,
        0x9AA4: 0x5716,
        0x9AA5: 0x55C7,
        0x9AA6: 0x571C,
        0x9AA7: 0x5726,
        0x9AA8: 0x5737,
        0x9AA9: 0x5738,
        0x9AAA: 0x574E,
        0x9AAB: 0x573B,
        0x9AAC: 0x5740,
        0x9AAD: 0x574F,
        0x9AAE: 0x5769,
        0x9AAF: 0x57C0,
        0x9AB0: 0x5788,
        0x9AB1: 0x5761,
        0x9AB2: 0x577F,
        0x9AB3: 0x5789,
        0x9AB4: 0x5793,
        0x9AB5: 0x57A0,
        0x9AB6: 0x57B3,
        0x9AB7: 0x57A4,
        0x9AB8: 0x57AA,
        0x9AB9: 0x57B0,
        0x9ABA: 0x57C3,
        0x9ABB: 0x57C6,
        0x9ABC: 0x57D4,
        0x9ABD: 0x57D2,
        0x9ABE: 0x57D3,
        0x9ABF: 0x580A,
        0x9AC0: 0x57D6,
        0x9AC1: 0x57E3,
        0x9AC2: 0x580B,
        0x9AC3: 0x5819,
        0x9AC4: 0x581D,
        0x9AC5: 0x5872,
        0x9AC6: 0x5821,
        0x9AC7: 0x5862,
        0x9AC8: 0x584B,
        0x9AC9: 0x5870,
        0x9ACA: 0x6BC0,
        0x9ACB: 0x5852,
        0x9ACC: 0x583D,
        0x9ACD: 0x5879,
        0x9ACE: 0x5885,
        0x9ACF: 0x58B9,
        0x9AD0: 0x589F,
        0x9AD1: 0x58AB,
        0x9AD2: 0x58BA,
        0x9AD3: 0x58DE,
        0x9AD4: 0x58BB,
        0x9AD5: 0x58B8,
        0x9AD6: 0x58AE,
        0x9AD7: 0x58C5,
        0x9AD8: 0x58D3,
        0x9AD9: 0x58D1,
        0x9ADA: 0x58D7,
        0x9ADB: 0x58D9,
        0x9ADC: 0x58D8,
        0x9ADD: 0x58E5,
        0x9ADE: 0x58DC,
        0x9ADF: 0x58E4,
        0x9AE0: 0x58DF,
        0x9AE1: 0x58EF,
        0x9AE2: 0x58FA,
        0x9AE3: 0x58F9,
        0x9AE4: 0x58FB,
        0x9AE5: 0x58FC,
        0x9AE6: 0x58FD,
        0x9AE7: 0x5902,
        0x9AE8: 0x590A,
        0x9AE9: 0x5910,
        0x9AEA: 0x591B,
        0x9AEB: 0x68A6,
        0x9AEC: 0x5925,
        0x9AED: 0x592C,
        0x9AEE: 0x592D,
        0x9AEF: 0x5932,
        0x9AF0: 0x5938,
        0x9AF1: 0x593E,
        0x9AF2: 0x7AD2,
        0x9AF3: 0x5955,
        0x9AF4: 0x5950,
        0x9AF5: 0x594E,
        0x9AF6: 0x595A,
        0x9AF7: 0x5958,
        0x9AF8: 0x5962,
        0x9AF9: 0x5960,
        0x9AFA: 0x5967,
        0x9AFB: 0x596C,
        0x9AFC: 0x5969,
        0x9B40: 0x5978,
        0x9B41: 0x5981,
        0x9B42: 0x599D,
        0x9B43: 0x4F5E,
        0x9B44: 0x4FAB,
        0x9B45: 0x59A3,
        0x9B46: 0x59B2,
        0x9B47: 0x59C6,
        0x9B48: 0x59E8,
        0x9B49: 0x59DC,
        0x9B4A: 0x598D,
        0x9B4B: 0x59D9,
        0x9B4C: 0x59DA,
        0x9B4D: 0x5A25,
        0x9B4E: 0x5A1F,
        0x9B4F: 0x5A11,
        0x9B50: 0x5A1C,
        0x9B51: 0x5A09,
        0x9B52: 0x5A1A,
        0x9B53: 0x5A40,
        0x9B54: 0x5A6C,
        0x9B55: 0x5A49,
        0x9B56: 0x5A35,
        0x9B57: 0x5A36,
        0x9B58: 0x5A62,
        0x9B59: 0x5A6A,
        0x9B5A: 0x5A9A,
        0x9B5B: 0x5ABC,
        0x9B5C: 0x5ABE,
        0x9B5D: 0x5ACB,
        0x9B5E: 0x5AC2,
        0x9B5F: 0x5ABD,
        0x9B60: 0x5AE3,
        0x9B61: 0x5AD7,
        0x9B62: 0x5AE6,
        0x9B63: 0x5AE9,
        0x9B64: 0x5AD6,
        0x9B65: 0x5AFA,
        0x9B66: 0x5AFB,
        0x9B67: 0x5B0C,
        0x9B68: 0x5B0B,
        0x9B69: 0x5B16,
        0x9B6A: 0x5B32,
        0x9B6B: 0x5AD0,
        0x9B6C: 0x5B2A,
        0x9B6D: 0x5B36,
        0x9B6E: 0x5B3E,
        0x9B6F: 0x5B43,
        0x9B70: 0x5B45,
        0x9B71: 0x5B40,
        0x9B72: 0x5B51,
        0x9B73: 0x5B55,
        0x9B74: 0x5B5A,
        0x9B75: 0x5B5B,
        0x9B76: 0x5B65,
        0x9B77: 0x5B69,
        0x9B78: 0x5B70,
        0x9B79: 0x5B73,
        0x9B7A: 0x5B75,
        0x9B7B: 0x5B78,
        0x9B7C: 0x6588,
        0x9B7D: 0x5B7A,
        0x9B7E: 0x5B80,
        0x9B80: 0x5B83,
        0x9B81: 0x5BA6,
        0x9B82: 0x5BB8,
        0x9B83: 0x5BC3,
        0x9B84: 0x5BC7,
        0x9B85: 0x5BC9,
        0x9B86: 0x5BD4,
        0x9B87: 0x5BD0,
        0x9B88: 0x5BE4,
        0x9B89: 0x5BE6,
        0x9B8A: 0x5BE2,
        0x9B8B: 0x5BDE,
        0x9B8C: 0x5BE5,
        0x9B8D: 0x5BEB,
        0x9B8E: 0x5BF0,
        0x9B8F: 0x5BF6,
        0x9B90: 0x5BF3,
        0x9B91: 0x5C05,
        0x9B92: 0x5C07,
        0x9B93: 0x5C08,
        0x9B94: 0x5C0D,
        0x9B95: 0x5C13,
        0x9B96: 0x5C20,
        0x9B97: 0x5C22,
        0x9B98: 0x5C28,
        0x9B99: 0x5C38,
        0x9B9A: 0x5C39,
        0x9B9B: 0x5C41,
        0x9B9C: 0x5C46,
        0x9B9D: 0x5C4E,
        0x9B9E: 0x5C53,
        0x9B9F: 0x5C50,
        0x9BA0: 0x5C4F,
        0x9BA1: 0x5B71,
        0x9BA2: 0x5C6C,
        0x9BA3: 0x5C6E,
        0x9BA4: 0x4E62,
        0x9BA5: 0x5C76,
        0x9BA6: 0x5C79,
        0x9BA7: 0x5C8C,
        0x9BA8: 0x5C91,
        0x9BA9: 0x5C94,
        0x9BAA: 0x599B,
        0x9BAB: 0x5CAB,
        0x9BAC: 0x5CBB,
        0x9BAD: 0x5CB6,
        0x9BAE: 0x5CBC,
        0x9BAF: 0x5CB7,
        0x9BB0: 0x5CC5,
        0x9BB1: 0x5CBE,
        0x9BB2: 0x5CC7,
        0x9BB3: 0x5CD9,
        0x9BB4: 0x5CE9,
        0x9BB5: 0x5CFD,
        0x9BB6: 0x5CFA,
        0x9BB7: 0x5CED,
        0x9BB8: 0x5D8C,
        0x9BB9: 0x5CEA,
        0x9BBA: 0x5D0B,
        0x9BBB: 0x5D15,
        0x9BBC: 0x5D17,
        0x9BBD: 0x5D5C,
        0x9BBE: 0x5D1F,
        0x9BBF: 0x5D1B,
        0x9BC0: 0x5D11,
        0x9BC1: 0x5D14,
        0x9BC2: 0x5D22,
        0x9BC3: 0x5D1A,
        0x9BC4: 0x5D19,
        0x9BC5: 0x5D18,
        0x9BC6: 0x5D4C,
        0x9BC7: 0x5D52,
        0x9BC8: 0x5D4E,
        0x9BC9: 0x5D4B,
        0x9BCA: 0x5D6C,
        0x9BCB: 0x5D73,
        0x9BCC: 0x5D76,
        0x9BCD: 0x5D87,
        0x9BCE: 0x5D84,
        0x9BCF: 0x5D82,
        0x9BD0: 0x5DA2,
        0x9BD1: 0x5D9D,
        0x9BD2: 0x5DAC,
        0x9BD3: 0x5DAE,
        0x9BD4: 0x5DBD,
        0x9BD5: 0x5D90,
        0x9BD6: 0x5DB7,
        0x9BD7: 0x5DBC,
        0x9BD8: 0x5DC9,
        0x9BD9: 0x5DCD,
        0x9BDA: 0x5DD3,
        0x9BDB: 0x5DD2,
        0x9BDC: 0x5DD6,
        0x9BDD: 0x5DDB,
        0x9BDE: 0x5DEB,
        0x9BDF: 0x5DF2,
        0x9BE0: 0x5DF5,
        0x9BE1: 0x5E0B,
        0x9BE2: 0x5E1A,
        0x9BE3: 0x5E19,
        0x9BE4: 0x5E11,
        0x9BE5: 0x5E1B,
        0x9BE6: 0x5E36,
        0x9BE7: 0x5E37,
        0x9BE8: 0x5E44,
        0x9BE9: 0x5E43,
        0x9BEA: 0x5E40,
        0x9BEB: 0x5E4E,
        0x9BEC: 0x5E57,
        0x9BED: 0x5E54,
        0x9BEE: 0x5E5F,
        0x9BEF: 0x5E62,
        0x9BF0: 0x5E64,
        0x9BF1: 0x5E47,
        0x9BF2: 0x5E75,
        0x9BF3: 0x5E76,
        0x9BF4: 0x5E7A,
        0x9BF5: 0x9EBC,
        0x9BF6: 0x5E7F,
        0x9BF7: 0x5EA0,
        0x9BF8: 0x5EC1,
        0x9BF9: 0x5EC2,
        0x9BFA: 0x5EC8,
        0x9BFB: 0x5ED0,
        0x9BFC: 0x5ECF,
        0x9C40: 0x5ED6,
        0x9C41: 0x5EE3,
        0x9C42: 0x5EDD,
        0x9C43: 0x5EDA,
        0x9C44: 0x5EDB,
        0x9C45: 0x5EE2,
        0x9C46: 0x5EE1,
        0x9C47: 0x5EE8,
        0x9C48: 0x5EE9,
        0x9C49: 0x5EEC,
        0x9C4A: 0x5EF1,
        0x9C4B: 0x5EF3,
        0x9C4C: 0x5EF0,
        0x9C4D: 0x5EF4,
        0x9C4E: 0x5EF8,
        0x9C4F: 0x5EFE,
        0x9C50: 0x5F03,
        0x9C51: 0x5F09,
        0x9C52: 0x5F5D,
        0x9C53: 0x5F5C,
        0x9C54: 0x5F0B,
        0x9C55: 0x5F11,
        0x9C56: 0x5F16,
        0x9C57: 0x5F29,
        0x9C58: 0x5F2D,
        0x9C59: 0x5F38,
        0x9C5A: 0x5F41,
        0x9C5B: 0x5F48,
        0x9C5C: 0x5F4C,
        0x9C5D: 0x5F4E,
        0x9C5E: 0x5F2F,
        0x9C5F: 0x5F51,
        0x9C60: 0x5F56,
        0x9C61: 0x5F57,
        0x9C62: 0x5F59,
        0x9C63: 0x5F61,
        0x9C64: 0x5F6D,
        0x9C65: 0x5F73,
        0x9C66: 0x5F77,
        0x9C67: 0x5F83,
        0x9C68: 0x5F82,
        0x9C69: 0x5F7F,
        0x9C6A: 0x5F8A,
        0x9C6B: 0x5F88,
        0x9C6C: 0x5F91,
        0x9C6D: 0x5F87,
        0x9C6E: 0x5F9E,
        0x9C6F: 0x5F99,
        0x9C70: 0x5F98,
        0x9C71: 0x5FA0,
        0x9C72: 0x5FA8,
        0x9C73: 0x5FAD,
        0x9C74: 0x5FBC,
        0x9C75: 0x5FD6,
        0x9C76: 0x5FFB,
        0x9C77: 0x5FE4,
        0x9C78: 0x5FF8,
        0x9C79: 0x5FF1,
        0x9C7A: 0x5FDD,
        0x9C7B: 0x60B3,
        0x9C7C: 0x5FFF,
        0x9C7D: 0x6021,
        0x9C7E: 0x6060,
        0x9C80: 0x6019,
        0x9C81: 0x6010,
        0x9C82: 0x6029,
        0x9C83: 0x600E,
        0x9C84: 0x6031,
        0x9C85: 0x601B,
        0x9C86: 0x6015,
        0x9C87: 0x602B,
        0x9C88: 0x6026,
        0x9C89: 0x600F,
        0x9C8A: 0x603A,
        0x9C8B: 0x605A,
        0x9C8C: 0x6041,
        0x9C8D: 0x606A,
        0x9C8E: 0x6077,
        0x9C8F: 0x605F,
        0x9C90: 0x604A,
        0x9C91: 0x6046,
        0x9C92: 0x604D,
        0x9C93: 0x6063,
        0x9C94: 0x6043,
        0x9C95: 0x6064,
        0x9C96: 0x6042,
        0x9C97: 0x606C,
        0x9C98: 0x606B,
        0x9C99: 0x6059,
        0x9C9A: 0x6081,
        0x9C9B: 0x608D,
        0x9C9C: 0x60E7,
        0x9C9D: 0x6083,
        0x9C9E: 0x609A,
        0x9C9F: 0x6084,
        0x9CA0: 0x609B,
        0x9CA1: 0x6096,
        0x9CA2: 0x6097,
        0x9CA3: 0x6092,
        0x9CA4: 0x60A7,
        0x9CA5: 0x608B,
        0x9CA6: 0x60E1,
        0x9CA7: 0x60B8,
        0x9CA8: 0x60E0,
        0x9CA9: 0x60D3,
        0x9CAA: 0x60B4,
        0x9CAB: 0x5FF0,
        0x9CAC: 0x60BD,
        0x9CAD: 0x60C6,
        0x9CAE: 0x60B5,
        0x9CAF: 0x60D8,
        0x9CB0: 0x614D,
        0x9CB1: 0x6115,
        0x9CB2: 0x6106,
        0x9CB3: 0x60F6,
        0x9CB4: 0x60F7,
        0x9CB5: 0x6100,
        0x9CB6: 0x60F4,
        0x9CB7: 0x60FA,
        0x9CB8: 0x6103,
        0x9CB9: 0x6121,
        0x9CBA: 0x60FB,
        0x9CBB: 0x60F1,
        0x9CBC: 0x610D,
        0x9CBD: 0x610E,
        0x9CBE: 0x6147,
        0x9CBF: 0x613E,
        0x9CC0: 0x6128,
        0x9CC1: 0x6127,
        0x9CC2: 0x614A,
        0x9CC3: 0x613F,
        0x9CC4: 0x613C,
        0x9CC5: 0x612C,
        0x9CC6: 0x6134,
        0x9CC7: 0x613D,
        0x9CC8: 0x6142,
        0x9CC9: 0x6144,
        0x9CCA: 0x6173,
        0x9CCB: 0x6177,
        0x9CCC: 0x6158,
        0x9CCD: 0x6159,
        0x9CCE: 0x615A,
        0x9CCF: 0x616B,
        0x9CD0: 0x6174,
        0x9CD1: 0x616F,
        0x9CD2: 0x6165,
        0x9CD3: 0x6171,
        0x9CD4: 0x615F,
        0x9CD5: 0x615D,
        0x9CD6: 0x6153,
        0x9CD7: 0x6175,
        0x9CD8: 0x6199,
        0x9CD9: 0x6196,
        0x9CDA: 0x6187,
        0x9CDB: 0x61AC,
        0x9CDC: 0x6194,
        0x9CDD: 0x619A,
        0x9CDE: 0x618A,
        0x9CDF: 0x6191,
        0x9CE0: 0x61AB,
        0x9CE1: 0x61AE,
        0x9CE2: 0x61CC,
        0x9CE3: 0x61CA,
        0x9CE4: 0x61C9,
        0x9CE5: 0x61F7,
        0x9CE6: 0x61C8,
        0x9CE7: 0x61C3,
        0x9CE8: 0x61C6,
        0x9CE9: 0x61BA,
        0x9CEA: 0x61CB,
        0x9CEB: 0x7F79,
        0x9CEC: 0x61CD,
        0x9CED: 0x61E6,
        0x9CEE: 0x61E3,
        0x9CEF: 0x61F6,
        0x9CF0: 0x61FA,
        0x9CF1: 0x61F4,
        0x9CF2: 0x61FF,
        0x9CF3: 0x61FD,
        0x9CF4: 0x61FC,
        0x9CF5: 0x61FE,
        0x9CF6: 0x6200,
        0x9CF7: 0x6208,
        0x9CF8: 0x6209,
        0x9CF9: 0x620D,
        0x9CFA: 0x620C,
        0x9CFB: 0x6214,
        0x9CFC: 0x621B,
        0x9D40: 0x621E,
        0x9D41: 0x6221,
        0x9D42: 0x622A,
        0x9D43: 0x622E,
        0x9D44: 0x6230,
        0x9D45: 0x6232,
        0x9D46: 0x6233,
        0x9D47: 0x6241,
        0x9D48: 0x624E,
        0x9D49: 0x625E,
        0x9D4A: 0x6263,
        0x9D4B: 0x625B,
        0x9D4C: 0x6260,
        0x9D4D: 0x6268,
        0x9D4E: 0x627C,
        0x9D4F: 0x6282,
        0x9D50: 0x6289,
        0x9D51: 0x627E,
        0x9D52: 0x6292,
        0x9D53: 0x6293,
        0x9D54: 0x6296,
        0x9D55: 0x62D4,
        0x9D56: 0x6283,
        0x9D57: 0x6294,
        0x9D58: 0x62D7,
        0x9D59: 0x62D1,
        0x9D5A: 0x62BB,
        0x9D5B: 0x62CF,
        0x9D5C: 0x62FF,
        0x9D5D: 0x62C6,
        0x9D5E: 0x64D4,
        0x9D5F: 0x62C8,
        0x9D60: 0x62DC,
        0x9D61: 0x62CC,
        0x9D62: 0x62CA,
        0x9D63: 0x62C2,
        0x9D64: 0x62C7,
        0x9D65: 0x629B,
        0x9D66: 0x62C9,
        0x9D67: 0x630C,
        0x9D68: 0x62EE,
        0x9D69: 0x62F1,
        0x9D6A: 0x6327,
        0x9D6B: 0x6302,
        0x9D6C: 0x6308,
        0x9D6D: 0x62EF,
        0x9D6E: 0x62F5,
        0x9D6F: 0x6350,
        0x9D70: 0x633E,
        0x9D71: 0x634D,
        0x9D72: 0x641C,
        0x9D73: 0x634F,
        0x9D74: 0x6396,
        0x9D75: 0x638E,
        0x9D76: 0x6380,
        0x9D77: 0x63AB,
        0x9D78: 0x6376,
        0x9D79: 0x63A3,
        0x9D7A: 0x638F,
        0x9D7B: 0x6389,
        0x9D7C: 0x639F,
        0x9D7D: 0x63B5,
        0x9D7E: 0x636B,
        0x9D80: 0x6369,
        0x9D81: 0x63BE,
        0x9D82: 0x63E9,
        0x9D83: 0x63C0,
        0x9D84: 0x63C6,
        0x9D85: 0x63E3,
        0x9D86: 0x63C9,
        0x9D87: 0x63D2,
        0x9D88: 0x63F6,
        0x9D89: 0x63C4,
        0x9D8A: 0x6416,
        0x9D8B: 0x6434,
        0x9D8C: 0x6406,
        0x9D8D: 0x6413,
        0x9D8E: 0x6426,
        0x9D8F: 0x6436,
        0x9D90: 0x651D,
        0x9D91: 0x6417,
        0x9D92: 0x6428,
        0x9D93: 0x640F,
        0x9D94: 0x6467,
        0x9D95: 0x646F,
        0x9D96: 0x6476,
        0x9D97: 0x644E,
        0x9D98: 0x652A,
        0x9D99: 0x6495,
        0x9D9A: 0x6493,
        0x9D9B: 0x64A5,
        0x9D9C: 0x64A9,
        0x9D9D: 0x6488,
        0x9D9E: 0x64BC,
        0x9D9F: 0x64DA,
        0x9DA0: 0x64D2,
        0x9DA1: 0x64C5,
        0x9DA2: 0x64C7,
        0x9DA3: 0x64BB,
        0x9DA4: 0x64D8,
        0x9DA5: 0x64C2,
        0x9DA6: 0x64F1,
        0x9DA7: 0x64E7,
        0x9DA8: 0x8209,
        0x9DA9: 0x64E0,
        0x9DAA: 0x64E1,
        0x9DAB: 0x62AC,
        0x9DAC: 0x64E3,
        0x9DAD: 0x64EF,
        0x9DAE: 0x652C,
        0x9DAF: 0x64F6,
        0x9DB0: 0x64F4,
        0x9DB1: 0x64F2,
        0x9DB2: 0x64FA,
        0x9DB3: 0x6500,
        0x9DB4: 0x64FD,
        0x9DB5: 0x6518,
        0x9DB6: 0x651C,
        0x9DB7: 0x6505,
        0x9DB8: 0x6524,
        0x9DB9: 0x6523,
        0x9DBA: 0x652B,
        0x9DBB: 0x6534,
        0x9DBC: 0x6535,
        0x9DBD: 0x6537,
        0x9DBE: 0x6536,
        0x9DBF: 0x6538,
        0x9DC0: 0x754B,
        0x9DC1: 0x6548,
        0x9DC2: 0x6556,
        0x9DC3: 0x6555,
        0x9DC4: 0x654D,
        0x9DC5: 0x6558,
        0x9DC6: 0x655E,
        0x9DC7: 0x655D,
        0x9DC8: 0x6572,
        0x9DC9: 0x6578,
        0x9DCA: 0x6582,
        0x9DCB: 0x6583,
        0x9DCC: 0x8B8A,
        0x9DCD: 0x659B,
        0x9DCE: 0x659F,
        0x9DCF: 0x65AB,
        0x9DD0: 0x65B7,
        0x9DD1: 0x65C3,
        0x9DD2: 0x65C6,
        0x9DD3: 0x65C1,
        0x9DD4: 0x65C4,
        0x9DD5: 0x65CC,
        0x9DD6: 0x65D2,
        0x9DD7: 0x65DB,
        0x9DD8: 0x65D9,
        0x9DD9: 0x65E0,
        0x9DDA: 0x65E1,
        0x9DDB: 0x65F1,
        0x9DDC: 0x6772,
        0x9DDD: 0x660A,
        0x9DDE: 0x6603,
        0x9DDF: 0x65FB,
        0x9DE0: 0x6773,
        0x9DE1: 0x6635,
        0x9DE2: 0x6636,
        0x9DE3: 0x6634,
        0x9DE4: 0x661C,
        0x9DE5: 0x664F,
        0x9DE6: 0x6644,
        0x9DE7: 0x6649,
        0x9DE8: 0x6641,
        0x9DE9: 0x665E,
        0x9DEA: 0x665D,
        0x9DEB: 0x6664,
        0x9DEC: 0x6667,
        0x9DED: 0x6668,
        0x9DEE: 0x665F,
        0x9DEF: 0x6662,
        0x9DF0: 0x6670,
        0x9DF1: 0x6683,
        0x9DF2: 0x6688,
        0x9DF3: 0x668E,
        0x9DF4: 0x6689,
        0x9DF5: 0x6684,
        0x9DF6: 0x6698,
        0x9DF7: 0x669D,
        0x9DF8: 0x66C1,
        0x9DF9: 0x66B9,
        0x9DFA: 0x66C9,
        0x9DFB: 0x66BE,
        0x9DFC: 0x66BC,
        0x9E40: 0x66C4,
        0x9E41: 0x66B8,
        0x9E42: 0x66D6,
        0x9E43: 0x66DA,
        0x9E44: 0x66E0,
        0x9E45: 0x663F,
        0x9E46: 0x66E6,
        0x9E47: 0x66E9,
        0x9E48: 0x66F0,
        0x9E49: 0x66F5,
        0x9E4A: 0x66F7,
        0x9E4B: 0x670F,
        0x9E4C: 0x6716,
        0x9E4D: 0x671E,
        0x9E4E: 0x6726,
        0x9E4F: 0x6727,
        0x9E50: 0x9738,
        0x9E51: 0x672E,
        0x9E52: 0x673F,
        0x9E53: 0x6736,
        0x9E54: 0x6741,
        0x9E55: 0x6738,
        0x9E56: 0x6737,
        0x9E57: 0x6746,
        0x9E58: 0x675E,
        0x9E59: 0x6760,
        0x9E5A: 0x6759,
        0x9E5B: 0x6763,
        0x9E5C: 0x6764,
        0x9E5D: 0x6789,
        0x9E5E: 0x6770,
        0x9E5F: 0x67A9,
        0x9E60: 0x677C,
        0x9E61: 0x676A,
        0x9E62: 0x678C,
        0x9E63: 0x678B,
        0x9E64: 0x67A6,
        0x9E65: 0x67A1,
        0x9E66: 0x6785,
        0x9E67: 0x67B7,
        0x9E68: 0x67EF,
        0x9E69: 0x67B4,
        0x9E6A: 0x67EC,
        0x9E6B: 0x67B3,
        0x9E6C: 0x67E9,
        0x9E6D: 0x67B8,
        0x9E6E: 0x67E4,
        0x9E6F: 0x67DE,
        0x9E70: 0x67DD,
        0x9E71: 0x67E2,
        0x9E72: 0x67EE,
        0x9E73: 0x67B9,
        0x9E74: 0x67CE,
        0x9E75: 0x67C6,
        0x9E76: 0x67E7,
        0x9E77: 0x6A9C,
        0x9E78: 0x681E,
        0x9E79: 0x6846,
        0x9E7A: 0x6829,
        0x9E7B: 0x6840,
        0x9E7C: 0x684D,
        0x9E7D: 0x6832,
        0x9E7E: 0x684E,
        0x9E80: 0x68B3,
        0x9E81: 0x682B,
        0x9E82: 0x6859,
        0x9E83: 0x6863,
        0x9E84: 0x6877,
        0x9E85: 0x687F,
        0x9E86: 0x689F,
        0x9E87: 0x688F,
        0x9E88: 0x68AD,
        0x9E89: 0x6894,
        0x9E8A: 0x689D,
        0x9E8B: 0x689B,
        0x9E8C: 0x6883,
        0x9E8D: 0x6AAE,
        0x9E8E: 0x68B9,
        0x9E8F: 0x6874,
        0x9E90: 0x68B5,
        0x9E91: 0x68A0,
        0x9E92: 0x68BA,
        0x9E93: 0x690F,
        0x9E94: 0x688D,
        0x9E95: 0x687E,
        0x9E96: 0x6901,
        0x9E97: 0x68CA,
        0x9E98: 0x6908,
        0x9E99: 0x68D8,
        0x9E9A: 0x6922,
        0x9E9B: 0x6926,
        0x9E9C: 0x68E1,
        0x9E9D: 0x690C,
        0x9E9E: 0x68CD,
        0x9E9F: 0x68D4,
        0x9EA0: 0x68E7,
        0x9EA1: 0x68D5,
        0x9EA2: 0x6936,
        0x9EA3: 0x6912,
        0x9EA4: 0x6904,
        0x9EA5: 0x68D7,
        0x9EA6: 0x68E3,
        0x9EA7: 0x6925,
        0x9EA8: 0x68F9,
        0x9EA9: 0x68E0,
        0x9EAA: 0x68EF,
        0x9EAB: 0x6928,
        0x9EAC: 0x692A,
        0x9EAD: 0x691A,
        0x9EAE: 0x6923,
        0x9EAF: 0x6921,
        0x9EB0: 0x68C6,
        0x9EB1: 0x6979,
        0x9EB2: 0x6977,
        0x9EB3: 0x695C,
        0x9EB4: 0x6978,
        0x9EB5: 0x696B,
        0x9EB6: 0x6954,
        0x9EB7: 0x697E,
        0x9EB8: 0x696E,
        0x9EB9: 0x6939,
        0x9EBA: 0x6974,
        0x9EBB: 0x693D,
        0x9EBC: 0x6959,
        0x9EBD: 0x6930,
        0x9EBE: 0x6961,
        0x9EBF: 0x695E,
        0x9EC0: 0x695D,
        0x9EC1: 0x6981,
        0x9EC2: 0x696A,
        0x9EC3: 0x69B2,
        0x9EC4: 0x69AE,
        0x9EC5: 0x69D0,
        0x9EC6: 0x69BF,
        0x9EC7: 0x69C1,
        0x9EC8: 0x69D3,
        0x9EC9: 0x69BE,
        0x9ECA: 0x69CE,
        0x9ECB: 0x5BE8,
        0x9ECC: 0x69CA,
        0x9ECD: 0x69DD,
        0x9ECE: 0x69BB,
        0x9ECF: 0x69C3,
        0x9ED0: 0x69A7,
        0x9ED1: 0x6A2E,
        0x9ED2: 0x6991,
        0x9ED3: 0x69A0,
        0x9ED4: 0x699C,
        0x9ED5: 0x6995,
        0x9ED6: 0x69B4,
        0x9ED7: 0x69DE,
        0x9ED8: 0x69E8,
        0x9ED9: 0x6A02,
        0x9EDA: 0x6A1B,
        0x9EDB: 0x69FF,
        0x9EDC: 0x6B0A,
        0x9EDD: 0x69F9,
        0x9EDE: 0x69F2,
        0x9EDF: 0x69E7,
        0x9EE0: 0x6A05,
        0x9EE1: 0x69B1,
        0x9EE2: 0x6A1E,
        0x9EE3: 0x69ED,
        0x9EE4: 0x6A14,
        0x9EE5: 0x69EB,
        0x9EE6: 0x6A0A,
        0x9EE7: 0x6A12,
        0x9EE8: 0x6AC1,
        0x9EE9: 0x6A23,
        0x9EEA: 0x6A13,
        0x9EEB: 0x6A44,
        0x9EEC: 0x6A0C,
        0x9EED: 0x6A72,
        0x9EEE: 0x6A36,
        0x9EEF: 0x6A78,
        0x9EF0: 0x6A47,
        0x9EF1: 0x6A62,
        0x9EF2: 0x6A59,
        0x9EF3: 0x6A66,
        0x9EF4: 0x6A48,
        0x9EF5: 0x6A38,
        0x9EF6: 0x6A22,
        0x9EF7: 0x6A90,
        0x9EF8: 0x6A8D,
        0x9EF9: 0x6AA0,
        0x9EFA: 0x6A84,
        0x9EFB: 0x6AA2,
        0x9EFC: 0x6AA3,
        0x9F40: 0x6A97,
        0x9F41: 0x8617,
        0x9F42: 0x6ABB,
        0x9F43: 0x6AC3,
        0x9F44: 0x6AC2,
        0x9F45: 0x6AB8,
        0x9F46: 0x6AB3,
        0x9F47: 0x6AAC,
        0x9F48: 0x6ADE,
        0x9F49: 0x6AD1,
        0x9F4A: 0x6ADF,
        0x9F4B: 0x6AAA,
        0x9F4C: 0x6ADA,
        0x9F4D: 0x6AEA,
        0x9F4E: 0x6AFB,
        0x9F4F: 0x6B05,
        0x9F50: 0x8616,
        0x9F51: 0x6AFA,
        0x9F52: 0x6B12,
        0x9F53: 0x6B16,
        0x9F54: 0x9B31,
        0x9F55: 0x6B1F,
        0x9F56: 0x6B38,
        0x9F57: 0x6B37,
        0x9F58: 0x76DC,
        0x9F59: 0x6B39,
        0x9F5A: 0x98EE,
        0x9F5B: 0x6B47,
        0x9F5C: 0x6B43,
        0x9F5D: 0x6B49,
        0x9F5E: 0x6B50,
        0x9F5F: 0x6B59,
        0x9F60: 0x6B54,
        0x9F61: 0x6B5B,
        0x9F62: 0x6B5F,
        0x9F63: 0x6B61,
        0x9F64: 0x6B78,
        0x9F65: 0x6B79,
        0x9F66: 0x6B7F,
        0x9F67: 0x6B80,
        0x9F68: 0x6B84,
        0x9F69: 0x6B83,
        0x9F6A: 0x6B8D,
        0x9F6B: 0x6B98,
        0x9F6C: 0x6B95,
        0x9F6D: 0x6B9E,
        0x9F6E: 0x6BA4,
        0x9F6F: 0x6BAA,
        0x9F70: 0x6BAB,
        0x9F71: 0x6BAF,
        0x9F72: 0x6BB2,
        0x9F73: 0x6BB1,
        0x9F74: 0x6BB3,
        0x9F75: 0x6BB7,
        0x9F76: 0x6BBC,
        0x9F77: 0x6BC6,
        0x9F78: 0x6BCB,
        0x9F79: 0x6BD3,
        0x9F7A: 0x6BDF,
        0x9F7B: 0x6BEC,
        0x9F7C: 0x6BEB,
        0x9F7D: 0x6BF3,
        0x9F7E: 0x6BEF,
        0x9F80: 0x9EBE,
        0x9F81: 0x6C08,
        0x9F82: 0x6C13,
        0x9F83: 0x6C14,
        0x9F84: 0x6C1B,
        0x9F85: 0x6C24,
        0x9F86: 0x6C23,
        0x9F87: 0x6C5E,
        0x9F88: 0x6C55,
        0x9F89: 0x6C62,
        0x9F8A: 0x6C6A,
        0x9F8B: 0x6C82,
        0x9F8C: 0x6C8D,
        0x9F8D: 0x6C9A,
        0x9F8E: 0x6C81,
        0x9F8F: 0x6C9B,
        0x9F90: 0x6C7E,
        0x9F91: 0x6C68,
        0x9F92: 0x6C73,
        0x9F93: 0x6C92,
        0x9F94: 0x6C90,
        0x9F95: 0x6CC4,
        0x9F96: 0x6CF1,
        0x9F97: 0x6CD3,
        0x9F98: 0x6CBD,
        0x9F99: 0x6CD7,
        0x9F9A: 0x6CC5,
        0x9F9B: 0x6CDD,
        0x9F9C: 0x6CAE,
        0x9F9D: 0x6CB1,
        0x9F9E: 0x6CBE,
        0x9F9F: 0x6CBA,
        0x9FA0: 0x6CDB,
        0x9FA1: 0x6CEF,
        0x9FA2: 0x6CD9,
        0x9FA3: 0x6CEA,
        0x9FA4: 0x6D1F,
        0x9FA5: 0x884D,
        0x9FA6: 0x6D36,
        0x9FA7: 0x6D2B,
        0x9FA8: 0x6D3D,
        0x9FA9: 0x6D38,
        0x9FAA: 0x6D19,
        0x9FAB: 0x6D35,
        0x9FAC: 0x6D33,
        0x9FAD: 0x6D12,
        0x9FAE: 0x6D0C,
        0x9FAF: 0x6D63,
        0x9FB0: 0x6D93,
        0x9FB1: 0x6D64,
        0x9FB2: 0x6D5A,
        0x9FB3: 0x6D79,
        0x9FB4: 0x6D59,
        0x9FB5: 0x6D8E,
        0x9FB6: 0x6D95,
        0x9FB7: 0x6FE4,
        0x9FB8: 0x6D85,
        0x9FB9: 0x6DF9,
        0x9FBA: 0x6E15,
        0x9FBB: 0x6E0A,
        0x9FBC: 0x6DB5,
        0x9FBD: 0x6DC7,
        0x9FBE: 0x6DE6,
        0x9FBF: 0x6DB8,
        0x9FC0: 0x6DC6,
        0x9FC1: 0x6DEC,
        0x9FC2: 0x6DDE,
        0x9FC3: 0x6DCC,
        0x9FC4: 0x6DE8,
        0x9FC5: 0x6DD2,
        0x9FC6: 0x6DC5,
        0x9FC7: 0x6DFA,
        0x9FC8: 0x6DD9,
        0x9FC9: 0x6DE4,
        0x9FCA: 0x6DD5,
        0x9FCB: 0x6DEA,
        0x9FCC: 0x6DEE,
        0x9FCD: 0x6E2D,
        0x9FCE: 0x6E6E,
        0x9FCF: 0x6E2E,
        0x9FD0: 0x6E19,
        0x9FD1: 0x6E72,
        0x9FD2: 0x6E5F,
        0x9FD3: 0x6E3E,
        0x9FD4: 0x6E23,
        0x9FD5: 0x6E6B,
        0x9FD6: 0x6E2B,
        0x9FD7: 0x6E76,
        0x9FD8: 0x6E4D,
        0x9FD9: 0x6E1F,
        0x9FDA: 0x6E43,
        0x9FDB: 0x6E3A,
        0x9FDC: 0x6E4E,
        0x9FDD: 0x6E24,
        0x9FDE: 0x6EFF,
        0x9FDF: 0x6E1D,
        0x9FE0: 0x6E38,
        0x9FE1: 0x6E82,
        0x9FE2: 0x6EAA,
        0x9FE3: 0x6E98,
        0x9FE4: 0x6EC9,
        0x9FE5: 0x6EB7,
        0x9FE6: 0x6ED3,
        0x9FE7: 0x6EBD,
        0x9FE8: 0x6EAF,
        0x9FE9: 0x6EC4,
        0x9FEA: 0x6EB2,
        0x9FEB: 0x6ED4,
        0x9FEC: 0x6ED5,
        0x9FED: 0x6E8F,
        0x9FEE: 0x6EA5,
        0x9FEF: 0x6EC2,
        0x9FF0: 0x6E9F,
        0x9FF1: 0x6F41,
        0x9FF2: 0x6F11,
        0x9FF3: 0x704C,
        0x9FF4: 0x6EEC,
        0x9FF5: 0x6EF8,
        0x9FF6: 0x6EFE,
        0x9FF7: 0x6F3F,
        0x9FF8: 0x6EF2,
        0x9FF9: 0x6F31,
        0x9FFA: 0x6EEF,
        0x9FFB: 0x6F32,
        0x9FFC: 0x6ECC,
        0xA1: 0xFF61,
        0xA2: 0xFF62,
        0xA3: 0xFF63,
        0xA4: 0xFF64,
        0xA5: 0xFF65,
        0xA6: 0xFF66,
        0xA7: 0xFF67,
        0xA8: 0xFF68,
        0xA9: 0xFF69,
        0xAA: 0xFF6A,
        0xAB: 0xFF6B,
        0xAC: 0xFF6C,
        0xAD: 0xFF6D,
        0xAE: 0xFF6E,
        0xAF: 0xFF6F,
        0xB0: 0xFF70,
        0xB1: 0xFF71,
        0xB2: 0xFF72,
        0xB3: 0xFF73,
        0xB4: 0xFF74,
        0xB5: 0xFF75,
        0xB6: 0xFF76,
        0xB7: 0xFF77,
        0xB8: 0xFF78,
        0xB9: 0xFF79,
        0xBA: 0xFF7A,
        0xBB: 0xFF7B,
        0xBC: 0xFF7C,
        0xBD: 0xFF7D,
        0xBE: 0xFF7E,
        0xBF: 0xFF7F,
        0xC0: 0xFF80,
        0xC1: 0xFF81,
        0xC2: 0xFF82,
        0xC3: 0xFF83,
        0xC4: 0xFF84,
        0xC5: 0xFF85,
        0xC6: 0xFF86,
        0xC7: 0xFF87,
        0xC8: 0xFF88,
        0xC9: 0xFF89,
        0xCA: 0xFF8A,
        0xCB: 0xFF8B,
        0xCC: 0xFF8C,
        0xCD: 0xFF8D,
        0xCE: 0xFF8E,
        0xCF: 0xFF8F,
        0xD0: 0xFF90,
        0xD1: 0xFF91,
        0xD2: 0xFF92,
        0xD3: 0xFF93,
        0xD4: 0xFF94,
        0xD5: 0xFF95,
        0xD6: 0xFF96,
        0xD7: 0xFF97,
        0xD8: 0xFF98,
        0xD9: 0xFF99,
        0xDA: 0xFF9A,
        0xDB: 0xFF9B,
        0xDC: 0xFF9C,
        0xDD: 0xFF9D,
        0xDE: 0xFF9E,
        0xDF: 0xFF9F,
        0xE040: 0x6F3E,
        0xE041: 0x6F13,
        0xE042: 0x6EF7,
        0xE043: 0x6F86,
        0xE044: 0x6F7A,
        0xE045: 0x6F78,
        0xE046: 0x6F81,
        0xE047: 0x6F80,
        0xE048: 0x6F6F,
        0xE049: 0x6F5B,
        0xE04A: 0x6FF3,
        0xE04B: 0x6F6D,
        0xE04C: 0x6F82,
        0xE04D: 0x6F7C,
        0xE04E: 0x6F58,
        0xE04F: 0x6F8E,
        0xE050: 0x6F91,
        0xE051: 0x6FC2,
        0xE052: 0x6F66,
        0xE053: 0x6FB3,
        0xE054: 0x6FA3,
        0xE055: 0x6FA1,
        0xE056: 0x6FA4,
        0xE057: 0x6FB9,
        0xE058: 0x6FC6,
        0xE059: 0x6FAA,
        0xE05A: 0x6FDF,
        0xE05B: 0x6FD5,
        0xE05C: 0x6FEC,
        0xE05D: 0x6FD4,
        0xE05E: 0x6FD8,
        0xE05F: 0x6FF1,
        0xE060: 0x6FEE,
        0xE061: 0x6FDB,
        0xE062: 0x7009,
        0xE063: 0x700B,
        0xE064: 0x6FFA,
        0xE065: 0x7011,
        0xE066: 0x7001,
        0xE067: 0x700F,
        0xE068: 0x6FFE,
        0xE069: 0x701B,
        0xE06A: 0x701A,
        0xE06B: 0x6F74,
        0xE06C: 0x701D,
        0xE06D: 0x7018,
        0xE06E: 0x701F,
        0xE06F: 0x7030,
        0xE070: 0x703E,
        0xE071: 0x7032,
        0xE072: 0x7051,
        0xE073: 0x7063,
        0xE074: 0x7099,
        0xE075: 0x7092,
        0xE076: 0x70AF,
        0xE077: 0x70F1,
        0xE078: 0x70AC,
        0xE079: 0x70B8,
        0xE07A: 0x70B3,
        0xE07B: 0x70AE,
        0xE07C: 0x70DF,
        0xE07D: 0x70CB,
        0xE07E: 0x70DD,
        0xE080: 0x70D9,
        0xE081: 0x7109,
        0xE082: 0x70FD,
        0xE083: 0x711C,
        0xE084: 0x7119,
        0xE085: 0x7165,
        0xE086: 0x7155,
        0xE087: 0x7188,
        0xE088: 0x7166,
        0xE089: 0x7162,
        0xE08A: 0x714C,
        0xE08B: 0x7156,
        0xE08C: 0x716C,
        0xE08D: 0x718F,
        0xE08E: 0x71FB,
        0xE08F: 0x7184,
        0xE090: 0x7195,
        0xE091: 0x71A8,
        0xE092: 0x71AC,
        0xE093: 0x71D7,
        0xE094: 0x71B9,
        0xE095: 0x71BE,
        0xE096: 0x71D2,
        0xE097: 0x71C9,
        0xE098: 0x71D4,
        0xE099: 0x71CE,
        0xE09A: 0x71E0,
        0xE09B: 0x71EC,
        0xE09C: 0x71E7,
        0xE09D: 0x71F5,
        0xE09E: 0x71FC,
        0xE09F: 0x71F9,
        0xE0A0: 0x71FF,
        0xE0A1: 0x720D,
        0xE0A2: 0x7210,
        0xE0A3: 0x721B,
        0xE0A4: 0x7228,
        0xE0A5: 0x722D,
        0xE0A6: 0x722C,
        0xE0A7: 0x7230,
        0xE0A8: 0x7232,
        0xE0A9: 0x723B,
        0xE0AA: 0x723C,
        0xE0AB: 0x723F,
        0xE0AC: 0x7240,
        0xE0AD: 0x7246,
        0xE0AE: 0x724B,
        0xE0AF: 0x7258,
        0xE0B0: 0x7274,
        0xE0B1: 0x727E,
        0xE0B2: 0x7282,
        0xE0B3: 0x7281,
        0xE0B4: 0x7287,
        0xE0B5: 0x7292,
        0xE0B6: 0x7296,
        0xE0B7: 0x72A2,
        0xE0B8: 0x72A7,
        0xE0B9: 0x72B9,
        0xE0BA: 0x72B2,
        0xE0BB: 0x72C3,
        0xE0BC: 0x72C6,
        0xE0BD: 0x72C4,
        0xE0BE: 0x72CE,
        0xE0BF: 0x72D2,
        0xE0C0: 0x72E2,
        0xE0C1: 0x72E0,
        0xE0C2: 0x72E1,
        0xE0C3: 0x72F9,
        0xE0C4: 0x72F7,
        0xE0C5: 0x500F,
        0xE0C6: 0x7317,
        0xE0C7: 0x730A,
        0xE0C8: 0x731C,
        0xE0C9: 0x7316,
        0xE0CA: 0x731D,
        0xE0CB: 0x7334,
        0xE0CC: 0x732F,
        0xE0CD: 0x7329,
        0xE0CE: 0x7325,
        0xE0CF: 0x733E,
        0xE0D0: 0x734E,
        0xE0D1: 0x734F,
        0xE0D2: 0x9ED8,
        0xE0D3: 0x7357,
        0xE0D4: 0x736A,
        0xE0D5: 0x7368,
        0xE0D6: 0x7370,
        0xE0D7: 0x7378,
        0xE0D8: 0x7375,
        0xE0D9: 0x737B,
        0xE0DA: 0x737A,
        0xE0DB: 0x73C8,
        0xE0DC: 0x73B3,
        0xE0DD: 0x73CE,
        0xE0DE: 0x73BB,
        0xE0DF: 0x73C0,
        0xE0E0: 0x73E5,
        0xE0E1: 0x73EE,
        0xE0E2: 0x73DE,
        0xE0E3: 0x74A2,
        0xE0E4: 0x7405,
        0xE0E5: 0x746F,
        0xE0E6: 0x7425,
        0xE0E7: 0x73F8,
        0xE0E8: 0x7432,
        0xE0E9: 0x743A,
        0xE0EA: 0x7455,
        0xE0EB: 0x743F,
        0xE0EC: 0x745F,
        0xE0ED: 0x7459,
        0xE0EE: 0x7441,
        0xE0EF: 0x745C,
        0xE0F0: 0x7469,
        0xE0F1: 0x7470,
        0xE0F2: 0x7463,
        0xE0F3: 0x746A,
        0xE0F4: 0x7476,
        0xE0F5: 0x747E,
        0xE0F6: 0x748B,
        0xE0F7: 0x749E,
        0xE0F8: 0x74A7,
        0xE0F9: 0x74CA,
        0xE0FA: 0x74CF,
        0xE0FB: 0x74D4,
        0xE0FC: 0x73F1,
        0xE140: 0x74E0,
        0xE141: 0x74E3,
        0xE142: 0x74E7,
        0xE143: 0x74E9,
        0xE144: 0x74EE,
        0xE145: 0x74F2,
        0xE146: 0x74F0,
        0xE147: 0x74F1,
        0xE148: 0x74F8,
        0xE149: 0x74F7,
        0xE14A: 0x7504,
        0xE14B: 0x7503,
        0xE14C: 0x7505,
        0xE14D: 0x750C,
        0xE14E: 0x750E,
        0xE14F: 0x750D,
        0xE150: 0x7515,
        0xE151: 0x7513,
        0xE152: 0x751E,
        0xE153: 0x7526,
        0xE154: 0x752C,
        0xE155: 0x753C,
        0xE156: 0x7544,
        0xE157: 0x754D,
        0xE158: 0x754A,
        0xE159: 0x7549,
        0xE15A: 0x755B,
        0xE15B: 0x7546,
        0xE15C: 0x755A,
        0xE15D: 0x7569,
        0xE15E: 0x7564,
        0xE15F: 0x7567,
        0xE160: 0x756B,
        0xE161: 0x756D,
        0xE162: 0x7578,
        0xE163: 0x7576,
        0xE164: 0x7586,
        0xE165: 0x7587,
        0xE166: 0x7574,
        0xE167: 0x758A,
        0xE168: 0x7589,
        0xE169: 0x7582,
        0xE16A: 0x7594,
        0xE16B: 0x759A,
        0xE16C: 0x759D,
        0xE16D: 0x75A5,
        0xE16E: 0x75A3,
        0xE16F: 0x75C2,
        0xE170: 0x75B3,
        0xE171: 0x75C3,
        0xE172: 0x75B5,
        0xE173: 0x75BD,
        0xE174: 0x75B8,
        0xE175: 0x75BC,
        0xE176: 0x75B1,
        0xE177: 0x75CD,
        0xE178: 0x75CA,
        0xE179: 0x75D2,
        0xE17A: 0x75D9,
        0xE17B: 0x75E3,
        0xE17C: 0x75DE,
        0xE17D: 0x75FE,
        0xE17E: 0x75FF,
        0xE180: 0x75FC,
        0xE181: 0x7601,
        0xE182: 0x75F0,
        0xE183: 0x75FA,
        0xE184: 0x75F2,
        0xE185: 0x75F3,
        0xE186: 0x760B,
        0xE187: 0x760D,
        0xE188: 0x7609,
        0xE189: 0x761F,
        0xE18A: 0x7627,
        0xE18B: 0x7620,
        0xE18C: 0x7621,
        0xE18D: 0x7622,
        0xE18E: 0x7624,
        0xE18F: 0x7634,
        0xE190: 0x7630,
        0xE191: 0x763B,
        0xE192: 0x7647,
        0xE193: 0x7648,
        0xE194: 0x7646,
        0xE195: 0x765C,
        0xE196: 0x7658,
        0xE197: 0x7661,
        0xE198: 0x7662,
        0xE199: 0x7668,
        0xE19A: 0x7669,
        0xE19B: 0x766A,
        0xE19C: 0x7667,
        0xE19D: 0x766C,
        0xE19E: 0x7670,
        0xE19F: 0x7672,
        0xE1A0: 0x7676,
        0xE1A1: 0x7678,
        0xE1A2: 0x767C,
        0xE1A3: 0x7680,
        0xE1A4: 0x7683,
        0xE1A5: 0x7688,
        0xE1A6: 0x768B,
        0xE1A7: 0x768E,
        0xE1A8: 0x7696,
        0xE1A9: 0x7693,
        0xE1AA: 0x7699,
        0xE1AB: 0x769A,
        0xE1AC: 0x76B0,
        0xE1AD: 0x76B4,
        0xE1AE: 0x76B8,
        0xE1AF: 0x76B9,
        0xE1B0: 0x76BA,
        0xE1B1: 0x76C2,
        0xE1B2: 0x76CD,
        0xE1B3: 0x76D6,
        0xE1B4: 0x76D2,
        0xE1B5: 0x76DE,
        0xE1B6: 0x76E1,
        0xE1B7: 0x76E5,
        0xE1B8: 0x76E7,
        0xE1B9: 0x76EA,
        0xE1BA: 0x862F,
        0xE1BB: 0x76FB,
        0xE1BC: 0x7708,
        0xE1BD: 0x7707,
        0xE1BE: 0x7704,
        0xE1BF: 0x7729,
        0xE1C0: 0x7724,
        0xE1C1: 0x771E,
        0xE1C2: 0x7725,
        0xE1C3: 0x7726,
        0xE1C4: 0x771B,
        0xE1C5: 0x7737,
        0xE1C6: 0x7738,
        0xE1C7: 0x7747,
        0xE1C8: 0x775A,
        0xE1C9: 0x7768,
        0xE1CA: 0x776B,
        0xE1CB: 0x775B,
        0xE1CC: 0x7765,
        0xE1CD: 0x777F,
        0xE1CE: 0x777E,
        0xE1CF: 0x7779,
        0xE1D0: 0x778E,
        0xE1D1: 0x778B,
        0xE1D2: 0x7791,
        0xE1D3: 0x77A0,
        0xE1D4: 0x779E,
        0xE1D5: 0x77B0,
        0xE1D6: 0x77B6,
        0xE1D7: 0x77B9,
        0xE1D8: 0x77BF,
        0xE1D9: 0x77BC,
        0xE1DA: 0x77BD,
        0xE1DB: 0x77BB,
        0xE1DC: 0x77C7,
        0xE1DD: 0x77CD,
        0xE1DE: 0x77D7,
        0xE1DF: 0x77DA,
        0xE1E0: 0x77DC,
        0xE1E1: 0x77E3,
        0xE1E2: 0x77EE,
        0xE1E3: 0x77FC,
        0xE1E4: 0x780C,
        0xE1E5: 0x7812,
        0xE1E6: 0x7926,
        0xE1E7: 0x7820,
        0xE1E8: 0x792A,
        0xE1E9: 0x7845,
        0xE1EA: 0x788E,
        0xE1EB: 0x7874,
        0xE1EC: 0x7886,
        0xE1ED: 0x787C,
        0xE1EE: 0x789A,
        0xE1EF: 0x788C,
        0xE1F0: 0x78A3,
        0xE1F1: 0x78B5,
        0xE1F2: 0x78AA,
        0xE1F3: 0x78AF,
        0xE1F4: 0x78D1,
        0xE1F5: 0x78C6,
        0xE1F6: 0x78CB,
        0xE1F7: 0x78D4,
        0xE1F8: 0x78BE,
        0xE1F9: 0x78BC,
        0xE1FA: 0x78C5,
        0xE1FB: 0x78CA,
        0xE1FC: 0x78EC,
        0xE240: 0x78E7,
        0xE241: 0x78DA,
        0xE242: 0x78FD,
        0xE243: 0x78F4,
        0xE244: 0x7907,
        0xE245: 0x7912,
        0xE246: 0x7911,
        0xE247: 0x7919,
        0xE248: 0x792C,
        0xE249: 0x792B,
        0xE24A: 0x7940,
        0xE24B: 0x7960,
        0xE24C: 0x7957,
        0xE24D: 0x795F,
        0xE24E: 0x795A,
        0xE24F: 0x7955,
        0xE250: 0x7953,
        0xE251: 0x797A,
        0xE252: 0x797F,
        0xE253: 0x798A,
        0xE254: 0x799D,
        0xE255: 0x79A7,
        0xE256: 0x9F4B,
        0xE257: 0x79AA,
        0xE258: 0x79AE,
        0xE259: 0x79B3,
        0xE25A: 0x79B9,
        0xE25B: 0x79BA,
        0xE25C: 0x79C9,
        0xE25D: 0x79D5,
        0xE25E: 0x79E7,
        0xE25F: 0x79EC,
        0xE260: 0x79E1,
        0xE261: 0x79E3,
        0xE262: 0x7A08,
        0xE263: 0x7A0D,
        0xE264: 0x7A18,
        0xE265: 0x7A19,
        0xE266: 0x7A20,
        0xE267: 0x7A1F,
        0xE268: 0x7980,
        0xE269: 0x7A31,
        0xE26A: 0x7A3B,
        0xE26B: 0x7A3E,
        0xE26C: 0x7A37,
        0xE26D: 0x7A43,
        0xE26E: 0x7A57,
        0xE26F: 0x7A49,
        0xE270: 0x7A61,
        0xE271: 0x7A62,
        0xE272: 0x7A69,
        0xE273: 0x9F9D,
        0xE274: 0x7A70,
        0xE275: 0x7A79,
        0xE276: 0x7A7D,
        0xE277: 0x7A88,
        0xE278: 0x7A97,
        0xE279: 0x7A95,
        0xE27A: 0x7A98,
        0xE27B: 0x7A96,
        0xE27C: 0x7AA9,
        0xE27D: 0x7AC8,
        0xE27E: 0x7AB0,
        0xE280: 0x7AB6,
        0xE281: 0x7AC5,
        0xE282: 0x7AC4,
        0xE283: 0x7ABF,
        0xE284: 0x9083,
        0xE285: 0x7AC7,
        0xE286: 0x7ACA,
        0xE287: 0x7ACD,
        0xE288: 0x7ACF,
        0xE289: 0x7AD5,
        0xE28A: 0x7AD3,
        0xE28B: 0x7AD9,
        0xE28C: 0x7ADA,
        0xE28D: 0x7ADD,
        0xE28E: 0x7AE1,
        0xE28F: 0x7AE2,
        0xE290: 0x7AE6,
        0xE291: 0x7AED,
        0xE292: 0x7AF0,
        0xE293: 0x7B02,
        0xE294: 0x7B0F,
        0xE295: 0x7B0A,
        0xE296: 0x7B06,
        0xE297: 0x7B33,
        0xE298: 0x7B18,
        0xE299: 0x7B19,
        0xE29A: 0x7B1E,
        0xE29B: 0x7B35,
        0xE29C: 0x7B28,
        0xE29D: 0x7B36,
        0xE29E: 0x7B50,
        0xE29F: 0x7B7A,
        0xE2A0: 0x7B04,
        0xE2A1: 0x7B4D,
        0xE2A2: 0x7B0B,
        0xE2A3: 0x7B4C,
        0xE2A4: 0x7B45,
        0xE2A5: 0x7B75,
        0xE2A6: 0x7B65,
        0xE2A7: 0x7B74,
        0xE2A8: 0x7B67,
        0xE2A9: 0x7B70,
        0xE2AA: 0x7B71,
        0xE2AB: 0x7B6C,
        0xE2AC: 0x7B6E,
        0xE2AD: 0x7B9D,
        0xE2AE: 0x7B98,
        0xE2AF: 0x7B9F,
        0xE2B0: 0x7B8D,
        0xE2B1: 0x7B9C,
        0xE2B2: 0x7B9A,
        0xE2B3: 0x7B8B,
        0xE2B4: 0x7B92,
        0xE2B5: 0x7B8F,
        0xE2B6: 0x7B5D,
        0xE2B7: 0x7B99,
        0xE2B8: 0x7BCB,
        0xE2B9: 0x7BC1,
        0xE2BA: 0x7BCC,
        0xE2BB: 0x7BCF,
        0xE2BC: 0x7BB4,
        0xE2BD: 0x7BC6,
        0xE2BE: 0x7BDD,
        0xE2BF: 0x7BE9,
        0xE2C0: 0x7C11,
        0xE2C1: 0x7C14,
        0xE2C2: 0x7BE6,
        0xE2C3: 0x7BE5,
        0xE2C4: 0x7C60,
        0xE2C5: 0x7C00,
        0xE2C6: 0x7C07,
        0xE2C7: 0x7C13,
        0xE2C8: 0x7BF3,
        0xE2C9: 0x7BF7,
        0xE2CA: 0x7C17,
        0xE2CB: 0x7C0D,
        0xE2CC: 0x7BF6,
        0xE2CD: 0x7C23,
        0xE2CE: 0x7C27,
        0xE2CF: 0x7C2A,
        0xE2D0: 0x7C1F,
        0xE2D1: 0x7C37,
        0xE2D2: 0x7C2B,
        0xE2D3: 0x7C3D,
        0xE2D4: 0x7C4C,
        0xE2D5: 0x7C43,
        0xE2D6: 0x7C54,
        0xE2D7: 0x7C4F,
        0xE2D8: 0x7C40,
        0xE2D9: 0x7C50,
        0xE2DA: 0x7C58,
        0xE2DB: 0x7C5F,
        0xE2DC: 0x7C64,
        0xE2DD: 0x7C56,
        0xE2DE: 0x7C65,
        0xE2DF: 0x7C6C,
        0xE2E0: 0x7C75,
        0xE2E1: 0x7C83,
        0xE2E2: 0x7C90,
        0xE2E3: 0x7CA4,
        0xE2E4: 0x7CAD,
        0xE2E5: 0x7CA2,
        0xE2E6: 0x7CAB,
        0xE2E7: 0x7CA1,
        0xE2E8: 0x7CA8,
        0xE2E9: 0x7CB3,
        0xE2EA: 0x7CB2,
        0xE2EB: 0x7CB1,
        0xE2EC: 0x7CAE,
        0xE2ED: 0x7CB9,
        0xE2EE: 0x7CBD,
        0xE2EF: 0x7CC0,
        0xE2F0: 0x7CC5,
        0xE2F1: 0x7CC2,
        0xE2F2: 0x7CD8,
        0xE2F3: 0x7CD2,
        0xE2F4: 0x7CDC,
        0xE2F5: 0x7CE2,
        0xE2F6: 0x9B3B,
        0xE2F7: 0x7CEF,
        0xE2F8: 0x7CF2,
        0xE2F9: 0x7CF4,
        0xE2FA: 0x7CF6,
        0xE2FB: 0x7CFA,
        0xE2FC: 0x7D06,
        0xE340: 0x7D02,
        0xE341: 0x7D1C,
        0xE342: 0x7D15,
        0xE343: 0x7D0A,
        0xE344: 0x7D45,
        0xE345: 0x7D4B,
        0xE346: 0x7D2E,
        0xE347: 0x7D32,
        0xE348: 0x7D3F,
        0xE349: 0x7D35,
        0xE34A: 0x7D46,
        0xE34B: 0x7D73,
        0xE34C: 0x7D56,
        0xE34D: 0x7D4E,
        0xE34E: 0x7D72,
        0xE34F: 0x7D68,
        0xE350: 0x7D6E,
        0xE351: 0x7D4F,
        0xE352: 0x7D63,
        0xE353: 0x7D93,
        0xE354: 0x7D89,
        0xE355: 0x7D5B,
        0xE356: 0x7D8F,
        0xE357: 0x7D7D,
        0xE358: 0x7D9B,
        0xE359: 0x7DBA,
        0xE35A: 0x7DAE,
        0xE35B: 0x7DA3,
        0xE35C: 0x7DB5,
        0xE35D: 0x7DC7,
        0xE35E: 0x7DBD,
        0xE35F: 0x7DAB,
        0xE360: 0x7E3D,
        0xE361: 0x7DA2,
        0xE362: 0x7DAF,
        0xE363: 0x7DDC,
        0xE364: 0x7DB8,
        0xE365: 0x7D9F,
        0xE366: 0x7DB0,
        0xE367: 0x7DD8,
        0xE368: 0x7DDD,
        0xE369: 0x7DE4,
        0xE36A: 0x7DDE,
        0xE36B: 0x7DFB,
        0xE36C: 0x7DF2,
        0xE36D: 0x7DE1,
        0xE36E: 0x7E05,
        0xE36F: 0x7E0A,
        0xE370: 0x7E23,
        0xE371: 0x7E21,
        0xE372: 0x7E12,
        0xE373: 0x7E31,
        0xE374: 0x7E1F,
        0xE375: 0x7E09,
        0xE376: 0x7E0B,
        0xE377: 0x7E22,
        0xE378: 0x7E46,
        0xE379: 0x7E66,
        0xE37A: 0x7E3B,
        0xE37B: 0x7E35,
        0xE37C: 0x7E39,
        0xE37D: 0x7E43,
        0xE37E: 0x7E37,
        0xE380: 0x7E32,
        0xE381: 0x7E3A,
        0xE382: 0x7E67,
        0xE383: 0x7E5D,
        0xE384: 0x7E56,
        0xE385: 0x7E5E,
        0xE386: 0x7E59,
        0xE387: 0x7E5A,
        0xE388: 0x7E79,
        0xE389: 0x7E6A,
        0xE38A: 0x7E69,
        0xE38B: 0x7E7C,
        0xE38C: 0x7E7B,
        0xE38D: 0x7E83,
        0xE38E: 0x7DD5,
        0xE38F: 0x7E7D,
        0xE390: 0x8FAE,
        0xE391: 0x7E7F,
        0xE392: 0x7E88,
        0xE393: 0x7E89,
        0xE394: 0x7E8C,
        0xE395: 0x7E92,
        0xE396: 0x7E90,
        0xE397: 0x7E93,
        0xE398: 0x7E94,
        0xE399: 0x7E96,
        0xE39A: 0x7E8E,
        0xE39B: 0x7E9B,
        0xE39C: 0x7E9C,
        0xE39D: 0x7F38,
        0xE39E: 0x7F3A,
        0xE39F: 0x7F45,
        0xE3A0: 0x7F4C,
        0xE3A1: 0x7F4D,
        0xE3A2: 0x7F4E,
        0xE3A3: 0x7F50,
        0xE3A4: 0x7F51,
        0xE3A5: 0x7F55,
        0xE3A6: 0x7F54,
        0xE3A7: 0x7F58,
        0xE3A8: 0x7F5F,
        0xE3A9: 0x7F60,
        0xE3AA: 0x7F68,
        0xE3AB: 0x7F69,
        0xE3AC: 0x7F67,
        0xE3AD: 0x7F78,
        0xE3AE: 0x7F82,
        0xE3AF: 0x7F86,
        0xE3B0: 0x7F83,
        0xE3B1: 0x7F88,
        0xE3B2: 0x7F87,
        0xE3B3: 0x7F8C,
        0xE3B4: 0x7F94,
        0xE3B5: 0x7F9E,
        0xE3B6: 0x7F9D,
        0xE3B7: 0x7F9A,
        0xE3B8: 0x7FA3,
        0xE3B9: 0x7FAF,
        0xE3BA: 0x7FB2,
        0xE3BB: 0x7FB9,
        0xE3BC: 0x7FAE,
        0xE3BD: 0x7FB6,
        0xE3BE: 0x7FB8,
        0xE3BF: 0x8B71,
        0xE3C0: 0x7FC5,
        0xE3C1: 0x7FC6,
        0xE3C2: 0x7FCA,
        0xE3C3: 0x7FD5,
        0xE3C4: 0x7FD4,
        0xE3C5: 0x7FE1,
        0xE3C6: 0x7FE6,
        0xE3C7: 0x7FE9,
        0xE3C8: 0x7FF3,
        0xE3C9: 0x7FF9,
        0xE3CA: 0x98DC,
        0xE3CB: 0x8006,
        0xE3CC: 0x8004,
        0xE3CD: 0x800B,
        0xE3CE: 0x8012,
        0xE3CF: 0x8018,
        0xE3D0: 0x8019,
        0xE3D1: 0x801C,
        0xE3D2: 0x8021,
        0xE3D3: 0x8028,
        0xE3D4: 0x803F,
        0xE3D5: 0x803B,
        0xE3D6: 0x804A,
        0xE3D7: 0x8046,
        0xE3D8: 0x8052,
        0xE3D9: 0x8058,
        0xE3DA: 0x805A,
        0xE3DB: 0x805F,
        0xE3DC: 0x8062,
        0xE3DD: 0x8068,
        0xE3DE: 0x8073,
        0xE3DF: 0x8072,
        0xE3E0: 0x8070,
        0xE3E1: 0x8076,
        0xE3E2: 0x8079,
        0xE3E3: 0x807D,
        0xE3E4: 0x807F,
        0xE3E5: 0x8084,
        0xE3E6: 0x8086,
        0xE3E7: 0x8085,
        0xE3E8: 0x809B,
        0xE3E9: 0x8093,
        0xE3EA: 0x809A,
        0xE3EB: 0x80AD,
        0xE3EC: 0x5190,
        0xE3ED: 0x80AC,
        0xE3EE: 0x80DB,
        0xE3EF: 0x80E5,
        0xE3F0: 0x80D9,
        0xE3F1: 0x80DD,
        0xE3F2: 0x80C4,
        0xE3F3: 0x80DA,
        0xE3F4: 0x80D6,
        0xE3F5: 0x8109,
        0xE3F6: 0x80EF,
        0xE3F7: 0x80F1,
        0xE3F8: 0x811B,
        0xE3F9: 0x8129,
        0xE3FA: 0x8123,
        0xE3FB: 0x812F,
        0xE3FC: 0x814B,
        0xE440: 0x968B,
        0xE441: 0x8146,
        0xE442: 0x813E,
        0xE443: 0x8153,
        0xE444: 0x8151,
        0xE445: 0x80FC,
        0xE446: 0x8171,
        0xE447: 0x816E,
        0xE448: 0x8165,
        0xE449: 0x8166,
        0xE44A: 0x8174,
        0xE44B: 0x8183,
        0xE44C: 0x8188,
        0xE44D: 0x818A,
        0xE44E: 0x8180,
        0xE44F: 0x8182,
        0xE450: 0x81A0,
        0xE451: 0x8195,
        0xE452: 0x81A4,
        0xE453: 0x81A3,
        0xE454: 0x815F,
        0xE455: 0x8193,
        0xE456: 0x81A9,
        0xE457: 0x81B0,
        0xE458: 0x81B5,
        0xE459: 0x81BE,
        0xE45A: 0x81B8,
        0xE45B: 0x81BD,
        0xE45C: 0x81C0,
        0xE45D: 0x81C2,
        0xE45E: 0x81BA,
        0xE45F: 0x81C9,
        0xE460: 0x81CD,
        0xE461: 0x81D1,
        0xE462: 0x81D9,
        0xE463: 0x81D8,
        0xE464: 0x81C8,
        0xE465: 0x81DA,
        0xE466: 0x81DF,
        0xE467: 0x81E0,
        0xE468: 0x81E7,
        0xE469: 0x81FA,
        0xE46A: 0x81FB,
        0xE46B: 0x81FE,
        0xE46C: 0x8201,
        0xE46D: 0x8202,
        0xE46E: 0x8205,
        0xE46F: 0x8207,
        0xE470: 0x820A,
        0xE471: 0x820D,
        0xE472: 0x8210,
        0xE473: 0x8216,
        0xE474: 0x8229,
        0xE475: 0x822B,
        0xE476: 0x8238,
        0xE477: 0x8233,
        0xE478: 0x8240,
        0xE479: 0x8259,
        0xE47A: 0x8258,
        0xE47B: 0x825D,
        0xE47C: 0x825A,
        0xE47D: 0x825F,
        0xE47E: 0x8264,
        0xE480: 0x8262,
        0xE481: 0x8268,
        0xE482: 0x826A,
        0xE483: 0x826B,
        0xE484: 0x822E,
        0xE485: 0x8271,
        0xE486: 0x8277,
        0xE487: 0x8278,
        0xE488: 0x827E,
        0xE489: 0x828D,
        0xE48A: 0x8292,
        0xE48B: 0x82AB,
        0xE48C: 0x829F,
        0xE48D: 0x82BB,
        0xE48E: 0x82AC,
        0xE48F: 0x82E1,
        0xE490: 0x82E3,
        0xE491: 0x82DF,
        0xE492: 0x82D2,
        0xE493: 0x82F4,
        0xE494: 0x82F3,
        0xE495: 0x82FA,
        0xE496: 0x8393,
        0xE497: 0x8303,
        0xE498: 0x82FB,
        0xE499: 0x82F9,
        0xE49A: 0x82DE,
        0xE49B: 0x8306,
        0xE49C: 0x82DC,
        0xE49D: 0x8309,
        0xE49E: 0x82D9,
        0xE49F: 0x8335,
        0xE4A0: 0x8334,
        0xE4A1: 0x8316,
        0xE4A2: 0x8332,
        0xE4A3: 0x8331,
        0xE4A4: 0x8340,
        0xE4A5: 0x8339,
        0xE4A6: 0x8350,
        0xE4A7: 0x8345,
        0xE4A8: 0x832F,
        0xE4A9: 0x832B,
        0xE4AA: 0x8317,
        0xE4AB: 0x8318,
        0xE4AC: 0x8385,
        0xE4AD: 0x839A,
        0xE4AE: 0x83AA,
        0xE4AF: 0x839F,
        0xE4B0: 0x83A2,
        0xE4B1: 0x8396,
        0xE4B2: 0x8323,
        0xE4B3: 0x838E,
        0xE4B4: 0x8387,
        0xE4B5: 0x838A,
        0xE4B6: 0x837C,
        0xE4B7: 0x83B5,
        0xE4B8: 0x8373,
        0xE4B9: 0x8375,
        0xE4BA: 0x83A0,
        0xE4BB: 0x8389,
        0xE4BC: 0x83A8,
        0xE4BD: 0x83F4,
        0xE4BE: 0x8413,
        0xE4BF: 0x83EB,
        0xE4C0: 0x83CE,
        0xE4C1: 0x83FD,
        0xE4C2: 0x8403,
        0xE4C3: 0x83D8,
        0xE4C4: 0x840B,
        0xE4C5: 0x83C1,
        0xE4C6: 0x83F7,
        0xE4C7: 0x8407,
        0xE4C8: 0x83E0,
        0xE4C9: 0x83F2,
        0xE4CA: 0x840D,
        0xE4CB: 0x8422,
        0xE4CC: 0x8420,
        0xE4CD: 0x83BD,
        0xE4CE: 0x8438,
        0xE4CF: 0x8506,
        0xE4D0: 0x83FB,
        0xE4D1: 0x846D,
        0xE4D2: 0x842A,
        0xE4D3: 0x843C,
        0xE4D4: 0x855A,
        0xE4D5: 0x8484,
        0xE4D6: 0x8477,
        0xE4D7: 0x846B,
        0xE4D8: 0x84AD,
        0xE4D9: 0x846E,
        0xE4DA: 0x8482,
        0xE4DB: 0x8469,
        0xE4DC: 0x8446,
        0xE4DD: 0x842C,
        0xE4DE: 0x846F,
        0xE4DF: 0x8479,
        0xE4E0: 0x8435,
        0xE4E1: 0x84CA,
        0xE4E2: 0x8462,
        0xE4E3: 0x84B9,
        0xE4E4: 0x84BF,
        0xE4E5: 0x849F,
        0xE4E6: 0x84D9,
        0xE4E7: 0x84CD,
        0xE4E8: 0x84BB,
        0xE4E9: 0x84DA,
        0xE4EA: 0x84D0,
        0xE4EB: 0x84C1,
        0xE4EC: 0x84C6,
        0xE4ED: 0x84D6,
        0xE4EE: 0x84A1,
        0xE4EF: 0x8521,
        0xE4F0: 0x84FF,
        0xE4F1: 0x84F4,
        0xE4F2: 0x8517,
        0xE4F3: 0x8518,
        0xE4F4: 0x852C,
        0xE4F5: 0x851F,
        0xE4F6: 0x8515,
        0xE4F7: 0x8514,
        0xE4F8: 0x84FC,
        0xE4F9: 0x8540,
        0xE4FA: 0x8563,
        0xE4FB: 0x8558,
        0xE4FC: 0x8548,
        0xE540: 0x8541,
        0xE541: 0x8602,
        0xE542: 0x854B,
        0xE543: 0x8555,
        0xE544: 0x8580,
        0xE545: 0x85A4,
        0xE546: 0x8588,
        0xE547: 0x8591,
        0xE548: 0x858A,
        0xE549: 0x85A8,
        0xE54A: 0x856D,
        0xE54B: 0x8594,
        0xE54C: 0x859B,
        0xE54D: 0x85EA,
        0xE54E: 0x8587,
        0xE54F: 0x859C,
        0xE550: 0x8577,
        0xE551: 0x857E,
        0xE552: 0x8590,
        0xE553: 0x85C9,
        0xE554: 0x85BA,
        0xE555: 0x85CF,
        0xE556: 0x85B9,
        0xE557: 0x85D0,
        0xE558: 0x85D5,
        0xE559: 0x85DD,
        0xE55A: 0x85E5,
        0xE55B: 0x85DC,
        0xE55C: 0x85F9,
        0xE55D: 0x860A,
        0xE55E: 0x8613,
        0xE55F: 0x860B,
        0xE560: 0x85FE,
        0xE561: 0x85FA,
        0xE562: 0x8606,
        0xE563: 0x8622,
        0xE564: 0x861A,
        0xE565: 0x8630,
        0xE566: 0x863F,
        0xE567: 0x864D,
        0xE568: 0x4E55,
        0xE569: 0x8654,
        0xE56A: 0x865F,
        0xE56B: 0x8667,
        0xE56C: 0x8671,
        0xE56D: 0x8693,
        0xE56E: 0x86A3,
        0xE56F: 0x86A9,
        0xE570: 0x86AA,
        0xE571: 0x868B,
        0xE572: 0x868C,
        0xE573: 0x86B6,
        0xE574: 0x86AF,
        0xE575: 0x86C4,
        0xE576: 0x86C6,
        0xE577: 0x86B0,
        0xE578: 0x86C9,
        0xE579: 0x8823,
        0xE57A: 0x86AB,
        0xE57B: 0x86D4,
        0xE57C: 0x86DE,
        0xE57D: 0x86E9,
        0xE57E: 0x86EC,
        0xE580: 0x86DF,
        0xE581: 0x86DB,
        0xE582: 0x86EF,
        0xE583: 0x8712,
        0xE584: 0x8706,
        0xE585: 0x8708,
        0xE586: 0x8700,
        0xE587: 0x8703,
        0xE588: 0x86FB,
        0xE589: 0x8711,
        0xE58A: 0x8709,
        0xE58B: 0x870D,
        0xE58C: 0x86F9,
        0xE58D: 0x870A,
        0xE58E: 0x8734,
        0xE58F: 0x873F,
        0xE590: 0x8737,
        0xE591: 0x873B,
        0xE592: 0x8725,
        0xE593: 0x8729,
        0xE594: 0x871A,
        0xE595: 0x8760,
        0xE596: 0x875F,
        0xE597: 0x8778,
        0xE598: 0x874C,
        0xE599: 0x874E,
        0xE59A: 0x8774,
        0xE59B: 0x8757,
        0xE59C: 0x8768,
        0xE59D: 0x876E,
        0xE59E: 0x8759,
        0xE59F: 0x8753,
        0xE5A0: 0x8763,
        0xE5A1: 0x876A,
        0xE5A2: 0x8805,
        0xE5A3: 0x87A2,
        0xE5A4: 0x879F,
        0xE5A5: 0x8782,
        0xE5A6: 0x87AF,
        0xE5A7: 0x87CB,
        0xE5A8: 0x87BD,
        0xE5A9: 0x87C0,
        0xE5AA: 0x87D0,
        0xE5AB: 0x96D6,
        0xE5AC: 0x87AB,
        0xE5AD: 0x87C4,
        0xE5AE: 0x87B3,
        0xE5AF: 0x87C7,
        0xE5B0: 0x87C6,
        0xE5B1: 0x87BB,
        0xE5B2: 0x87EF,
        0xE5B3: 0x87F2,
        0xE5B4: 0x87E0,
        0xE5B5: 0x880F,
        0xE5B6: 0x880D,
        0xE5B7: 0x87FE,
        0xE5B8: 0x87F6,
        0xE5B9: 0x87F7,
        0xE5BA: 0x880E,
        0xE5BB: 0x87D2,
        0xE5BC: 0x8811,
        0xE5BD: 0x8816,
        0xE5BE: 0x8815,
        0xE5BF: 0x8822,
        0xE5C0: 0x8821,
        0xE5C1: 0x8831,
        0xE5C2: 0x8836,
        0xE5C3: 0x8839,
        0xE5C4: 0x8827,
        0xE5C5: 0x883B,
        0xE5C6: 0x8844,
        0xE5C7: 0x8842,
        0xE5C8: 0x8852,
        0xE5C9: 0x8859,
        0xE5CA: 0x885E,
        0xE5CB: 0x8862,
        0xE5CC: 0x886B,
        0xE5CD: 0x8881,
        0xE5CE: 0x887E,
        0xE5CF: 0x889E,
        0xE5D0: 0x8875,
        0xE5D1: 0x887D,
        0xE5D2: 0x88B5,
        0xE5D3: 0x8872,
        0xE5D4: 0x8882,
        0xE5D5: 0x8897,
        0xE5D6: 0x8892,
        0xE5D7: 0x88AE,
        0xE5D8: 0x8899,
        0xE5D9: 0x88A2,
        0xE5DA: 0x888D,
        0xE5DB: 0x88A4,
        0xE5DC: 0x88B0,
        0xE5DD: 0x88BF,
        0xE5DE: 0x88B1,
        0xE5DF: 0x88C3,
        0xE5E0: 0x88C4,
        0xE5E1: 0x88D4,
        0xE5E2: 0x88D8,
        0xE5E3: 0x88D9,
        0xE5E4: 0x88DD,
        0xE5E5: 0x88F9,
        0xE5E6: 0x8902,
        0xE5E7: 0x88FC,
        0xE5E8: 0x88F4,
        0xE5E9: 0x88E8,
        0xE5EA: 0x88F2,
        0xE5EB: 0x8904,
        0xE5EC: 0x890C,
        0xE5ED: 0x890A,
        0xE5EE: 0x8913,
        0xE5EF: 0x8943,
        0xE5F0: 0x891E,
        0xE5F1: 0x8925,
        0xE5F2: 0x892A,
        0xE5F3: 0x892B,
        0xE5F4: 0x8941,
        0xE5F5: 0x8944,
        0xE5F6: 0x893B,
        0xE5F7: 0x8936,
        0xE5F8: 0x8938,
        0xE5F9: 0x894C,
        0xE5FA: 0x891D,
        0xE5FB: 0x8960,
        0xE5FC: 0x895E,
        0xE640: 0x8966,
        0xE641: 0x8964,
        0xE642: 0x896D,
        0xE643: 0x896A,
        0xE644: 0x896F,
        0xE645: 0x8974,
        0xE646: 0x8977,
        0xE647: 0x897E,
        0xE648: 0x8983,
        0xE649: 0x8988,
        0xE64A: 0x898A,
        0xE64B: 0x8993,
        0xE64C: 0x8998,
        0xE64D: 0x89A1,
        0xE64E: 0x89A9,
        0xE64F: 0x89A6,
        0xE650: 0x89AC,
        0xE651: 0x89AF,
        0xE652: 0x89B2,
        0xE653: 0x89BA,
        0xE654: 0x89BD,
        0xE655: 0x89BF,
        0xE656: 0x89C0,
        0xE657: 0x89DA,
        0xE658: 0x89DC,
        0xE659: 0x89DD,
        0xE65A: 0x89E7,
        0xE65B: 0x89F4,
        0xE65C: 0x89F8,
        0xE65D: 0x8A03,
        0xE65E: 0x8A16,
        0xE65F: 0x8A10,
        0xE660: 0x8A0C,
        0xE661: 0x8A1B,
        0xE662: 0x8A1D,
        0xE663: 0x8A25,
        0xE664: 0x8A36,
        0xE665: 0x8A41,
        0xE666: 0x8A5B,
        0xE667: 0x8A52,
        0xE668: 0x8A46,
        0xE669: 0x8A48,
        0xE66A: 0x8A7C,
        0xE66B: 0x8A6D,
        0xE66C: 0x8A6C,
        0xE66D: 0x8A62,
        0xE66E: 0x8A85,
        0xE66F: 0x8A82,
        0xE670: 0x8A84,
        0xE671: 0x8AA8,
        0xE672: 0x8AA1,
        0xE673: 0x8A91,
        0xE674: 0x8AA5,
        0xE675: 0x8AA6,
        0xE676: 0x8A9A,
        0xE677: 0x8AA3,
        0xE678: 0x8AC4,
        0xE679: 0x8ACD,
        0xE67A: 0x8AC2,
        0xE67B: 0x8ADA,
        0xE67C: 0x8AEB,
        0xE67D: 0x8AF3,
        0xE67E: 0x8AE7,
        0xE680: 0x8AE4,
        0xE681: 0x8AF1,
        0xE682: 0x8B14,
        0xE683: 0x8AE0,
        0xE684: 0x8AE2,
        0xE685: 0x8AF7,
        0xE686: 0x8ADE,
        0xE687: 0x8ADB,
        0xE688: 0x8B0C,
        0xE689: 0x8B07,
        0xE68A: 0x8B1A,
        0xE68B: 0x8AE1,
        0xE68C: 0x8B16,
        0xE68D: 0x8B10,
        0xE68E: 0x8B17,
        0xE68F: 0x8B20,
        0xE690: 0x8B33,
        0xE691: 0x97AB,
        0xE692: 0x8B26,
        0xE693: 0x8B2B,
        0xE694: 0x8B3E,
        0xE695: 0x8B28,
        0xE696: 0x8B41,
        0xE697: 0x8B4C,
        0xE698: 0x8B4F,
        0xE699: 0x8B4E,
        0xE69A: 0x8B49,
        0xE69B: 0x8B56,
        0xE69C: 0x8B5B,
        0xE69D: 0x8B5A,
        0xE69E: 0x8B6B,
        0xE69F: 0x8B5F,
        0xE6A0: 0x8B6C,
        0xE6A1: 0x8B6F,
        0xE6A2: 0x8B74,
        0xE6A3: 0x8B7D,
        0xE6A4: 0x8B80,
        0xE6A5: 0x8B8C,
        0xE6A6: 0x8B8E,
        0xE6A7: 0x8B92,
        0xE6A8: 0x8B93,
        0xE6A9: 0x8B96,
        0xE6AA: 0x8B99,
        0xE6AB: 0x8B9A,
        0xE6AC: 0x8C3A,
        0xE6AD: 0x8C41,
        0xE6AE: 0x8C3F,
        0xE6AF: 0x8C48,
        0xE6B0: 0x8C4C,
        0xE6B1: 0x8C4E,
        0xE6B2: 0x8C50,
        0xE6B3: 0x8C55,
        0xE6B4: 0x8C62,
        0xE6B5: 0x8C6C,
        0xE6B6: 0x8C78,
        0xE6B7: 0x8C7A,
        0xE6B8: 0x8C82,
        0xE6B9: 0x8C89,
        0xE6BA: 0x8C85,
        0xE6BB: 0x8C8A,
        0xE6BC: 0x8C8D,
        0xE6BD: 0x8C8E,
        0xE6BE: 0x8C94,
        0xE6BF: 0x8C7C,
        0xE6C0: 0x8C98,
        0xE6C1: 0x621D,
        0xE6C2: 0x8CAD,
        0xE6C3: 0x8CAA,
        0xE6C4: 0x8CBD,
        0xE6C5: 0x8CB2,
        0xE6C6: 0x8CB3,
        0xE6C7: 0x8CAE,
        0xE6C8: 0x8CB6,
        0xE6C9: 0x8CC8,
        0xE6CA: 0x8CC1,
        0xE6CB: 0x8CE4,
        0xE6CC: 0x8CE3,
        0xE6CD: 0x8CDA,
        0xE6CE: 0x8CFD,
        0xE6CF: 0x8CFA,
        0xE6D0: 0x8CFB,
        0xE6D1: 0x8D04,
        0xE6D2: 0x8D05,
        0xE6D3: 0x8D0A,
        0xE6D4: 0x8D07,
        0xE6D5: 0x8D0F,
        0xE6D6: 0x8D0D,
        0xE6D7: 0x8D10,
        0xE6D8: 0x9F4E,
        0xE6D9: 0x8D13,
        0xE6DA: 0x8CCD,
        0xE6DB: 0x8D14,
        0xE6DC: 0x8D16,
        0xE6DD: 0x8D67,
        0xE6DE: 0x8D6D,
        0xE6DF: 0x8D71,
        0xE6E0: 0x8D73,
        0xE6E1: 0x8D81,
        0xE6E2: 0x8D99,
        0xE6E3: 0x8DC2,
        0xE6E4: 0x8DBE,
        0xE6E5: 0x8DBA,
        0xE6E6: 0x8DCF,
        0xE6E7: 0x8DDA,
        0xE6E8: 0x8DD6,
        0xE6E9: 0x8DCC,
        0xE6EA: 0x8DDB,
        0xE6EB: 0x8DCB,
        0xE6EC: 0x8DEA,
        0xE6ED: 0x8DEB,
        0xE6EE: 0x8DDF,
        0xE6EF: 0x8DE3,
        0xE6F0: 0x8DFC,
        0xE6F1: 0x8E08,
        0xE6F2: 0x8E09,
        0xE6F3: 0x8DFF,
        0xE6F4: 0x8E1D,
        0xE6F5: 0x8E1E,
        0xE6F6: 0x8E10,
        0xE6F7: 0x8E1F,
        0xE6F8: 0x8E42,
        0xE6F9: 0x8E35,
        0xE6FA: 0x8E30,
        0xE6FB: 0x8E34,
        0xE6FC: 0x8E4A,
        0xE740: 0x8E47,
        0xE741: 0x8E49,
        0xE742: 0x8E4C,
        0xE743: 0x8E50,
        0xE744: 0x8E48,
        0xE745: 0x8E59,
        0xE746: 0x8E64,
        0xE747: 0x8E60,
        0xE748: 0x8E2A,
        0xE749: 0x8E63,
        0xE74A: 0x8E55,
        0xE74B: 0x8E76,
        0xE74C: 0x8E72,
        0xE74D: 0x8E7C,
        0xE74E: 0x8E81,
        0xE74F: 0x8E87,
        0xE750: 0x8E85,
        0xE751: 0x8E84,
        0xE752: 0x8E8B,
        0xE753: 0x8E8A,
        0xE754: 0x8E93,
        0xE755: 0x8E91,
        0xE756: 0x8E94,
        0xE757: 0x8E99,
        0xE758: 0x8EAA,
        0xE759: 0x8EA1,
        0xE75A: 0x8EAC,
        0xE75B: 0x8EB0,
        0xE75C: 0x8EC6,
        0xE75D: 0x8EB1,
        0xE75E: 0x8EBE,
        0xE75F: 0x8EC5,
        0xE760: 0x8EC8,
        0xE761: 0x8ECB,
        0xE762: 0x8EDB,
        0xE763: 0x8EE3,
        0xE764: 0x8EFC,
        0xE765: 0x8EFB,
        0xE766: 0x8EEB,
        0xE767: 0x8EFE,
        0xE768: 0x8F0A,
        0xE769: 0x8F05,
        0xE76A: 0x8F15,
        0xE76B: 0x8F12,
        0xE76C: 0x8F19,
        0xE76D: 0x8F13,
        0xE76E: 0x8F1C,
        0xE76F: 0x8F1F,
        0xE770: 0x8F1B,
        0xE771: 0x8F0C,
        0xE772: 0x8F26,
        0xE773: 0x8F33,
        0xE774: 0x8F3B,
        0xE775: 0x8F39,
        0xE776: 0x8F45,
        0xE777: 0x8F42,
        0xE778: 0x8F3E,
        0xE779: 0x8F4C,
        0xE77A: 0x8F49,
        0xE77B: 0x8F46,
        0xE77C: 0x8F4E,
        0xE77D: 0x8F57,
        0xE77E: 0x8F5C,
        0xE780: 0x8F62,
        0xE781: 0x8F63,
        0xE782: 0x8F64,
        0xE783: 0x8F9C,
        0xE784: 0x8F9F,
        0xE785: 0x8FA3,
        0xE786: 0x8FAD,
        0xE787: 0x8FAF,
        0xE788: 0x8FB7,
        0xE789: 0x8FDA,
        0xE78A: 0x8FE5,
        0xE78B: 0x8FE2,
        0xE78C: 0x8FEA,
        0xE78D: 0x8FEF,
        0xE78E: 0x9087,
        0xE78F: 0x8FF4,
        0xE790: 0x9005,
        0xE791: 0x8FF9,
        0xE792: 0x8FFA,
        0xE793: 0x9011,
        0xE794: 0x9015,
        0xE795: 0x9021,
        0xE796: 0x900D,
        0xE797: 0x901E,
        0xE798: 0x9016,
        0xE799: 0x900B,
        0xE79A: 0x9027,
        0xE79B: 0x9036,
        0xE79C: 0x9035,
        0xE79D: 0x9039,
        0xE79E: 0x8FF8,
        0xE79F: 0x904F,
        0xE7A0: 0x9050,
        0xE7A1: 0x9051,
        0xE7A2: 0x9052,
        0xE7A3: 0x900E,
        0xE7A4: 0x9049,
        0xE7A5: 0x903E,
        0xE7A6: 0x9056,
        0xE7A7: 0x9058,
        0xE7A8: 0x905E,
        0xE7A9: 0x9068,
        0xE7AA: 0x906F,
        0xE7AB: 0x9076,
        0xE7AC: 0x96A8,
        0xE7AD: 0x9072,
        0xE7AE: 0x9082,
        0xE7AF: 0x907D,
        0xE7B0: 0x9081,
        0xE7B1: 0x9080,
        0xE7B2: 0x908A,
        0xE7B3: 0x9089,
        0xE7B4: 0x908F,
        0xE7B5: 0x90A8,
        0xE7B6: 0x90AF,
        0xE7B7: 0x90B1,
        0xE7B8: 0x90B5,
        0xE7B9: 0x90E2,
        0xE7BA: 0x90E4,
        0xE7BB: 0x6248,
        0xE7BC: 0x90DB,
        0xE7BD: 0x9102,
        0xE7BE: 0x9112,
        0xE7BF: 0x9119,
        0xE7C0: 0x9132,
        0xE7C1: 0x9130,
        0xE7C2: 0x914A,
        0xE7C3: 0x9156,
        0xE7C4: 0x9158,
        0xE7C5: 0x9163,
        0xE7C6: 0x9165,
        0xE7C7: 0x9169,
        0xE7C8: 0x9173,
        0xE7C9: 0x9172,
        0xE7CA: 0x918B,
        0xE7CB: 0x9189,
        0xE7CC: 0x9182,
        0xE7CD: 0x91A2,
        0xE7CE: 0x91AB,
        0xE7CF: 0x91AF,
        0xE7D0: 0x91AA,
        0xE7D1: 0x91B5,
        0xE7D2: 0x91B4,
        0xE7D3: 0x91BA,
        0xE7D4: 0x91C0,
        0xE7D5: 0x91C1,
        0xE7D6: 0x91C9,
        0xE7D7: 0x91CB,
        0xE7D8: 0x91D0,
        0xE7D9: 0x91D6,
        0xE7DA: 0x91DF,
        0xE7DB: 0x91E1,
        0xE7DC: 0x91DB,
        0xE7DD: 0x91FC,
        0xE7DE: 0x91F5,
        0xE7DF: 0x91F6,
        0xE7E0: 0x921E,
        0xE7E1: 0x91FF,
        0xE7E2: 0x9214,
        0xE7E3: 0x922C,
        0xE7E4: 0x9215,
        0xE7E5: 0x9211,
        0xE7E6: 0x925E,
        0xE7E7: 0x9257,
        0xE7E8: 0x9245,
        0xE7E9: 0x9249,
        0xE7EA: 0x9264,
        0xE7EB: 0x9248,
        0xE7EC: 0x9295,
        0xE7ED: 0x923F,
        0xE7EE: 0x924B,
        0xE7EF: 0x9250,
        0xE7F0: 0x929C,
        0xE7F1: 0x9296,
        0xE7F2: 0x9293,
        0xE7F3: 0x929B,
        0xE7F4: 0x925A,
        0xE7F5: 0x92CF,
        0xE7F6: 0x92B9,
        0xE7F7: 0x92B7,
        0xE7F8: 0x92E9,
        0xE7F9: 0x930F,
        0xE7FA: 0x92FA,
        0xE7FB: 0x9344,
        0xE7FC: 0x932E,
        0xE840: 0x9319,
        0xE841: 0x9322,
        0xE842: 0x931A,
        0xE843: 0x9323,
        0xE844: 0x933A,
        0xE845: 0x9335,
        0xE846: 0x933B,
        0xE847: 0x935C,
        0xE848: 0x9360,
        0xE849: 0x937C,
        0xE84A: 0x936E,
        0xE84B: 0x9356,
        0xE84C: 0x93B0,
        0xE84D: 0x93AC,
        0xE84E: 0x93AD,
        0xE84F: 0x9394,
        0xE850: 0x93B9,
        0xE851: 0x93D6,
        0xE852: 0x93D7,
        0xE853: 0x93E8,
        0xE854: 0x93E5,
        0xE855: 0x93D8,
        0xE856: 0x93C3,
        0xE857: 0x93DD,
        0xE858: 0x93D0,
        0xE859: 0x93C8,
        0xE85A: 0x93E4,
        0xE85B: 0x941A,
        0xE85C: 0x9414,
        0xE85D: 0x9413,
        0xE85E: 0x9403,
        0xE85F: 0x9407,
        0xE860: 0x9410,
        0xE861: 0x9436,
        0xE862: 0x942B,
        0xE863: 0x9435,
        0xE864: 0x9421,
        0xE865: 0x943A,
        0xE866: 0x9441,
        0xE867: 0x9452,
        0xE868: 0x9444,
        0xE869: 0x945B,
        0xE86A: 0x9460,
        0xE86B: 0x9462,
        0xE86C: 0x945E,
        0xE86D: 0x946A,
        0xE86E: 0x9229,
        0xE86F: 0x9470,
        0xE870: 0x9475,
        0xE871: 0x9477,
        0xE872: 0x947D,
        0xE873: 0x945A,
        0xE874: 0x947C,
        0xE875: 0x947E,
        0xE876: 0x9481,
        0xE877: 0x947F,
        0xE878: 0x9582,
        0xE879: 0x9587,
        0xE87A: 0x958A,
        0xE87B: 0x9594,
        0xE87C: 0x9596,
        0xE87D: 0x9598,
        0xE87E: 0x9599,
        0xE880: 0x95A0,
        0xE881: 0x95A8,
        0xE882: 0x95A7,
        0xE883: 0x95AD,
        0xE884: 0x95BC,
        0xE885: 0x95BB,
        0xE886: 0x95B9,
        0xE887: 0x95BE,
        0xE888: 0x95CA,
        0xE889: 0x6FF6,
        0xE88A: 0x95C3,
        0xE88B: 0x95CD,
        0xE88C: 0x95CC,
        0xE88D: 0x95D5,
        0xE88E: 0x95D4,
        0xE88F: 0x95D6,
        0xE890: 0x95DC,
        0xE891: 0x95E1,
        0xE892: 0x95E5,
        0xE893: 0x95E2,
        0xE894: 0x9621,
        0xE895: 0x9628,
        0xE896: 0x962E,
        0xE897: 0x962F,
        0xE898: 0x9642,
        0xE899: 0x964C,
        0xE89A: 0x964F,
        0xE89B: 0x964B,
        0xE89C: 0x9677,
        0xE89D: 0x965C,
        0xE89E: 0x965E,
        0xE89F: 0x965D,
        0xE8A0: 0x965F,
        0xE8A1: 0x9666,
        0xE8A2: 0x9672,
        0xE8A3: 0x966C,
        0xE8A4: 0x968D,
        0xE8A5: 0x9698,
        0xE8A6: 0x9695,
        0xE8A7: 0x9697,
        0xE8A8: 0x96AA,
        0xE8A9: 0x96A7,
        0xE8AA: 0x96B1,
        0xE8AB: 0x96B2,
        0xE8AC: 0x96B0,
        0xE8AD: 0x96B4,
        0xE8AE: 0x96B6,
        0xE8AF: 0x96B8,
        0xE8B0: 0x96B9,
        0xE8B1: 0x96CE,
        0xE8B2: 0x96CB,
        0xE8B3: 0x96C9,
        0xE8B4: 0x96CD,
        0xE8B5: 0x894D,
        0xE8B6: 0x96DC,
        0xE8B7: 0x970D,
        0xE8B8: 0x96D5,
        0xE8B9: 0x96F9,
        0xE8BA: 0x9704,
        0xE8BB: 0x9706,
        0xE8BC: 0x9708,
        0xE8BD: 0x9713,
        0xE8BE: 0x970E,
        0xE8BF: 0x9711,
        0xE8C0: 0x970F,
        0xE8C1: 0x9716,
        0xE8C2: 0x9719,
        0xE8C3: 0x9724,
        0xE8C4: 0x972A,
        0xE8C5: 0x9730,
        0xE8C6: 0x9739,
        0xE8C7: 0x973D,
        0xE8C8: 0x973E,
        0xE8C9: 0x9744,
        0xE8CA: 0x9746,
        0xE8CB: 0x9748,
        0xE8CC: 0x9742,
        0xE8CD: 0x9749,
        0xE8CE: 0x975C,
        0xE8CF: 0x9760,
        0xE8D0: 0x9764,
        0xE8D1: 0x9766,
        0xE8D2: 0x9768,
        0xE8D3: 0x52D2,
        0xE8D4: 0x976B,
        0xE8D5: 0x9771,
        0xE8D6: 0x9779,
        0xE8D7: 0x9785,
        0xE8D8: 0x977C,
        0xE8D9: 0x9781,
        0xE8DA: 0x977A,
        0xE8DB: 0x9786,
        0xE8DC: 0x978B,
        0xE8DD: 0x978F,
        0xE8DE: 0x9790,
        0xE8DF: 0x979C,
        0xE8E0: 0x97A8,
        0xE8E1: 0x97A6,
        0xE8E2: 0x97A3,
        0xE8E3: 0x97B3,
        0xE8E4: 0x97B4,
        0xE8E5: 0x97C3,
        0xE8E6: 0x97C6,
        0xE8E7: 0x97C8,
        0xE8E8: 0x97CB,
        0xE8E9: 0x97DC,
        0xE8EA: 0x97ED,
        0xE8EB: 0x9F4F,
        0xE8EC: 0x97F2,
        0xE8ED: 0x7ADF,
        0xE8EE: 0x97F6,
        0xE8EF: 0x97F5,
        0xE8F0: 0x980F,
        0xE8F1: 0x980C,
        0xE8F2: 0x9838,
        0xE8F3: 0x9824,
        0xE8F4: 0x9821,
        0xE8F5: 0x9837,
        0xE8F6: 0x983D,
        0xE8F7: 0x9846,
        0xE8F8: 0x984F,
        0xE8F9: 0x984B,
        0xE8FA: 0x986B,
        0xE8FB: 0x986F,
        0xE8FC: 0x9870,
        0xE940: 0x9871,
        0xE941: 0x9874,
        0xE942: 0x9873,
        0xE943: 0x98AA,
        0xE944: 0x98AF,
        0xE945: 0x98B1,
        0xE946: 0x98B6,
        0xE947: 0x98C4,
        0xE948: 0x98C3,
        0xE949: 0x98C6,
        0xE94A: 0x98E9,
        0xE94B: 0x98EB,
        0xE94C: 0x9903,
        0xE94D: 0x9909,
        0xE94E: 0x9912,
        0xE94F: 0x9914,
        0xE950: 0x9918,
        0xE951: 0x9921,
        0xE952: 0x991D,
        0xE953: 0x991E,
        0xE954: 0x9924,
        0xE955: 0x9920,
        0xE956: 0x992C,
        0xE957: 0x992E,
        0xE958: 0x993D,
        0xE959: 0x993E,
        0xE95A: 0x9942,
        0xE95B: 0x9949,
        0xE95C: 0x9945,
        0xE95D: 0x9950,
        0xE95E: 0x994B,
        0xE95F: 0x9951,
        0xE960: 0x9952,
        0xE961: 0x994C,
        0xE962: 0x9955,
        0xE963: 0x9997,
        0xE964: 0x9998,
        0xE965: 0x99A5,
        0xE966: 0x99AD,
        0xE967: 0x99AE,
        0xE968: 0x99BC,
        0xE969: 0x99DF,
        0xE96A: 0x99DB,
        0xE96B: 0x99DD,
        0xE96C: 0x99D8,
        0xE96D: 0x99D1,
        0xE96E: 0x99ED,
        0xE96F: 0x99EE,
        0xE970: 0x99F1,
        0xE971: 0x99F2,
        0xE972: 0x99FB,
        0xE973: 0x99F8,
        0xE974: 0x9A01,
        0xE975: 0x9A0F,
        0xE976: 0x9A05,
        0xE977: 0x99E2,
        0xE978: 0x9A19,
        0xE979: 0x9A2B,
        0xE97A: 0x9A37,
        0xE97B: 0x9A45,
        0xE97C: 0x9A42,
        0xE97D: 0x9A40,
        0xE97E: 0x9A43,
        0xE980: 0x9A3E,
        0xE981: 0x9A55,
        0xE982: 0x9A4D,
        0xE983: 0x9A5B,
        0xE984: 0x9A57,
        0xE985: 0x9A5F,
        0xE986: 0x9A62,
        0xE987: 0x9A65,
        0xE988: 0x9A64,
        0xE989: 0x9A69,
        0xE98A: 0x9A6B,
        0xE98B: 0x9A6A,
        0xE98C: 0x9AAD,
        0xE98D: 0x9AB0,
        0xE98E: 0x9ABC,
        0xE98F: 0x9AC0,
        0xE990: 0x9ACF,
        0xE991: 0x9AD1,
        0xE992: 0x9AD3,
        0xE993: 0x9AD4,
        0xE994: 0x9ADE,
        0xE995: 0x9ADF,
        0xE996: 0x9AE2,
        0xE997: 0x9AE3,
        0xE998: 0x9AE6,
        0xE999: 0x9AEF,
        0xE99A: 0x9AEB,
        0xE99B: 0x9AEE,
        0xE99C: 0x9AF4,
        0xE99D: 0x9AF1,
        0xE99E: 0x9AF7,
        0xE99F: 0x9AFB,
        0xE9A0: 0x9B06,
        0xE9A1: 0x9B18,
        0xE9A2: 0x9B1A,
        0xE9A3: 0x9B1F,
        0xE9A4: 0x9B22,
        0xE9A5: 0x9B23,
        0xE9A6: 0x9B25,
        0xE9A7: 0x9B27,
        0xE9A8: 0x9B28,
        0xE9A9: 0x9B29,
        0xE9AA: 0x9B2A,
        0xE9AB: 0x9B2E,
        0xE9AC: 0x9B2F,
        0xE9AD: 0x9B32,
        0xE9AE: 0x9B44,
        0xE9AF: 0x9B43,
        0xE9B0: 0x9B4F,
        0xE9B1: 0x9B4D,
        0xE9B2: 0x9B4E,
        0xE9B3: 0x9B51,
        0xE9B4: 0x9B58,
        0xE9B5: 0x9B74,
        0xE9B6: 0x9B93,
        0xE9B7: 0x9B83,
        0xE9B8: 0x9B91,
        0xE9B9: 0x9B96,
        0xE9BA: 0x9B97,
        0xE9BB: 0x9B9F,
        0xE9BC: 0x9BA0,
        0xE9BD: 0x9BA8,
        0xE9BE: 0x9BB4,
        0xE9BF: 0x9BC0,
        0xE9C0: 0x9BCA,
        0xE9C1: 0x9BB9,
        0xE9C2: 0x9BC6,
        0xE9C3: 0x9BCF,
        0xE9C4: 0x9BD1,
        0xE9C5: 0x9BD2,
        0xE9C6: 0x9BE3,
        0xE9C7: 0x9BE2,
        0xE9C8: 0x9BE4,
        0xE9C9: 0x9BD4,
        0xE9CA: 0x9BE1,
        0xE9CB: 0x9C3A,
        0xE9CC: 0x9BF2,
        0xE9CD: 0x9BF1,
        0xE9CE: 0x9BF0,
        0xE9CF: 0x9C15,
        0xE9D0: 0x9C14,
        0xE9D1: 0x9C09,
        0xE9D2: 0x9C13,
        0xE9D3: 0x9C0C,
        0xE9D4: 0x9C06,
        0xE9D5: 0x9C08,
        0xE9D6: 0x9C12,
        0xE9D7: 0x9C0A,
        0xE9D8: 0x9C04,
        0xE9D9: 0x9C2E,
        0xE9DA: 0x9C1B,
        0xE9DB: 0x9C25,
        0xE9DC: 0x9C24,
        0xE9DD: 0x9C21,
        0xE9DE: 0x9C30,
        0xE9DF: 0x9C47,
        0xE9E0: 0x9C32,
        0xE9E1: 0x9C46,
        0xE9E2: 0x9C3E,
        0xE9E3: 0x9C5A,
        0xE9E4: 0x9C60,
        0xE9E5: 0x9C67,
        0xE9E6: 0x9C76,
        0xE9E7: 0x9C78,
        0xE9E8: 0x9CE7,
        0xE9E9: 0x9CEC,
        0xE9EA: 0x9CF0,
        0xE9EB: 0x9D09,
        0xE9EC: 0x9D08,
        0xE9ED: 0x9CEB,
        0xE9EE: 0x9D03,
        0xE9EF: 0x9D06,
        0xE9F0: 0x9D2A,
        0xE9F1: 0x9D26,
        0xE9F2: 0x9DAF,
        0xE9F3: 0x9D23,
        0xE9F4: 0x9D1F,
        0xE9F5: 0x9D44,
        0xE9F6: 0x9D15,
        0xE9F7: 0x9D12,
        0xE9F8: 0x9D41,
        0xE9F9: 0x9D3F,
        0xE9FA: 0x9D3E,
        0xE9FB: 0x9D46,
        0xE9FC: 0x9D48,
        0xEA40: 0x9D5D,
        0xEA41: 0x9D5E,
        0xEA42: 0x9D64,
        0xEA43: 0x9D51,
        0xEA44: 0x9D50,
        0xEA45: 0x9D59,
        0xEA46: 0x9D72,
        0xEA47: 0x9D89,
        0xEA48: 0x9D87,
        0xEA49: 0x9DAB,
        0xEA4A: 0x9D6F,
        0xEA4B: 0x9D7A,
        0xEA4C: 0x9D9A,
        0xEA4D: 0x9DA4,
        0xEA4E: 0x9DA9,
        0xEA4F: 0x9DB2,
        0xEA50: 0x9DC4,
        0xEA51: 0x9DC1,
        0xEA52: 0x9DBB,
        0xEA53: 0x9DB8,
        0xEA54: 0x9DBA,
        0xEA55: 0x9DC6,
        0xEA56: 0x9DCF,
        0xEA57: 0x9DC2,
        0xEA58: 0x9DD9,
        0xEA59: 0x9DD3,
        0xEA5A: 0x9DF8,
        0xEA5B: 0x9DE6,
        0xEA5C: 0x9DED,
        0xEA5D: 0x9DEF,
        0xEA5E: 0x9DFD,
        0xEA5F: 0x9E1A,
        0xEA60: 0x9E1B,
        0xEA61: 0x9E1E,
        0xEA62: 0x9E75,
        0xEA63: 0x9E79,
        0xEA64: 0x9E7D,
        0xEA65: 0x9E81,
        0xEA66: 0x9E88,
        0xEA67: 0x9E8B,
        0xEA68: 0x9E8C,
        0xEA69: 0x9E92,
        0xEA6A: 0x9E95,
        0xEA6B: 0x9E91,
        0xEA6C: 0x9E9D,
        0xEA6D: 0x9EA5,
        0xEA6E: 0x9EA9,
        0xEA6F: 0x9EB8,
        0xEA70: 0x9EAA,
        0xEA71: 0x9EAD,
        0xEA72: 0x9761,
        0xEA73: 0x9ECC,
        0xEA74: 0x9ECE,
        0xEA75: 0x9ECF,
        0xEA76: 0x9ED0,
        0xEA77: 0x9ED4,
        0xEA78: 0x9EDC,
        0xEA79: 0x9EDE,
        0xEA7A: 0x9EDD,
        0xEA7B: 0x9EE0,
        0xEA7C: 0x9EE5,
        0xEA7D: 0x9EE8,
        0xEA7E: 0x9EEF,
        0xEA80: 0x9EF4,
        0xEA81: 0x9EF6,
        0xEA82: 0x9EF7,
        0xEA83: 0x9EF9,
        0xEA84: 0x9EFB,
        0xEA85: 0x9EFC,
        0xEA86: 0x9EFD,
        0xEA87: 0x9F07,
        0xEA88: 0x9F08,
        0xEA89: 0x76B7,
        0xEA8A: 0x9F15,
        0xEA8B: 0x9F21,
        0xEA8C: 0x9F2C,
        0xEA8D: 0x9F3E,
        0xEA8E: 0x9F4A,
        0xEA8F: 0x9F52,
        0xEA90: 0x9F54,
        0xEA91: 0x9F63,
        0xEA92: 0x9F5F,
        0xEA93: 0x9F60,
        0xEA94: 0x9F61,
        0xEA95: 0x9F66,
        0xEA96: 0x9F67,
        0xEA97: 0x9F6C,
        0xEA98: 0x9F6A,
        0xEA99: 0x9F77,
        0xEA9A: 0x9F72,
        0xEA9B: 0x9F76,
        0xEA9C: 0x9F95,
        0xEA9D: 0x9F9C,
        0xEA9E: 0x9FA0,
        0xEA9F: 0x582F,
        0xEAA0: 0x69C7,
        0xEAA1: 0x9059,
        0xEAA2: 0x7464,
        0xEAA3: 0x51DC,
        0xEAA4: 0x7199,
    };


    /***/ }),
    /* 9 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var GenericGF_1 = __webpack_require__(1);
    var GenericGFPoly_1 = __webpack_require__(2);
    function runEuclideanAlgorithm(field, a, b, R) {
        // Assume a's degree is >= b's
        if (a.degree() < b.degree()) {
            _a = [b, a], a = _a[0], b = _a[1];
        }
        var rLast = a;
        var r = b;
        var tLast = field.zero;
        var t = field.one;
        // Run Euclidean algorithm until r's degree is less than R/2
        while (r.degree() >= R / 2) {
            var rLastLast = rLast;
            var tLastLast = tLast;
            rLast = r;
            tLast = t;
            // Divide rLastLast by rLast, with quotient in q and remainder in r
            if (rLast.isZero()) {
                // Euclidean algorithm already terminated?
                return null;
            }
            r = rLastLast;
            var q = field.zero;
            var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
            var dltInverse = field.inverse(denominatorLeadingTerm);
            while (r.degree() >= rLast.degree() && !r.isZero()) {
                var degreeDiff = r.degree() - rLast.degree();
                var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
                q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
                r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
            }
            t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);
            if (r.degree() >= rLast.degree()) {
                return null;
            }
        }
        var sigmaTildeAtZero = t.getCoefficient(0);
        if (sigmaTildeAtZero === 0) {
            return null;
        }
        var inverse = field.inverse(sigmaTildeAtZero);
        return [t.multiply(inverse), r.multiply(inverse)];
        var _a;
    }
    function findErrorLocations(field, errorLocator) {
        // This is a direct application of Chien's search
        var numErrors = errorLocator.degree();
        if (numErrors === 1) {
            return [errorLocator.getCoefficient(1)];
        }
        var result = new Array(numErrors);
        var errorCount = 0;
        for (var i = 1; i < field.size && errorCount < numErrors; i++) {
            if (errorLocator.evaluateAt(i) === 0) {
                result[errorCount] = field.inverse(i);
                errorCount++;
            }
        }
        if (errorCount !== numErrors) {
            return null;
        }
        return result;
    }
    function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
        // This is directly applying Forney's Formula
        var s = errorLocations.length;
        var result = new Array(s);
        for (var i = 0; i < s; i++) {
            var xiInverse = field.inverse(errorLocations[i]);
            var denominator = 1;
            for (var j = 0; j < s; j++) {
                if (i !== j) {
                    denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
                }
            }
            result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
            if (field.generatorBase !== 0) {
                result[i] = field.multiply(result[i], xiInverse);
            }
        }
        return result;
    }
    function decode(bytes, twoS) {
        var outputBytes = new Uint8ClampedArray(bytes.length);
        outputBytes.set(bytes);
        var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1
        var poly = new GenericGFPoly_1.default(field, outputBytes);
        var syndromeCoefficients = new Uint8ClampedArray(twoS);
        var error = false;
        for (var s = 0; s < twoS; s++) {
            var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
            syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;
            if (evaluation !== 0) {
                error = true;
            }
        }
        if (!error) {
            return outputBytes;
        }
        var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
        var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);
        if (sigmaOmega === null) {
            return null;
        }
        var errorLocations = findErrorLocations(field, sigmaOmega[0]);
        if (errorLocations == null) {
            return null;
        }
        var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);
        for (var i = 0; i < errorLocations.length; i++) {
            var position = outputBytes.length - 1 - field.log(errorLocations[i]);
            if (position < 0) {
                return null;
            }
            outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
        }
        return outputBytes;
    }
    exports.decode = decode;


    /***/ }),
    /* 10 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSIONS = [
        {
            infoBits: null,
            versionNumber: 1,
            alignmentPatternCenters: [],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 7,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],
                },
                {
                    ecCodewordsPerBlock: 10,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],
                },
                {
                    ecCodewordsPerBlock: 13,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],
                },
                {
                    ecCodewordsPerBlock: 17,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],
                },
            ],
        },
        {
            infoBits: null,
            versionNumber: 2,
            alignmentPatternCenters: [6, 18],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 10,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],
                },
                {
                    ecCodewordsPerBlock: 16,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],
                },
            ],
        },
        {
            infoBits: null,
            versionNumber: 3,
            alignmentPatternCenters: [6, 22],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 15,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],
                },
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],
                },
            ],
        },
        {
            infoBits: null,
            versionNumber: 4,
            alignmentPatternCenters: [6, 26],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 20,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],
                },
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],
                },
                {
                    ecCodewordsPerBlock: 16,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],
                },
            ],
        },
        {
            infoBits: null,
            versionNumber: 5,
            alignmentPatternCenters: [6, 30],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],
                },
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 15 },
                        { numBlocks: 2, dataCodewordsPerBlock: 16 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 11 },
                        { numBlocks: 2, dataCodewordsPerBlock: 12 },
                    ],
                },
            ],
        },
        {
            infoBits: null,
            versionNumber: 6,
            alignmentPatternCenters: [6, 34],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],
                },
                {
                    ecCodewordsPerBlock: 16,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],
                },
            ],
        },
        {
            infoBits: 0x07C94,
            versionNumber: 7,
            alignmentPatternCenters: [6, 22, 38],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 20,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],
                },
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],
                },
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 14 },
                        { numBlocks: 4, dataCodewordsPerBlock: 15 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 13 },
                        { numBlocks: 1, dataCodewordsPerBlock: 14 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x085BC,
            versionNumber: 8,
            alignmentPatternCenters: [6, 24, 42],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 38 },
                        { numBlocks: 2, dataCodewordsPerBlock: 39 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 18 },
                        { numBlocks: 2, dataCodewordsPerBlock: 19 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 14 },
                        { numBlocks: 2, dataCodewordsPerBlock: 15 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x09A99,
            versionNumber: 9,
            alignmentPatternCenters: [6, 26, 46],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 36 },
                        { numBlocks: 2, dataCodewordsPerBlock: 37 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 20,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 16 },
                        { numBlocks: 4, dataCodewordsPerBlock: 17 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 12 },
                        { numBlocks: 4, dataCodewordsPerBlock: 13 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x0A4D3,
            versionNumber: 10,
            alignmentPatternCenters: [6, 28, 50],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 18,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 68 },
                        { numBlocks: 2, dataCodewordsPerBlock: 69 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 43 },
                        { numBlocks: 1, dataCodewordsPerBlock: 44 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 19 },
                        { numBlocks: 2, dataCodewordsPerBlock: 20 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 15 },
                        { numBlocks: 2, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x0BBF6,
            versionNumber: 11,
            alignmentPatternCenters: [6, 30, 54],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 20,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 1, dataCodewordsPerBlock: 50 },
                        { numBlocks: 4, dataCodewordsPerBlock: 51 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 22 },
                        { numBlocks: 4, dataCodewordsPerBlock: 23 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 12 },
                        { numBlocks: 8, dataCodewordsPerBlock: 13 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x0C762,
            versionNumber: 12,
            alignmentPatternCenters: [6, 32, 58],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 92 },
                        { numBlocks: 2, dataCodewordsPerBlock: 93 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 36 },
                        { numBlocks: 2, dataCodewordsPerBlock: 37 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 20 },
                        { numBlocks: 6, dataCodewordsPerBlock: 21 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 7, dataCodewordsPerBlock: 14 },
                        { numBlocks: 4, dataCodewordsPerBlock: 15 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x0D847,
            versionNumber: 13,
            alignmentPatternCenters: [6, 34, 62],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 8, dataCodewordsPerBlock: 37 },
                        { numBlocks: 1, dataCodewordsPerBlock: 38 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 8, dataCodewordsPerBlock: 20 },
                        { numBlocks: 4, dataCodewordsPerBlock: 21 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 12, dataCodewordsPerBlock: 11 },
                        { numBlocks: 4, dataCodewordsPerBlock: 12 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x0E60D,
            versionNumber: 14,
            alignmentPatternCenters: [6, 26, 46, 66],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 115 },
                        { numBlocks: 1, dataCodewordsPerBlock: 116 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 40 },
                        { numBlocks: 5, dataCodewordsPerBlock: 41 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 20,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 16 },
                        { numBlocks: 5, dataCodewordsPerBlock: 17 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 12 },
                        { numBlocks: 5, dataCodewordsPerBlock: 13 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x0F928,
            versionNumber: 15,
            alignmentPatternCenters: [6, 26, 48, 70],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 22,
                    ecBlocks: [
                        { numBlocks: 5, dataCodewordsPerBlock: 87 },
                        { numBlocks: 1, dataCodewordsPerBlock: 88 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 5, dataCodewordsPerBlock: 41 },
                        { numBlocks: 5, dataCodewordsPerBlock: 42 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 5, dataCodewordsPerBlock: 24 },
                        { numBlocks: 7, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 12 },
                        { numBlocks: 7, dataCodewordsPerBlock: 13 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x10B78,
            versionNumber: 16,
            alignmentPatternCenters: [6, 26, 50, 74],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 5, dataCodewordsPerBlock: 98 },
                        { numBlocks: 1, dataCodewordsPerBlock: 99 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 7, dataCodewordsPerBlock: 45 },
                        { numBlocks: 3, dataCodewordsPerBlock: 46 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [
                        { numBlocks: 15, dataCodewordsPerBlock: 19 },
                        { numBlocks: 2, dataCodewordsPerBlock: 20 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 15 },
                        { numBlocks: 13, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1145D,
            versionNumber: 17,
            alignmentPatternCenters: [6, 30, 54, 78],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 1, dataCodewordsPerBlock: 107 },
                        { numBlocks: 5, dataCodewordsPerBlock: 108 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 10, dataCodewordsPerBlock: 46 },
                        { numBlocks: 1, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 1, dataCodewordsPerBlock: 22 },
                        { numBlocks: 15, dataCodewordsPerBlock: 23 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 14 },
                        { numBlocks: 17, dataCodewordsPerBlock: 15 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x12A17,
            versionNumber: 18,
            alignmentPatternCenters: [6, 30, 56, 82],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 5, dataCodewordsPerBlock: 120 },
                        { numBlocks: 1, dataCodewordsPerBlock: 121 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 9, dataCodewordsPerBlock: 43 },
                        { numBlocks: 4, dataCodewordsPerBlock: 44 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 17, dataCodewordsPerBlock: 22 },
                        { numBlocks: 1, dataCodewordsPerBlock: 23 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 14 },
                        { numBlocks: 19, dataCodewordsPerBlock: 15 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x13532,
            versionNumber: 19,
            alignmentPatternCenters: [6, 30, 58, 86],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 113 },
                        { numBlocks: 4, dataCodewordsPerBlock: 114 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 44 },
                        { numBlocks: 11, dataCodewordsPerBlock: 45 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 17, dataCodewordsPerBlock: 21 },
                        { numBlocks: 4, dataCodewordsPerBlock: 22 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 9, dataCodewordsPerBlock: 13 },
                        { numBlocks: 16, dataCodewordsPerBlock: 14 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x149A6,
            versionNumber: 20,
            alignmentPatternCenters: [6, 34, 62, 90],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 107 },
                        { numBlocks: 5, dataCodewordsPerBlock: 108 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 41 },
                        { numBlocks: 13, dataCodewordsPerBlock: 42 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 15, dataCodewordsPerBlock: 24 },
                        { numBlocks: 5, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 15, dataCodewordsPerBlock: 15 },
                        { numBlocks: 10, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x15683,
            versionNumber: 21,
            alignmentPatternCenters: [6, 28, 50, 72, 94],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 116 },
                        { numBlocks: 4, dataCodewordsPerBlock: 117 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 17, dataCodewordsPerBlock: 22 },
                        { numBlocks: 6, dataCodewordsPerBlock: 23 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 19, dataCodewordsPerBlock: 16 },
                        { numBlocks: 6, dataCodewordsPerBlock: 17 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x168C9,
            versionNumber: 22,
            alignmentPatternCenters: [6, 26, 50, 74, 98],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 111 },
                        { numBlocks: 7, dataCodewordsPerBlock: 112 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 7, dataCodewordsPerBlock: 24 },
                        { numBlocks: 16, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 24,
                    ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],
                },
            ],
        },
        {
            infoBits: 0x177EC,
            versionNumber: 23,
            alignmentPatternCenters: [6, 30, 54, 74, 102],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 121 },
                        { numBlocks: 5, dataCodewordsPerBlock: 122 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 47 },
                        { numBlocks: 14, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 24 },
                        { numBlocks: 14, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 16, dataCodewordsPerBlock: 15 },
                        { numBlocks: 14, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x18EC4,
            versionNumber: 24,
            alignmentPatternCenters: [6, 28, 54, 80, 106],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 117 },
                        { numBlocks: 4, dataCodewordsPerBlock: 118 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 45 },
                        { numBlocks: 14, dataCodewordsPerBlock: 46 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 24 },
                        { numBlocks: 16, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 30, dataCodewordsPerBlock: 16 },
                        { numBlocks: 2, dataCodewordsPerBlock: 17 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x191E1,
            versionNumber: 25,
            alignmentPatternCenters: [6, 32, 58, 84, 110],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 26,
                    ecBlocks: [
                        { numBlocks: 8, dataCodewordsPerBlock: 106 },
                        { numBlocks: 4, dataCodewordsPerBlock: 107 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 8, dataCodewordsPerBlock: 47 },
                        { numBlocks: 13, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 7, dataCodewordsPerBlock: 24 },
                        { numBlocks: 22, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 22, dataCodewordsPerBlock: 15 },
                        { numBlocks: 13, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1AFAB,
            versionNumber: 26,
            alignmentPatternCenters: [6, 30, 58, 86, 114],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 10, dataCodewordsPerBlock: 114 },
                        { numBlocks: 2, dataCodewordsPerBlock: 115 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 19, dataCodewordsPerBlock: 46 },
                        { numBlocks: 4, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 28, dataCodewordsPerBlock: 22 },
                        { numBlocks: 6, dataCodewordsPerBlock: 23 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 33, dataCodewordsPerBlock: 16 },
                        { numBlocks: 4, dataCodewordsPerBlock: 17 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1B08E,
            versionNumber: 27,
            alignmentPatternCenters: [6, 34, 62, 90, 118],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 8, dataCodewordsPerBlock: 122 },
                        { numBlocks: 4, dataCodewordsPerBlock: 123 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 22, dataCodewordsPerBlock: 45 },
                        { numBlocks: 3, dataCodewordsPerBlock: 46 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 8, dataCodewordsPerBlock: 23 },
                        { numBlocks: 26, dataCodewordsPerBlock: 24 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 12, dataCodewordsPerBlock: 15 },
                        { numBlocks: 28, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1CC1A,
            versionNumber: 28,
            alignmentPatternCenters: [6, 26, 50, 74, 98, 122],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 117 },
                        { numBlocks: 10, dataCodewordsPerBlock: 118 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 3, dataCodewordsPerBlock: 45 },
                        { numBlocks: 23, dataCodewordsPerBlock: 46 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 24 },
                        { numBlocks: 31, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 15 },
                        { numBlocks: 31, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1D33F,
            versionNumber: 29,
            alignmentPatternCenters: [6, 30, 54, 78, 102, 126],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 7, dataCodewordsPerBlock: 116 },
                        { numBlocks: 7, dataCodewordsPerBlock: 117 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 21, dataCodewordsPerBlock: 45 },
                        { numBlocks: 7, dataCodewordsPerBlock: 46 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 1, dataCodewordsPerBlock: 23 },
                        { numBlocks: 37, dataCodewordsPerBlock: 24 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 19, dataCodewordsPerBlock: 15 },
                        { numBlocks: 26, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1ED75,
            versionNumber: 30,
            alignmentPatternCenters: [6, 26, 52, 78, 104, 130],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 5, dataCodewordsPerBlock: 115 },
                        { numBlocks: 10, dataCodewordsPerBlock: 116 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 19, dataCodewordsPerBlock: 47 },
                        { numBlocks: 10, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 15, dataCodewordsPerBlock: 24 },
                        { numBlocks: 25, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 23, dataCodewordsPerBlock: 15 },
                        { numBlocks: 25, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x1F250,
            versionNumber: 31,
            alignmentPatternCenters: [6, 30, 56, 82, 108, 134],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 13, dataCodewordsPerBlock: 115 },
                        { numBlocks: 3, dataCodewordsPerBlock: 116 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 46 },
                        { numBlocks: 29, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 42, dataCodewordsPerBlock: 24 },
                        { numBlocks: 1, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 23, dataCodewordsPerBlock: 15 },
                        { numBlocks: 28, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x209D5,
            versionNumber: 32,
            alignmentPatternCenters: [6, 34, 60, 86, 112, 138],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 10, dataCodewordsPerBlock: 46 },
                        { numBlocks: 23, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 10, dataCodewordsPerBlock: 24 },
                        { numBlocks: 35, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 19, dataCodewordsPerBlock: 15 },
                        { numBlocks: 35, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x216F0,
            versionNumber: 33,
            alignmentPatternCenters: [6, 30, 58, 86, 114, 142],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 17, dataCodewordsPerBlock: 115 },
                        { numBlocks: 1, dataCodewordsPerBlock: 116 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 14, dataCodewordsPerBlock: 46 },
                        { numBlocks: 21, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 29, dataCodewordsPerBlock: 24 },
                        { numBlocks: 19, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 11, dataCodewordsPerBlock: 15 },
                        { numBlocks: 46, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x228BA,
            versionNumber: 34,
            alignmentPatternCenters: [6, 34, 62, 90, 118, 146],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 13, dataCodewordsPerBlock: 115 },
                        { numBlocks: 6, dataCodewordsPerBlock: 116 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 14, dataCodewordsPerBlock: 46 },
                        { numBlocks: 23, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 44, dataCodewordsPerBlock: 24 },
                        { numBlocks: 7, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 59, dataCodewordsPerBlock: 16 },
                        { numBlocks: 1, dataCodewordsPerBlock: 17 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x2379F,
            versionNumber: 35,
            alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 12, dataCodewordsPerBlock: 121 },
                        { numBlocks: 7, dataCodewordsPerBlock: 122 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 12, dataCodewordsPerBlock: 47 },
                        { numBlocks: 26, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 39, dataCodewordsPerBlock: 24 },
                        { numBlocks: 14, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 22, dataCodewordsPerBlock: 15 },
                        { numBlocks: 41, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x24B0B,
            versionNumber: 36,
            alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 121 },
                        { numBlocks: 14, dataCodewordsPerBlock: 122 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 6, dataCodewordsPerBlock: 47 },
                        { numBlocks: 34, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 46, dataCodewordsPerBlock: 24 },
                        { numBlocks: 10, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 2, dataCodewordsPerBlock: 15 },
                        { numBlocks: 64, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x2542E,
            versionNumber: 37,
            alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 17, dataCodewordsPerBlock: 122 },
                        { numBlocks: 4, dataCodewordsPerBlock: 123 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 29, dataCodewordsPerBlock: 46 },
                        { numBlocks: 14, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 49, dataCodewordsPerBlock: 24 },
                        { numBlocks: 10, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 24, dataCodewordsPerBlock: 15 },
                        { numBlocks: 46, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x26A64,
            versionNumber: 38,
            alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 4, dataCodewordsPerBlock: 122 },
                        { numBlocks: 18, dataCodewordsPerBlock: 123 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 13, dataCodewordsPerBlock: 46 },
                        { numBlocks: 32, dataCodewordsPerBlock: 47 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 48, dataCodewordsPerBlock: 24 },
                        { numBlocks: 14, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 42, dataCodewordsPerBlock: 15 },
                        { numBlocks: 32, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x27541,
            versionNumber: 39,
            alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 20, dataCodewordsPerBlock: 117 },
                        { numBlocks: 4, dataCodewordsPerBlock: 118 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 40, dataCodewordsPerBlock: 47 },
                        { numBlocks: 7, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 43, dataCodewordsPerBlock: 24 },
                        { numBlocks: 22, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 10, dataCodewordsPerBlock: 15 },
                        { numBlocks: 67, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
        {
            infoBits: 0x28C69,
            versionNumber: 40,
            alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],
            errorCorrectionLevels: [
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 19, dataCodewordsPerBlock: 118 },
                        { numBlocks: 6, dataCodewordsPerBlock: 119 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 28,
                    ecBlocks: [
                        { numBlocks: 18, dataCodewordsPerBlock: 47 },
                        { numBlocks: 31, dataCodewordsPerBlock: 48 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 34, dataCodewordsPerBlock: 24 },
                        { numBlocks: 34, dataCodewordsPerBlock: 25 },
                    ],
                },
                {
                    ecCodewordsPerBlock: 30,
                    ecBlocks: [
                        { numBlocks: 20, dataCodewordsPerBlock: 15 },
                        { numBlocks: 61, dataCodewordsPerBlock: 16 },
                    ],
                },
            ],
        },
    ];


    /***/ }),
    /* 11 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var BitMatrix_1 = __webpack_require__(0);
    function squareToQuadrilateral(p1, p2, p3, p4) {
        var dx3 = p1.x - p2.x + p3.x - p4.x;
        var dy3 = p1.y - p2.y + p3.y - p4.y;
        if (dx3 === 0 && dy3 === 0) {
            return {
                a11: p2.x - p1.x,
                a12: p2.y - p1.y,
                a13: 0,
                a21: p3.x - p2.x,
                a22: p3.y - p2.y,
                a23: 0,
                a31: p1.x,
                a32: p1.y,
                a33: 1,
            };
        }
        else {
            var dx1 = p2.x - p3.x;
            var dx2 = p4.x - p3.x;
            var dy1 = p2.y - p3.y;
            var dy2 = p4.y - p3.y;
            var denominator = dx1 * dy2 - dx2 * dy1;
            var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
            var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
            return {
                a11: p2.x - p1.x + a13 * p2.x,
                a12: p2.y - p1.y + a13 * p2.y,
                a13: a13,
                a21: p4.x - p1.x + a23 * p4.x,
                a22: p4.y - p1.y + a23 * p4.y,
                a23: a23,
                a31: p1.x,
                a32: p1.y,
                a33: 1,
            };
        }
    }
    function quadrilateralToSquare(p1, p2, p3, p4) {
        // Here, the adjoint serves as the inverse:
        var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
        return {
            a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
            a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
            a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
            a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
            a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
            a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
            a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
            a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
            a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,
        };
    }
    function times(a, b) {
        return {
            a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
            a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
            a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
            a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
            a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
            a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
            a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
            a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
            a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,
        };
    }
    function extract(image, location) {
        var qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });
        var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
        var transform = times(sToQ, qToS);
        var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);
        var mappingFunction = function (x, y) {
            var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
            return {
                x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
                y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,
            };
        };
        for (var y = 0; y < location.dimension; y++) {
            for (var x = 0; x < location.dimension; x++) {
                var xValue = x + 0.5;
                var yValue = y + 0.5;
                var sourcePixel = mappingFunction(xValue, yValue);
                matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
            }
        }
        return {
            matrix: matrix,
            mappingFunction: mappingFunction,
        };
    }
    exports.extract = extract;


    /***/ }),
    /* 12 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    var MAX_FINDERPATTERNS_TO_SEARCH = 4;
    var MIN_QUAD_RATIO = 0.5;
    var MAX_QUAD_RATIO = 1.5;
    var distance = function (a, b) { return Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2)); };
    function sum(values) {
        return values.reduce(function (a, b) { return a + b; });
    }
    // Takes three finder patterns and organizes them into topLeft, topRight, etc
    function reorderFinderPatterns(pattern1, pattern2, pattern3) {
        // Find distances between pattern centers
        var oneTwoDistance = distance(pattern1, pattern2);
        var twoThreeDistance = distance(pattern2, pattern3);
        var oneThreeDistance = distance(pattern1, pattern3);
        var bottomLeft;
        var topLeft;
        var topRight;
        // Assume one closest to other two is B; A and C will just be guesses at first
        if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {
            _a = [pattern2, pattern1, pattern3], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
        }
        else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {
            _b = [pattern1, pattern2, pattern3], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
        }
        else {
            _c = [pattern1, pattern3, pattern2], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
        }
        // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
        // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
        // we've got it flipped around and should swap topRight and bottomLeft.
        if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {
            _d = [topRight, bottomLeft], bottomLeft = _d[0], topRight = _d[1];
        }
        return { bottomLeft: bottomLeft, topLeft: topLeft, topRight: topRight };
        var _a, _b, _c, _d;
    }
    // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns
    function computeDimension(topLeft, topRight, bottomLeft, matrix) {
        var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1
            sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +
            sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +
            sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;
        if (moduleSize < 1) {
            throw new Error("Invalid module size");
        }
        var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
        var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
        var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;
        switch (dimension % 4) {
            case 0:
                dimension++;
                break;
            case 2:
                dimension--;
                break;
        }
        return { dimension: dimension, moduleSize: moduleSize };
    }
    // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
    // Returns an array of elements, representing the pixel size of the black white run.
    // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
    function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
        var switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];
        var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
        var fromX;
        var fromY;
        var toX;
        var toY;
        if (steep) {
            fromX = Math.floor(origin.y);
            fromY = Math.floor(origin.x);
            toX = Math.floor(end.y);
            toY = Math.floor(end.x);
        }
        else {
            fromX = Math.floor(origin.x);
            fromY = Math.floor(origin.y);
            toX = Math.floor(end.x);
            toY = Math.floor(end.y);
        }
        var dx = Math.abs(toX - fromX);
        var dy = Math.abs(toY - fromY);
        var error = Math.floor(-dx / 2);
        var xStep = fromX < toX ? 1 : -1;
        var yStep = fromY < toY ? 1 : -1;
        var currentPixel = true;
        // Loop up until x == toX, but not beyond
        for (var x = fromX, y = fromY; x !== toX + xStep; x += xStep) {
            // Does current pixel mean we have moved white to black or vice versa?
            // Scanning black in state 0,2 and white in state 1, so if we find the wrong
            // color, advance to next state or end if we are in state 2 already
            var realX = steep ? y : x;
            var realY = steep ? x : y;
            if (matrix.get(realX, realY) !== currentPixel) {
                currentPixel = !currentPixel;
                switchPoints.push({ x: realX, y: realY });
                if (switchPoints.length === length + 1) {
                    break;
                }
            }
            error += dy;
            if (error > 0) {
                if (y === toY) {
                    break;
                }
                y += yStep;
                error -= dx;
            }
        }
        var distances = [];
        for (var i = 0; i < length; i++) {
            if (switchPoints[i] && switchPoints[i + 1]) {
                distances.push(distance(switchPoints[i], switchPoints[i + 1]));
            }
            else {
                distances.push(0);
            }
        }
        return distances;
    }
    // Takes an origin point and an end point and counts the sizes of the black white run in the origin point
    // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
    // of the black white run. Takes a length which represents the number of switches from black to white to look for.
    function countBlackWhiteRun(origin, end, matrix, length) {
        var rise = end.y - origin.y;
        var run = end.x - origin.x;
        var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
        var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));
        var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel
        return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
        var _a;
    }
    // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
    // that is the amount the run diverges from the expected ratio
    function scoreBlackWhiteRun(sequence, ratios) {
        var averageSize = sum(sequence) / sum(ratios);
        var error = 0;
        ratios.forEach(function (ratio, i) {
            error += Math.pow((sequence[i] - ratio * averageSize), 2);
        });
        return { averageSize: averageSize, error: error };
    }
    // Takes an X,Y point and an array of sizes and scores the point against those ratios.
    // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
    // against that.
    function scorePattern(point, ratios, matrix) {
        try {
            var horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);
            var verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);
            var topLeftPoint = {
                x: Math.max(0, point.x - point.y) - 1,
                y: Math.max(0, point.y - point.x) - 1,
            };
            var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
            var bottomLeftPoint = {
                x: Math.min(matrix.width, point.x + point.y) + 1,
                y: Math.min(matrix.height, point.y + point.x) + 1,
            };
            var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
            var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
            var vertError = scoreBlackWhiteRun(verticalRun, ratios);
            var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
            var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
            var ratioError = Math.sqrt(horzError.error * horzError.error +
                vertError.error * vertError.error +
                diagDownError.error * diagDownError.error +
                diagUpError.error * diagUpError.error);
            var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
            var sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +
                Math.pow((vertError.averageSize - avgSize), 2) +
                Math.pow((diagDownError.averageSize - avgSize), 2) +
                Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;
            return ratioError + sizeError;
        }
        catch (_a) {
            return Infinity;
        }
    }
    function locate(matrix) {
        var finderPatternQuads = [];
        var activeFinderPatternQuads = [];
        var alignmentPatternQuads = [];
        var activeAlignmentPatternQuads = [];
        var _loop_1 = function (y) {
            var length_1 = 0;
            var lastBit = false;
            var scans = [0, 0, 0, 0, 0];
            var _loop_2 = function (x) {
                var v = matrix.get(x, y);
                if (v === lastBit) {
                    length_1++;
                }
                else {
                    scans = [scans[1], scans[2], scans[3], scans[4], length_1];
                    length_1 = 1;
                    lastBit = v;
                    // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b
                    var averageFinderPatternBlocksize = sum(scans) / 7;
                    var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                        Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                        Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&
                        Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                        Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                        !v; // And make sure the current pixel is white since finder patterns are bordered in white
                    // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w
                    var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
                    var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
                        Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
                        Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
                        v; // Is the current pixel black since alignment patterns are bordered in black
                    if (validFinderPattern) {
                        // Compute the start and end x values of the large center black square
                        var endX_1 = x - scans[3] - scans[4];
                        var startX_1 = endX_1 - scans[2];
                        var line = { startX: startX_1, endX: endX_1, y: y };
                        // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                        // that line as the starting point.
                        var matchingQuads = activeFinderPatternQuads.filter(function (q) {
                            return (startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX) ||
                                (endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX) ||
                                (startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&
                                    (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO));
                        });
                        if (matchingQuads.length > 0) {
                            matchingQuads[0].bottom = line;
                        }
                        else {
                            activeFinderPatternQuads.push({ top: line, bottom: line });
                        }
                    }
                    if (validAlignmentPattern) {
                        // Compute the start and end x values of the center black square
                        var endX_2 = x - scans[4];
                        var startX_2 = endX_2 - scans[3];
                        var line = { startX: startX_2, y: y, endX: endX_2 };
                        // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                        // that line as the starting point.
                        var matchingQuads = activeAlignmentPatternQuads.filter(function (q) {
                            return (startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX) ||
                                (endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX) ||
                                (startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&
                                    (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO));
                        });
                        if (matchingQuads.length > 0) {
                            matchingQuads[0].bottom = line;
                        }
                        else {
                            activeAlignmentPatternQuads.push({ top: line, bottom: line });
                        }
                    }
                }
            };
            for (var x = -1; x <= matrix.width; x++) {
                _loop_2(x);
            }
            finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) { return q.bottom.y !== y && q.bottom.y - q.top.y >= 2; }));
            activeFinderPatternQuads = activeFinderPatternQuads.filter(function (q) { return q.bottom.y === y; });
            alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function (q) { return q.bottom.y !== y; }));
            activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function (q) { return q.bottom.y === y; });
        };
        for (var y = 0; y <= matrix.height; y++) {
            _loop_1(y);
        }
        finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) { return q.bottom.y - q.top.y >= 2; }));
        alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
        var finderPatternGroups = finderPatternQuads
            .filter(function (q) { return q.bottom.y - q.top.y >= 2; }) // All quads must be at least 2px tall since the center square is larger than a block
            .map(function (q) {
            var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
            var y = (q.top.y + q.bottom.y + 1) / 2;
            if (!matrix.get(Math.round(x), Math.round(y))) {
                return;
            }
            var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];
            var size = sum(lengths) / lengths.length;
            var score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);
            return { score: score, x: x, y: y, size: size };
        })
            .filter(function (q) { return !!q; }) // Filter out any rejected quads from above
            .sort(function (a, b) { return a.score - b.score; })
            .map(function (point, i, finderPatterns) {
            if (i > MAX_FINDERPATTERNS_TO_SEARCH) {
                return null;
            }
            var otherPoints = finderPatterns
                .filter(function (p, ii) { return i !== ii; })
                .map(function (p) { return ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }); })
                .sort(function (a, b) { return a.score - b.score; });
            if (otherPoints.length < 2) {
                return null;
            }
            var score = point.score + otherPoints[0].score + otherPoints[1].score;
            return { points: [point].concat(otherPoints.slice(0, 2)), score: score };
        })
            .filter(function (q) { return !!q; }) // Filter out any rejected finder patterns from above
            .sort(function (a, b) { return a.score - b.score; });
        if (finderPatternGroups.length === 0) {
            return null;
        }
        var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]), topRight = _a.topRight, topLeft = _a.topLeft, bottomLeft = _a.bottomLeft;
        // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
        // We'll use these to help find the alignment pattern but also later when we do the extraction.
        var dimension;
        var moduleSize;
        try {
            (_b = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _b.dimension, moduleSize = _b.moduleSize);
        }
        catch (e) {
            return null;
        }
        // Now find the alignment pattern
        var bottomRightFinderPattern = {
            x: topRight.x - topLeft.x + bottomLeft.x,
            y: topRight.y - topLeft.y + bottomLeft.y,
        };
        var modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);
        var correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);
        var expectedAlignmentPattern = {
            x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
            y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),
        };
        var alignmentPatterns = alignmentPatternQuads
            .map(function (q) {
            var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
            var y = (q.top.y + q.bottom.y + 1) / 2;
            if (!matrix.get(Math.floor(x), Math.floor(y))) {
                return;
            }
            var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];
            var size = sum(lengths) / lengths.length;
            var sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);
            var score = sizeScore + distance({ x: x, y: y }, expectedAlignmentPattern);
            return { x: x, y: y, score: score };
        })
            .filter(function (v) { return !!v; })
            .sort(function (a, b) { return a.score - b.score; });
        // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
        // so we can only use our best guess.
        var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
        return {
            alignmentPattern: { x: alignmentPattern.x, y: alignmentPattern.y },
            bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },
            dimension: dimension,
            topLeft: { x: topLeft.x, y: topLeft.y },
            topRight: { x: topRight.x, y: topRight.y },
        };
        var _b;
    }
    exports.locate = locate;


    /***/ })
    /******/ ])["default"];
    });
    });

    var jsQR$1 = unwrapExports(jsQR);

    /**
    * vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
    *
    * Copyright (c) 2012 Vadim Kiryukhin
    * vkiryukhin @ gmail.com
    * http://www.eslinstructor.net/vkbeautify/
    *
    * Dual licensed under the MIT and GPL licenses:
    *   http://www.opensource.org/licenses/mit-license.php
    *   http://www.gnu.org/licenses/gpl.html
    *
    *   Pretty print
    *
    *        vkbeautify.xml(text [,indent_pattern]);
    *        vkbeautify.json(text [,indent_pattern]);
    *        vkbeautify.css(text [,indent_pattern]);
    *        vkbeautify.sql(text [,indent_pattern]);
    *
    *        @text - String; text to beatufy;
    *        @indent_pattern - Integer | String;
    *                Integer:  number of white spaces;
    *                String:   character string to visualize indentation ( can also be a set of white spaces )
    *   Minify
    *
    *        vkbeautify.xmlmin(text [,preserve_comments]);
    *        vkbeautify.jsonmin(text);
    *        vkbeautify.cssmin(text [,preserve_comments]);
    *        vkbeautify.sqlmin(text);
    *
    *        @text - String; text to minify;
    *        @preserve_comments - Bool; [optional];
    *                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
    *
    *   Examples:
    *        vkbeautify.xml(text); // pretty print XML
    *        vkbeautify.json(text, 4 ); // pretty print JSON
    *        vkbeautify.css(text, '. . . .'); // pretty print CSS
    *        vkbeautify.sql(text, '----'); // pretty print SQL
    *
    *        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
    *        vkbeautify.jsonmin(text);// minify JSON
    *        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
    *        vkbeautify.sqlmin(text);// minify SQL
    *
    */
    function createShiftArr(step) {

    	var space = '    ';

    	if ( isNaN(parseInt(step)) ) {  // argument is string
    		space = step;
    	} else { // argument is integer
    		switch(step) {
    			case 1: space = ' '; break;
    			case 2: space = '  '; break;
    			case 3: space = '   '; break;
    			case 4: space = '    '; break;
    			case 5: space = '     '; break;
    			case 6: space = '      '; break;
    			case 7: space = '       '; break;
    			case 8: space = '        '; break;
    			case 9: space = '         '; break;
    			case 10: space = '          '; break;
    			case 11: space = '           '; break;
    			case 12: space = '            '; break;
    		}
    	}

    	var shift = ['\n']; // array of shifts
    	for(var ix=0;ix<100;ix++) {
    		shift.push(shift[ix]+space);
    	}
    	return shift;
    }

    function vkbeautify(){
    	this.step = '    '; // 4 spaces
    	this.shift = createShiftArr(this.step);
    }
    vkbeautify.prototype.xml = function(text,step) {

    	var ar = text.replace(/>\s{0,}</g,"><")
    				 .replace(/</g,"~::~<")
    				 .replace(/\s*xmlns\:/g,"~::~xmlns:")
    				 .replace(/\s*xmlns\=/g,"~::~xmlns=")
    				 .split('~::~'),
    		len = ar.length,
    		inComment = false,
    		deep = 0,
    		str = '',
    		ix = 0,
    		shift = step ? createShiftArr(step) : this.shift;

    		for(ix=0;ix<len;ix++) {
    			// start comment or <![CDATA[...]]> or <!DOCTYPE //
    			if(ar[ix].search(/<!/) > -1) {
    				str += shift[deep]+ar[ix];
    				inComment = true;
    				// end comment  or <![CDATA[...]]> //
    				if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) {
    					inComment = false;
    				}
    			} else
    			// end comment  or <![CDATA[...]]> //
    			if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) {
    				str += ar[ix];
    				inComment = false;
    			} else
    			// <elm></elm> //
    			if( /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
    				/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) {
    				str += ar[ix];
    				if(!inComment) deep--;
    			} else
    			 // <elm> //
    			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
    				str = !inComment ? str += shift[deep++]+ar[ix] : str += ar[ix];
    			} else
    			 // <elm>...</elm> //
    			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
    				str = !inComment ? str += shift[deep]+ar[ix] : str += ar[ix];
    			} else
    			// </elm> //
    			if(ar[ix].search(/<\//) > -1) {
    				str = !inComment ? str += shift[--deep]+ar[ix] : str += ar[ix];
    			} else
    			// <elm/> //
    			if(ar[ix].search(/\/>/) > -1 ) {
    				str = !inComment ? str += shift[deep]+ar[ix] : str += ar[ix];
    			} else
    			// <? xml ... ?> //
    			if(ar[ix].search(/<\?/) > -1) {
    				str += shift[deep]+ar[ix];
    			} else
    			// xmlns //
    			if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) {
    				str += shift[deep]+ar[ix];
    			}

    			else {
    				str += ar[ix];
    			}
    		}

    	return  (str[0] == '\n') ? str.slice(1) : str;
    };

    vkbeautify.prototype.json = function(text,step) {

    	var step = step ? step : this.step;

    	if (typeof JSON === 'undefined' ) return text;

    	if ( typeof text === "string" ) return JSON.stringify(JSON.parse(text), null, step);
    	if ( typeof text === "object" ) return JSON.stringify(text, null, step);

    	return text; // text is not string nor object
    };

    vkbeautify.prototype.css = function(text, step) {

    	var ar = text.replace(/\s{1,}/g,' ')
    				.replace(/\{/g,"{~::~")
    				.replace(/\}/g,"~::~}~::~")
    				.replace(/\;/g,";~::~")
    				.replace(/\/\*/g,"~::~/*")
    				.replace(/\*\//g,"*/~::~")
    				.replace(/~::~\s{0,}~::~/g,"~::~")
    				.split('~::~'),
    		len = ar.length,
    		deep = 0,
    		str = '',
    		ix = 0,
    		shift = step ? createShiftArr(step) : this.shift;

    		for(ix=0;ix<len;ix++) {

    			if( /\{/.exec(ar[ix]))  {
    				str += shift[deep++]+ar[ix];
    			} else
    			if( /\}/.exec(ar[ix]))  {
    				str += shift[--deep]+ar[ix];
    			} else
    			if( /\*\\/.exec(ar[ix]))  {
    				str += shift[deep]+ar[ix];
    			}
    			else {
    				str += shift[deep]+ar[ix];
    			}
    		}
    		return str.replace(/^\n{1,}/,'');
    };

    //----------------------------------------------------------------------------

    function isSubquery(str, parenthesisLevel) {
    	return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
    }

    function split_sql(str, tab) {

    	return str.replace(/\s{1,}/g," ")

    				.replace(/ AND /ig,"~::~"+tab+tab+"AND ")
    				.replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
    				.replace(/ CASE /ig,"~::~"+tab+"CASE ")
    				.replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
    				.replace(/ END /ig,"~::~"+tab+"END ")
    				.replace(/ FROM /ig,"~::~FROM ")
    				.replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
    				.replace(/ HAVING /ig,"~::~HAVING ")
    				//.replace(/ SET /ig," SET~::~")
    				.replace(/ IN /ig," IN ")

    				.replace(/ JOIN /ig,"~::~JOIN ")
    				.replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
    				.replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
    				.replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
    				.replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")

    				.replace(/ ON /ig,"~::~"+tab+"ON ")
    				.replace(/ OR /ig,"~::~"+tab+tab+"OR ")
    				.replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
    				.replace(/ OVER /ig,"~::~"+tab+"OVER ")

    				.replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
    				.replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")

    				.replace(/ THEN /ig," THEN~::~"+tab+"")
    				.replace(/ UNION /ig,"~::~UNION~::~")
    				.replace(/ USING /ig,"~::~USING ")
    				.replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
    				.replace(/ WHERE /ig,"~::~WHERE ")
    				.replace(/ WITH /ig,"~::~WITH ")

    				//.replace(/\,\s{0,}\(/ig,",~::~( ")
    				//.replace(/\,/ig,",~::~"+tab+tab+"")

    				.replace(/ ALL /ig," ALL ")
    				.replace(/ AS /ig," AS ")
    				.replace(/ ASC /ig," ASC ")
    				.replace(/ DESC /ig," DESC ")
    				.replace(/ DISTINCT /ig," DISTINCT ")
    				.replace(/ EXISTS /ig," EXISTS ")
    				.replace(/ NOT /ig," NOT ")
    				.replace(/ NULL /ig," NULL ")
    				.replace(/ LIKE /ig," LIKE ")
    				.replace(/\s{0,}SELECT /ig,"SELECT ")
    				.replace(/\s{0,}UPDATE /ig,"UPDATE ")
    				.replace(/ SET /ig," SET ")

    				.replace(/~::~{1,}/g,"~::~")
    				.split('~::~');
    }

    vkbeautify.prototype.sql = function(text,step) {

    	var ar_by_quote = text.replace(/\s{1,}/g," ")
    							.replace(/\'/ig,"~::~\'")
    							.split('~::~'),
    		len = ar_by_quote.length,
    		ar = [],
    		deep = 0,
    		tab = this.step,//+this.step,
    		parenthesisLevel = 0,
    		str = '',
    		ix = 0,
    		shift = step ? createShiftArr(step) : this.shift;
    		for(ix=0;ix<len;ix++) {
    			if(ix%2) {
    				ar = ar.concat(ar_by_quote[ix]);
    			} else {
    				ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
    			}
    		}

    		len = ar.length;
    		for(ix=0;ix<len;ix++) {

    			parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);

    			if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  {
    				ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"");
    			}

    			if( /\s{0,}\s{0,}SET\s{0,}/.exec(ar[ix]))  {
    				ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"");
    			}

    			if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  {
    				deep++;
    				str += shift[deep]+ar[ix];
    			} else
    			if( /\'/.exec(ar[ix]) )  {
    				if(parenthesisLevel<1 && deep) {
    					deep--;
    				}
    				str += ar[ix];
    			}
    			else  {
    				str += shift[deep]+ar[ix];
    				if(parenthesisLevel<1 && deep) {
    					deep--;
    				}
    			}
    		}

    		str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
    		return str;
    };


    vkbeautify.prototype.xmlmin = function(text, preserveComments) {

    	var str = preserveComments ? text
    							   : text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"")
    									 .replace(/[ \r\n\t]{1,}xmlns/g, ' xmlns');
    	return  str.replace(/>\s{0,}</g,"><");
    };

    vkbeautify.prototype.jsonmin = function(text) {

    	if (typeof JSON === 'undefined' ) return text;

    	return JSON.stringify(JSON.parse(text), null, 0);

    };

    vkbeautify.prototype.cssmin = function(text, preserveComments) {

    	var str = preserveComments ? text
    							   : text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;

    	return str.replace(/\s{1,}/g,' ')
    			  .replace(/\{\s{1,}/g,"{")
    			  .replace(/\}\s{1,}/g,"}")
    			  .replace(/\;\s{1,}/g,";")
    			  .replace(/\/\*\s{1,}/g,"/*")
    			  .replace(/\*\/\s{1,}/g,"*/");
    };

    vkbeautify.prototype.sqlmin = function(text) {
    	return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
    };

    var vkbeautify_1 = new vkbeautify();

    window['canvasDatagrid'] = canvasDatagrid$1;
    window['jsQR'] = jsQR$1;
    window['echarts'] = echarts$1;
    window['elementResizeDetectorMaker'] = elementResizeDetector;
    window['Split'] = Split;
    window['vkbeautify'] = vkbeautify_1;
    window['QRCode'] = browser;
    window['JsBarcode'] = JsBarcode;

}());
//# sourceMappingURL=lib.js.map
